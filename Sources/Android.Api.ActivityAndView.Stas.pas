{********************************************************************* 
 *                                                                     
 * Copyright Â© 2020, Brovin Yaroslav                                   
 * All rights reserved                                                 
 *                                                                     
 * Autor: Brovin Y.D.                                                  
 * E-mail: y.brovin@gmail.com                                          
 *                                                                     
 *********************************************************************}

unit Android.Api.ActivityAndView;

{$SCOPEDENUMS ON}
{$WARN SYMBOL_DEPRECATED OFF}

interface

uses
  System.SysUtils, Androidapi.Jni, Java.Bridge,
  Android.Api.JavaTypes;

type
  JBaseBundle = interface;
  TJBaseBundle = class;
  JBundle = interface;
  TJBundle = class;
  JPersistableBundle = interface;
  TJPersistableBundle = class;
  JBuild = interface;
  TJBuild = class;
  JBuild_VERSION = interface;
  TJBuild_VERSION = class;
  JBuild_VERSION_CODES = interface;
  TJBuild_VERSION_CODES = class;
  JCancellationSignal = interface;
  TJCancellationSignal = class;
  JCancellationSignal_OnCancelListener = interface;
  TJCancellationSignal_OnCancelListener = class;
  JHandler = interface;
  TJHandler = class;
  JHandlerThread = interface;
  TJHandlerThread = class;
  JIBinder = interface;
  TJIBinder = class;
  JLooper = interface;
  TJLooper = class;
  JMessageQueue = interface;
  TJMessageQueue = class;
  JMessageQueue_IdleHandler = interface;
  TJMessageQueue_IdleHandler = class;
  JMessageQueue_OnFileDescriptorEventListener = interface;
  TJMessageQueue_OnFileDescriptorEventListener = class;
  JParcelFileDescriptor = interface;
  TJParcelFileDescriptor = class;
  JPatternMatcher = interface;
  TJPatternMatcher = class;
  JPathPermission = interface;
  TJPathPermission = class;
  JUserHandle = interface;
  TJUserHandle = class;
  JBroadcastReceiver = interface;
  TJBroadcastReceiver = class;
  JBroadcastReceiver_PendingResult = interface;
  TJBroadcastReceiver_PendingResult = class;
  JClipData = interface;
  TJClipData = class;
  JClipData_Item = interface;
  TJClipData_Item = class;
  JClipDescription = interface;
  TJClipDescription = class;
  JClipboardManager_OnPrimaryClipChangedListener = interface;
  TJClipboardManager_OnPrimaryClipChangedListener = class;
  JComponentName = interface;
  TJComponentName = class;
  JContentProvider = interface;
  TJContentProvider = class;
  JFileProvider = interface;
  TJFileProvider = class;
  JContentProviderResult = interface;
  TJContentProviderResult = class;
  JContentResolver = interface;
  TJContentResolver = class;
  JContentUris = interface;
  TJContentUris = class;
  JContentValues = interface;
  TJContentValues = class;
  JContext = interface;
  TJContext = class;
  JContextWrapper = interface;
  TJContextWrapper = class;
  JContextThemeWrapper = interface;
  TJContextThemeWrapper = class;
  JActivity = interface;
  TJActivity = class;
  JService = interface;
  TJService = class;
  JIntentService = interface;
  TJIntentService = class;
  JIntent = interface;
  TJIntent = class;
  JIntentFilter = interface;
  TJIntentFilter = class;
  JIntentFilter_AuthorityEntry = interface;
  TJIntentFilter_AuthorityEntry = class;
  JIntentSender = interface;
  TJIntentSender = class;
  JSharedPreferences = interface;
  TJSharedPreferences = class;
  JSharedPreferences_Editor = interface;
  TJSharedPreferences_Editor = class;
  JSharedPreferences_OnSharedPreferenceChangeListener = interface;
  TJSharedPreferences_OnSharedPreferenceChangeListener = class;
  JPackageInfo = interface;
  TJPackageInfo = class;
  JPackageItemInfo = interface;
  TJPackageItemInfo = class;
  JApplicationInfo = interface;
  TJApplicationInfo = class;
  JComponentInfo = interface;
  TJComponentInfo = class;
  JActivityInfo = interface;
  TJActivityInfo = class;
  JPackageManager = interface;
  TJPackageManager = class;
  JAssetFileDescriptor = interface;
  TJAssetFileDescriptor = class;
  JAssetManager = interface;
  TJAssetManager = class;
  JColorStateList = interface;
  TJColorStateList = class;
  JConfiguration = interface;
  TJConfiguration = class;
  JResources = interface;
  TJResources = class;
  JResources_Theme = interface;
  TJResources_Theme = class;
  JAbstractCursor = interface;
  TJAbstractCursor = class;
  JMatrixCursor = interface;
  TJMatrixCursor = class;
  JContentObserver = interface;
  TJContentObserver = class;
  JCursor = interface;
  TJCursor = class;
  JDataSetObserver = interface;
  TJDataSetObserver = class;
  JObservable = interface;
  TJObservable = class;
  JDataSetObservable = interface;
  TJDataSetObservable = class;
  JBitmap = interface;
  TJBitmap = class;
  JBitmap_CompressFormat = interface;
  TJBitmap_CompressFormat = class;
  JBitmap_Config = interface;
  TJBitmap_Config = class;
  JBitmapFactory = interface;
  TJBitmapFactory = class;
  JBitmapFactory_Options = interface;
  TJBitmapFactory_Options = class;
  JCanvas = interface;
  TJCanvas = class;
  JColor = interface;
  TJColor = class;
  JColorFilter = interface;
  TJColorFilter = class;
  JPorterDuffColorFilter = interface;
  TJPorterDuffColorFilter = class;
  JImageFormat = interface;
  TJImageFormat = class;
  JMatrix = interface;
  TJMatrix = class;
  JMatrix_ScaleToFit = interface;
  TJMatrix_ScaleToFit = class;
  JOutline = interface;
  TJOutline = class;
  JPaint = interface;
  TJPaint = class;
  JPaint_Cap = interface;
  TJPaint_Cap = class;
  JPaint_Join = interface;
  TJPaint_Join = class;
  JPaint_Style = interface;
  TJPaint_Style = class;
  JPath = interface;
  TJPath = class;
  JPath_FillType = interface;
  TJPath_FillType = class;
  JPathEffect = interface;
  TJPathEffect = class;
  JDashPathEffect = interface;
  TJDashPathEffect = class;
  JPoint = interface;
  TJPoint = class;
  JPointF = interface;
  TJPointF = class;
  JPorterDuff = interface;
  TJPorterDuff = class;
  JPorterDuff_Mode = interface;
  TJPorterDuff_Mode = class;
  JRect = interface;
  TJRect = class;
  JRectF = interface;
  TJRectF = class;
  JShader = interface;
  TJShader = class;
  JLinearGradient = interface;
  TJLinearGradient = class;
  JRadialGradient = interface;
  TJRadialGradient = class;
  JShader_TileMode = interface;
  TJShader_TileMode = class;
  JSurfaceTexture = interface;
  TJSurfaceTexture = class;
  JTypeface = interface;
  TJTypeface = class;
  JXfermode = interface;
  TJXfermode = class;
  JPorterDuffXfermode = interface;
  TJPorterDuffXfermode = class;
  JDrawable = interface;
  TJDrawable = class;
  JBitmapDrawable = interface;
  TJBitmapDrawable = class;
  JColorDrawable = interface;
  TJColorDrawable = class;
  JDrawableContainer = interface;
  TJDrawableContainer = class;
  JStateListDrawable = interface;
  TJStateListDrawable = class;
  JDrawableWrapper = interface;
  TJDrawableWrapper = class;
  JInsetDrawable = interface;
  TJInsetDrawable = class;
  JGradientDrawable = interface;
  TJGradientDrawable = class;
  JLayerDrawable = interface;
  TJLayerDrawable = class;
  JRippleDrawable = interface;
  TJRippleDrawable = class;
  JShapeDrawable = interface;
  TJShapeDrawable = class;
  JVectorDrawable = interface;
  TJVectorDrawable = class;
  JShape = interface;
  TJShape = class;
  JRectShape = interface;
  TJRectShape = class;
  JRoundRectShape = interface;
  TJRoundRectShape = class;
  JDisplay = interface;
  TJDisplay = class;
  JDisplay_Mode = interface;
  TJDisplay_Mode = class;
  JDragAndDropPermissions = interface;
  TJDragAndDropPermissions = class;
  JDragEvent = interface;
  TJDragEvent = class;
  JGestureDetector = interface;
  TJGestureDetector = class;
  JGestureDetector_OnContextClickListener = interface;
  TJGestureDetector_OnContextClickListener = class;
  JGestureDetector_OnDoubleTapListener = interface;
  TJGestureDetector_OnDoubleTapListener = class;
  JGestureDetector_OnGestureListener = interface;
  TJGestureDetector_OnGestureListener = class;
  JGestureDetector_SimpleOnGestureListener = interface;
  TJGestureDetector_SimpleOnGestureListener = class;
  JGravity = interface;
  TJGravity = class;
  JInputDevice = interface;
  TJInputDevice = class;
  JInputEvent = interface;
  TJInputEvent = class;
  JKeyEvent = interface;
  TJKeyEvent = class;
  JMotionEvent = interface;
  TJMotionEvent = class;
  JLayoutInflater = interface;
  TJLayoutInflater = class;
  JMenu = interface;
  TJMenu = class;
  JSubMenu = interface;
  TJSubMenu = class;
  JMenuItem = interface;
  TJMenuItem = class;
  JMenuItem_OnActionExpandListener = interface;
  TJMenuItem_OnActionExpandListener = class;
  JMenuItem_OnMenuItemClickListener = interface;
  TJMenuItem_OnMenuItemClickListener = class;
  JScaleGestureDetector = interface;
  TJScaleGestureDetector = class;
  JScaleGestureDetector_OnScaleGestureListener = interface;
  TJScaleGestureDetector_OnScaleGestureListener = class;
  JScaleGestureDetector_SimpleOnScaleGestureListener = interface;
  TJScaleGestureDetector_SimpleOnScaleGestureListener = class;
  JSurface = interface;
  TJSurface = class;
  JSurfaceHolder = interface;
  TJSurfaceHolder = class;
  JSurfaceHolder_BadSurfaceTypeException = interface;
  TJSurfaceHolder_BadSurfaceTypeException = class;
  JSurfaceHolder_Callback = interface;
  TJSurfaceHolder_Callback = class;
  JSurfaceHolder_Callback2 = interface;
  TJSurfaceHolder_Callback2 = class;
  JTextureView_SurfaceTextureListener = interface;
  TJTextureView_SurfaceTextureListener = class;
  JView = interface;
  TJView = class;
  JSurfaceView = interface;
  TJSurfaceView = class;
  JTextureView = interface;
  TJTextureView = class;
  JViewGroup = interface;
  TJViewGroup = class;
  JView_DragShadowBuilder = interface;
  TJView_DragShadowBuilder = class;
  JView_MeasureSpec = interface;
  TJView_MeasureSpec = class;
  JView_OnClickListener = interface;
  TJView_OnClickListener = class;
  JView_OnDragListener = interface;
  TJView_OnDragListener = class;
  JView_OnFocusChangeListener = interface;
  TJView_OnFocusChangeListener = class;
  JView_OnKeyListener = interface;
  TJView_OnKeyListener = class;
  JView_OnLayoutChangeListener = interface;
  TJView_OnLayoutChangeListener = class;
  JView_OnLongClickListener = interface;
  TJView_OnLongClickListener = class;
  JView_OnTouchListener = interface;
  TJView_OnTouchListener = class;
  JViewGroup_LayoutParams = interface;
  TJViewGroup_LayoutParams = class;
  JViewGroup_MarginLayoutParams = interface;
  TJViewGroup_MarginLayoutParams = class;
  JActionBar_LayoutParams = interface;
  TJActionBar_LayoutParams = class;
  JWindowManager_LayoutParams = interface;
  TJWindowManager_LayoutParams = class;
  JViewManager = interface;
  TJViewManager = class;
  JWindowManager = interface;
  TJWindowManager = class;
  JViewParent = interface;
  TJViewParent = class;
  JViewTreeObserver = interface;
  TJViewTreeObserver = class;
  JViewTreeObserver_OnGlobalFocusChangeListener = interface;
  TJViewTreeObserver_OnGlobalFocusChangeListener = class;
  JViewTreeObserver_OnScrollChangedListener = interface;
  TJViewTreeObserver_OnScrollChangedListener = class;
  JWindow = interface;
  TJWindow = class;
  JEditorInfo = interface;
  TJEditorInfo = class;
  JInputMethodManager = interface;
  TJInputMethodManager = class;
  JAndroidException = interface;
  TJAndroidException = class;
  JIntentFilter_MalformedMimeTypeException = interface;
  TJIntentFilter_MalformedMimeTypeException = class;
  JAttributeSet = interface;
  TJAttributeSet = class;
  JDisplayMetrics = interface;
  TJDisplayMetrics = class;
  JProperty = interface;
  TJProperty = class;
  JFloatProperty = interface;
  TJFloatProperty = class;
  JIntProperty = interface;
  TJIntProperty = class;
  JSize = interface;
  TJSize = class;
  JSparseArray = interface;
  TJSparseArray = class;
  JTypedValue = interface;
  TJTypedValue = class;
  JFragment = interface;
  TJFragment = class;
  JFragmentManager = interface;
  TJFragmentManager = class;
  JFragmentTransaction = interface;
  TJFragmentTransaction = class;
  JActivityManager_TaskDescription = interface;
  TJActivityManager_TaskDescription = class;
  JAlarmManager = interface;
  TJAlarmManager = class;
  JAlarmManager_AlarmClockInfo = interface;
  TJAlarmManager_AlarmClockInfo = class;
  JAlarmManager_OnAlarmListener = interface;
  TJAlarmManager_OnAlarmListener = class;
  JPendingIntent = interface;
  TJPendingIntent = class;
  JContextCompat = interface;
  TJContextCompat = class;
  JActivityCompat = interface;
  TJActivityCompat = class;
  JPermissionChecker = interface;
  TJPermissionChecker = class;
  JActivityCompat_OnRequestPermissionsResultCallback = interface;
  TJActivityCompat_OnRequestPermissionsResultCallback = class;
  JActivityCompat_PermissionCompatDelegate = interface;
  TJActivityCompat_PermissionCompatDelegate = class;
  JClipboardManager = interface;
  TJClipboardManager = class;
  Jcontent_ClipboardManager = interface;
  TJcontent_ClipboardManager = class;
  JDisplayManager = interface;
  TJDisplayManager = class;
  JDisplayManager_DisplayListener = interface;
  TJDisplayManager_DisplayListener = class;
  JVirtualDisplay = interface;
  TJVirtualDisplay = class;
  JVirtualDisplay_Callback = interface;
  TJVirtualDisplay_Callback = class;

{ android.os.BaseBundle }

  [JavaClassSignature('android/os/BaseBundle')]
  JBaseBundle = interface(JObject)
    ['{61802C00-0012-4B8C-8E99-5FB1F4F57476}']
    procedure clear;
    function containsKey(const AArg0: JString): Boolean;
    function get(const AArg0: JString): JObject;
    function getBoolean(const AArg0: JString; const AArg1: Boolean): Boolean; overload; // Introduced in 22';
    function getBoolean(const AArg0: JString): Boolean; overload; // Introduced in 22';
    function getBooleanArray(const AArg0: JString): IJavaArray<Boolean>; // Introduced in 22';
    function getDouble(const AArg0: JString; const AArg1: Double): Double; overload;
    function getDouble(const AArg0: JString): Double; overload;
    function getDoubleArray(const AArg0: JString): IJavaArray<Double>;
    function getInt(const AArg0: JString): Integer; overload;
    function getInt(const AArg0: JString; const AArg1: Integer): Integer; overload;
    function getIntArray(const AArg0: JString): IJavaArray<Integer>;
    function getLong(const AArg0: JString): Int64; overload;
    function getLong(const AArg0: JString; const AArg1: Int64): Int64; overload;
    function getLongArray(const AArg0: JString): IJavaArray<Int64>;
    function getString(const AArg0: JString): JString; overload;
    function getString(const AArg0: JString; const AArg1: JString): JString; overload;
    function getStringArray(const AArg0: JString): IJavaArray<JString>;
    function isEmpty: Boolean;
    function keySet: JSet;
    procedure putAll(const AArg0: JPersistableBundle);
    procedure putBoolean(const AArg0: JString; const AArg1: Boolean); // Introduced in 22';
    procedure putBooleanArray(const AArg0: JString; const AArg1: IJavaArray<Boolean>); // Introduced in 22';
    procedure putDouble(const AArg0: JString; const AArg1: Double);
    procedure putDoubleArray(const AArg0: JString; const AArg1: IJavaArray<Double>);
    procedure putInt(const AArg0: JString; const AArg1: Integer);
    procedure putIntArray(const AArg0: JString; const AArg1: IJavaArray<Integer>);
    procedure putLong(const AArg0: JString; const AArg1: Int64);
    procedure putLongArray(const AArg0: JString; const AArg1: IJavaArray<Int64>);
    procedure putString(const AArg0: JString; const AArg1: JString);
    procedure putStringArray(const AArg0: JString; const AArg1: IJavaArray<JString>);
    procedure remove(const AArg0: JString);
    function size: Integer;
  end;

  [JavaClassSignature('android/os/BaseBundle')]
  TJBaseBundle = class(TJObject, JBaseBundle)
  private
    { methods }
    procedure clear;
    function containsKey(const AArg0: JString): Boolean;
    function get(const AArg0: JString): JObject;
    function getBoolean(const AArg0: JString; const AArg1: Boolean): Boolean; overload; // Introduced in 22';
    function getBoolean(const AArg0: JString): Boolean; overload; // Introduced in 22';
    function getBooleanArray(const AArg0: JString): IJavaArray<Boolean>; // Introduced in 22';
    function getDouble(const AArg0: JString; const AArg1: Double): Double; overload;
    function getDouble(const AArg0: JString): Double; overload;
    function getDoubleArray(const AArg0: JString): IJavaArray<Double>;
    function getInt(const AArg0: JString): Integer; overload;
    function getInt(const AArg0: JString; const AArg1: Integer): Integer; overload;
    function getIntArray(const AArg0: JString): IJavaArray<Integer>;
    function getLong(const AArg0: JString): Int64; overload;
    function getLong(const AArg0: JString; const AArg1: Int64): Int64; overload;
    function getLongArray(const AArg0: JString): IJavaArray<Int64>;
    function getString(const AArg0: JString): JString; overload;
    function getString(const AArg0: JString; const AArg1: JString): JString; overload;
    function getStringArray(const AArg0: JString): IJavaArray<JString>;
    function isEmpty: Boolean;
    function keySet: JSet;
    procedure putAll(const AArg0: JPersistableBundle);
    procedure putBoolean(const AArg0: JString; const AArg1: Boolean); // Introduced in 22';
    procedure putBooleanArray(const AArg0: JString; const AArg1: IJavaArray<Boolean>); // Introduced in 22';
    procedure putDouble(const AArg0: JString; const AArg1: Double);
    procedure putDoubleArray(const AArg0: JString; const AArg1: IJavaArray<Double>);
    procedure putInt(const AArg0: JString; const AArg1: Integer);
    procedure putIntArray(const AArg0: JString; const AArg1: IJavaArray<Integer>);
    procedure putLong(const AArg0: JString; const AArg1: Int64);
    procedure putLongArray(const AArg0: JString; const AArg1: IJavaArray<Int64>);
    procedure putString(const AArg0: JString; const AArg1: JString);
    procedure putStringArray(const AArg0: JString; const AArg1: IJavaArray<JString>);
    procedure remove(const AArg0: JString);
    function size: Integer;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBaseBundle; overload;
    class function Wrap(const AObject: IJNIObject): JBaseBundle; overload;
  end;

{ android.os.Bundle }

  [JavaClassSignature('android/os/Bundle')]
  JBundle = interface(JBaseBundle)
    ['{AF3E06C1-0590-4E6C-8BC6-87122B5B0356}']
    procedure clear;
    function clone: JObject;
    function deepCopy: JBundle; // Introduced in 26';
    function describeContents: Integer;
    function getBinder(const AArg0: JString): JIBinder;
    function getBundle(const AArg0: JString): JBundle;
    function getByte(const AArg0: JString; const AArg1: Byte): JByte; overload;
    function getByte(const AArg0: JString): Byte; overload;
    function getByteArray(const AArg0: JString): IJavaArray<Byte>;
    function getChar(const AArg0: JString; const AArg1: Char): Char; overload;
    function getChar(const AArg0: JString): Char; overload;
    function getCharArray(const AArg0: JString): IJavaArray<Char>;
    function getCharSequence(const AArg0: JString): JCharSequence; overload;
    function getCharSequence(const AArg0: JString; const AArg1: JCharSequence): JCharSequence; overload;
    function getCharSequenceArray(const AArg0: JString): IJavaArray<JCharSequence>;
    function getCharSequenceArrayList(const AArg0: JString): JArrayList;
    function getFloat(const AArg0: JString): Single; overload;
    function getFloat(const AArg0: JString; const AArg1: Single): Single; overload;
    function getFloatArray(const AArg0: JString): IJavaArray<Single>;
    function getIntegerArrayList(const AArg0: JString): JArrayList;
    function getParcelable(const AArg0: JString): JParcelable;
    function getParcelableArray(const AArg0: JString): IJavaArray<JParcelable>;
    function getParcelableArrayList(const AArg0: JString): JArrayList;
    function getShort(const AArg0: JString): ShortInt; overload;
    function getShort(const AArg0: JString; const AArg1: ShortInt): ShortInt; overload;
    function getShortArray(const AArg0: JString): IJavaArray<ShortInt>;
    function getSize(const AArg0: JString): JSize;
    function getSparseParcelableArray(const AArg0: JString): JSparseArray;
    function getStringArrayList(const AArg0: JString): JArrayList;
    function hasFileDescriptors: Boolean;
    procedure putAll(const AArg0: JBundle); overload;
    procedure putBinder(const AArg0: JString; const AArg1: JIBinder);
    procedure putBundle(const AArg0: JString; const AArg1: JBundle);
    procedure putByte(const AArg0: JString; const AArg1: Byte);
    procedure putByteArray(const AArg0: JString; const AArg1: IJavaArray<Byte>);
    procedure putChar(const AArg0: JString; const AArg1: Char);
    procedure putCharArray(const AArg0: JString; const AArg1: IJavaArray<Char>);
    procedure putCharSequence(const AArg0: JString; const AArg1: JCharSequence);
    procedure putCharSequenceArray(const AArg0: JString; const AArg1: IJavaArray<JCharSequence>);
    procedure putCharSequenceArrayList(const AArg0: JString; const AArg1: JArrayList);
    procedure putFloat(const AArg0: JString; const AArg1: Single);
    procedure putFloatArray(const AArg0: JString; const AArg1: IJavaArray<Single>);
    procedure putIntegerArrayList(const AArg0: JString; const AArg1: JArrayList);
    procedure putParcelable(const AArg0: JString; const AArg1: JParcelable);
    procedure putParcelableArray(const AArg0: JString; const AArg1: IJavaArray<JParcelable>);
    procedure putParcelableArrayList(const AArg0: JString; const AArg1: JArrayList);
    procedure putShort(const AArg0: JString; const AArg1: ShortInt);
    procedure putShortArray(const AArg0: JString; const AArg1: IJavaArray<ShortInt>);
    procedure putSize(const AArg0: JString; const AArg1: JSize);
    procedure putSparseParcelableArray(const AArg0: JString; const AArg1: JSparseArray);
    procedure putStringArrayList(const AArg0: JString; const AArg1: JArrayList);
    procedure remove(const AArg0: JString);
    function toString: JString;
  end;

  [JavaClassSignature('android/os/Bundle')]
  TJBundle = class(TJBaseBundle, JBundle)
  private
    { methods }
    procedure clear;
    function clone: JObject;
    function deepCopy: JBundle; // Introduced in 26';
    function describeContents: Integer;
    function getBinder(const AArg0: JString): JIBinder;
    function getBundle(const AArg0: JString): JBundle;
    function getByte(const AArg0: JString; const AArg1: Byte): JByte; overload;
    function getByte(const AArg0: JString): Byte; overload;
    function getByteArray(const AArg0: JString): IJavaArray<Byte>;
    function getChar(const AArg0: JString; const AArg1: Char): Char; overload;
    function getChar(const AArg0: JString): Char; overload;
    function getCharArray(const AArg0: JString): IJavaArray<Char>;
    function getCharSequence(const AArg0: JString): JCharSequence; overload;
    function getCharSequence(const AArg0: JString; const AArg1: JCharSequence): JCharSequence; overload;
    function getCharSequenceArray(const AArg0: JString): IJavaArray<JCharSequence>;
    function getCharSequenceArrayList(const AArg0: JString): JArrayList;
    function getFloat(const AArg0: JString): Single; overload;
    function getFloat(const AArg0: JString; const AArg1: Single): Single; overload;
    function getFloatArray(const AArg0: JString): IJavaArray<Single>;
    function getIntegerArrayList(const AArg0: JString): JArrayList;
    function getParcelable(const AArg0: JString): JParcelable;
    function getParcelableArray(const AArg0: JString): IJavaArray<JParcelable>;
    function getParcelableArrayList(const AArg0: JString): JArrayList;
    function getShort(const AArg0: JString): ShortInt; overload;
    function getShort(const AArg0: JString; const AArg1: ShortInt): ShortInt; overload;
    function getShortArray(const AArg0: JString): IJavaArray<ShortInt>;
    function getSize(const AArg0: JString): JSize;
    function getSparseParcelableArray(const AArg0: JString): JSparseArray;
    function getStringArrayList(const AArg0: JString): JArrayList;
    function hasFileDescriptors: Boolean;
    procedure putAll(const AArg0: JBundle); overload;
    procedure putBinder(const AArg0: JString; const AArg1: JIBinder);
    procedure putBundle(const AArg0: JString; const AArg1: JBundle);
    procedure putByte(const AArg0: JString; const AArg1: Byte);
    procedure putByteArray(const AArg0: JString; const AArg1: IJavaArray<Byte>);
    procedure putChar(const AArg0: JString; const AArg1: Char);
    procedure putCharArray(const AArg0: JString; const AArg1: IJavaArray<Char>);
    procedure putCharSequence(const AArg0: JString; const AArg1: JCharSequence);
    procedure putCharSequenceArray(const AArg0: JString; const AArg1: IJavaArray<JCharSequence>);
    procedure putCharSequenceArrayList(const AArg0: JString; const AArg1: JArrayList);
    procedure putFloat(const AArg0: JString; const AArg1: Single);
    procedure putFloatArray(const AArg0: JString; const AArg1: IJavaArray<Single>);
    procedure putIntegerArrayList(const AArg0: JString; const AArg1: JArrayList);
    procedure putParcelable(const AArg0: JString; const AArg1: JParcelable);
    procedure putParcelableArray(const AArg0: JString; const AArg1: IJavaArray<JParcelable>);
    procedure putParcelableArrayList(const AArg0: JString; const AArg1: JArrayList);
    procedure putShort(const AArg0: JString; const AArg1: ShortInt);
    procedure putShortArray(const AArg0: JString; const AArg1: IJavaArray<ShortInt>);
    procedure putSize(const AArg0: JString; const AArg1: JSize);
    procedure putSparseParcelableArray(const AArg0: JString; const AArg1: JSparseArray);
    procedure putStringArrayList(const AArg0: JString; const AArg1: JArrayList);
    procedure remove(const AArg0: JString);
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBundle; overload;
    class function Wrap(const AObject: IJNIObject): JBundle; overload;
    { constructors }
    class function Create: JBundle; overload;
    class function Create(const AArg0: Integer): JBundle; overload;
    class function Create(const AArg0: JBundle): JBundle; overload;
    class function Create(const AArg0: JPersistableBundle): JBundle; overload;
    { constants }
    class function EMPTY: JBundle;
  end;

{ android.os.PersistableBundle }

  [JavaClassSignature('android/os/PersistableBundle')]
  JPersistableBundle = interface(JBaseBundle)
    ['{D095FA76-D948-4A6E-889E-075DA2DAEC37}']
    function clone: JObject;
    function deepCopy: JPersistableBundle; // Introduced in 26';
    function describeContents: Integer;
    function getPersistableBundle(const AArg0: JString): JPersistableBundle;
    procedure putPersistableBundle(const AArg0: JString; const AArg1: JPersistableBundle);
    function toString: JString;
  end;

  [JavaClassSignature('android/os/PersistableBundle')]
  TJPersistableBundle = class(TJBaseBundle, JPersistableBundle)
  private
    { methods }
    function clone: JObject;
    function deepCopy: JPersistableBundle; // Introduced in 26';
    function describeContents: Integer;
    function getPersistableBundle(const AArg0: JString): JPersistableBundle;
    procedure putPersistableBundle(const AArg0: JString; const AArg1: JPersistableBundle);
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPersistableBundle; overload;
    class function Wrap(const AObject: IJNIObject): JPersistableBundle; overload;
    { constructors }
    class function Create: JPersistableBundle; overload;
    class function Create(const AArg0: Integer): JPersistableBundle; overload;
    class function Create(const AArg0: JPersistableBundle): JPersistableBundle; overload;
    { constants }
    class function EMPTY: JPersistableBundle;
  end;

{ android.os.Build }

  [JavaClassSignature('android/os/Build')]
  JBuild = interface(JObject)
    ['{8D2331B7-B863-4F6E-BA1D-A562FED6C00C}']
  end;

  [JavaClassSignature('android/os/Build')]
  TJBuild = class(TJObject, JBuild)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBuild; overload;
    class function Wrap(const AObject: IJNIObject): JBuild; overload;
    { constructors }
    class function Create: JBuild; overload;
    { constants }
    class function BOARD: JString;
    class function BOOTLOADER: JString;
    class function BRAND: JString;
    class function CPU_ABI: JString;
    class function CPU_ABI2: JString;
    class function DEVICE: JString;
    class function DISPLAY: JString;
    class function FINGERPRINT: JString;
    class function HARDWARE: JString;
    class function HOST: JString;
    class function ID: JString;
    class function MANUFACTURER: JString;
    class function MODEL: JString;
    class function PRODUCT: JString;
    class function RADIO: JString;
    class function SERIAL: JString;
    class function SUPPORTED_32_BIT_ABIS: IJavaArray<JString>;
    class function SUPPORTED_64_BIT_ABIS: IJavaArray<JString>;
    class function SUPPORTED_ABIS: IJavaArray<JString>;
    class function TAGS: JString;
    class function TIME: Int64;
    class function &TYPE: JString;
    class function UNKNOWN: JString;
    class function USER: JString;
    { methods }
    class function getRadioVersion: JString;
    class function getSerial: JString; // Introduced in 26';
  end;

{ android.os.Build_VERSION }

  [JavaClassSignature('android/os/Build$VERSION')]
  JBuild_VERSION = interface(JObject)
    ['{C860BDC1-77FE-47DD-9544-7ED599A11185}']
  end;

  [JavaClassSignature('android/os/Build$VERSION')]
  TJBuild_VERSION = class(TJObject, JBuild_VERSION)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBuild_VERSION; overload;
    class function Wrap(const AObject: IJNIObject): JBuild_VERSION; overload;
    { constructors }
    class function Create: JBuild_VERSION; overload;
    { constants }
    class function BASE_OS: JString;
    class function CODENAME: JString;
    class function INCREMENTAL: JString;
    class function PREVIEW_SDK_INT: Integer;
    class function RELEASE: JString;
    class function SDK: JString;
    class function SDK_INT: Integer;
    class function SECURITY_PATCH: JString;
  end;

{ android.os.Build_VERSION_CODES }

  [JavaClassSignature('android/os/Build$VERSION_CODES')]
  JBuild_VERSION_CODES = interface(JObject)
    ['{09E0DD11-AF9A-437B-B146-DEE42756A4E2}']
  end;

  [JavaClassSignature('android/os/Build$VERSION_CODES')]
  TJBuild_VERSION_CODES = class(TJObject, JBuild_VERSION_CODES)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBuild_VERSION_CODES; overload;
    class function Wrap(const AObject: IJNIObject): JBuild_VERSION_CODES; overload;
    { constructors }
    class function Create: JBuild_VERSION_CODES; overload;
    { constants }
    class function BASE: Integer;
    class function BASE_1_1: Integer;
    class function CUPCAKE: Integer;
    class function CUR_DEVELOPMENT: Integer;
    class function DONUT: Integer;
    class function ECLAIR: Integer;
    class function ECLAIR_0_1: Integer;
    class function ECLAIR_MR1: Integer;
    class function FROYO: Integer;
    class function GINGERBREAD: Integer;
    class function GINGERBREAD_MR1: Integer;
    class function HONEYCOMB: Integer;
    class function HONEYCOMB_MR1: Integer;
    class function HONEYCOMB_MR2: Integer;
    class function ICE_CREAM_SANDWICH: Integer;
    class function ICE_CREAM_SANDWICH_MR1: Integer;
    class function JELLY_BEAN: Integer;
    class function JELLY_BEAN_MR1: Integer;
    class function JELLY_BEAN_MR2: Integer;
    class function KITKAT: Integer;
    class function KITKAT_WATCH: Integer;
    class function LOLLIPOP: Integer;
    class function LOLLIPOP_MR1: Integer;
    class function M: Integer;
    class function N: Integer;
    class function N_MR1: Integer;
    class function O: Integer;
    class function O_MR1: Integer;
    class function P: Integer;
  end;

{ android.os.CancellationSignal }

  [JavaClassSignature('android/os/CancellationSignal')]
  JCancellationSignal = interface(JObject)
    ['{20BA7364-5579-4845-A4D8-ED59806F4D50}']
    procedure cancel;
    function isCanceled: Boolean;
    procedure setOnCancelListener(const AArg0: JCancellationSignal_OnCancelListener);
    procedure throwIfCanceled;
  end;

  [JavaClassSignature('android/os/CancellationSignal')]
  TJCancellationSignal = class(TJObject, JCancellationSignal)
  private
    { methods }
    procedure cancel;
    function isCanceled: Boolean;
    procedure setOnCancelListener(const AArg0: JCancellationSignal_OnCancelListener);
    procedure throwIfCanceled;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JCancellationSignal; overload;
    class function Wrap(const AObject: IJNIObject): JCancellationSignal; overload;
    { constructors }
    class function Create: JCancellationSignal; overload;
  end;

{ android.os.CancellationSignal_OnCancelListener - interface }

  [JavaClassSignature('android/os/CancellationSignal$OnCancelListener')]
  JCancellationSignal_OnCancelListener = interface(IJavaObject)
    ['{3A36DAB9-D8CD-4316-BDEF-50D1C1EDC658}']
    procedure onCancel;
  end;

  [JavaClassSignature('android/os/CancellationSignal$OnCancelListener')]
  TJCancellationSignal_OnCancelListener = class(TJObject, JCancellationSignal_OnCancelListener)
  private
    { methods }
    procedure onCancel;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JCancellationSignal_OnCancelListener; overload;
    class function Wrap(const AObject: IJNIObject): JCancellationSignal_OnCancelListener; overload;
  end;

{ android.os.Handler }

  [JavaClassSignature('android/os/Handler')]
  JHandler = interface(JObject)
    ['{2E2834CF-A80B-4061-9AFC-E99967C14A36}']
    function getLooper: JLooper;
    function hasMessages(const AArg0: Integer; const AArg1: JObject): Boolean; overload;
    function hasMessages(const AArg0: Integer): Boolean; overload;
    function post(const AArg0: JRunnable): Boolean;
    function postAtFrontOfQueue(const AArg0: JRunnable): Boolean;
    function postAtTime(const AArg0: JRunnable; const AArg1: Int64): Boolean; overload;
    function postAtTime(const AArg0: JRunnable; const AArg1: JObject; const AArg2: Int64): Boolean; overload;
    function postDelayed(const AArg0: JRunnable; const AArg1: JObject; const AArg2: Int64): Boolean; overload; // Introduced in 28';
    function postDelayed(const AArg0: JRunnable; const AArg1: Int64): Boolean; overload;
    procedure removeCallbacks(const AArg0: JRunnable); overload;
    procedure removeCallbacks(const AArg0: JRunnable; const AArg1: JObject); overload;
    procedure removeCallbacksAndMessages(const AArg0: JObject);
    procedure removeMessages(const AArg0: Integer; const AArg1: JObject); overload;
    procedure removeMessages(const AArg0: Integer); overload;
    function sendEmptyMessage(const AArg0: Integer): Boolean;
    function sendEmptyMessageAtTime(const AArg0: Integer; const AArg1: Int64): Boolean;
    function sendEmptyMessageDelayed(const AArg0: Integer; const AArg1: Int64): Boolean;
    function toString: JString;
  end;

  [JavaClassSignature('android/os/Handler')]
  TJHandler = class(TJObject, JHandler)
  private
    { methods }
    function getLooper: JLooper;
    function hasMessages(const AArg0: Integer; const AArg1: JObject): Boolean; overload;
    function hasMessages(const AArg0: Integer): Boolean; overload;
    function post(const AArg0: JRunnable): Boolean;
    function postAtFrontOfQueue(const AArg0: JRunnable): Boolean;
    function postAtTime(const AArg0: JRunnable; const AArg1: Int64): Boolean; overload;
    function postAtTime(const AArg0: JRunnable; const AArg1: JObject; const AArg2: Int64): Boolean; overload;
    function postDelayed(const AArg0: JRunnable; const AArg1: JObject; const AArg2: Int64): Boolean; overload; // Introduced in 28';
    function postDelayed(const AArg0: JRunnable; const AArg1: Int64): Boolean; overload;
    procedure removeCallbacks(const AArg0: JRunnable); overload;
    procedure removeCallbacks(const AArg0: JRunnable; const AArg1: JObject); overload;
    procedure removeCallbacksAndMessages(const AArg0: JObject);
    procedure removeMessages(const AArg0: Integer; const AArg1: JObject); overload;
    procedure removeMessages(const AArg0: Integer); overload;
    function sendEmptyMessage(const AArg0: Integer): Boolean;
    function sendEmptyMessageAtTime(const AArg0: Integer; const AArg1: Int64): Boolean;
    function sendEmptyMessageDelayed(const AArg0: Integer; const AArg1: Int64): Boolean;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JHandler; overload;
    class function Wrap(const AObject: IJNIObject): JHandler; overload;
    { constructors }
    class function Create: JHandler; overload;
    class function Create(const AArg0: JLooper): JHandler; overload;
    { methods }
    class function createAsync(const AArg0: JLooper): JHandler; // Introduced in 28';
  end;

{ android.os.HandlerThread }

  [JavaClassSignature('android/os/HandlerThread')]
  JHandlerThread = interface(JThread)
    ['{9AF8481A-5283-4FBB-8006-E91D9BF84095}']
    function getLooper: JLooper;
    function getThreadId: Integer;
    function quit: Boolean;
    function quitSafely: Boolean;
    procedure run;
  end;

  [JavaClassSignature('android/os/HandlerThread')]
  TJHandlerThread = class(TJThread, JHandlerThread)
  private
    { methods }
    function getLooper: JLooper;
    function getThreadId: Integer;
    function quit: Boolean;
    function quitSafely: Boolean;
    procedure run;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JHandlerThread; overload;
    class function Wrap(const AObject: IJNIObject): JHandlerThread; overload;
    { constructors }
    class function Create(const AArg0: JString): JHandlerThread; overload;
    class function Create(const AArg0: JString; const AArg1: Integer): JHandlerThread; overload;
  end;

{ android.os.IBinder - interface }

  [JavaClassSignature('android/os/IBinder')]
  JIBinder = interface(IJavaObject)
    ['{FB3C0C1F-50EB-4155-BC70-26696459BD3D}']
    procedure dump(const AArg0: JFileDescriptor; const AArg1: IJavaArray<JString>);
    procedure dumpAsync(const AArg0: JFileDescriptor; const AArg1: IJavaArray<JString>);
    function getInterfaceDescriptor: JString;
    function isBinderAlive: Boolean;
    function pingBinder: Boolean;
  end;

  [JavaClassSignature('android/os/IBinder')]
  TJIBinder = class(TJObject, JIBinder)
  private
    { methods }
    procedure dump(const AArg0: JFileDescriptor; const AArg1: IJavaArray<JString>);
    procedure dumpAsync(const AArg0: JFileDescriptor; const AArg1: IJavaArray<JString>);
    function getInterfaceDescriptor: JString;
    function isBinderAlive: Boolean;
    function pingBinder: Boolean;
  protected
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JIBinder; overload;
    class function Wrap(const AObject: IJNIObject): JIBinder; overload;
    { constants }
    class function DUMP_TRANSACTION: Integer;
    class function FIRST_CALL_TRANSACTION: Integer;
    class function FLAG_ONEWAY: Integer;
    class function INTERFACE_TRANSACTION: Integer;
    class function LAST_CALL_TRANSACTION: Integer;
    class function LIKE_TRANSACTION: Integer;
    class function PING_TRANSACTION: Integer;
    class function TWEET_TRANSACTION: Integer;
  end;

{ android.os.Looper }

  [JavaClassSignature('android/os/Looper')]
  JLooper = interface(JObject)
    ['{1A01B9D9-A390-4895-A4B5-BC6B6A70FB94}']
    function getQueue: JMessageQueue; // Introduced in 23';
    function getThread: JThread;
    function isCurrentThread: Boolean; // Introduced in 23';
    procedure quit;
    procedure quitSafely;
    function toString: JString;
  end;

  [JavaClassSignature('android/os/Looper')]
  TJLooper = class(TJObject, JLooper)
  private
    { methods }
    function getQueue: JMessageQueue; // Introduced in 23';
    function getThread: JThread;
    function isCurrentThread: Boolean; // Introduced in 23';
    procedure quit;
    procedure quitSafely;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JLooper; overload;
    class function Wrap(const AObject: IJNIObject): JLooper; overload;
    { methods }
    class function getMainLooper: JLooper;
    class procedure loop;
    class function myLooper: JLooper;
    class function myQueue: JMessageQueue;
    class procedure prepare;
    class procedure prepareMainLooper;
  end;

{ android.os.MessageQueue }

  [JavaClassSignature('android/os/MessageQueue')]
  JMessageQueue = interface(JObject)
    ['{D3250DA4-7512-420F-A293-AD6376E2C37F}']
    procedure addIdleHandler(const AArg0: JMessageQueue_IdleHandler);
    procedure addOnFileDescriptorEventListener(const AArg0: JFileDescriptor; const AArg1: Integer; const AArg2: JMessageQueue_OnFileDescriptorEventListener); // Introduced in 23';
    function isIdle: Boolean; // Introduced in 23';
    procedure removeIdleHandler(const AArg0: JMessageQueue_IdleHandler);
    procedure removeOnFileDescriptorEventListener(const AArg0: JFileDescriptor); // Introduced in 23';
  end;

  [JavaClassSignature('android/os/MessageQueue')]
  TJMessageQueue = class(TJObject, JMessageQueue)
  private
    { methods }
    procedure addIdleHandler(const AArg0: JMessageQueue_IdleHandler);
    procedure addOnFileDescriptorEventListener(const AArg0: JFileDescriptor; const AArg1: Integer; const AArg2: JMessageQueue_OnFileDescriptorEventListener); // Introduced in 23';
    function isIdle: Boolean; // Introduced in 23';
    procedure removeIdleHandler(const AArg0: JMessageQueue_IdleHandler);
    procedure removeOnFileDescriptorEventListener(const AArg0: JFileDescriptor); // Introduced in 23';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMessageQueue; overload;
    class function Wrap(const AObject: IJNIObject): JMessageQueue; overload;
  end;

{ android.os.MessageQueue_IdleHandler - interface }

  [JavaClassSignature('android/os/MessageQueue$IdleHandler')]
  JMessageQueue_IdleHandler = interface(IJavaObject)
    ['{87137311-80DC-474D-8703-3A8E81C56BD8}']
    function queueIdle: Boolean;
  end;

  [JavaClassSignature('android/os/MessageQueue$IdleHandler')]
  TJMessageQueue_IdleHandler = class(TJObject, JMessageQueue_IdleHandler)
  private
    { methods }
    function queueIdle: Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMessageQueue_IdleHandler; overload;
    class function Wrap(const AObject: IJNIObject): JMessageQueue_IdleHandler; overload;
  end;

{ android.os.MessageQueue_OnFileDescriptorEventListener - interface }

  [JavaClassSignature('android/os/MessageQueue$OnFileDescriptorEventListener')]
  JMessageQueue_OnFileDescriptorEventListener = interface(IJavaObject)
    ['{55C0A1DB-2A22-4A50-8FC3-E4A3FBD250F1}']
    function onFileDescriptorEvents(const AArg0: JFileDescriptor; const AArg1: Integer): Integer;
  end;

  [JavaClassSignature('android/os/MessageQueue$OnFileDescriptorEventListener')]
  TJMessageQueue_OnFileDescriptorEventListener = class(TJObject, JMessageQueue_OnFileDescriptorEventListener)
  private
    { methods }
    function onFileDescriptorEvents(const AArg0: JFileDescriptor; const AArg1: Integer): Integer;
  protected
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMessageQueue_OnFileDescriptorEventListener; overload;
    class function Wrap(const AObject: IJNIObject): JMessageQueue_OnFileDescriptorEventListener; overload;
    { constants }
    class function EVENT_ERROR: Integer;
    class function EVENT_INPUT: Integer;
    class function EVENT_OUTPUT: Integer;
  end;

{ android.os.ParcelFileDescriptor }

  [JavaClassSignature('android/os/ParcelFileDescriptor')]
  JParcelFileDescriptor = interface(JObject)
    ['{39515F7A-2734-49D6-B865-18DAC13F5877}']
    function canDetectErrors: Boolean;
    procedure checkError;
    procedure close;
    procedure closeWithError(const AArg0: JString);
    function describeContents: Integer;
    function detachFd: Integer;
    function dup: JParcelFileDescriptor; overload;
    function getFd: Integer;
    function getFileDescriptor: JFileDescriptor;
    function getStatSize: Int64;
    function toString: JString;
  end;

  [JavaClassSignature('android/os/ParcelFileDescriptor')]
  TJParcelFileDescriptor = class(TJObject, JParcelFileDescriptor)
  private
    { methods }
    function canDetectErrors: Boolean;
    procedure checkError;
    procedure close;
    procedure closeWithError(const AArg0: JString);
    function describeContents: Integer;
    function detachFd: Integer;
    function dup: JParcelFileDescriptor; overload;
    function getFd: Integer;
    function getFileDescriptor: JFileDescriptor;
    function getStatSize: Int64;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JParcelFileDescriptor; overload;
    class function Wrap(const AObject: IJNIObject): JParcelFileDescriptor; overload;
    { constructors }
    class function Create(const AArg0: JParcelFileDescriptor): JParcelFileDescriptor; overload;
    { constants }
    class function MODE_APPEND: Integer;
    class function MODE_CREATE: Integer;
    class function MODE_READ_ONLY: Integer;
    class function MODE_READ_WRITE: Integer;
    class function MODE_TRUNCATE: Integer;
    class function MODE_WORLD_READABLE: Integer;
    class function MODE_WORLD_WRITEABLE: Integer;
    class function MODE_WRITE_ONLY: Integer;
    { methods }
    class function adoptFd(const AArg0: Integer): JParcelFileDescriptor;
    class function createPipe: IJavaArray<JParcelFileDescriptor>;
    class function createReliablePipe: IJavaArray<JParcelFileDescriptor>;
    class function createReliableSocketPair: IJavaArray<JParcelFileDescriptor>;
    class function createSocketPair: IJavaArray<JParcelFileDescriptor>;
    class function dup(const AArg0: JFileDescriptor): JParcelFileDescriptor; overload;
    class function fromFd(const AArg0: Integer): JParcelFileDescriptor;
    class function open(const AArg0: JFile; const AArg1: Integer): JParcelFileDescriptor;
    class function parseMode(const AArg0: JString): Integer;
  end;

{ android.os.PatternMatcher }

  [JavaClassSignature('android/os/PatternMatcher')]
  JPatternMatcher = interface(JObject)
    ['{89695E56-E86F-4840-8052-E39702F30369}']
    function describeContents: Integer;
    function getPath: JString;
    function getType: Integer;
    function match(const AArg0: JString): Boolean;
    function toString: JString;
  end;

  [JavaClassSignature('android/os/PatternMatcher')]
  TJPatternMatcher = class(TJObject, JPatternMatcher)
  private
    { methods }
    function describeContents: Integer;
    function getPath: JString;
    function getType: Integer;
    function match(const AArg0: JString): Boolean;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPatternMatcher; overload;
    class function Wrap(const AObject: IJNIObject): JPatternMatcher; overload;
    { constructors }
    class function Create(const AArg0: JString; const AArg1: Integer): JPatternMatcher; overload;
    { constants }
    class function PATTERN_ADVANCED_GLOB: Integer;
    class function PATTERN_LITERAL: Integer;
    class function PATTERN_PREFIX: Integer;
    class function PATTERN_SIMPLE_GLOB: Integer;
  end;

{ android.content.pm.PathPermission }

  [JavaClassSignature('android/content/pm/PathPermission')]
  JPathPermission = interface(JPatternMatcher)
    ['{48A763E1-FE70-4122-9029-3DFB049B9C75}']
    function getReadPermission: JString;
    function getWritePermission: JString;
  end;

  [JavaClassSignature('android/content/pm/PathPermission')]
  TJPathPermission = class(TJPatternMatcher, JPathPermission)
  private
    { methods }
    function getReadPermission: JString;
    function getWritePermission: JString;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPathPermission; overload;
    class function Wrap(const AObject: IJNIObject): JPathPermission; overload;
    { constructors }
    class function Create(const AArg0: JString; const AArg1: Integer; const AArg2: JString; const AArg3: JString): JPathPermission; overload;
  end;

{ android.os.UserHandle }

  [JavaClassSignature('android/os/UserHandle')]
  JUserHandle = interface(JObject)
    ['{E6D7BD1B-947F-4065-B32D-C4061DD52DA8}']
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean;
    function hashCode: Integer;
    function toString: JString;
  end;

  [JavaClassSignature('android/os/UserHandle')]
  TJUserHandle = class(TJObject, JUserHandle)
  private
    { methods }
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function hashCode: Integer;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JUserHandle; overload;
    class function Wrap(const AObject: IJNIObject): JUserHandle; overload;
    { methods }
    class function getUserHandleForUid(const AArg0: Integer): JUserHandle; // Introduced in 24';
  end;

{ android.content.BroadcastReceiver }

  [JavaClassSignature('android/content/BroadcastReceiver')]
  JBroadcastReceiver = interface(JObject)
    ['{8A1FC206-3B75-4846-899A-F05D79593133}']
    procedure abortBroadcast;
    procedure clearAbortBroadcast;
    function getAbortBroadcast: Boolean;
    function getDebugUnregister: Boolean;
    function getResultCode: Integer;
    function getResultData: JString;
    function getResultExtras(const AArg0: Boolean): JBundle;
    function goAsync: JBroadcastReceiver_PendingResult;
    function isInitialStickyBroadcast: Boolean;
    function isOrderedBroadcast: Boolean;
    procedure onReceive(const AArg0: JContext; const AArg1: JIntent);
    function peekService(const AArg0: JContext; const AArg1: JIntent): JIBinder;
    procedure setDebugUnregister(const AArg0: Boolean);
    procedure setOrderedHint(const AArg0: Boolean);
    procedure setResult(const AArg0: Integer; const AArg1: JString; const AArg2: JBundle);
    procedure setResultCode(const AArg0: Integer);
    procedure setResultData(const AArg0: JString);
    procedure setResultExtras(const AArg0: JBundle);
  end;

  [JavaClassSignature('android/content/BroadcastReceiver')]
  TJBroadcastReceiver = class(TJObject, JBroadcastReceiver)
  private
    { methods }
    procedure abortBroadcast;
    procedure clearAbortBroadcast;
    function getAbortBroadcast: Boolean;
    function getDebugUnregister: Boolean;
    function getResultCode: Integer;
    function getResultData: JString;
    function getResultExtras(const AArg0: Boolean): JBundle;
    function goAsync: JBroadcastReceiver_PendingResult;
    function isInitialStickyBroadcast: Boolean;
    function isOrderedBroadcast: Boolean;
    procedure onReceive(const AArg0: JContext; const AArg1: JIntent);
    function peekService(const AArg0: JContext; const AArg1: JIntent): JIBinder;
    procedure setDebugUnregister(const AArg0: Boolean);
    procedure setOrderedHint(const AArg0: Boolean);
    procedure setResult(const AArg0: Integer; const AArg1: JString; const AArg2: JBundle);
    procedure setResultCode(const AArg0: Integer);
    procedure setResultData(const AArg0: JString);
    procedure setResultExtras(const AArg0: JBundle);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBroadcastReceiver; overload;
    class function Wrap(const AObject: IJNIObject): JBroadcastReceiver; overload;
    { constructors }
    class function Create: JBroadcastReceiver; overload;
  end;

{ android.content.BroadcastReceiver_PendingResult }

  [JavaClassSignature('android/content/BroadcastReceiver$PendingResult')]
  JBroadcastReceiver_PendingResult = interface(JObject)
    ['{5E77D316-4273-4C6D-B0EC-CEF7D6BEF067}']
    procedure abortBroadcast;
    procedure clearAbortBroadcast;
    procedure finish;
    function getAbortBroadcast: Boolean;
    function getResultCode: Integer;
    function getResultData: JString;
    function getResultExtras(const AArg0: Boolean): JBundle;
    procedure setResult(const AArg0: Integer; const AArg1: JString; const AArg2: JBundle);
    procedure setResultCode(const AArg0: Integer);
    procedure setResultData(const AArg0: JString);
    procedure setResultExtras(const AArg0: JBundle);
  end;

  [JavaClassSignature('android/content/BroadcastReceiver$PendingResult')]
  TJBroadcastReceiver_PendingResult = class(TJObject, JBroadcastReceiver_PendingResult)
  private
    { methods }
    procedure abortBroadcast;
    procedure clearAbortBroadcast;
    procedure finish;
    function getAbortBroadcast: Boolean;
    function getResultCode: Integer;
    function getResultData: JString;
    function getResultExtras(const AArg0: Boolean): JBundle;
    procedure setResult(const AArg0: Integer; const AArg1: JString; const AArg2: JBundle);
    procedure setResultCode(const AArg0: Integer);
    procedure setResultData(const AArg0: JString);
    procedure setResultExtras(const AArg0: JBundle);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBroadcastReceiver_PendingResult; overload;
    class function Wrap(const AObject: IJNIObject): JBroadcastReceiver_PendingResult; overload;
  end;

{ android.content.ClipData }

  [JavaClassSignature('android/content/ClipData')]
  JClipData = interface(JObject)
    ['{338822EA-90F2-42CA-99FC-8457E60BA406}']
    procedure addItem(const AArg0: JContentResolver; const AArg1: JClipData_Item); overload; // Introduced in 26';
    procedure addItem(const AArg0: JClipData_Item); overload;
    function describeContents: Integer;
    function getDescription: JClipDescription;
    function getItemAt(const AArg0: Integer): JClipData_Item;
    function getItemCount: Integer;
    function toString: JString;
  end;

  [JavaClassSignature('android/content/ClipData')]
  TJClipData = class(TJObject, JClipData)
  private
    { methods }
    procedure addItem(const AArg0: JContentResolver; const AArg1: JClipData_Item); overload; // Introduced in 26';
    procedure addItem(const AArg0: JClipData_Item); overload;
    function describeContents: Integer;
    function getDescription: JClipDescription;
    function getItemAt(const AArg0: Integer): JClipData_Item;
    function getItemCount: Integer;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JClipData; overload;
    class function Wrap(const AObject: IJNIObject): JClipData; overload;
    { constructors }
    class function Create(const AArg0: JCharSequence; const AArg1: IJavaArray<JString>; const AArg2: JClipData_Item): JClipData; overload;
    class function Create(const AArg0: JClipDescription; const AArg1: JClipData_Item): JClipData; overload;
    class function Create(const AArg0: JClipData): JClipData; overload;
    { methods }
    class function newHtmlText(const AArg0: JCharSequence; const AArg1: JCharSequence; const AArg2: JString): JClipData;
    class function newIntent(const AArg0: JCharSequence; const AArg1: JIntent): JClipData;
    class function newPlainText(const AArg0: JCharSequence; const AArg1: JCharSequence): JClipData;
    class function newRawUri(const AArg0: JCharSequence; const AArg1: JUri): JClipData;
    class function newUri(const AArg0: JContentResolver; const AArg1: JCharSequence; const AArg2: JUri): JClipData;
  end;

{ android.content.ClipData_Item }

  [JavaClassSignature('android/content/ClipData$Item')]
  JClipData_Item = interface(JObject)
    ['{AAEE4AD6-7974-41CF-A871-0C4E1194841B}']
    function coerceToHtmlText(const AArg0: JContext): JString;
    function coerceToStyledText(const AArg0: JContext): JCharSequence;
    function coerceToText(const AArg0: JContext): JCharSequence;
    function getHtmlText: JString;
    function getIntent: JIntent;
    function getText: JCharSequence;
    function getUri: JUri;
    function toString: JString;
  end;

  [JavaClassSignature('android/content/ClipData$Item')]
  TJClipData_Item = class(TJObject, JClipData_Item)
  private
    { methods }
    function coerceToHtmlText(const AArg0: JContext): JString;
    function coerceToStyledText(const AArg0: JContext): JCharSequence;
    function coerceToText(const AArg0: JContext): JCharSequence;
    function getHtmlText: JString;
    function getIntent: JIntent;
    function getText: JCharSequence;
    function getUri: JUri;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JClipData_Item; overload;
    class function Wrap(const AObject: IJNIObject): JClipData_Item; overload;
    { constructors }
    class function Create(const AArg0: JCharSequence): JClipData_Item; overload;
    class function Create(const AArg0: JCharSequence; const AArg1: JString): JClipData_Item; overload;
    class function Create(const AArg0: JIntent): JClipData_Item; overload;
    class function Create(const AArg0: JUri): JClipData_Item; overload;
    class function Create(const AArg0: JCharSequence; const AArg1: JIntent; const AArg2: JUri): JClipData_Item; overload;
    class function Create(const AArg0: JCharSequence; const AArg1: JString; const AArg2: JIntent; const AArg3: JUri): JClipData_Item; overload;
  end;

{ android.content.ClipDescription }

  [JavaClassSignature('android/content/ClipDescription')]
  JClipDescription = interface(JObject)
    ['{F9F3C43F-8302-4E51-BDC3-B3CC59209EA6}']
    function describeContents: Integer;
    function filterMimeTypes(const AArg0: JString): IJavaArray<JString>;
    function getExtras: JPersistableBundle; // Introduced in 24';
    function getLabel: JCharSequence;
    function getMimeType(const AArg0: Integer): JString;
    function getMimeTypeCount: Integer;
    function getTimestamp: Int64; // Introduced in 26';
    function hasMimeType(const AArg0: JString): Boolean;
    procedure setExtras(const AArg0: JPersistableBundle); // Introduced in 24';
    function toString: JString;
  end;

  [JavaClassSignature('android/content/ClipDescription')]
  TJClipDescription = class(TJObject, JClipDescription)
  private
    { methods }
    function describeContents: Integer;
    function filterMimeTypes(const AArg0: JString): IJavaArray<JString>;
    function getExtras: JPersistableBundle; // Introduced in 24';
    function getLabel: JCharSequence;
    function getMimeType(const AArg0: Integer): JString;
    function getMimeTypeCount: Integer;
    function getTimestamp: Int64; // Introduced in 26';
    function hasMimeType(const AArg0: JString): Boolean;
    procedure setExtras(const AArg0: JPersistableBundle); // Introduced in 24';
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JClipDescription; overload;
    class function Wrap(const AObject: IJNIObject): JClipDescription; overload;
    { constructors }
    class function Create(const AArg0: JCharSequence; const AArg1: IJavaArray<JString>): JClipDescription; overload;
    class function Create(const AArg0: JClipDescription): JClipDescription; overload;
    { constants }
    class function MIMETYPE_TEXT_HTML: JString;
    class function MIMETYPE_TEXT_INTENT: JString;
    class function MIMETYPE_TEXT_PLAIN: JString;
    class function MIMETYPE_TEXT_URILIST: JString;
    { methods }
    class function compareMimeTypes(const AArg0: JString; const AArg1: JString): Boolean;
  end;

{ android.content.ClipboardManager_OnPrimaryClipChangedListener - interface }

  [JavaClassSignature('android/content/ClipboardManager$OnPrimaryClipChangedListener')]
  JClipboardManager_OnPrimaryClipChangedListener = interface(IJavaObject)
    ['{5AB45F88-59AC-4FEF-BBC8-9BA94BDF471A}']
    procedure onPrimaryClipChanged;
  end;

  [JavaClassSignature('android/content/ClipboardManager$OnPrimaryClipChangedListener')]
  TJClipboardManager_OnPrimaryClipChangedListener = class(TJObject, JClipboardManager_OnPrimaryClipChangedListener)
  private
    { methods }
    procedure onPrimaryClipChanged;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JClipboardManager_OnPrimaryClipChangedListener; overload;
    class function Wrap(const AObject: IJNIObject): JClipboardManager_OnPrimaryClipChangedListener; overload;
  end;

{ android.content.ComponentName }

  [JavaClassSignature('android/content/ComponentName')]
  JComponentName = interface(JObject)
    ['{C478B833-B028-4769-9D77-39F53FD43A0B}']
    function clone: JComponentName;
    function compareTo(const AArg0: JComponentName): Integer; overload;
    function compareTo(const AArg0: JObject): Integer; overload;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean;
    function flattenToShortString: JString;
    function flattenToString: JString;
    function getClassName: JString;
    function getPackageName: JString;
    function getShortClassName: JString;
    function hashCode: Integer;
    function toShortString: JString;
    function toString: JString;
  end;

  [JavaClassSignature('android/content/ComponentName')]
  TJComponentName = class(TJObject, JComponentName)
  private
    { methods }
    function clone: JComponentName;
    function compareTo(const AArg0: JComponentName): Integer; overload;
    function compareTo(const AArg0: JObject): Integer; overload;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function flattenToShortString: JString;
    function flattenToString: JString;
    function getClassName: JString;
    function getPackageName: JString;
    function getShortClassName: JString;
    function hashCode: Integer;
    function toShortString: JString;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JComponentName; overload;
    class function Wrap(const AObject: IJNIObject): JComponentName; overload;
    { constructors }
    class function Create(const AArg0: JString; const AArg1: JString): JComponentName; overload;
    class function Create(const AArg0: JContext; const AArg1: JString): JComponentName; overload;
    class function Create(const AArg0: JContext; const AArg1: JClass): JComponentName; overload;
    { methods }
    class function createRelative(const AArg0: JContext; const AArg1: JString): JComponentName; overload; // Introduced in 23';
    class function createRelative(const AArg0: JString; const AArg1: JString): JComponentName; overload; // Introduced in 23';
    class function unflattenFromString(const AArg0: JString): JComponentName;
  end;

{ android.content.ContentProvider }

  [JavaClassSignature('android/content/ContentProvider')]
  JContentProvider = interface(JObject)
    ['{AD616F93-7769-4098-B921-FA17B5233D5C}']
    function applyBatch(const AArg0: JArrayList): IJavaArray<JContentProviderResult>;
    function bulkInsert(const AArg0: JUri; const AArg1: IJavaArray<JContentValues>): Integer;
    function call(const AArg0: JString; const AArg1: JString; const AArg2: JBundle): JBundle;
    function canonicalize(const AArg0: JUri): JUri;
    function delete(const AArg0: JUri; const AArg1: JString; const AArg2: IJavaArray<JString>): Integer;
    function getCallingPackage: JString;
    function getContext: JContext;
    function getPathPermissions: IJavaArray<JPathPermission>;
    function getReadPermission: JString;
    function getStreamTypes(const AArg0: JUri; const AArg1: JString): IJavaArray<JString>;
    function getType(const AArg0: JUri): JString;
    function getWritePermission: JString;
    function insert(const AArg0: JUri; const AArg1: JContentValues): JUri;
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    function onCreate: Boolean;
    procedure onLowMemory;
    procedure onTrimMemory(const AArg0: Integer);
    function openAssetFile(const AArg0: JUri; const AArg1: JString): JAssetFileDescriptor; overload;
    function openAssetFile(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JAssetFileDescriptor; overload;
    function openFile(const AArg0: JUri; const AArg1: JString): JParcelFileDescriptor; overload;
    function openFile(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JParcelFileDescriptor; overload;
    function openTypedAssetFile(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle; const AArg3: JCancellationSignal): JAssetFileDescriptor; overload;
    function openTypedAssetFile(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle): JAssetFileDescriptor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JBundle; const AArg3: JCancellationSignal): JCursor; overload; // Introduced in 26';
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString; const AArg5: JCancellationSignal): JCursor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor; overload;
    function refresh(const AArg0: JUri; const AArg1: JBundle; const AArg2: JCancellationSignal): Boolean; // Introduced in 26';
    procedure shutdown;
    function uncanonicalize(const AArg0: JUri): JUri;
    function update(const AArg0: JUri; const AArg1: JContentValues; const AArg2: JString; const AArg3: IJavaArray<JString>): Integer;
  end;

  [JavaClassSignature('android/content/ContentProvider')]
  TJContentProvider = class(TJObject, JContentProvider)
  private
    { methods }
    function applyBatch(const AArg0: JArrayList): IJavaArray<JContentProviderResult>;
    function bulkInsert(const AArg0: JUri; const AArg1: IJavaArray<JContentValues>): Integer;
    function call(const AArg0: JString; const AArg1: JString; const AArg2: JBundle): JBundle;
    function canonicalize(const AArg0: JUri): JUri;
    function delete(const AArg0: JUri; const AArg1: JString; const AArg2: IJavaArray<JString>): Integer;
    function getCallingPackage: JString;
    function getContext: JContext;
    function getPathPermissions: IJavaArray<JPathPermission>;
    function getReadPermission: JString;
    function getStreamTypes(const AArg0: JUri; const AArg1: JString): IJavaArray<JString>;
    function getType(const AArg0: JUri): JString;
    function getWritePermission: JString;
    function insert(const AArg0: JUri; const AArg1: JContentValues): JUri;
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    function onCreate: Boolean;
    procedure onLowMemory;
    procedure onTrimMemory(const AArg0: Integer);
    function openAssetFile(const AArg0: JUri; const AArg1: JString): JAssetFileDescriptor; overload;
    function openAssetFile(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JAssetFileDescriptor; overload;
    function openFile(const AArg0: JUri; const AArg1: JString): JParcelFileDescriptor; overload;
    function openFile(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JParcelFileDescriptor; overload;
    function openTypedAssetFile(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle; const AArg3: JCancellationSignal): JAssetFileDescriptor; overload;
    function openTypedAssetFile(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle): JAssetFileDescriptor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JBundle; const AArg3: JCancellationSignal): JCursor; overload; // Introduced in 26';
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString; const AArg5: JCancellationSignal): JCursor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor; overload;
    function refresh(const AArg0: JUri; const AArg1: JBundle; const AArg2: JCancellationSignal): Boolean; // Introduced in 26';
    procedure shutdown;
    function uncanonicalize(const AArg0: JUri): JUri;
    function update(const AArg0: JUri; const AArg1: JContentValues; const AArg2: JString; const AArg3: IJavaArray<JString>): Integer;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContentProvider; overload;
    class function Wrap(const AObject: IJNIObject): JContentProvider; overload;
    { constructors }
    class function Create: JContentProvider; overload;
  end;

{ android.support.v4.content.FileProvider }

  [JavaClassSignature('android/support/v4/content/FileProvider')]
  JFileProvider = interface(JContentProvider)
    ['{2554A8FB-A186-4442-9532-EC92F3C3CBDB}']
    function delete(const AArg0: JUri; const AArg1: JString; const AArg2: IJavaArray<JString>): Integer;
    function getType(const AArg0: JUri): JString;
    function insert(const AArg0: JUri; const AArg1: JContentValues): JUri;
    function onCreate: Boolean;
    function openFile(const AArg0: JUri; const AArg1: JString): JParcelFileDescriptor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor; overload;
    function update(const AArg0: JUri; const AArg1: JContentValues; const AArg2: JString; const AArg3: IJavaArray<JString>): Integer;
  end;

  [JavaClassSignature('android/support/v4/content/FileProvider')]
  TJFileProvider = class(TJContentProvider, JFileProvider)
  private
    { methods }
    function delete(const AArg0: JUri; const AArg1: JString; const AArg2: IJavaArray<JString>): Integer;
    function getType(const AArg0: JUri): JString;
    function insert(const AArg0: JUri; const AArg1: JContentValues): JUri;
    function onCreate: Boolean;
    function openFile(const AArg0: JUri; const AArg1: JString): JParcelFileDescriptor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor; overload;
    function update(const AArg0: JUri; const AArg1: JContentValues; const AArg2: JString; const AArg3: IJavaArray<JString>): Integer;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JFileProvider; overload;
    class function Wrap(const AObject: IJNIObject): JFileProvider; overload;
    { constructors }
    class function Create: JFileProvider; overload;
    { methods }
    class function getUriForFile(const AArg0: JContext; const AArg1: JString; const AArg2: JFile): JUri;
  end;

{ android.content.ContentProviderResult }

  [JavaClassSignature('android/content/ContentProviderResult')]
  JContentProviderResult = interface(JObject)
    ['{D0682937-556F-4B18-81D5-C96C07979186}']
    function describeContents: Integer;
    function toString: JString;
    { constants }
    function count: JInteger;
    function uri: JUri;
  end;

  [JavaClassSignature('android/content/ContentProviderResult')]
  TJContentProviderResult = class(TJObject, JContentProviderResult)
  private
    { methods }
    function describeContents: Integer;
    function toString: JString; reintroduce;
    { constants }
    function count: JInteger;
    function uri: JUri;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContentProviderResult; overload;
    class function Wrap(const AObject: IJNIObject): JContentProviderResult; overload;
    { constructors }
    class function Create(const AArg0: JUri): JContentProviderResult; overload;
    class function Create(const AArg0: Integer): JContentProviderResult; overload;
  end;

{ android.content.ContentResolver }

  [JavaClassSignature('android/content/ContentResolver')]
  JContentResolver = interface(JObject)
    ['{64C4DD16-AC42-46F8-A77B-D9A42FBCEBB8}']
    function applyBatch(const AArg0: JString; const AArg1: JArrayList): IJavaArray<JContentProviderResult>;
    function bulkInsert(const AArg0: JUri; const AArg1: IJavaArray<JContentValues>): Integer;
    function call(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: JBundle): JBundle;
    procedure cancelSync(const AArg0: JUri); deprecated 'Deprecated in 15';
    function canonicalize(const AArg0: JUri): JUri;
    function delete(const AArg0: JUri; const AArg1: JString; const AArg2: IJavaArray<JString>): Integer;
    function getOutgoingPersistedUriPermissions: JList;
    function getPersistedUriPermissions: JList;
    function getStreamTypes(const AArg0: JUri; const AArg1: JString): IJavaArray<JString>;
    function getType(const AArg0: JUri): JString;
    function insert(const AArg0: JUri; const AArg1: JContentValues): JUri;
    procedure notifyChange(const AArg0: JUri; const AArg1: JContentObserver; const AArg2: Boolean); overload;
    procedure notifyChange(const AArg0: JUri; const AArg1: JContentObserver; const AArg2: Integer); overload; // Introduced in 24';
    procedure notifyChange(const AArg0: JUri; const AArg1: JContentObserver); overload;
    function openAssetFileDescriptor(const AArg0: JUri; const AArg1: JString): JAssetFileDescriptor; overload;
    function openAssetFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JAssetFileDescriptor; overload;
    function openFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JParcelFileDescriptor; overload;
    function openFileDescriptor(const AArg0: JUri; const AArg1: JString): JParcelFileDescriptor; overload;
    function openInputStream(const AArg0: JUri): JInputStream;
    function openOutputStream(const AArg0: JUri; const AArg1: JString): JOutputStream; overload;
    function openOutputStream(const AArg0: JUri): JOutputStream; overload;
    function openTypedAssetFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle; const AArg3: JCancellationSignal): JAssetFileDescriptor; overload;
    function openTypedAssetFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle): JAssetFileDescriptor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JBundle; const AArg3: JCancellationSignal): JCursor; overload; // Introduced in 26';
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString; const AArg5: JCancellationSignal): JCursor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor; overload;
    function refresh(const AArg0: JUri; const AArg1: JBundle; const AArg2: JCancellationSignal): Boolean; // Introduced in 26';
    procedure registerContentObserver(const AArg0: JUri; const AArg1: Boolean; const AArg2: JContentObserver);
    procedure releasePersistableUriPermission(const AArg0: JUri; const AArg1: Integer);
    procedure startSync(const AArg0: JUri; const AArg1: JBundle); deprecated 'Deprecated in 15';
    procedure takePersistableUriPermission(const AArg0: JUri; const AArg1: Integer);
    function uncanonicalize(const AArg0: JUri): JUri;
    procedure unregisterContentObserver(const AArg0: JContentObserver);
    function update(const AArg0: JUri; const AArg1: JContentValues; const AArg2: JString; const AArg3: IJavaArray<JString>): Integer;
  end;

  [JavaClassSignature('android/content/ContentResolver')]
  TJContentResolver = class(TJObject, JContentResolver)
  private
    { methods }
    function applyBatch(const AArg0: JString; const AArg1: JArrayList): IJavaArray<JContentProviderResult>;
    function bulkInsert(const AArg0: JUri; const AArg1: IJavaArray<JContentValues>): Integer;
    function call(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: JBundle): JBundle;
    procedure cancelSync(const AArg0: JUri); deprecated 'Deprecated in 15';
    function canonicalize(const AArg0: JUri): JUri;
    function delete(const AArg0: JUri; const AArg1: JString; const AArg2: IJavaArray<JString>): Integer;
    function getOutgoingPersistedUriPermissions: JList;
    function getPersistedUriPermissions: JList;
    function getStreamTypes(const AArg0: JUri; const AArg1: JString): IJavaArray<JString>;
    function getType(const AArg0: JUri): JString;
    function insert(const AArg0: JUri; const AArg1: JContentValues): JUri;
    procedure notifyChange(const AArg0: JUri; const AArg1: JContentObserver; const AArg2: Boolean); overload;
    procedure notifyChange(const AArg0: JUri; const AArg1: JContentObserver; const AArg2: Integer); overload; // Introduced in 24';
    procedure notifyChange(const AArg0: JUri; const AArg1: JContentObserver); overload;
    function openAssetFileDescriptor(const AArg0: JUri; const AArg1: JString): JAssetFileDescriptor; overload;
    function openAssetFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JAssetFileDescriptor; overload;
    function openFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JParcelFileDescriptor; overload;
    function openFileDescriptor(const AArg0: JUri; const AArg1: JString): JParcelFileDescriptor; overload;
    function openInputStream(const AArg0: JUri): JInputStream;
    function openOutputStream(const AArg0: JUri; const AArg1: JString): JOutputStream; overload;
    function openOutputStream(const AArg0: JUri): JOutputStream; overload;
    function openTypedAssetFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle; const AArg3: JCancellationSignal): JAssetFileDescriptor; overload;
    function openTypedAssetFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle): JAssetFileDescriptor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JBundle; const AArg3: JCancellationSignal): JCursor; overload; // Introduced in 26';
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString; const AArg5: JCancellationSignal): JCursor; overload;
    function query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor; overload;
    function refresh(const AArg0: JUri; const AArg1: JBundle; const AArg2: JCancellationSignal): Boolean; // Introduced in 26';
    procedure registerContentObserver(const AArg0: JUri; const AArg1: Boolean; const AArg2: JContentObserver);
    procedure releasePersistableUriPermission(const AArg0: JUri; const AArg1: Integer);
    procedure startSync(const AArg0: JUri; const AArg1: JBundle); deprecated 'Deprecated in 15';
    procedure takePersistableUriPermission(const AArg0: JUri; const AArg1: Integer);
    function uncanonicalize(const AArg0: JUri): JUri;
    procedure unregisterContentObserver(const AArg0: JContentObserver);
    function update(const AArg0: JUri; const AArg1: JContentValues; const AArg2: JString; const AArg3: IJavaArray<JString>): Integer;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContentResolver; overload;
    class function Wrap(const AObject: IJNIObject): JContentResolver; overload;
    { constructors }
    class function Create(const AArg0: JContext): JContentResolver; overload;
    { constants }
    class function ANY_CURSOR_ITEM_TYPE: JString;
    class function CURSOR_DIR_BASE_TYPE: JString;
    class function CURSOR_ITEM_BASE_TYPE: JString;
    class function EXTRA_HONORED_ARGS: JString;
    class function EXTRA_REFRESH_SUPPORTED: JString;
    class function EXTRA_SIZE: JString;
    class function EXTRA_TOTAL_COUNT: JString;
    class function NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS: Integer;
    class function NOTIFY_SYNC_TO_NETWORK: Integer;
    class function QUERY_ARG_LIMIT: JString;
    class function QUERY_ARG_OFFSET: JString;
    class function QUERY_ARG_SORT_COLLATION: JString;
    class function QUERY_ARG_SORT_COLUMNS: JString;
    class function QUERY_ARG_SORT_DIRECTION: JString;
    class function QUERY_ARG_SQL_SELECTION: JString;
    class function QUERY_ARG_SQL_SELECTION_ARGS: JString;
    class function QUERY_ARG_SQL_SORT_ORDER: JString;
    class function QUERY_SORT_DIRECTION_ASCENDING: Integer;
    class function QUERY_SORT_DIRECTION_DESCENDING: Integer;
    class function SCHEME_ANDROID_RESOURCE: JString;
    class function SCHEME_CONTENT: JString;
    class function SCHEME_FILE: JString;
    class function SYNC_EXTRAS_ACCOUNT: JString;
    class function SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS: JString;
    class function SYNC_EXTRAS_DO_NOT_RETRY: JString;
    class function SYNC_EXTRAS_EXPEDITED: JString;
    class function SYNC_EXTRAS_FORCE: JString;
    class function SYNC_EXTRAS_IGNORE_BACKOFF: JString;
    class function SYNC_EXTRAS_IGNORE_SETTINGS: JString;
    class function SYNC_EXTRAS_INITIALIZE: JString;
    class function SYNC_EXTRAS_MANUAL: JString;
    class function SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS: JString;
    class function SYNC_EXTRAS_REQUIRE_CHARGING: JString;
    class function SYNC_EXTRAS_UPLOAD: JString;
    class function SYNC_OBSERVER_TYPE_ACTIVE: Integer;
    class function SYNC_OBSERVER_TYPE_PENDING: Integer;
    class function SYNC_OBSERVER_TYPE_SETTINGS: Integer;
    { methods }
    class function getCurrentSyncs: JList;
    class function getMasterSyncAutomatically: Boolean;
    class procedure removeStatusChangeListener(const AArg0: JObject);
    class procedure setMasterSyncAutomatically(const AArg0: Boolean);
    class procedure validateSyncExtrasBundle(const AArg0: JBundle);
  end;

{ android.content.ContentUris }

  [JavaClassSignature('android/content/ContentUris')]
  JContentUris = interface(JObject)
    ['{35D5437F-7493-4F3E-80AA-2E3174554C5F}']
  end;

  [JavaClassSignature('android/content/ContentUris')]
  TJContentUris = class(TJObject, JContentUris)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContentUris; overload;
    class function Wrap(const AObject: IJNIObject): JContentUris; overload;
    { constructors }
    class function Create: JContentUris; overload;
    { methods }
    class function parseId(const AArg0: JUri): Int64;
    class function withAppendedId(const AArg0: JUri; const AArg1: Int64): JUri;
  end;

{ android.content.ContentValues }

  [JavaClassSignature('android/content/ContentValues')]
  JContentValues = interface(JObject)
    ['{D7F35C08-9709-476C-8DCE-DC2B136E4F64}']
    procedure clear;
    function containsKey(const AArg0: JString): Boolean;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean;
    function get(const AArg0: JString): JObject;
    function getAsBoolean(const AArg0: JString): JBoolean;
    function getAsByte(const AArg0: JString): JByte;
    function getAsByteArray(const AArg0: JString): IJavaArray<Byte>;
    function getAsDouble(const AArg0: JString): JDouble;
    function getAsFloat(const AArg0: JString): JFloat;
    function getAsInteger(const AArg0: JString): JInteger;
    function getAsLong(const AArg0: JString): JLong;
    function getAsString(const AArg0: JString): JString;
    function hashCode: Integer;
    function keySet: JSet;
    procedure put(const AArg0: JString; const AArg1: JLong); overload;
    procedure put(const AArg0: JString; const AArg1: JInteger); overload;
    procedure put(const AArg0: JString; const AArg1: JByte); overload;
    procedure put(const AArg0: JString; const AArg1: JString); overload;
    procedure put(const AArg0: JString; const AArg1: JFloat); overload;
    procedure put(const AArg0: JString; const AArg1: IJavaArray<Byte>); overload;
    procedure put(const AArg0: JString; const AArg1: JBoolean); overload;
    procedure put(const AArg0: JString; const AArg1: JDouble); overload;
    procedure putAll(const AArg0: JContentValues);
    procedure putNull(const AArg0: JString);
    procedure remove(const AArg0: JString);
    function size: Integer;
    function toString: JString;
    function valueSet: JSet;
  end;

  [JavaClassSignature('android/content/ContentValues')]
  TJContentValues = class(TJObject, JContentValues)
  private
    { methods }
    procedure clear;
    function containsKey(const AArg0: JString): Boolean;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function get(const AArg0: JString): JObject;
    function getAsBoolean(const AArg0: JString): JBoolean;
    function getAsByte(const AArg0: JString): JByte;
    function getAsByteArray(const AArg0: JString): IJavaArray<Byte>;
    function getAsDouble(const AArg0: JString): JDouble;
    function getAsFloat(const AArg0: JString): JFloat;
    function getAsInteger(const AArg0: JString): JInteger;
    function getAsLong(const AArg0: JString): JLong;
    function getAsString(const AArg0: JString): JString;
    function hashCode: Integer;
    function keySet: JSet;
    procedure put(const AArg0: JString; const AArg1: JLong); overload;
    procedure put(const AArg0: JString; const AArg1: JInteger); overload;
    procedure put(const AArg0: JString; const AArg1: JByte); overload;
    procedure put(const AArg0: JString; const AArg1: JString); overload;
    procedure put(const AArg0: JString; const AArg1: JFloat); overload;
    procedure put(const AArg0: JString; const AArg1: IJavaArray<Byte>); overload;
    procedure put(const AArg0: JString; const AArg1: JBoolean); overload;
    procedure put(const AArg0: JString; const AArg1: JDouble); overload;
    procedure putAll(const AArg0: JContentValues);
    procedure putNull(const AArg0: JString);
    procedure remove(const AArg0: JString);
    function size: Integer;
    function toString: JString; reintroduce;
    function valueSet: JSet;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContentValues; overload;
    class function Wrap(const AObject: IJNIObject): JContentValues; overload;
    { constructors }
    class function Create: JContentValues; overload;
    class function Create(const AArg0: Integer): JContentValues; overload;
    class function Create(const AArg0: JContentValues): JContentValues; overload;
    { constants }
    class function TAG: JString;
  end;

{ android.content.Context }

  [JavaClassSignature('android/content/Context')]
  JContext = interface(JObject)
    ['{DB5637E3-EE8B-42FB-A93F-9EA0B63574AF}']
    function checkCallingOrSelfPermission(const AArg0: JString): Integer;
    function checkCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
    function checkCallingPermission(const AArg0: JString): Integer;
    function checkCallingUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
    function checkPermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): Integer;
    function checkSelfPermission(const AArg0: JString): Integer; // Introduced in 23';
    function checkUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Integer; overload;
    function checkUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer): Integer; overload;
    procedure clearWallpaper; deprecated 'Deprecated in 15';
    function createConfigurationContext(const AArg0: JConfiguration): JContext;
    function createContextForSplit(const AArg0: JString): JContext; // Introduced in 26';
    function createDeviceProtectedStorageContext: JContext; // Introduced in 24';
    function createDisplayContext(const AArg0: JDisplay): JContext;
    function createPackageContext(const AArg0: JString; const AArg1: Integer): JContext;
    function databaseList: IJavaArray<JString>;
    function deleteDatabase(const AArg0: JString): Boolean;
    function deleteFile(const AArg0: JString): Boolean;
    function deleteSharedPreferences(const AArg0: JString): Boolean; // Introduced in 24';
    procedure enforceCallingOrSelfPermission(const AArg0: JString; const AArg1: JString);
    procedure enforceCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
    procedure enforceCallingPermission(const AArg0: JString; const AArg1: JString);
    procedure enforceCallingUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
    procedure enforcePermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: JString);
    procedure enforceUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JString); overload;
    procedure enforceUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JString); overload;
    function fileList: IJavaArray<JString>;
    function getApplicationContext: JContext;
    function getApplicationInfo: JApplicationInfo;
    function getAssets: JAssetManager;
    function getCacheDir: JFile;
    function getCodeCacheDir: JFile;
    function getColor(const AArg0: Integer): Integer; // Introduced in 23';
    function getColorStateList(const AArg0: Integer): JColorStateList; // Introduced in 23';
    function getContentResolver: JContentResolver;
    function getDataDir: JFile; // Introduced in 24';
    function getDatabasePath(const AArg0: JString): JFile;
    function getDir(const AArg0: JString; const AArg1: Integer): JFile;
    function getDrawable(const AArg0: Integer): JDrawable;
    function getExternalCacheDir: JFile;
    function getExternalCacheDirs: IJavaArray<JFile>;
    function getExternalFilesDir(const AArg0: JString): JFile;
    function getExternalFilesDirs(const AArg0: JString): IJavaArray<JFile>;
    function getExternalMediaDirs: IJavaArray<JFile>;
    function getFileStreamPath(const AArg0: JString): JFile;
    function getFilesDir: JFile;
    function getMainLooper: JLooper;
    function getNoBackupFilesDir: JFile;
    function getObbDir: JFile;
    function getObbDirs: IJavaArray<JFile>;
    function getPackageCodePath: JString;
    function getPackageManager: JPackageManager;
    function getPackageName: JString;
    function getPackageResourcePath: JString;
    function getResources: JResources;
    function getSharedPreferences(const AArg0: JString; const AArg1: Integer): JSharedPreferences;
    function getString(const AArg0: Integer): JString; overload;
    function getString(const AArg0: Integer; const AArg1: IJavaArray<JObject>): JString; overload;
    function getSystemService(const AArg0: JClass): JObject; overload; // Introduced in 23';
    function getSystemService(const AArg0: JString): JObject; overload;
    function getSystemServiceName(const AArg0: JClass): JString; // Introduced in 23';
    function getText(const AArg0: Integer): JCharSequence;
    function getTheme: JResources_Theme;
    function getWallpaper: JDrawable; deprecated 'Deprecated in 15';
    function getWallpaperDesiredMinimumHeight: Integer; deprecated 'Deprecated in 15';
    function getWallpaperDesiredMinimumWidth: Integer; deprecated 'Deprecated in 15';
    procedure grantUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer);
    function isDeviceProtectedStorage: Boolean; // Introduced in 24';
    function isRestricted: Boolean;
    function moveDatabaseFrom(const AArg0: JContext; const AArg1: JString): Boolean; // Introduced in 24';
    function moveSharedPreferencesFrom(const AArg0: JContext; const AArg1: JString): Boolean; // Introduced in 24';
    function openFileInput(const AArg0: JString): JFileInputStream;
    function openFileOutput(const AArg0: JString; const AArg1: Integer): JFileOutputStream;
    function peekWallpaper: JDrawable; deprecated 'Deprecated in 15';
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter): JIntent; overload;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: Integer): JIntent; overload; // Introduced in 26';
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler; const AArg4: Integer): JIntent; overload; // Introduced in 26';
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler): JIntent; overload;
    procedure removeStickyBroadcast(const AArg0: JIntent); deprecated 'Deprecated in 21';
    procedure removeStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle); deprecated 'Deprecated in 21';
    procedure revokeUriPermission(const AArg0: JUri; const AArg1: Integer); overload;
    procedure revokeUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer); overload; // Introduced in 26';
    procedure sendBroadcast(const AArg0: JIntent; const AArg1: JString); overload;
    procedure sendBroadcast(const AArg0: JIntent); overload;
    procedure sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString); overload;
    procedure sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle); overload;
    procedure sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString); overload;
    procedure sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle); overload;
    procedure sendOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString; const AArg3: JBroadcastReceiver; const AArg4: JHandler; const AArg5: Integer; const AArg6: JString; const AArg7: JBundle);
    procedure sendStickyBroadcast(const AArg0: JIntent); deprecated 'Deprecated in 21';
    procedure sendStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle); deprecated 'Deprecated in 21';
    procedure sendStickyOrderedBroadcast(const AArg0: JIntent; const AArg1: JBroadcastReceiver; const AArg2: JHandler; const AArg3: Integer; const AArg4: JString; const AArg5: JBundle); deprecated 'Deprecated in 21';
    procedure sendStickyOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle); deprecated 'Deprecated in 21';
    procedure setTheme(const AArg0: Integer);
    procedure setWallpaper(const AArg0: JInputStream); overload; deprecated 'Deprecated in 15';
    procedure setWallpaper(const AArg0: JBitmap); overload; deprecated 'Deprecated in 15';
    procedure startActivities(const AArg0: IJavaArray<JIntent>); overload;
    procedure startActivities(const AArg0: IJavaArray<JIntent>; const AArg1: JBundle); overload;
    procedure startActivity(const AArg0: JIntent; const AArg1: JBundle); overload;
    procedure startActivity(const AArg0: JIntent); overload;
    function startForegroundService(const AArg0: JIntent): JComponentName; // Introduced in 26';
    function startInstrumentation(const AArg0: JComponentName; const AArg1: JString; const AArg2: JBundle): Boolean;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBundle); overload;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); overload;
    function startService(const AArg0: JIntent): JComponentName;
    function stopService(const AArg0: JIntent): Boolean;
    procedure unregisterReceiver(const AArg0: JBroadcastReceiver);
  end;

  [JavaClassSignature('android/content/Context')]
  TJContext = class(TJObject, JContext)
  private
    { methods }
    function checkCallingOrSelfPermission(const AArg0: JString): Integer;
    function checkCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
    function checkCallingPermission(const AArg0: JString): Integer;
    function checkCallingUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
    function checkPermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): Integer;
    function checkSelfPermission(const AArg0: JString): Integer; // Introduced in 23';
    function checkUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Integer; overload;
    function checkUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer): Integer; overload;
    procedure clearWallpaper; deprecated 'Deprecated in 15';
    function createConfigurationContext(const AArg0: JConfiguration): JContext;
    function createContextForSplit(const AArg0: JString): JContext; // Introduced in 26';
    function createDeviceProtectedStorageContext: JContext; // Introduced in 24';
    function createDisplayContext(const AArg0: JDisplay): JContext;
    function createPackageContext(const AArg0: JString; const AArg1: Integer): JContext;
    function databaseList: IJavaArray<JString>;
    function deleteDatabase(const AArg0: JString): Boolean;
    function deleteFile(const AArg0: JString): Boolean;
    function deleteSharedPreferences(const AArg0: JString): Boolean; // Introduced in 24';
    procedure enforceCallingOrSelfPermission(const AArg0: JString; const AArg1: JString);
    procedure enforceCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
    procedure enforceCallingPermission(const AArg0: JString; const AArg1: JString);
    procedure enforceCallingUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
    procedure enforcePermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: JString);
    procedure enforceUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JString); overload;
    procedure enforceUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JString); overload;
    function fileList: IJavaArray<JString>;
    function getApplicationContext: JContext;
    function getApplicationInfo: JApplicationInfo;
    function getAssets: JAssetManager;
    function getCacheDir: JFile;
    function getCodeCacheDir: JFile;
    function getColor(const AArg0: Integer): Integer; // Introduced in 23';
    function getColorStateList(const AArg0: Integer): JColorStateList; // Introduced in 23';
    function getContentResolver: JContentResolver;
    function getDataDir: JFile; // Introduced in 24';
    function getDatabasePath(const AArg0: JString): JFile;
    function getDir(const AArg0: JString; const AArg1: Integer): JFile;
    function getDrawable(const AArg0: Integer): JDrawable;
    function getExternalCacheDir: JFile;
    function getExternalCacheDirs: IJavaArray<JFile>;
    function getExternalFilesDir(const AArg0: JString): JFile;
    function getExternalFilesDirs(const AArg0: JString): IJavaArray<JFile>;
    function getExternalMediaDirs: IJavaArray<JFile>;
    function getFileStreamPath(const AArg0: JString): JFile;
    function getFilesDir: JFile;
    function getMainLooper: JLooper;
    function getNoBackupFilesDir: JFile;
    function getObbDir: JFile;
    function getObbDirs: IJavaArray<JFile>;
    function getPackageCodePath: JString;
    function getPackageManager: JPackageManager;
    function getPackageName: JString;
    function getPackageResourcePath: JString;
    function getResources: JResources;
    function getSharedPreferences(const AArg0: JString; const AArg1: Integer): JSharedPreferences;
    function getString(const AArg0: Integer): JString; overload;
    function getString(const AArg0: Integer; const AArg1: IJavaArray<JObject>): JString; overload;
    function getSystemService(const AArg0: JClass): JObject; overload; // Introduced in 23';
    function getSystemService(const AArg0: JString): JObject; overload;
    function getSystemServiceName(const AArg0: JClass): JString; // Introduced in 23';
    function getText(const AArg0: Integer): JCharSequence;
    function getTheme: JResources_Theme;
    function getWallpaper: JDrawable; deprecated 'Deprecated in 15';
    function getWallpaperDesiredMinimumHeight: Integer; deprecated 'Deprecated in 15';
    function getWallpaperDesiredMinimumWidth: Integer; deprecated 'Deprecated in 15';
    procedure grantUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer);
    function isDeviceProtectedStorage: Boolean; // Introduced in 24';
    function isRestricted: Boolean;
    function moveDatabaseFrom(const AArg0: JContext; const AArg1: JString): Boolean; // Introduced in 24';
    function moveSharedPreferencesFrom(const AArg0: JContext; const AArg1: JString): Boolean; // Introduced in 24';
    function openFileInput(const AArg0: JString): JFileInputStream;
    function openFileOutput(const AArg0: JString; const AArg1: Integer): JFileOutputStream;
    function peekWallpaper: JDrawable; deprecated 'Deprecated in 15';
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter): JIntent; overload;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: Integer): JIntent; overload; // Introduced in 26';
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler; const AArg4: Integer): JIntent; overload; // Introduced in 26';
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler): JIntent; overload;
    procedure removeStickyBroadcast(const AArg0: JIntent); deprecated 'Deprecated in 21';
    procedure removeStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle); deprecated 'Deprecated in 21';
    procedure revokeUriPermission(const AArg0: JUri; const AArg1: Integer); overload;
    procedure revokeUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer); overload; // Introduced in 26';
    procedure sendBroadcast(const AArg0: JIntent; const AArg1: JString); overload;
    procedure sendBroadcast(const AArg0: JIntent); overload;
    procedure sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString); overload;
    procedure sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle); overload;
    procedure sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString); overload;
    procedure sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle); overload;
    procedure sendOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString; const AArg3: JBroadcastReceiver; const AArg4: JHandler; const AArg5: Integer; const AArg6: JString; const AArg7: JBundle);
    procedure sendStickyBroadcast(const AArg0: JIntent); deprecated 'Deprecated in 21';
    procedure sendStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle); deprecated 'Deprecated in 21';
    procedure sendStickyOrderedBroadcast(const AArg0: JIntent; const AArg1: JBroadcastReceiver; const AArg2: JHandler; const AArg3: Integer; const AArg4: JString; const AArg5: JBundle); deprecated 'Deprecated in 21';
    procedure sendStickyOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle); deprecated 'Deprecated in 21';
    procedure setTheme(const AArg0: Integer);
    procedure setWallpaper(const AArg0: JInputStream); overload; deprecated 'Deprecated in 15';
    procedure setWallpaper(const AArg0: JBitmap); overload; deprecated 'Deprecated in 15';
    procedure startActivities(const AArg0: IJavaArray<JIntent>); overload;
    procedure startActivities(const AArg0: IJavaArray<JIntent>; const AArg1: JBundle); overload;
    procedure startActivity(const AArg0: JIntent; const AArg1: JBundle); overload;
    procedure startActivity(const AArg0: JIntent); overload;
    function startForegroundService(const AArg0: JIntent): JComponentName; // Introduced in 26';
    function startInstrumentation(const AArg0: JComponentName; const AArg1: JString; const AArg2: JBundle): Boolean;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBundle); overload;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); overload;
    function startService(const AArg0: JIntent): JComponentName;
    function stopService(const AArg0: JIntent): Boolean;
    procedure unregisterReceiver(const AArg0: JBroadcastReceiver);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContext; overload;
    class function Wrap(const AObject: IJNIObject): JContext; overload;
    { constructors }
    class function Create: JContext; overload;
    { constants }
    class function ACCESSIBILITY_SERVICE: JString;
    class function ACCOUNT_SERVICE: JString;
    class function ACTIVITY_SERVICE: JString;
    class function ALARM_SERVICE: JString;
    class function APPWIDGET_SERVICE: JString;
    class function APP_OPS_SERVICE: JString;
    class function AUDIO_SERVICE: JString;
    class function BATTERY_SERVICE: JString;
    class function BIND_ABOVE_CLIENT: Integer;
    class function BIND_ADJUST_WITH_ACTIVITY: Integer;
    class function BIND_ALLOW_OOM_MANAGEMENT: Integer;
    class function BIND_AUTO_CREATE: Integer;
    class function BIND_DEBUG_UNBIND: Integer;
    class function BIND_EXTERNAL_SERVICE: Integer;
    class function BIND_IMPORTANT: Integer;
    class function BIND_NOT_FOREGROUND: Integer;
    class function BIND_WAIVE_PRIORITY: Integer;
    class function BLUETOOTH_SERVICE: JString;
    class function CAMERA_SERVICE: JString;
    class function CAPTIONING_SERVICE: JString;
    class function CARRIER_CONFIG_SERVICE: JString;
    class function CLIPBOARD_SERVICE: JString;
    class function COMPANION_DEVICE_SERVICE: JString;
    class function CONNECTIVITY_SERVICE: JString;
    class function CONSUMER_IR_SERVICE: JString;
    class function CONTEXT_IGNORE_SECURITY: Integer;
    class function CONTEXT_INCLUDE_CODE: Integer;
    class function CONTEXT_RESTRICTED: Integer;
    class function CROSS_PROFILE_APPS_SERVICE: JString;
    class function DEVICE_POLICY_SERVICE: JString;
    class function DISPLAY_SERVICE: JString;
    class function DOWNLOAD_SERVICE: JString;
    class function DROPBOX_SERVICE: JString;
    class function EUICC_SERVICE: JString;
    class function FINGERPRINT_SERVICE: JString;
    class function HARDWARE_PROPERTIES_SERVICE: JString;
    class function INPUT_METHOD_SERVICE: JString;
    class function INPUT_SERVICE: JString;
    class function IPSEC_SERVICE: JString;
    class function JOB_SCHEDULER_SERVICE: JString;
    class function KEYGUARD_SERVICE: JString;
    class function LAUNCHER_APPS_SERVICE: JString;
    class function LAYOUT_INFLATER_SERVICE: JString;
    class function LOCATION_SERVICE: JString;
    class function MEDIA_PROJECTION_SERVICE: JString;
    class function MEDIA_ROUTER_SERVICE: JString;
    class function MEDIA_SESSION_SERVICE: JString;
    class function MIDI_SERVICE: JString;
    class function MODE_APPEND: Integer;
    class function MODE_ENABLE_WRITE_AHEAD_LOGGING: Integer;
    class function MODE_MULTI_PROCESS: Integer;
    class function MODE_NO_LOCALIZED_COLLATORS: Integer;
    class function MODE_PRIVATE: Integer;
    class function MODE_WORLD_READABLE: Integer;
    class function MODE_WORLD_WRITEABLE: Integer;
    class function NETWORK_STATS_SERVICE: JString;
    class function NFC_SERVICE: JString;
    class function NOTIFICATION_SERVICE: JString;
    class function NSD_SERVICE: JString;
    class function POWER_SERVICE: JString;
    class function PRINT_SERVICE: JString;
    class function RECEIVER_VISIBLE_TO_INSTANT_APPS: Integer;
    class function RESTRICTIONS_SERVICE: JString;
    class function SEARCH_SERVICE: JString;
    class function SENSOR_SERVICE: JString;
    class function SHORTCUT_SERVICE: JString;
    class function STORAGE_SERVICE: JString;
    class function STORAGE_STATS_SERVICE: JString;
    class function SYSTEM_HEALTH_SERVICE: JString;
    class function TELECOM_SERVICE: JString;
    class function TELEPHONY_SERVICE: JString;
    class function TELEPHONY_SUBSCRIPTION_SERVICE: JString;
    class function TEXT_CLASSIFICATION_SERVICE: JString;
    class function TEXT_SERVICES_MANAGER_SERVICE: JString;
    class function TV_INPUT_SERVICE: JString;
    class function UI_MODE_SERVICE: JString;
    class function USAGE_STATS_SERVICE: JString;
    class function USB_SERVICE: JString;
    class function USER_SERVICE: JString;
    class function VIBRATOR_SERVICE: JString;
    class function WALLPAPER_SERVICE: JString;
    class function WIFI_AWARE_SERVICE: JString;
    class function WIFI_P2P_SERVICE: JString;
    class function WIFI_RTT_RANGING_SERVICE: JString;
    class function WIFI_SERVICE: JString;
    class function WINDOW_SERVICE: JString;
  end;

{ android.content.ContextWrapper }

  [JavaClassSignature('android/content/ContextWrapper')]
  JContextWrapper = interface(JContext)
    ['{EF6DAFFD-D644-47D9-BA93-AFCA556B0924}']
    function checkCallingOrSelfPermission(const AArg0: JString): Integer;
    function checkCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
    function checkCallingPermission(const AArg0: JString): Integer;
    function checkCallingUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
    function checkPermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): Integer;
    function checkSelfPermission(const AArg0: JString): Integer;
    function checkUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer): Integer; overload;
    function checkUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Integer; overload;
    procedure clearWallpaper;
    function createConfigurationContext(const AArg0: JConfiguration): JContext;
    function createContextForSplit(const AArg0: JString): JContext;
    function createDeviceProtectedStorageContext: JContext;
    function createDisplayContext(const AArg0: JDisplay): JContext;
    function createPackageContext(const AArg0: JString; const AArg1: Integer): JContext;
    function databaseList: IJavaArray<JString>;
    function deleteDatabase(const AArg0: JString): Boolean;
    function deleteFile(const AArg0: JString): Boolean;
    function deleteSharedPreferences(const AArg0: JString): Boolean;
    procedure enforceCallingOrSelfPermission(const AArg0: JString; const AArg1: JString);
    procedure enforceCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
    procedure enforceCallingPermission(const AArg0: JString; const AArg1: JString);
    procedure enforceCallingUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
    procedure enforcePermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: JString);
    procedure enforceUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JString); overload;
    procedure enforceUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JString); overload;
    function fileList: IJavaArray<JString>;
    function getApplicationContext: JContext;
    function getApplicationInfo: JApplicationInfo;
    function getAssets: JAssetManager;
    function getBaseContext: JContext;
    function getCacheDir: JFile;
    function getCodeCacheDir: JFile;
    function getContentResolver: JContentResolver;
    function getDataDir: JFile;
    function getDatabasePath(const AArg0: JString): JFile;
    function getDir(const AArg0: JString; const AArg1: Integer): JFile;
    function getExternalCacheDir: JFile;
    function getExternalCacheDirs: IJavaArray<JFile>;
    function getExternalFilesDir(const AArg0: JString): JFile;
    function getExternalFilesDirs(const AArg0: JString): IJavaArray<JFile>;
    function getExternalMediaDirs: IJavaArray<JFile>;
    function getFileStreamPath(const AArg0: JString): JFile;
    function getFilesDir: JFile;
    function getMainLooper: JLooper;
    function getNoBackupFilesDir: JFile;
    function getObbDir: JFile;
    function getObbDirs: IJavaArray<JFile>;
    function getPackageCodePath: JString;
    function getPackageManager: JPackageManager;
    function getPackageName: JString;
    function getPackageResourcePath: JString;
    function getResources: JResources;
    function getSharedPreferences(const AArg0: JString; const AArg1: Integer): JSharedPreferences;
    function getSystemService(const AArg0: JString): JObject; overload;
    function getSystemServiceName(const AArg0: JClass): JString;
    function getTheme: JResources_Theme;
    function getWallpaper: JDrawable;
    function getWallpaperDesiredMinimumHeight: Integer;
    function getWallpaperDesiredMinimumWidth: Integer;
    procedure grantUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer);
    function isDeviceProtectedStorage: Boolean;
    function isRestricted: Boolean;
    function moveDatabaseFrom(const AArg0: JContext; const AArg1: JString): Boolean;
    function moveSharedPreferencesFrom(const AArg0: JContext; const AArg1: JString): Boolean;
    function openFileInput(const AArg0: JString): JFileInputStream;
    function openFileOutput(const AArg0: JString; const AArg1: Integer): JFileOutputStream;
    function peekWallpaper: JDrawable;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter): JIntent; overload;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: Integer): JIntent; overload;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler; const AArg4: Integer): JIntent; overload;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler): JIntent; overload;
    procedure removeStickyBroadcast(const AArg0: JIntent);
    procedure removeStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
    procedure revokeUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer); overload;
    procedure revokeUriPermission(const AArg0: JUri; const AArg1: Integer); overload;
    procedure sendBroadcast(const AArg0: JIntent; const AArg1: JString); overload;
    procedure sendBroadcast(const AArg0: JIntent); overload;
    procedure sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle); overload;
    procedure sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString); overload;
    procedure sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString); overload;
    procedure sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle); overload;
    procedure sendOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString; const AArg3: JBroadcastReceiver; const AArg4: JHandler; const AArg5: Integer; const AArg6: JString; const AArg7: JBundle);
    procedure sendStickyBroadcast(const AArg0: JIntent);
    procedure sendStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
    procedure sendStickyOrderedBroadcast(const AArg0: JIntent; const AArg1: JBroadcastReceiver; const AArg2: JHandler; const AArg3: Integer; const AArg4: JString; const AArg5: JBundle);
    procedure sendStickyOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle);
    procedure setTheme(const AArg0: Integer);
    procedure setWallpaper(const AArg0: JInputStream); overload;
    procedure setWallpaper(const AArg0: JBitmap); overload;
    procedure startActivities(const AArg0: IJavaArray<JIntent>; const AArg1: JBundle); overload;
    procedure startActivities(const AArg0: IJavaArray<JIntent>); overload;
    procedure startActivity(const AArg0: JIntent; const AArg1: JBundle); overload;
    procedure startActivity(const AArg0: JIntent); overload;
    function startForegroundService(const AArg0: JIntent): JComponentName;
    function startInstrumentation(const AArg0: JComponentName; const AArg1: JString; const AArg2: JBundle): Boolean;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); overload;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBundle); overload;
    function startService(const AArg0: JIntent): JComponentName;
    function stopService(const AArg0: JIntent): Boolean;
    procedure unregisterReceiver(const AArg0: JBroadcastReceiver);
  end;

  [JavaClassSignature('android/content/ContextWrapper')]
  TJContextWrapper = class(TJContext, JContextWrapper)
  private
    { methods }
    function checkCallingOrSelfPermission(const AArg0: JString): Integer;
    function checkCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
    function checkCallingPermission(const AArg0: JString): Integer;
    function checkCallingUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
    function checkPermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): Integer;
    function checkSelfPermission(const AArg0: JString): Integer;
    function checkUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer): Integer; overload;
    function checkUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Integer; overload;
    procedure clearWallpaper;
    function createConfigurationContext(const AArg0: JConfiguration): JContext;
    function createContextForSplit(const AArg0: JString): JContext;
    function createDeviceProtectedStorageContext: JContext;
    function createDisplayContext(const AArg0: JDisplay): JContext;
    function createPackageContext(const AArg0: JString; const AArg1: Integer): JContext;
    function databaseList: IJavaArray<JString>;
    function deleteDatabase(const AArg0: JString): Boolean;
    function deleteFile(const AArg0: JString): Boolean;
    function deleteSharedPreferences(const AArg0: JString): Boolean;
    procedure enforceCallingOrSelfPermission(const AArg0: JString; const AArg1: JString);
    procedure enforceCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
    procedure enforceCallingPermission(const AArg0: JString; const AArg1: JString);
    procedure enforceCallingUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
    procedure enforcePermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: JString);
    procedure enforceUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JString); overload;
    procedure enforceUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JString); overload;
    function fileList: IJavaArray<JString>;
    function getApplicationContext: JContext;
    function getApplicationInfo: JApplicationInfo;
    function getAssets: JAssetManager;
    function getBaseContext: JContext;
    function getCacheDir: JFile;
    function getCodeCacheDir: JFile;
    function getContentResolver: JContentResolver;
    function getDataDir: JFile;
    function getDatabasePath(const AArg0: JString): JFile;
    function getDir(const AArg0: JString; const AArg1: Integer): JFile;
    function getExternalCacheDir: JFile;
    function getExternalCacheDirs: IJavaArray<JFile>;
    function getExternalFilesDir(const AArg0: JString): JFile;
    function getExternalFilesDirs(const AArg0: JString): IJavaArray<JFile>;
    function getExternalMediaDirs: IJavaArray<JFile>;
    function getFileStreamPath(const AArg0: JString): JFile;
    function getFilesDir: JFile;
    function getMainLooper: JLooper;
    function getNoBackupFilesDir: JFile;
    function getObbDir: JFile;
    function getObbDirs: IJavaArray<JFile>;
    function getPackageCodePath: JString;
    function getPackageManager: JPackageManager;
    function getPackageName: JString;
    function getPackageResourcePath: JString;
    function getResources: JResources;
    function getSharedPreferences(const AArg0: JString; const AArg1: Integer): JSharedPreferences;
    function getSystemService(const AArg0: JString): JObject; overload;
    function getSystemServiceName(const AArg0: JClass): JString;
    function getTheme: JResources_Theme;
    function getWallpaper: JDrawable;
    function getWallpaperDesiredMinimumHeight: Integer;
    function getWallpaperDesiredMinimumWidth: Integer;
    procedure grantUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer);
    function isDeviceProtectedStorage: Boolean;
    function isRestricted: Boolean;
    function moveDatabaseFrom(const AArg0: JContext; const AArg1: JString): Boolean;
    function moveSharedPreferencesFrom(const AArg0: JContext; const AArg1: JString): Boolean;
    function openFileInput(const AArg0: JString): JFileInputStream;
    function openFileOutput(const AArg0: JString; const AArg1: Integer): JFileOutputStream;
    function peekWallpaper: JDrawable;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter): JIntent; overload;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: Integer): JIntent; overload;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler; const AArg4: Integer): JIntent; overload;
    function registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler): JIntent; overload;
    procedure removeStickyBroadcast(const AArg0: JIntent);
    procedure removeStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
    procedure revokeUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer); overload;
    procedure revokeUriPermission(const AArg0: JUri; const AArg1: Integer); overload;
    procedure sendBroadcast(const AArg0: JIntent; const AArg1: JString); overload;
    procedure sendBroadcast(const AArg0: JIntent); overload;
    procedure sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle); overload;
    procedure sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString); overload;
    procedure sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString); overload;
    procedure sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle); overload;
    procedure sendOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString; const AArg3: JBroadcastReceiver; const AArg4: JHandler; const AArg5: Integer; const AArg6: JString; const AArg7: JBundle);
    procedure sendStickyBroadcast(const AArg0: JIntent);
    procedure sendStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
    procedure sendStickyOrderedBroadcast(const AArg0: JIntent; const AArg1: JBroadcastReceiver; const AArg2: JHandler; const AArg3: Integer; const AArg4: JString; const AArg5: JBundle);
    procedure sendStickyOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle);
    procedure setTheme(const AArg0: Integer);
    procedure setWallpaper(const AArg0: JInputStream); overload;
    procedure setWallpaper(const AArg0: JBitmap); overload;
    procedure startActivities(const AArg0: IJavaArray<JIntent>; const AArg1: JBundle); overload;
    procedure startActivities(const AArg0: IJavaArray<JIntent>); overload;
    procedure startActivity(const AArg0: JIntent; const AArg1: JBundle); overload;
    procedure startActivity(const AArg0: JIntent); overload;
    function startForegroundService(const AArg0: JIntent): JComponentName;
    function startInstrumentation(const AArg0: JComponentName; const AArg1: JString; const AArg2: JBundle): Boolean;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); overload;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBundle); overload;
    function startService(const AArg0: JIntent): JComponentName;
    function stopService(const AArg0: JIntent): Boolean;
    procedure unregisterReceiver(const AArg0: JBroadcastReceiver);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContextWrapper; overload;
    class function Wrap(const AObject: IJNIObject): JContextWrapper; overload;
    { constructors }
    class function Create(const AArg0: JContext): JContextWrapper; overload;
  end;

{ android.view.ContextThemeWrapper }

  [JavaClassSignature('android/view/ContextThemeWrapper')]
  JContextThemeWrapper = interface(JContextWrapper)
    ['{0D3B331A-B744-4F13-8010-DC4C274DDBFF}']
    procedure applyOverrideConfiguration(const AArg0: JConfiguration);
    function getAssets: JAssetManager;
    function getResources: JResources;
    function getSystemService(const AArg0: JString): JObject; overload;
    function getTheme: JResources_Theme;
    procedure setTheme(const AArg0: Integer);
  end;

  [JavaClassSignature('android/view/ContextThemeWrapper')]
  TJContextThemeWrapper = class(TJContextWrapper, JContextThemeWrapper)
  private
    { methods }
    procedure applyOverrideConfiguration(const AArg0: JConfiguration);
    function getAssets: JAssetManager;
    function getResources: JResources;
    function getSystemService(const AArg0: JString): JObject; overload;
    function getTheme: JResources_Theme;
    procedure setTheme(const AArg0: Integer);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContextThemeWrapper; overload;
    class function Wrap(const AObject: IJNIObject): JContextThemeWrapper; overload;
    { constructors }
    class function Create: JContextThemeWrapper; overload;
    class function Create(const AArg0: JContext; const AArg1: Integer): JContextThemeWrapper; overload;
    class function Create(const AArg0: JContext; const AArg1: JResources_Theme): JContextThemeWrapper; overload;
  end;

{ android.app.Activity }

  [JavaClassSignature('android/app/Activity')]
  JActivity = interface(JContextThemeWrapper)
    ['{C2E7F103-164C-459F-B699-FBFBE487BD98}']
    procedure addContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
    procedure closeContextMenu;
    procedure closeOptionsMenu;
    function createPendingResult(const AArg0: Integer; const AArg1: JIntent; const AArg2: Integer): JPendingIntent;
    procedure dismissDialog(const AArg0: Integer); deprecated 'Deprecated in 15';
    procedure dismissKeyboardShortcutsHelper; // Introduced in 24';
    function dispatchGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
    procedure enterPictureInPictureMode; deprecated 'Deprecated in 26';
    function findViewById(const AArg0: Integer): JView;
    procedure finish;
    procedure finishActivity(const AArg0: Integer);
    procedure finishActivityFromChild(const AArg0: JActivity; const AArg1: Integer);
    procedure finishAffinity;
    procedure finishAfterTransition;
    procedure finishAndRemoveTask;
    procedure finishFromChild(const AArg0: JActivity);
    function getCallingActivity: JComponentName;
    function getCallingPackage: JString;
    function getChangingConfigurations: Integer;
    function getComponentName: JComponentName;
    function getCurrentFocus: JView;
    function getFragmentManager: JFragmentManager; deprecated 'Deprecated in 28';
    function getIntent: JIntent;
    function getLastNonConfigurationInstance: JObject; deprecated 'Deprecated in 15';
    function getLayoutInflater: JLayoutInflater;
    function getLocalClassName: JString;
    function getMaxNumPictureInPictureActions: Integer; // Introduced in 26';
    function getParent: JActivity;
    function getParentActivityIntent: JIntent;
    function getPreferences(const AArg0: Integer): JSharedPreferences;
    function getReferrer: JUri; // Introduced in 22';
    function getRequestedOrientation: Integer;
    function getSystemService(const AArg0: JString): JObject; overload;
    function getTaskId: Integer;
    function getTitle: JCharSequence;
    function getTitleColor: Integer;
    function getVolumeControlStream: Integer;
    function getWindow: JWindow;
    function getWindowManager: JWindowManager;
    function hasWindowFocus: Boolean;
    procedure invalidateOptionsMenu;
    function isActivityTransitionRunning: Boolean; // Introduced in 26';
    function isChangingConfigurations: Boolean;
    function isChild: Boolean;
    function isDestroyed: Boolean;
    function isFinishing: Boolean;
    function isImmersive: Boolean;
    function isInMultiWindowMode: Boolean; // Introduced in 24';
    function isInPictureInPictureMode: Boolean; // Introduced in 24';
    function isLocalVoiceInteractionSupported: Boolean; // Introduced in 24';
    function isTaskRoot: Boolean;
    function isVoiceInteraction: Boolean; // Introduced in 23';
    function isVoiceInteractionRoot: Boolean; // Introduced in 23';
    function managedQuery(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor; deprecated 'Deprecated in 15';
    function moveTaskToBack(const AArg0: Boolean): Boolean;
    function navigateUpTo(const AArg0: JIntent): Boolean;
    function navigateUpToFromChild(const AArg0: JActivity; const AArg1: JIntent): Boolean;
    procedure onActivityReenter(const AArg0: Integer; const AArg1: JIntent);
    procedure onAttachFragment(const AArg0: JFragment); deprecated 'Deprecated in 28';
    procedure onAttachedToWindow;
    procedure onBackPressed;
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    procedure onContentChanged;
    function onContextItemSelected(const AArg0: JMenuItem): Boolean;
    procedure onContextMenuClosed(const AArg0: JMenu);
    procedure onCreate(const AArg0: JBundle; const AArg1: JPersistableBundle);
    function onCreateDescription: JCharSequence;
    function onCreateOptionsMenu(const AArg0: JMenu): Boolean;
    function onCreatePanelMenu(const AArg0: Integer; const AArg1: JMenu): Boolean;
    function onCreatePanelView(const AArg0: Integer): JView;
    function onCreateThumbnail(const AArg0: JBitmap; const AArg1: JCanvas): Boolean; deprecated 'Deprecated in 28';
    function onCreateView(const AArg0: JString; const AArg1: JContext; const AArg2: JAttributeSet): JView; overload;
    function onCreateView(const AArg0: JView; const AArg1: JString; const AArg2: JContext; const AArg3: JAttributeSet): JView; overload;
    procedure onDetachedFromWindow;
    procedure onEnterAnimationComplete;
    function onGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    function onKeyDown(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyLongPress(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyMultiple(const AArg0: Integer; const AArg1: Integer; const AArg2: JKeyEvent): Boolean;
    function onKeyShortcut(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyUp(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    procedure onLocalVoiceInteractionStarted; // Introduced in 24';
    procedure onLocalVoiceInteractionStopped; // Introduced in 24';
    procedure onLowMemory;
    function onMenuItemSelected(const AArg0: Integer; const AArg1: JMenuItem): Boolean;
    function onMenuOpened(const AArg0: Integer; const AArg1: JMenu): Boolean;
    procedure onMultiWindowModeChanged(const AArg0: Boolean; const AArg1: JConfiguration); overload; // Introduced in 26';
    procedure onMultiWindowModeChanged(const AArg0: Boolean); overload; deprecated 'Deprecated in 26';
    function onNavigateUp: Boolean;
    function onNavigateUpFromChild(const AArg0: JActivity): Boolean;
    function onOptionsItemSelected(const AArg0: JMenuItem): Boolean;
    procedure onOptionsMenuClosed(const AArg0: JMenu);
    procedure onPanelClosed(const AArg0: Integer; const AArg1: JMenu);
    procedure onPictureInPictureModeChanged(const AArg0: Boolean); overload; deprecated 'Deprecated in 26';
    procedure onPictureInPictureModeChanged(const AArg0: Boolean; const AArg1: JConfiguration); overload; // Introduced in 26';
    procedure onPostCreate(const AArg0: JBundle; const AArg1: JPersistableBundle);
    function onPrepareOptionsMenu(const AArg0: JMenu): Boolean;
    function onPreparePanel(const AArg0: Integer; const AArg1: JView; const AArg2: JMenu): Boolean;
    procedure onProvideAssistData(const AArg0: JBundle);
    procedure onProvideKeyboardShortcuts(const AArg0: JList; const AArg1: JMenu; const AArg2: Integer);
    function onProvideReferrer: JUri; // Introduced in 23';
    procedure onRequestPermissionsResult(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: IJavaArray<Integer>); // Introduced in 23';
    procedure onRestoreInstanceState(const AArg0: JBundle; const AArg1: JPersistableBundle);
    function onRetainNonConfigurationInstance: JObject; deprecated 'Deprecated in 15';
    procedure onSaveInstanceState(const AArg0: JBundle; const AArg1: JPersistableBundle);
    function onSearchRequested: Boolean;
    procedure onStateNotSaved; deprecated 'Deprecated in 29';
    function onTouchEvent(const AArg0: JMotionEvent): Boolean;
    function onTrackballEvent(const AArg0: JMotionEvent): Boolean;
    procedure onTrimMemory(const AArg0: Integer);
    procedure onUserInteraction;
    procedure onVisibleBehindCanceled; deprecated 'Deprecated in 26';
    procedure onWindowAttributesChanged(const AArg0: JWindowManager_LayoutParams);
    procedure onWindowFocusChanged(const AArg0: Boolean);
    procedure openContextMenu(const AArg0: JView);
    procedure openOptionsMenu;
    procedure overridePendingTransition(const AArg0: Integer; const AArg1: Integer);
    procedure postponeEnterTransition;
    procedure recreate;
    procedure registerForContextMenu(const AArg0: JView);
    function releaseInstance: Boolean;
    procedure removeDialog(const AArg0: Integer); deprecated 'Deprecated in 15';
    procedure reportFullyDrawn;
    function requestDragAndDropPermissions(const AArg0: JDragEvent): JDragAndDropPermissions; // Introduced in 24';
    procedure requestPermissions(const AArg0: IJavaArray<JString>; const AArg1: Integer); // Introduced in 23';
    procedure requestShowKeyboardShortcuts; // Introduced in 24';
    function requestVisibleBehind(const AArg0: Boolean): Boolean; deprecated 'Deprecated in 26';
    function requestWindowFeature(const AArg0: Integer): Boolean;
    function requireViewById(const AArg0: Integer): JView; // Introduced in 28';
    procedure runOnUiThread(const AArg0: JRunnable);
    procedure setActionBar(const AArg0: JObject {JToolbar});
    procedure setContentView(const AArg0: Integer); overload;
    procedure setContentView(const AArg0: JView); overload;
    procedure setContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams); overload;
    procedure setDefaultKeyMode(const AArg0: Integer);
    procedure setFeatureDrawable(const AArg0: Integer; const AArg1: JDrawable);
    procedure setFeatureDrawableAlpha(const AArg0: Integer; const AArg1: Integer);
    procedure setFeatureDrawableResource(const AArg0: Integer; const AArg1: Integer);
    procedure setFeatureDrawableUri(const AArg0: Integer; const AArg1: JUri);
    procedure setFinishOnTouchOutside(const AArg0: Boolean);
    procedure setImmersive(const AArg0: Boolean);
    procedure setIntent(const AArg0: JIntent);
    procedure setProgress(const AArg0: Integer); deprecated 'Deprecated in 24';
    procedure setProgressBarIndeterminate(const AArg0: Boolean); deprecated 'Deprecated in 24';
    procedure setProgressBarIndeterminateVisibility(const AArg0: Boolean); deprecated 'Deprecated in 24';
    procedure setProgressBarVisibility(const AArg0: Boolean); deprecated 'Deprecated in 24';
    procedure setRequestedOrientation(const AArg0: Integer);
    procedure setResult(const AArg0: Integer); overload;
    procedure setResult(const AArg0: Integer; const AArg1: JIntent); overload;
    procedure setSecondaryProgress(const AArg0: Integer); deprecated 'Deprecated in 24';
    procedure setShowWhenLocked(const AArg0: Boolean); // Introduced in 27';
    procedure setTaskDescription(const AArg0: JActivityManager_TaskDescription);
    procedure setTheme(const AArg0: Integer);
    procedure setTitle(const AArg0: JCharSequence); overload;
    procedure setTitle(const AArg0: Integer); overload;
    procedure setTitleColor(const AArg0: Integer); deprecated 'Deprecated in 21';
    procedure setTurnScreenOn(const AArg0: Boolean); // Introduced in 27';
    procedure setVisible(const AArg0: Boolean);
    procedure setVolumeControlStream(const AArg0: Integer);
    procedure setVrModeEnabled(const AArg0: Boolean; const AArg1: JComponentName); // Introduced in 24';
    function shouldShowRequestPermissionRationale(const AArg0: JString): Boolean; // Introduced in 23';
    function shouldUpRecreateTask(const AArg0: JIntent): Boolean;
    function showAssist(const AArg0: JBundle): Boolean; // Introduced in 23';
    function showDialog(const AArg0: Integer; const AArg1: JBundle): Boolean; overload; deprecated 'Deprecated in 15';
    procedure showDialog(const AArg0: Integer); overload; deprecated 'Deprecated in 15';
    procedure showLockTaskEscapeMessage; // Introduced in 23';
    procedure startActivities(const AArg0: IJavaArray<JIntent>; const AArg1: JBundle); overload;
    procedure startActivities(const AArg0: IJavaArray<JIntent>); overload;
    procedure startActivity(const AArg0: JIntent); overload;
    procedure startActivity(const AArg0: JIntent; const AArg1: JBundle); overload;
    procedure startActivityForResult(const AArg0: JIntent; const AArg1: Integer); overload;
    procedure startActivityForResult(const AArg0: JIntent; const AArg1: Integer; const AArg2: JBundle); overload;
    procedure startActivityFromChild(const AArg0: JActivity; const AArg1: JIntent; const AArg2: Integer); overload;
    procedure startActivityFromChild(const AArg0: JActivity; const AArg1: JIntent; const AArg2: Integer; const AArg3: JBundle); overload;
    procedure startActivityFromFragment(const AArg0: JFragment; const AArg1: JIntent; const AArg2: Integer; const AArg3: JBundle); overload; deprecated 'Deprecated in 28';
    procedure startActivityFromFragment(const AArg0: JFragment; const AArg1: JIntent; const AArg2: Integer); overload; deprecated 'Deprecated in 28';
    function startActivityIfNeeded(const AArg0: JIntent; const AArg1: Integer; const AArg2: JBundle): Boolean; overload;
    function startActivityIfNeeded(const AArg0: JIntent; const AArg1: Integer): Boolean; overload;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); overload;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBundle); overload;
    procedure startIntentSenderForResult(const AArg0: JIntentSender; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer); overload;
    procedure startIntentSenderForResult(const AArg0: JIntentSender; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JBundle); overload;
    procedure startIntentSenderFromChild(const AArg0: JActivity; const AArg1: JIntentSender; const AArg2: Integer; const AArg3: JIntent; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer); overload;
    procedure startIntentSenderFromChild(const AArg0: JActivity; const AArg1: JIntentSender; const AArg2: Integer; const AArg3: JIntent; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: JBundle); overload;
    procedure startLocalVoiceInteraction(const AArg0: JBundle); // Introduced in 24';
    procedure startLockTask;
    procedure startManagingCursor(const AArg0: JCursor); deprecated 'Deprecated in 15';
    function startNextMatchingActivity(const AArg0: JIntent): Boolean; overload;
    function startNextMatchingActivity(const AArg0: JIntent; const AArg1: JBundle): Boolean; overload;
    procedure startPostponedEnterTransition;
    procedure startSearch(const AArg0: JString; const AArg1: Boolean; const AArg2: JBundle; const AArg3: Boolean);
    procedure stopLocalVoiceInteraction; // Introduced in 24';
    procedure stopLockTask;
    procedure stopManagingCursor(const AArg0: JCursor); deprecated 'Deprecated in 15';
    procedure takeKeyEvents(const AArg0: Boolean);
    procedure triggerSearch(const AArg0: JString; const AArg1: JBundle);
    procedure unregisterForContextMenu(const AArg0: JView);
  end;

  [JavaClassSignature('android/app/Activity')]
  TJActivity = class(TJContextThemeWrapper, JActivity)
  private
    { methods }
    procedure addContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
    procedure closeContextMenu;
    procedure closeOptionsMenu;
    function createPendingResult(const AArg0: Integer; const AArg1: JIntent; const AArg2: Integer): JPendingIntent;
    procedure dismissDialog(const AArg0: Integer); deprecated 'Deprecated in 15';
    procedure dismissKeyboardShortcutsHelper; // Introduced in 24';
    function dispatchGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
    procedure enterPictureInPictureMode; deprecated 'Deprecated in 26';
    function findViewById(const AArg0: Integer): JView;
    procedure finish;
    procedure finishActivity(const AArg0: Integer);
    procedure finishActivityFromChild(const AArg0: JActivity; const AArg1: Integer);
    procedure finishAffinity;
    procedure finishAfterTransition;
    procedure finishAndRemoveTask;
    procedure finishFromChild(const AArg0: JActivity);
    function getCallingActivity: JComponentName;
    function getCallingPackage: JString;
    function getChangingConfigurations: Integer;
    function getComponentName: JComponentName;
    function getCurrentFocus: JView;
    function getFragmentManager: JFragmentManager; deprecated 'Deprecated in 28';
    function getIntent: JIntent;
    function getLastNonConfigurationInstance: JObject; deprecated 'Deprecated in 15';
    function getLayoutInflater: JLayoutInflater;
    function getLocalClassName: JString;
    function getMaxNumPictureInPictureActions: Integer; // Introduced in 26';
    function getParent: JActivity;
    function getParentActivityIntent: JIntent;
    function getPreferences(const AArg0: Integer): JSharedPreferences;
    function getReferrer: JUri; // Introduced in 22';
    function getRequestedOrientation: Integer;
    function getSystemService(const AArg0: JString): JObject; overload;
    function getTaskId: Integer;
    function getTitle: JCharSequence;
    function getTitleColor: Integer;
    function getVolumeControlStream: Integer;
    function getWindow: JWindow;
    function getWindowManager: JWindowManager;
    function hasWindowFocus: Boolean;
    procedure invalidateOptionsMenu;
    function isActivityTransitionRunning: Boolean; // Introduced in 26';
    function isChangingConfigurations: Boolean;
    function isChild: Boolean;
    function isDestroyed: Boolean;
    function isFinishing: Boolean;
    function isImmersive: Boolean;
    function isInMultiWindowMode: Boolean; // Introduced in 24';
    function isInPictureInPictureMode: Boolean; // Introduced in 24';
    function isLocalVoiceInteractionSupported: Boolean; // Introduced in 24';
    function isTaskRoot: Boolean;
    function isVoiceInteraction: Boolean; // Introduced in 23';
    function isVoiceInteractionRoot: Boolean; // Introduced in 23';
    function managedQuery(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor; deprecated 'Deprecated in 15';
    function moveTaskToBack(const AArg0: Boolean): Boolean;
    function navigateUpTo(const AArg0: JIntent): Boolean;
    function navigateUpToFromChild(const AArg0: JActivity; const AArg1: JIntent): Boolean;
    procedure onActivityReenter(const AArg0: Integer; const AArg1: JIntent);
    procedure onAttachFragment(const AArg0: JFragment); deprecated 'Deprecated in 28';
    procedure onAttachedToWindow;
    procedure onBackPressed;
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    procedure onContentChanged;
    function onContextItemSelected(const AArg0: JMenuItem): Boolean;
    procedure onContextMenuClosed(const AArg0: JMenu);
    procedure onCreate(const AArg0: JBundle; const AArg1: JPersistableBundle);
    function onCreateDescription: JCharSequence;
    function onCreateOptionsMenu(const AArg0: JMenu): Boolean;
    function onCreatePanelMenu(const AArg0: Integer; const AArg1: JMenu): Boolean;
    function onCreatePanelView(const AArg0: Integer): JView;
    function onCreateThumbnail(const AArg0: JBitmap; const AArg1: JCanvas): Boolean; deprecated 'Deprecated in 28';
    function onCreateView(const AArg0: JString; const AArg1: JContext; const AArg2: JAttributeSet): JView; overload;
    function onCreateView(const AArg0: JView; const AArg1: JString; const AArg2: JContext; const AArg3: JAttributeSet): JView; overload;
    procedure onDetachedFromWindow;
    procedure onEnterAnimationComplete;
    function onGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    function onKeyDown(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyLongPress(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyMultiple(const AArg0: Integer; const AArg1: Integer; const AArg2: JKeyEvent): Boolean;
    function onKeyShortcut(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyUp(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    procedure onLocalVoiceInteractionStarted; // Introduced in 24';
    procedure onLocalVoiceInteractionStopped; // Introduced in 24';
    procedure onLowMemory;
    function onMenuItemSelected(const AArg0: Integer; const AArg1: JMenuItem): Boolean;
    function onMenuOpened(const AArg0: Integer; const AArg1: JMenu): Boolean;
    procedure onMultiWindowModeChanged(const AArg0: Boolean; const AArg1: JConfiguration); overload; // Introduced in 26';
    procedure onMultiWindowModeChanged(const AArg0: Boolean); overload; deprecated 'Deprecated in 26';
    function onNavigateUp: Boolean;
    function onNavigateUpFromChild(const AArg0: JActivity): Boolean;
    function onOptionsItemSelected(const AArg0: JMenuItem): Boolean;
    procedure onOptionsMenuClosed(const AArg0: JMenu);
    procedure onPanelClosed(const AArg0: Integer; const AArg1: JMenu);
    procedure onPictureInPictureModeChanged(const AArg0: Boolean); overload; deprecated 'Deprecated in 26';
    procedure onPictureInPictureModeChanged(const AArg0: Boolean; const AArg1: JConfiguration); overload; // Introduced in 26';
    procedure onPostCreate(const AArg0: JBundle; const AArg1: JPersistableBundle);
    function onPrepareOptionsMenu(const AArg0: JMenu): Boolean;
    function onPreparePanel(const AArg0: Integer; const AArg1: JView; const AArg2: JMenu): Boolean;
    procedure onProvideAssistData(const AArg0: JBundle);
    procedure onProvideKeyboardShortcuts(const AArg0: JList; const AArg1: JMenu; const AArg2: Integer);
    function onProvideReferrer: JUri; // Introduced in 23';
    procedure onRequestPermissionsResult(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: IJavaArray<Integer>); // Introduced in 23';
    procedure onRestoreInstanceState(const AArg0: JBundle; const AArg1: JPersistableBundle);
    function onRetainNonConfigurationInstance: JObject; deprecated 'Deprecated in 15';
    procedure onSaveInstanceState(const AArg0: JBundle; const AArg1: JPersistableBundle);
    function onSearchRequested: Boolean;
    procedure onStateNotSaved; deprecated 'Deprecated in 29';
    function onTouchEvent(const AArg0: JMotionEvent): Boolean;
    function onTrackballEvent(const AArg0: JMotionEvent): Boolean;
    procedure onTrimMemory(const AArg0: Integer);
    procedure onUserInteraction;
    procedure onVisibleBehindCanceled; deprecated 'Deprecated in 26';
    procedure onWindowAttributesChanged(const AArg0: JWindowManager_LayoutParams);
    procedure onWindowFocusChanged(const AArg0: Boolean);
    procedure openContextMenu(const AArg0: JView);
    procedure openOptionsMenu;
    procedure overridePendingTransition(const AArg0: Integer; const AArg1: Integer);
    procedure postponeEnterTransition;
    procedure recreate;
    procedure registerForContextMenu(const AArg0: JView);
    function releaseInstance: Boolean;
    procedure removeDialog(const AArg0: Integer); deprecated 'Deprecated in 15';
    procedure reportFullyDrawn;
    function requestDragAndDropPermissions(const AArg0: JDragEvent): JDragAndDropPermissions; // Introduced in 24';
    procedure requestPermissions(const AArg0: IJavaArray<JString>; const AArg1: Integer); // Introduced in 23';
    procedure requestShowKeyboardShortcuts; // Introduced in 24';
    function requestVisibleBehind(const AArg0: Boolean): Boolean; deprecated 'Deprecated in 26';
    function requestWindowFeature(const AArg0: Integer): Boolean;
    function requireViewById(const AArg0: Integer): JView; // Introduced in 28';
    procedure runOnUiThread(const AArg0: JRunnable);
    procedure setActionBar(const AArg0: JObject {JToolbar});
    procedure setContentView(const AArg0: Integer); overload;
    procedure setContentView(const AArg0: JView); overload;
    procedure setContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams); overload;
    procedure setDefaultKeyMode(const AArg0: Integer);
    procedure setFeatureDrawable(const AArg0: Integer; const AArg1: JDrawable);
    procedure setFeatureDrawableAlpha(const AArg0: Integer; const AArg1: Integer);
    procedure setFeatureDrawableResource(const AArg0: Integer; const AArg1: Integer);
    procedure setFeatureDrawableUri(const AArg0: Integer; const AArg1: JUri);
    procedure setFinishOnTouchOutside(const AArg0: Boolean);
    procedure setImmersive(const AArg0: Boolean);
    procedure setIntent(const AArg0: JIntent);
    procedure setProgress(const AArg0: Integer); deprecated 'Deprecated in 24';
    procedure setProgressBarIndeterminate(const AArg0: Boolean); deprecated 'Deprecated in 24';
    procedure setProgressBarIndeterminateVisibility(const AArg0: Boolean); deprecated 'Deprecated in 24';
    procedure setProgressBarVisibility(const AArg0: Boolean); deprecated 'Deprecated in 24';
    procedure setRequestedOrientation(const AArg0: Integer);
    procedure setResult(const AArg0: Integer); overload;
    procedure setResult(const AArg0: Integer; const AArg1: JIntent); overload;
    procedure setSecondaryProgress(const AArg0: Integer); deprecated 'Deprecated in 24';
    procedure setShowWhenLocked(const AArg0: Boolean); // Introduced in 27';
    procedure setTaskDescription(const AArg0: JActivityManager_TaskDescription);
    procedure setTheme(const AArg0: Integer);
    procedure setTitle(const AArg0: JCharSequence); overload;
    procedure setTitle(const AArg0: Integer); overload;
    procedure setTitleColor(const AArg0: Integer); deprecated 'Deprecated in 21';
    procedure setTurnScreenOn(const AArg0: Boolean); // Introduced in 27';
    procedure setVisible(const AArg0: Boolean);
    procedure setVolumeControlStream(const AArg0: Integer);
    procedure setVrModeEnabled(const AArg0: Boolean; const AArg1: JComponentName); // Introduced in 24';
    function shouldShowRequestPermissionRationale(const AArg0: JString): Boolean; // Introduced in 23';
    function shouldUpRecreateTask(const AArg0: JIntent): Boolean;
    function showAssist(const AArg0: JBundle): Boolean; // Introduced in 23';
    function showDialog(const AArg0: Integer; const AArg1: JBundle): Boolean; overload; deprecated 'Deprecated in 15';
    procedure showDialog(const AArg0: Integer); overload; deprecated 'Deprecated in 15';
    procedure showLockTaskEscapeMessage; // Introduced in 23';
    procedure startActivities(const AArg0: IJavaArray<JIntent>; const AArg1: JBundle); overload;
    procedure startActivities(const AArg0: IJavaArray<JIntent>); overload;
    procedure startActivity(const AArg0: JIntent); overload;
    procedure startActivity(const AArg0: JIntent; const AArg1: JBundle); overload;
    procedure startActivityForResult(const AArg0: JIntent; const AArg1: Integer); overload;
    procedure startActivityForResult(const AArg0: JIntent; const AArg1: Integer; const AArg2: JBundle); overload;
    procedure startActivityFromChild(const AArg0: JActivity; const AArg1: JIntent; const AArg2: Integer); overload;
    procedure startActivityFromChild(const AArg0: JActivity; const AArg1: JIntent; const AArg2: Integer; const AArg3: JBundle); overload;
    procedure startActivityFromFragment(const AArg0: JFragment; const AArg1: JIntent; const AArg2: Integer; const AArg3: JBundle); overload; deprecated 'Deprecated in 28';
    procedure startActivityFromFragment(const AArg0: JFragment; const AArg1: JIntent; const AArg2: Integer); overload; deprecated 'Deprecated in 28';
    function startActivityIfNeeded(const AArg0: JIntent; const AArg1: Integer; const AArg2: JBundle): Boolean; overload;
    function startActivityIfNeeded(const AArg0: JIntent; const AArg1: Integer): Boolean; overload;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); overload;
    procedure startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBundle); overload;
    procedure startIntentSenderForResult(const AArg0: JIntentSender; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer); overload;
    procedure startIntentSenderForResult(const AArg0: JIntentSender; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JBundle); overload;
    procedure startIntentSenderFromChild(const AArg0: JActivity; const AArg1: JIntentSender; const AArg2: Integer; const AArg3: JIntent; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer); overload;
    procedure startIntentSenderFromChild(const AArg0: JActivity; const AArg1: JIntentSender; const AArg2: Integer; const AArg3: JIntent; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: JBundle); overload;
    procedure startLocalVoiceInteraction(const AArg0: JBundle); // Introduced in 24';
    procedure startLockTask;
    procedure startManagingCursor(const AArg0: JCursor); deprecated 'Deprecated in 15';
    function startNextMatchingActivity(const AArg0: JIntent): Boolean; overload;
    function startNextMatchingActivity(const AArg0: JIntent; const AArg1: JBundle): Boolean; overload;
    procedure startPostponedEnterTransition;
    procedure startSearch(const AArg0: JString; const AArg1: Boolean; const AArg2: JBundle; const AArg3: Boolean);
    procedure stopLocalVoiceInteraction; // Introduced in 24';
    procedure stopLockTask;
    procedure stopManagingCursor(const AArg0: JCursor); deprecated 'Deprecated in 15';
    procedure takeKeyEvents(const AArg0: Boolean);
    procedure triggerSearch(const AArg0: JString; const AArg1: JBundle);
    procedure unregisterForContextMenu(const AArg0: JView);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JActivity; overload;
    class function Wrap(const AObject: IJNIObject): JActivity; overload;
    { constructors }
    class function Create: JActivity; overload;
    { constants }
    class function DEFAULT_KEYS_DIALER: Integer;
    class function DEFAULT_KEYS_DISABLE: Integer;
    class function DEFAULT_KEYS_SEARCH_GLOBAL: Integer;
    class function DEFAULT_KEYS_SEARCH_LOCAL: Integer;
    class function DEFAULT_KEYS_SHORTCUT: Integer;
    class function RESULT_CANCELED: Integer;
    class function RESULT_FIRST_USER: Integer;
    class function RESULT_OK: Integer;
  end;

{ android.app.Service }

  [JavaClassSignature('android/app/Service')]
  JService = interface(JContextWrapper)
    ['{AF63456D-3A75-48E5-8822-CA807FC285DE}']
    function onBind(const AArg0: JIntent): JIBinder;
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    procedure onCreate;
    procedure onDestroy;
    procedure onLowMemory;
    procedure onRebind(const AArg0: JIntent);
    procedure onStart(const AArg0: JIntent; const AArg1: Integer); deprecated 'Deprecated in 15';
    function onStartCommand(const AArg0: JIntent; const AArg1: Integer; const AArg2: Integer): Integer;
    procedure onTaskRemoved(const AArg0: JIntent);
    procedure onTrimMemory(const AArg0: Integer);
    function onUnbind(const AArg0: JIntent): Boolean;
    procedure startForeground(const AArg0: Integer; const AArg1: JObject {JNotification});
    procedure stopForeground(const AArg0: Integer); overload; // Introduced in 24';
    procedure stopForeground(const AArg0: Boolean); overload;
    procedure stopSelf(const AArg0: Integer); overload;
    procedure stopSelf; overload;
    function stopSelfResult(const AArg0: Integer): Boolean;
  end;

  [JavaClassSignature('android/app/Service')]
  TJService = class(TJContextWrapper, JService)
  private
    { methods }
    function onBind(const AArg0: JIntent): JIBinder;
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    procedure onCreate;
    procedure onDestroy;
    procedure onLowMemory;
    procedure onRebind(const AArg0: JIntent);
    procedure onStart(const AArg0: JIntent; const AArg1: Integer); deprecated 'Deprecated in 15';
    function onStartCommand(const AArg0: JIntent; const AArg1: Integer; const AArg2: Integer): Integer;
    procedure onTaskRemoved(const AArg0: JIntent);
    procedure onTrimMemory(const AArg0: Integer);
    function onUnbind(const AArg0: JIntent): Boolean;
    procedure startForeground(const AArg0: Integer; const AArg1: JObject {JNotification});
    procedure stopForeground(const AArg0: Integer); overload; // Introduced in 24';
    procedure stopForeground(const AArg0: Boolean); overload;
    procedure stopSelf(const AArg0: Integer); overload;
    procedure stopSelf; overload;
    function stopSelfResult(const AArg0: Integer): Boolean;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JService; overload;
    class function Wrap(const AObject: IJNIObject): JService; overload;
    { constructors }
    class function Create: JService; overload;
    { constants }
    class function START_CONTINUATION_MASK: Integer;
    class function START_FLAG_REDELIVERY: Integer;
    class function START_FLAG_RETRY: Integer;
    class function START_NOT_STICKY: Integer;
    class function START_REDELIVER_INTENT: Integer;
    class function START_STICKY: Integer;
    class function START_STICKY_COMPATIBILITY: Integer;
    class function STOP_FOREGROUND_DETACH: Integer;
    class function STOP_FOREGROUND_REMOVE: Integer;
  end;

{ android.app.IntentService }

  [JavaClassSignature('android/app/IntentService')]
  JIntentService = interface(JService)
    ['{63E94F97-4D19-4374-B284-85515761A1F5}']
    function onBind(const AArg0: JIntent): JIBinder;
    procedure onCreate;
    procedure onDestroy;
    procedure onStart(const AArg0: JIntent; const AArg1: Integer);
    function onStartCommand(const AArg0: JIntent; const AArg1: Integer; const AArg2: Integer): Integer;
    procedure setIntentRedelivery(const AArg0: Boolean);
  end;

  [JavaClassSignature('android/app/IntentService')]
  TJIntentService = class(TJService, JIntentService)
  private
    { methods }
    function onBind(const AArg0: JIntent): JIBinder;
    procedure onCreate;
    procedure onDestroy;
    procedure onStart(const AArg0: JIntent; const AArg1: Integer);
    function onStartCommand(const AArg0: JIntent; const AArg1: Integer; const AArg2: Integer): Integer;
    procedure setIntentRedelivery(const AArg0: Boolean);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JIntentService; overload;
    class function Wrap(const AObject: IJNIObject): JIntentService; overload;
    { constructors }
    class function Create(const AArg0: JString): JIntentService; overload;
  end;

{ android.content.Intent }

  [JavaClassSignature('android/content/Intent')]
  JIntent = interface(JObject)
    ['{6FB17E42-44C9-4016-BB56-43F5EE737D92}']
    function addCategory(const AArg0: JString): JIntent;
    function addFlags(const AArg0: Integer): JIntent;
    function clone: JObject;
    function cloneFilter: JIntent;
    function describeContents: Integer;
    function fillIn(const AArg0: JIntent; const AArg1: Integer): Integer;
    function filterEquals(const AArg0: JIntent): Boolean;
    function filterHashCode: Integer;
    function getAction: JString;
    function getBooleanArrayExtra(const AArg0: JString): IJavaArray<Boolean>;
    function getBooleanExtra(const AArg0: JString; const AArg1: Boolean): Boolean;
    function getBundleExtra(const AArg0: JString): JBundle;
    function getByteArrayExtra(const AArg0: JString): IJavaArray<Byte>;
    function getByteExtra(const AArg0: JString; const AArg1: Byte): Byte;
    function getCategories: JSet;
    function getCharArrayExtra(const AArg0: JString): IJavaArray<Char>;
    function getCharExtra(const AArg0: JString; const AArg1: Char): Char;
    function getCharSequenceArrayExtra(const AArg0: JString): IJavaArray<JCharSequence>;
    function getCharSequenceArrayListExtra(const AArg0: JString): JArrayList;
    function getCharSequenceExtra(const AArg0: JString): JCharSequence;
    function getClipData: JClipData;
    function getComponent: JComponentName;
    function getData: JUri;
    function getDataString: JString;
    function getDoubleArrayExtra(const AArg0: JString): IJavaArray<Double>;
    function getDoubleExtra(const AArg0: JString; const AArg1: Double): Double;
    function getExtras: JBundle;
    function getFlags: Integer;
    function getFloatArrayExtra(const AArg0: JString): IJavaArray<Single>;
    function getFloatExtra(const AArg0: JString; const AArg1: Single): Single;
    function getIntArrayExtra(const AArg0: JString): IJavaArray<Integer>;
    function getIntExtra(const AArg0: JString; const AArg1: Integer): Integer;
    function getIntegerArrayListExtra(const AArg0: JString): JArrayList;
    function getLongArrayExtra(const AArg0: JString): IJavaArray<Int64>;
    function getLongExtra(const AArg0: JString; const AArg1: Int64): Int64;
    function getPackage: JString;
    function getParcelableArrayExtra(const AArg0: JString): IJavaArray<JParcelable>;
    function getParcelableArrayListExtra(const AArg0: JString): JArrayList;
    function getParcelableExtra(const AArg0: JString): JParcelable;
    function getScheme: JString;
    function getSelector: JIntent;
    function getShortArrayExtra(const AArg0: JString): IJavaArray<ShortInt>;
    function getShortExtra(const AArg0: JString; const AArg1: ShortInt): ShortInt;
    function getSourceBounds: JRect;
    function getStringArrayExtra(const AArg0: JString): IJavaArray<JString>;
    function getStringArrayListExtra(const AArg0: JString): JArrayList;
    function getStringExtra(const AArg0: JString): JString;
    function getType: JString;
    function hasCategory(const AArg0: JString): Boolean;
    function hasExtra(const AArg0: JString): Boolean;
    function hasFileDescriptors: Boolean;
    function putCharSequenceArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Boolean>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Byte>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: JString): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<JParcelable>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: JCharSequence): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: JParcelable): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Double>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<JString>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<JCharSequence>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: JBundle): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Single>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<ShortInt>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Char>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Integer>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Int64>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Byte): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Boolean): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Char): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: ShortInt): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Double): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Single): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Int64): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Integer): JIntent; overload;
    function putExtras(const AArg0: JIntent): JIntent; overload;
    function putExtras(const AArg0: JBundle): JIntent; overload;
    function putIntegerArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
    function putParcelableArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
    function putStringArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
    procedure removeCategory(const AArg0: JString);
    procedure removeExtra(const AArg0: JString);
    procedure removeFlags(const AArg0: Integer); // Introduced in 26';
    function replaceExtras(const AArg0: JIntent): JIntent; overload;
    function replaceExtras(const AArg0: JBundle): JIntent; overload;
    function resolveActivity(const AArg0: JPackageManager): JComponentName;
    function resolveActivityInfo(const AArg0: JPackageManager; const AArg1: Integer): JActivityInfo;
    function resolveType(const AArg0: JContext): JString; overload;
    function resolveType(const AArg0: JContentResolver): JString; overload;
    function resolveTypeIfNeeded(const AArg0: JContentResolver): JString;
    function setAction(const AArg0: JString): JIntent;
    function setClass(const AArg0: JContext; const AArg1: JClass): JIntent;
    function setClassName(const AArg0: JContext; const AArg1: JString): JIntent; overload;
    function setClassName(const AArg0: JString; const AArg1: JString): JIntent; overload;
    procedure setClipData(const AArg0: JClipData);
    function setComponent(const AArg0: JComponentName): JIntent;
    function setData(const AArg0: JUri): JIntent;
    function setDataAndNormalize(const AArg0: JUri): JIntent;
    function setDataAndType(const AArg0: JUri; const AArg1: JString): JIntent;
    function setDataAndTypeAndNormalize(const AArg0: JUri; const AArg1: JString): JIntent;
    function setFlags(const AArg0: Integer): JIntent;
    function setPackage(const AArg0: JString): JIntent;
    procedure setSelector(const AArg0: JIntent);
    procedure setSourceBounds(const AArg0: JRect);
    function setType(const AArg0: JString): JIntent;
    function setTypeAndNormalize(const AArg0: JString): JIntent;
    function toString: JString;
    function toURI: JString; overload; deprecated 'Deprecated in 15';
    function toUri(const AArg0: Integer): JString; overload;
  end;

  [JavaClassSignature('android/content/Intent')]
  TJIntent = class(TJObject, JIntent)
  private
    { methods }
    function addCategory(const AArg0: JString): JIntent;
    function addFlags(const AArg0: Integer): JIntent;
    function clone: JObject;
    function cloneFilter: JIntent;
    function describeContents: Integer;
    function fillIn(const AArg0: JIntent; const AArg1: Integer): Integer;
    function filterEquals(const AArg0: JIntent): Boolean;
    function filterHashCode: Integer;
    function getAction: JString;
    function getBooleanArrayExtra(const AArg0: JString): IJavaArray<Boolean>;
    function getBooleanExtra(const AArg0: JString; const AArg1: Boolean): Boolean;
    function getBundleExtra(const AArg0: JString): JBundle;
    function getByteArrayExtra(const AArg0: JString): IJavaArray<Byte>;
    function getByteExtra(const AArg0: JString; const AArg1: Byte): Byte;
    function getCategories: JSet;
    function getCharArrayExtra(const AArg0: JString): IJavaArray<Char>;
    function getCharExtra(const AArg0: JString; const AArg1: Char): Char;
    function getCharSequenceArrayExtra(const AArg0: JString): IJavaArray<JCharSequence>;
    function getCharSequenceArrayListExtra(const AArg0: JString): JArrayList;
    function getCharSequenceExtra(const AArg0: JString): JCharSequence;
    function getClipData: JClipData;
    function getComponent: JComponentName;
    function getData: JUri;
    function getDataString: JString;
    function getDoubleArrayExtra(const AArg0: JString): IJavaArray<Double>;
    function getDoubleExtra(const AArg0: JString; const AArg1: Double): Double;
    function getExtras: JBundle;
    function getFlags: Integer;
    function getFloatArrayExtra(const AArg0: JString): IJavaArray<Single>;
    function getFloatExtra(const AArg0: JString; const AArg1: Single): Single;
    function getIntArrayExtra(const AArg0: JString): IJavaArray<Integer>;
    function getIntExtra(const AArg0: JString; const AArg1: Integer): Integer;
    function getIntegerArrayListExtra(const AArg0: JString): JArrayList;
    function getLongArrayExtra(const AArg0: JString): IJavaArray<Int64>;
    function getLongExtra(const AArg0: JString; const AArg1: Int64): Int64;
    function getPackage: JString;
    function getParcelableArrayExtra(const AArg0: JString): IJavaArray<JParcelable>;
    function getParcelableArrayListExtra(const AArg0: JString): JArrayList;
    function getParcelableExtra(const AArg0: JString): JParcelable;
    function getScheme: JString;
    function getSelector: JIntent;
    function getShortArrayExtra(const AArg0: JString): IJavaArray<ShortInt>;
    function getShortExtra(const AArg0: JString; const AArg1: ShortInt): ShortInt;
    function getSourceBounds: JRect;
    function getStringArrayExtra(const AArg0: JString): IJavaArray<JString>;
    function getStringArrayListExtra(const AArg0: JString): JArrayList;
    function getStringExtra(const AArg0: JString): JString;
    function getType: JString;
    function hasCategory(const AArg0: JString): Boolean;
    function hasExtra(const AArg0: JString): Boolean;
    function hasFileDescriptors: Boolean;
    function putCharSequenceArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Boolean>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Byte>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: JString): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<JParcelable>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: JCharSequence): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: JParcelable): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Double>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<JString>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<JCharSequence>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: JBundle): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Single>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<ShortInt>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Char>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Integer>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: IJavaArray<Int64>): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Byte): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Boolean): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Char): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: ShortInt): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Double): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Single): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Int64): JIntent; overload;
    function putExtra(const AArg0: JString; const AArg1: Integer): JIntent; overload;
    function putExtras(const AArg0: JIntent): JIntent; overload;
    function putExtras(const AArg0: JBundle): JIntent; overload;
    function putIntegerArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
    function putParcelableArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
    function putStringArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
    procedure removeCategory(const AArg0: JString);
    procedure removeExtra(const AArg0: JString);
    procedure removeFlags(const AArg0: Integer); // Introduced in 26';
    function replaceExtras(const AArg0: JIntent): JIntent; overload;
    function replaceExtras(const AArg0: JBundle): JIntent; overload;
    function resolveActivity(const AArg0: JPackageManager): JComponentName;
    function resolveActivityInfo(const AArg0: JPackageManager; const AArg1: Integer): JActivityInfo;
    function resolveType(const AArg0: JContext): JString; overload;
    function resolveType(const AArg0: JContentResolver): JString; overload;
    function resolveTypeIfNeeded(const AArg0: JContentResolver): JString;
    function setAction(const AArg0: JString): JIntent;
    function setClass(const AArg0: JContext; const AArg1: JClass): JIntent;
    function setClassName(const AArg0: JContext; const AArg1: JString): JIntent; overload;
    function setClassName(const AArg0: JString; const AArg1: JString): JIntent; overload;
    procedure setClipData(const AArg0: JClipData);
    function setComponent(const AArg0: JComponentName): JIntent;
    function setData(const AArg0: JUri): JIntent;
    function setDataAndNormalize(const AArg0: JUri): JIntent;
    function setDataAndType(const AArg0: JUri; const AArg1: JString): JIntent;
    function setDataAndTypeAndNormalize(const AArg0: JUri; const AArg1: JString): JIntent;
    function setFlags(const AArg0: Integer): JIntent;
    function setPackage(const AArg0: JString): JIntent;
    procedure setSelector(const AArg0: JIntent);
    procedure setSourceBounds(const AArg0: JRect);
    function setType(const AArg0: JString): JIntent;
    function setTypeAndNormalize(const AArg0: JString): JIntent;
    function toString: JString; reintroduce;
    function toURI: JString; overload; deprecated 'Deprecated in 15';
    function toUri(const AArg0: Integer): JString; overload;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JIntent; overload;
    class function Wrap(const AObject: IJNIObject): JIntent; overload;
    { constructors }
    class function Create: JIntent; overload;
    class function Create(const AArg0: JIntent): JIntent; overload;
    class function Create(const AArg0: JString): JIntent; overload;
    class function Create(const AArg0: JString; const AArg1: JUri): JIntent; overload;
    class function Create(const AArg0: JContext; const AArg1: JClass): JIntent; overload;
    class function Create(const AArg0: JString; const AArg1: JUri; const AArg2: JContext; const AArg3: JClass): JIntent; overload;
    { constants }
    class function ACTION_AIRPLANE_MODE_CHANGED: JString;
    class function ACTION_ALL_APPS: JString;
    class function ACTION_ANSWER: JString;
    class function ACTION_APPLICATION_PREFERENCES: JString;
    class function ACTION_APPLICATION_RESTRICTIONS_CHANGED: JString;
    class function ACTION_APP_ERROR: JString;
    class function ACTION_ASSIST: JString;
    class function ACTION_ATTACH_DATA: JString;
    class function ACTION_BATTERY_CHANGED: JString;
    class function ACTION_BATTERY_LOW: JString;
    class function ACTION_BATTERY_OKAY: JString;
    class function ACTION_BOOT_COMPLETED: JString;
    class function ACTION_BUG_REPORT: JString;
    class function ACTION_CALL: JString;
    class function ACTION_CALL_BUTTON: JString;
    class function ACTION_CAMERA_BUTTON: JString;
    class function ACTION_CARRIER_SETUP: JString;
    class function ACTION_CHOOSER: JString;
    class function ACTION_CLOSE_SYSTEM_DIALOGS: JString;
    class function ACTION_CONFIGURATION_CHANGED: JString;
    class function ACTION_CREATE_DOCUMENT: JString;
    class function ACTION_CREATE_SHORTCUT: JString;
    class function ACTION_DATE_CHANGED: JString;
    class function ACTION_DEFAULT: JString;
    class function ACTION_DELETE: JString;
    class function ACTION_DEVICE_STORAGE_LOW: JString;
    class function ACTION_DEVICE_STORAGE_OK: JString;
    class function ACTION_DIAL: JString;
    class function ACTION_DOCK_EVENT: JString;
    class function ACTION_DREAMING_STARTED: JString;
    class function ACTION_DREAMING_STOPPED: JString;
    class function ACTION_EDIT: JString;
    class function ACTION_EXTERNAL_APPLICATIONS_AVAILABLE: JString;
    class function ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE: JString;
    class function ACTION_FACTORY_TEST: JString;
    class function ACTION_GET_CONTENT: JString;
    class function ACTION_GET_RESTRICTION_ENTRIES: JString;
    class function ACTION_GTALK_SERVICE_CONNECTED: JString;
    class function ACTION_GTALK_SERVICE_DISCONNECTED: JString;
    class function ACTION_HEADSET_PLUG: JString;
    class function ACTION_INPUT_METHOD_CHANGED: JString;
    class function ACTION_INSERT: JString;
    class function ACTION_INSERT_OR_EDIT: JString;
    class function ACTION_INSTALL_FAILURE: JString;
    class function ACTION_INSTALL_PACKAGE: JString;
    class function ACTION_LOCALE_CHANGED: JString;
    class function ACTION_LOCKED_BOOT_COMPLETED: JString;
    class function ACTION_MAIN: JString;
    class function ACTION_MANAGED_PROFILE_ADDED: JString;
    class function ACTION_MANAGED_PROFILE_AVAILABLE: JString;
    class function ACTION_MANAGED_PROFILE_REMOVED: JString;
    class function ACTION_MANAGED_PROFILE_UNAVAILABLE: JString;
    class function ACTION_MANAGED_PROFILE_UNLOCKED: JString;
    class function ACTION_MANAGE_NETWORK_USAGE: JString;
    class function ACTION_MANAGE_PACKAGE_STORAGE: JString;
    class function ACTION_MEDIA_BAD_REMOVAL: JString;
    class function ACTION_MEDIA_BUTTON: JString;
    class function ACTION_MEDIA_CHECKING: JString;
    class function ACTION_MEDIA_EJECT: JString;
    class function ACTION_MEDIA_MOUNTED: JString;
    class function ACTION_MEDIA_NOFS: JString;
    class function ACTION_MEDIA_REMOVED: JString;
    class function ACTION_MEDIA_SCANNER_FINISHED: JString;
    class function ACTION_MEDIA_SCANNER_SCAN_FILE: JString;
    class function ACTION_MEDIA_SCANNER_STARTED: JString;
    class function ACTION_MEDIA_SHARED: JString;
    class function ACTION_MEDIA_UNMOUNTABLE: JString;
    class function ACTION_MEDIA_UNMOUNTED: JString;
    class function ACTION_MY_PACKAGE_REPLACED: JString;
    class function ACTION_MY_PACKAGE_SUSPENDED: JString;
    class function ACTION_MY_PACKAGE_UNSUSPENDED: JString;
    class function ACTION_NEW_OUTGOING_CALL: JString;
    class function ACTION_OPEN_DOCUMENT: JString;
    class function ACTION_OPEN_DOCUMENT_TREE: JString;
    class function ACTION_PACKAGES_SUSPENDED: JString;
    class function ACTION_PACKAGES_UNSUSPENDED: JString;
    class function ACTION_PACKAGE_ADDED: JString;
    class function ACTION_PACKAGE_CHANGED: JString;
    class function ACTION_PACKAGE_DATA_CLEARED: JString;
    class function ACTION_PACKAGE_FIRST_LAUNCH: JString;
    class function ACTION_PACKAGE_FULLY_REMOVED: JString;
    class function ACTION_PACKAGE_INSTALL: JString;
    class function ACTION_PACKAGE_NEEDS_VERIFICATION: JString;
    class function ACTION_PACKAGE_REMOVED: JString;
    class function ACTION_PACKAGE_REPLACED: JString;
    class function ACTION_PACKAGE_RESTARTED: JString;
    class function ACTION_PACKAGE_VERIFIED: JString;
    class function ACTION_PASTE: JString;
    class function ACTION_PICK: JString;
    class function ACTION_PICK_ACTIVITY: JString;
    class function ACTION_POWER_CONNECTED: JString;
    class function ACTION_POWER_DISCONNECTED: JString;
    class function ACTION_POWER_USAGE_SUMMARY: JString;
    class function ACTION_PROCESS_TEXT: JString;
    class function ACTION_PROVIDER_CHANGED: JString;
    class function ACTION_QUICK_CLOCK: JString;
    class function ACTION_QUICK_VIEW: JString;
    class function ACTION_REBOOT: JString;
    class function ACTION_RUN: JString;
    class function ACTION_SCREEN_OFF: JString;
    class function ACTION_SCREEN_ON: JString;
    class function ACTION_SEARCH: JString;
    class function ACTION_SEARCH_LONG_PRESS: JString;
    class function ACTION_SEND: JString;
    class function ACTION_SENDTO: JString;
    class function ACTION_SEND_MULTIPLE: JString;
    class function ACTION_SET_WALLPAPER: JString;
    class function ACTION_SHOW_APP_INFO: JString;
    class function ACTION_SHUTDOWN: JString;
    class function ACTION_SYNC: JString;
    class function ACTION_SYSTEM_TUTORIAL: JString;
    class function ACTION_TIMEZONE_CHANGED: JString;
    class function ACTION_TIME_CHANGED: JString;
    class function ACTION_TIME_TICK: JString;
    class function ACTION_UID_REMOVED: JString;
    class function ACTION_UMS_CONNECTED: JString;
    class function ACTION_UMS_DISCONNECTED: JString;
    class function ACTION_UNINSTALL_PACKAGE: JString;
    class function ACTION_USER_BACKGROUND: JString;
    class function ACTION_USER_FOREGROUND: JString;
    class function ACTION_USER_INITIALIZE: JString;
    class function ACTION_USER_PRESENT: JString;
    class function ACTION_USER_UNLOCKED: JString;
    class function ACTION_VIEW: JString;
    class function ACTION_VOICE_COMMAND: JString;
    class function ACTION_WALLPAPER_CHANGED: JString;
    class function ACTION_WEB_SEARCH: JString;
    class function CATEGORY_ALTERNATIVE: JString;
    class function CATEGORY_APP_BROWSER: JString;
    class function CATEGORY_APP_CALCULATOR: JString;
    class function CATEGORY_APP_CALENDAR: JString;
    class function CATEGORY_APP_CONTACTS: JString;
    class function CATEGORY_APP_EMAIL: JString;
    class function CATEGORY_APP_GALLERY: JString;
    class function CATEGORY_APP_MAPS: JString;
    class function CATEGORY_APP_MARKET: JString;
    class function CATEGORY_APP_MESSAGING: JString;
    class function CATEGORY_APP_MUSIC: JString;
    class function CATEGORY_BROWSABLE: JString;
    class function CATEGORY_CAR_DOCK: JString;
    class function CATEGORY_CAR_MODE: JString;
    class function CATEGORY_DEFAULT: JString;
    class function CATEGORY_DESK_DOCK: JString;
    class function CATEGORY_DEVELOPMENT_PREFERENCE: JString;
    class function CATEGORY_EMBED: JString;
    class function CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: JString;
    class function CATEGORY_HE_DESK_DOCK: JString;
    class function CATEGORY_HOME: JString;
    class function CATEGORY_INFO: JString;
    class function CATEGORY_LAUNCHER: JString;
    class function CATEGORY_LEANBACK_LAUNCHER: JString;
    class function CATEGORY_LE_DESK_DOCK: JString;
    class function CATEGORY_MONKEY: JString;
    class function CATEGORY_OPENABLE: JString;
    class function CATEGORY_PREFERENCE: JString;
    class function CATEGORY_SAMPLE_CODE: JString;
    class function CATEGORY_SELECTED_ALTERNATIVE: JString;
    class function CATEGORY_TAB: JString;
    class function CATEGORY_TEST: JString;
    class function CATEGORY_TYPED_OPENABLE: JString;
    class function CATEGORY_UNIT_TEST: JString;
    class function CATEGORY_VOICE: JString;
    class function CATEGORY_VR_HOME: JString;
    class function EXTRA_ALARM_COUNT: JString;
    class function EXTRA_ALLOW_MULTIPLE: JString;
    class function EXTRA_ALLOW_REPLACE: JString;
    class function EXTRA_ALTERNATE_INTENTS: JString;
    class function EXTRA_ASSIST_CONTEXT: JString;
    class function EXTRA_ASSIST_INPUT_DEVICE_ID: JString;
    class function EXTRA_ASSIST_INPUT_HINT_KEYBOARD: JString;
    class function EXTRA_ASSIST_PACKAGE: JString;
    class function EXTRA_ASSIST_UID: JString;
    class function EXTRA_BCC: JString;
    class function EXTRA_BUG_REPORT: JString;
    class function EXTRA_CC: JString;
    class function EXTRA_CHANGED_COMPONENT_NAME: JString;
    class function EXTRA_CHANGED_COMPONENT_NAME_LIST: JString;
    class function EXTRA_CHANGED_PACKAGE_LIST: JString;
    class function EXTRA_CHANGED_UID_LIST: JString;
    class function EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER: JString;
    class function EXTRA_CHOOSER_TARGETS: JString;
    class function EXTRA_CHOSEN_COMPONENT: JString;
    class function EXTRA_CHOSEN_COMPONENT_INTENT_SENDER: JString;
    class function EXTRA_COMPONENT_NAME: JString;
    class function EXTRA_CONTENT_ANNOTATIONS: JString;
    class function EXTRA_DATA_REMOVED: JString;
    class function EXTRA_DOCK_STATE: JString;
    class function EXTRA_DOCK_STATE_CAR: Integer;
    class function EXTRA_DOCK_STATE_DESK: Integer;
    class function EXTRA_DOCK_STATE_HE_DESK: Integer;
    class function EXTRA_DOCK_STATE_LE_DESK: Integer;
    class function EXTRA_DOCK_STATE_UNDOCKED: Integer;
    class function EXTRA_DONT_KILL_APP: JString;
    class function EXTRA_EMAIL: JString;
    class function EXTRA_EXCLUDE_COMPONENTS: JString;
    class function EXTRA_FROM_STORAGE: JString;
    class function EXTRA_HTML_TEXT: JString;
    class function EXTRA_INDEX: JString;
    class function EXTRA_INITIAL_INTENTS: JString;
    class function EXTRA_INSTALLER_PACKAGE_NAME: JString;
    class function EXTRA_INTENT: JString;
    class function EXTRA_KEY_EVENT: JString;
    class function EXTRA_LOCAL_ONLY: JString;
    class function EXTRA_MIME_TYPES: JString;
    class function EXTRA_NOT_UNKNOWN_SOURCE: JString;
    class function EXTRA_ORIGINATING_URI: JString;
    class function EXTRA_PACKAGE_NAME: JString;
    class function EXTRA_PHONE_NUMBER: JString;
    class function EXTRA_PROCESS_TEXT: JString;
    class function EXTRA_PROCESS_TEXT_READONLY: JString;
    class function EXTRA_QUICK_VIEW_FEATURES: JString;
    class function EXTRA_QUIET_MODE: JString;
    class function EXTRA_REFERRER: JString;
    class function EXTRA_REFERRER_NAME: JString;
    class function EXTRA_REMOTE_INTENT_TOKEN: JString;
    class function EXTRA_REPLACEMENT_EXTRAS: JString;
    class function EXTRA_REPLACING: JString;
    class function EXTRA_RESTRICTIONS_BUNDLE: JString;
    class function EXTRA_RESTRICTIONS_INTENT: JString;
    class function EXTRA_RESTRICTIONS_LIST: JString;
    class function EXTRA_RESULT_RECEIVER: JString;
    class function EXTRA_RETURN_RESULT: JString;
    class function EXTRA_SHORTCUT_ICON: JString;
    class function EXTRA_SHORTCUT_ICON_RESOURCE: JString;
    class function EXTRA_SHORTCUT_INTENT: JString;
    class function EXTRA_SHORTCUT_NAME: JString;
    class function EXTRA_SHUTDOWN_USERSPACE_ONLY: JString;
    class function EXTRA_SPLIT_NAME: JString;
    class function EXTRA_STREAM: JString;
    class function EXTRA_SUBJECT: JString;
    class function EXTRA_SUSPENDED_PACKAGE_EXTRAS: JString;
    class function EXTRA_TEMPLATE: JString;
    class function EXTRA_TEXT: JString;
    class function EXTRA_TITLE: JString;
    class function EXTRA_UID: JString;
    class function EXTRA_USER: JString;
    class function FILL_IN_ACTION: Integer;
    class function FILL_IN_CATEGORIES: Integer;
    class function FILL_IN_CLIP_DATA: Integer;
    class function FILL_IN_COMPONENT: Integer;
    class function FILL_IN_DATA: Integer;
    class function FILL_IN_PACKAGE: Integer;
    class function FILL_IN_SELECTOR: Integer;
    class function FILL_IN_SOURCE_BOUNDS: Integer;
    class function FLAG_ACTIVITY_BROUGHT_TO_FRONT: Integer;
    class function FLAG_ACTIVITY_CLEAR_TASK: Integer;
    class function FLAG_ACTIVITY_CLEAR_TOP: Integer;
    class function FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: Integer;
    class function FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: Integer;
    class function FLAG_ACTIVITY_FORWARD_RESULT: Integer;
    class function FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: Integer;
    class function FLAG_ACTIVITY_LAUNCH_ADJACENT: Integer;
    class function FLAG_ACTIVITY_MATCH_EXTERNAL: Integer;
    class function FLAG_ACTIVITY_MULTIPLE_TASK: Integer;
    class function FLAG_ACTIVITY_NEW_DOCUMENT: Integer;
    class function FLAG_ACTIVITY_NEW_TASK: Integer;
    class function FLAG_ACTIVITY_NO_ANIMATION: Integer;
    class function FLAG_ACTIVITY_NO_HISTORY: Integer;
    class function FLAG_ACTIVITY_NO_USER_ACTION: Integer;
    class function FLAG_ACTIVITY_PREVIOUS_IS_TOP: Integer;
    class function FLAG_ACTIVITY_REORDER_TO_FRONT: Integer;
    class function FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: Integer;
    class function FLAG_ACTIVITY_RETAIN_IN_RECENTS: Integer;
    class function FLAG_ACTIVITY_SINGLE_TOP: Integer;
    class function FLAG_ACTIVITY_TASK_ON_HOME: Integer;
    class function FLAG_DEBUG_LOG_RESOLUTION: Integer;
    class function FLAG_EXCLUDE_STOPPED_PACKAGES: Integer;
    class function FLAG_FROM_BACKGROUND: Integer;
    class function FLAG_GRANT_PERSISTABLE_URI_PERMISSION: Integer;
    class function FLAG_GRANT_PREFIX_URI_PERMISSION: Integer;
    class function FLAG_GRANT_READ_URI_PERMISSION: Integer;
    class function FLAG_GRANT_WRITE_URI_PERMISSION: Integer;
    class function FLAG_INCLUDE_STOPPED_PACKAGES: Integer;
    class function FLAG_RECEIVER_FOREGROUND: Integer;
    class function FLAG_RECEIVER_NO_ABORT: Integer;
    class function FLAG_RECEIVER_REGISTERED_ONLY: Integer;
    class function FLAG_RECEIVER_REPLACE_PENDING: Integer;
    class function FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS: Integer;
    class function METADATA_DOCK_HOME: JString;
    class function URI_ALLOW_UNSAFE: Integer;
    class function URI_ANDROID_APP_SCHEME: Integer;
    class function URI_INTENT_SCHEME: Integer;
    { methods }
    class function createChooser(const AArg0: JIntent; const AArg1: JCharSequence): JIntent; overload;
    class function createChooser(const AArg0: JIntent; const AArg1: JCharSequence; const AArg2: JIntentSender): JIntent; overload; // Introduced in 22';
    class function getIntent(const AArg0: JString): JIntent; deprecated 'Deprecated in 15';
    class function getIntentOld(const AArg0: JString): JIntent;
    class function makeMainActivity(const AArg0: JComponentName): JIntent;
    class function makeMainSelectorActivity(const AArg0: JString; const AArg1: JString): JIntent;
    class function makeRestartActivityTask(const AArg0: JComponentName): JIntent;
    class function normalizeMimeType(const AArg0: JString): JString;
    class function parseUri(const AArg0: JString; const AArg1: Integer): JIntent;
  end;

{ android.content.IntentFilter }

  [JavaClassSignature('android/content/IntentFilter')]
  JIntentFilter = interface(JObject)
    ['{8AA7A3F9-3C0D-4D8B-9E3A-735E46D49C07}']
    function actionsIterator: JIterator;
    procedure addAction(const AArg0: JString);
    procedure addCategory(const AArg0: JString);
    procedure addDataAuthority(const AArg0: JString; const AArg1: JString);
    procedure addDataPath(const AArg0: JString; const AArg1: Integer);
    procedure addDataScheme(const AArg0: JString);
    procedure addDataSchemeSpecificPart(const AArg0: JString; const AArg1: Integer);
    procedure addDataType(const AArg0: JString);
    function authoritiesIterator: JIterator;
    function categoriesIterator: JIterator;
    function countActions: Integer;
    function countCategories: Integer;
    function countDataAuthorities: Integer;
    function countDataPaths: Integer;
    function countDataSchemeSpecificParts: Integer;
    function countDataSchemes: Integer;
    function countDataTypes: Integer;
    function describeContents: Integer;
    function getAction(const AArg0: Integer): JString;
    function getCategory(const AArg0: Integer): JString;
    function getDataAuthority(const AArg0: Integer): JIntentFilter_AuthorityEntry;
    function getDataPath(const AArg0: Integer): JPatternMatcher;
    function getDataScheme(const AArg0: Integer): JString;
    function getDataSchemeSpecificPart(const AArg0: Integer): JPatternMatcher;
    function getDataType(const AArg0: Integer): JString;
    function getPriority: Integer;
    function hasAction(const AArg0: JString): Boolean;
    function hasCategory(const AArg0: JString): Boolean;
    function hasDataAuthority(const AArg0: JUri): Boolean;
    function hasDataPath(const AArg0: JString): Boolean;
    function hasDataScheme(const AArg0: JString): Boolean;
    function hasDataSchemeSpecificPart(const AArg0: JString): Boolean;
    function hasDataType(const AArg0: JString): Boolean;
    function match(const AArg0: JString; const AArg1: JString; const AArg2: JString; const AArg3: JUri; const AArg4: JSet; const AArg5: JString): Integer; overload;
    function match(const AArg0: JContentResolver; const AArg1: JIntent; const AArg2: Boolean; const AArg3: JString): Integer; overload;
    function matchAction(const AArg0: JString): Boolean;
    function matchCategories(const AArg0: JSet): JString;
    function matchData(const AArg0: JString; const AArg1: JString; const AArg2: JUri): Integer;
    function matchDataAuthority(const AArg0: JUri): Integer;
    function pathsIterator: JIterator;
    function schemeSpecificPartsIterator: JIterator;
    function schemesIterator: JIterator;
    procedure setPriority(const AArg0: Integer);
    function typesIterator: JIterator;
  end;

  [JavaClassSignature('android/content/IntentFilter')]
  TJIntentFilter = class(TJObject, JIntentFilter)
  private
    { methods }
    function actionsIterator: JIterator;
    procedure addAction(const AArg0: JString);
    procedure addCategory(const AArg0: JString);
    procedure addDataAuthority(const AArg0: JString; const AArg1: JString);
    procedure addDataPath(const AArg0: JString; const AArg1: Integer);
    procedure addDataScheme(const AArg0: JString);
    procedure addDataSchemeSpecificPart(const AArg0: JString; const AArg1: Integer);
    procedure addDataType(const AArg0: JString);
    function authoritiesIterator: JIterator;
    function categoriesIterator: JIterator;
    function countActions: Integer;
    function countCategories: Integer;
    function countDataAuthorities: Integer;
    function countDataPaths: Integer;
    function countDataSchemeSpecificParts: Integer;
    function countDataSchemes: Integer;
    function countDataTypes: Integer;
    function describeContents: Integer;
    function getAction(const AArg0: Integer): JString;
    function getCategory(const AArg0: Integer): JString;
    function getDataAuthority(const AArg0: Integer): JIntentFilter_AuthorityEntry;
    function getDataPath(const AArg0: Integer): JPatternMatcher;
    function getDataScheme(const AArg0: Integer): JString;
    function getDataSchemeSpecificPart(const AArg0: Integer): JPatternMatcher;
    function getDataType(const AArg0: Integer): JString;
    function getPriority: Integer;
    function hasAction(const AArg0: JString): Boolean;
    function hasCategory(const AArg0: JString): Boolean;
    function hasDataAuthority(const AArg0: JUri): Boolean;
    function hasDataPath(const AArg0: JString): Boolean;
    function hasDataScheme(const AArg0: JString): Boolean;
    function hasDataSchemeSpecificPart(const AArg0: JString): Boolean;
    function hasDataType(const AArg0: JString): Boolean;
    function match(const AArg0: JString; const AArg1: JString; const AArg2: JString; const AArg3: JUri; const AArg4: JSet; const AArg5: JString): Integer; overload;
    function match(const AArg0: JContentResolver; const AArg1: JIntent; const AArg2: Boolean; const AArg3: JString): Integer; overload;
    function matchAction(const AArg0: JString): Boolean;
    function matchCategories(const AArg0: JSet): JString;
    function matchData(const AArg0: JString; const AArg1: JString; const AArg2: JUri): Integer;
    function matchDataAuthority(const AArg0: JUri): Integer;
    function pathsIterator: JIterator;
    function schemeSpecificPartsIterator: JIterator;
    function schemesIterator: JIterator;
    procedure setPriority(const AArg0: Integer);
    function typesIterator: JIterator;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JIntentFilter; overload;
    class function Wrap(const AObject: IJNIObject): JIntentFilter; overload;
    { constructors }
    class function Create: JIntentFilter; overload;
    class function Create(const AArg0: JString): JIntentFilter; overload;
    class function Create(const AArg0: JString; const AArg1: JString): JIntentFilter; overload;
    class function Create(const AArg0: JIntentFilter): JIntentFilter; overload;
    { constants }
    class function MATCH_ADJUSTMENT_MASK: Integer;
    class function MATCH_ADJUSTMENT_NORMAL: Integer;
    class function MATCH_CATEGORY_EMPTY: Integer;
    class function MATCH_CATEGORY_HOST: Integer;
    class function MATCH_CATEGORY_MASK: Integer;
    class function MATCH_CATEGORY_PATH: Integer;
    class function MATCH_CATEGORY_PORT: Integer;
    class function MATCH_CATEGORY_SCHEME: Integer;
    class function MATCH_CATEGORY_SCHEME_SPECIFIC_PART: Integer;
    class function MATCH_CATEGORY_TYPE: Integer;
    class function NO_MATCH_ACTION: Integer;
    class function NO_MATCH_CATEGORY: Integer;
    class function NO_MATCH_DATA: Integer;
    class function NO_MATCH_TYPE: Integer;
    class function SYSTEM_HIGH_PRIORITY: Integer;
    class function SYSTEM_LOW_PRIORITY: Integer;
    { methods }
    class function create_(const AArg0: JString; const AArg1: JString): JIntentFilter; overload;
  end;

{ android.content.IntentFilter_AuthorityEntry }

  [JavaClassSignature('android/content/IntentFilter$AuthorityEntry')]
  JIntentFilter_AuthorityEntry = interface(JObject)
    ['{99B80753-5B71-4F68-8CE1-D50988031200}']
    function equals(const AArg0: JObject): Boolean;
    function getHost: JString;
    function getPort: Integer;
    function match(const AArg0: JUri): Integer;
  end;

  [JavaClassSignature('android/content/IntentFilter$AuthorityEntry')]
  TJIntentFilter_AuthorityEntry = class(TJObject, JIntentFilter_AuthorityEntry)
  private
    { methods }
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function getHost: JString;
    function getPort: Integer;
    function match(const AArg0: JUri): Integer;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JIntentFilter_AuthorityEntry; overload;
    class function Wrap(const AObject: IJNIObject): JIntentFilter_AuthorityEntry; overload;
    { constructors }
    class function Create(const AArg0: JString; const AArg1: JString): JIntentFilter_AuthorityEntry; overload;
  end;

{ android.content.IntentSender }

  [JavaClassSignature('android/content/IntentSender')]
  JIntentSender = interface(JObject)
    ['{5666D196-24D1-413C-AA0C-D18DAAE8B978}']
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean;
    function getCreatorPackage: JString;
    function getCreatorUid: Integer;
    function getCreatorUserHandle: JUserHandle;
    function getTargetPackage: JString; deprecated 'Deprecated in 17';
    function hashCode: Integer;
    function toString: JString;
  end;

  [JavaClassSignature('android/content/IntentSender')]
  TJIntentSender = class(TJObject, JIntentSender)
  private
    { methods }
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function getCreatorPackage: JString;
    function getCreatorUid: Integer;
    function getCreatorUserHandle: JUserHandle;
    function getTargetPackage: JString; deprecated 'Deprecated in 17';
    function hashCode: Integer;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JIntentSender; overload;
    class function Wrap(const AObject: IJNIObject): JIntentSender; overload;
  end;

{ android.content.SharedPreferences - interface }

  [JavaClassSignature('android/content/SharedPreferences')]
  JSharedPreferences = interface(IJavaObject)
    ['{7CAE7B67-C98D-4A8F-A964-D47FFBCE535B}']
    function contains(const AArg0: JString): Boolean;
    function edit: JSharedPreferences_Editor;
    function getAll: JMap;
    function getBoolean(const AArg0: JString; const AArg1: Boolean): Boolean;
    function getFloat(const AArg0: JString; const AArg1: Single): Single;
    function getInt(const AArg0: JString; const AArg1: Integer): Integer;
    function getLong(const AArg0: JString; const AArg1: Int64): Int64;
    function getString(const AArg0: JString; const AArg1: JString): JString;
    function getStringSet(const AArg0: JString; const AArg1: JSet): JSet;
    procedure registerOnSharedPreferenceChangeListener(const AArg0: JSharedPreferences_OnSharedPreferenceChangeListener);
    procedure unregisterOnSharedPreferenceChangeListener(const AArg0: JSharedPreferences_OnSharedPreferenceChangeListener);
  end;

  [JavaClassSignature('android/content/SharedPreferences')]
  TJSharedPreferences = class(TJObject, JSharedPreferences)
  private
    { methods }
    function contains(const AArg0: JString): Boolean;
    function edit: JSharedPreferences_Editor;
    function getAll: JMap;
    function getBoolean(const AArg0: JString; const AArg1: Boolean): Boolean;
    function getFloat(const AArg0: JString; const AArg1: Single): Single;
    function getInt(const AArg0: JString; const AArg1: Integer): Integer;
    function getLong(const AArg0: JString; const AArg1: Int64): Int64;
    function getString(const AArg0: JString; const AArg1: JString): JString;
    function getStringSet(const AArg0: JString; const AArg1: JSet): JSet;
    procedure registerOnSharedPreferenceChangeListener(const AArg0: JSharedPreferences_OnSharedPreferenceChangeListener);
    procedure unregisterOnSharedPreferenceChangeListener(const AArg0: JSharedPreferences_OnSharedPreferenceChangeListener);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSharedPreferences; overload;
    class function Wrap(const AObject: IJNIObject): JSharedPreferences; overload;
  end;

{ android.content.SharedPreferences_Editor - interface }

  [JavaClassSignature('android/content/SharedPreferences$Editor')]
  JSharedPreferences_Editor = interface(IJavaObject)
    ['{4792662E-25B8-4716-A6F8-EC07BD8F695A}']
    procedure apply;
    function clear: JSharedPreferences_Editor;
    function commit: Boolean;
    function putBoolean(const AArg0: JString; const AArg1: Boolean): JSharedPreferences_Editor;
    function putFloat(const AArg0: JString; const AArg1: Single): JSharedPreferences_Editor;
    function putInt(const AArg0: JString; const AArg1: Integer): JSharedPreferences_Editor;
    function putLong(const AArg0: JString; const AArg1: Int64): JSharedPreferences_Editor;
    function putString(const AArg0: JString; const AArg1: JString): JSharedPreferences_Editor;
    function putStringSet(const AArg0: JString; const AArg1: JSet): JSharedPreferences_Editor;
    function remove(const AArg0: JString): JSharedPreferences_Editor;
  end;

  [JavaClassSignature('android/content/SharedPreferences$Editor')]
  TJSharedPreferences_Editor = class(TJObject, JSharedPreferences_Editor)
  private
    { methods }
    procedure apply;
    function clear: JSharedPreferences_Editor;
    function commit: Boolean;
    function putBoolean(const AArg0: JString; const AArg1: Boolean): JSharedPreferences_Editor;
    function putFloat(const AArg0: JString; const AArg1: Single): JSharedPreferences_Editor;
    function putInt(const AArg0: JString; const AArg1: Integer): JSharedPreferences_Editor;
    function putLong(const AArg0: JString; const AArg1: Int64): JSharedPreferences_Editor;
    function putString(const AArg0: JString; const AArg1: JString): JSharedPreferences_Editor;
    function putStringSet(const AArg0: JString; const AArg1: JSet): JSharedPreferences_Editor;
    function remove(const AArg0: JString): JSharedPreferences_Editor;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSharedPreferences_Editor; overload;
    class function Wrap(const AObject: IJNIObject): JSharedPreferences_Editor; overload;
  end;

{ android.content.SharedPreferences_OnSharedPreferenceChangeListener - interface }

  [JavaClassSignature('android/content/SharedPreferences$OnSharedPreferenceChangeListener')]
  JSharedPreferences_OnSharedPreferenceChangeListener = interface(IJavaObject)
    ['{FACB3D7E-F8C9-43C2-9763-4ADC43884E05}']
    procedure onSharedPreferenceChanged(const AArg0: JSharedPreferences; const AArg1: JString);
  end;

  [JavaClassSignature('android/content/SharedPreferences$OnSharedPreferenceChangeListener')]
  TJSharedPreferences_OnSharedPreferenceChangeListener = class(TJObject, JSharedPreferences_OnSharedPreferenceChangeListener)
  private
    { methods }
    procedure onSharedPreferenceChanged(const AArg0: JSharedPreferences; const AArg1: JString);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSharedPreferences_OnSharedPreferenceChangeListener; overload;
    class function Wrap(const AObject: IJNIObject): JSharedPreferences_OnSharedPreferenceChangeListener; overload;
  end;

{ android.content.pm.PackageInfo }

  [JavaClassSignature('android/content/pm/PackageInfo')]
  JPackageInfo = interface(JObject)
    ['{FBE2597A-BC14-4EAD-A1D9-B09952097370}']
    function _GetActivities: IJavaArray<JActivityInfo>;
    procedure _SetActivities(const AValue: IJavaArray<JActivityInfo>);
    function _GetApplicationInfo: JApplicationInfo;
    procedure _SetApplicationInfo(const AValue: JApplicationInfo);
    function _GetBaseRevisionCode: Integer;
    procedure _SetBaseRevisionCode(const AValue: Integer);
    function _GetFirstInstallTime: Int64;
    procedure _SetFirstInstallTime(const AValue: Int64);
    function _GetGids: IJavaArray<Integer>;
    procedure _SetGids(const AValue: IJavaArray<Integer>);
    function _GetInstallLocation: Integer;
    procedure _SetInstallLocation(const AValue: Integer);
    function _GetLastUpdateTime: Int64;
    procedure _SetLastUpdateTime(const AValue: Int64);
    function _GetPackageName: JString;
    procedure _SetPackageName(const AValue: JString);
    function _GetReceivers: IJavaArray<JActivityInfo>;
    procedure _SetReceivers(const AValue: IJavaArray<JActivityInfo>);
    function _GetRequestedPermissions: IJavaArray<JString>;
    procedure _SetRequestedPermissions(const AValue: IJavaArray<JString>);
    function _GetRequestedPermissionsFlags: IJavaArray<Integer>;
    procedure _SetRequestedPermissionsFlags(const AValue: IJavaArray<Integer>);
    function _GetSharedUserId: JString;
    procedure _SetSharedUserId(const AValue: JString);
    function _GetSharedUserLabel: Integer;
    procedure _SetSharedUserLabel(const AValue: Integer);
    function _GetSplitNames: IJavaArray<JString>;
    procedure _SetSplitNames(const AValue: IJavaArray<JString>);
    function _GetSplitRevisionCodes: IJavaArray<Integer>;
    procedure _SetSplitRevisionCodes(const AValue: IJavaArray<Integer>);
    function _GetVersionCode: Integer;
    procedure _SetVersionCode(const AValue: Integer);
    function _GetVersionName: JString;
    procedure _SetVersionName(const AValue: JString);
    function describeContents: Integer;
    function getLongVersionCode: Int64; // Introduced in 28';
    procedure setLongVersionCode(const AArg0: Int64); // Introduced in 28';
    function toString: JString;
    { constants }
    property activities: IJavaArray<JActivityInfo> read _GetActivities write _SetActivities;
    property applicationInfo: JApplicationInfo read _GetApplicationInfo write _SetApplicationInfo;
    property baseRevisionCode: Integer read _GetBaseRevisionCode write _SetBaseRevisionCode;
    property firstInstallTime: Int64 read _GetFirstInstallTime write _SetFirstInstallTime;
    property gids: IJavaArray<Integer> read _GetGids write _SetGids;
    property installLocation: Integer read _GetInstallLocation write _SetInstallLocation;
    property lastUpdateTime: Int64 read _GetLastUpdateTime write _SetLastUpdateTime;
    property packageName: JString read _GetPackageName write _SetPackageName;
    property receivers: IJavaArray<JActivityInfo> read _GetReceivers write _SetReceivers;
    property requestedPermissions: IJavaArray<JString> read _GetRequestedPermissions write _SetRequestedPermissions;
    property requestedPermissionsFlags: IJavaArray<Integer> read _GetRequestedPermissionsFlags write _SetRequestedPermissionsFlags;
    property sharedUserId: JString read _GetSharedUserId write _SetSharedUserId;
    property sharedUserLabel: Integer read _GetSharedUserLabel write _SetSharedUserLabel;
    property splitNames: IJavaArray<JString> read _GetSplitNames write _SetSplitNames;
    property splitRevisionCodes: IJavaArray<Integer> read _GetSplitRevisionCodes write _SetSplitRevisionCodes;
    property versionCode: Integer read _GetVersionCode write _SetVersionCode;
    property versionName: JString read _GetVersionName write _SetVersionName;
  end;

  [JavaClassSignature('android/content/pm/PackageInfo')]
  TJPackageInfo = class(TJObject, JPackageInfo)
  private
    function _GetActivities: IJavaArray<JActivityInfo>;
    procedure _SetActivities(const AValue: IJavaArray<JActivityInfo>);
    function _GetApplicationInfo: JApplicationInfo;
    procedure _SetApplicationInfo(const AValue: JApplicationInfo);
    function _GetBaseRevisionCode: Integer;
    procedure _SetBaseRevisionCode(const AValue: Integer);
    function _GetFirstInstallTime: Int64;
    procedure _SetFirstInstallTime(const AValue: Int64);
    function _GetGids: IJavaArray<Integer>;
    procedure _SetGids(const AValue: IJavaArray<Integer>);
    function _GetInstallLocation: Integer;
    procedure _SetInstallLocation(const AValue: Integer);
    function _GetLastUpdateTime: Int64;
    procedure _SetLastUpdateTime(const AValue: Int64);
    function _GetPackageName: JString;
    procedure _SetPackageName(const AValue: JString);
    function _GetReceivers: IJavaArray<JActivityInfo>;
    procedure _SetReceivers(const AValue: IJavaArray<JActivityInfo>);
    function _GetRequestedPermissions: IJavaArray<JString>;
    procedure _SetRequestedPermissions(const AValue: IJavaArray<JString>);
    function _GetRequestedPermissionsFlags: IJavaArray<Integer>;
    procedure _SetRequestedPermissionsFlags(const AValue: IJavaArray<Integer>);
    function _GetSharedUserId: JString;
    procedure _SetSharedUserId(const AValue: JString);
    function _GetSharedUserLabel: Integer;
    procedure _SetSharedUserLabel(const AValue: Integer);
    function _GetSplitNames: IJavaArray<JString>;
    procedure _SetSplitNames(const AValue: IJavaArray<JString>);
    function _GetSplitRevisionCodes: IJavaArray<Integer>;
    procedure _SetSplitRevisionCodes(const AValue: IJavaArray<Integer>);
    function _GetVersionCode: Integer;
    procedure _SetVersionCode(const AValue: Integer);
    function _GetVersionName: JString;
    procedure _SetVersionName(const AValue: JString);
  private
    { methods }
    function describeContents: Integer;
    function getLongVersionCode: Int64; // Introduced in 28';
    procedure setLongVersionCode(const AArg0: Int64); // Introduced in 28';
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPackageInfo; overload;
    class function Wrap(const AObject: IJNIObject): JPackageInfo; overload;
    { constructors }
    class function Create: JPackageInfo; overload;
    { constants }
    class function INSTALL_LOCATION_AUTO: Integer;
    class function INSTALL_LOCATION_INTERNAL_ONLY: Integer;
    class function INSTALL_LOCATION_PREFER_EXTERNAL: Integer;
    class function REQUESTED_PERMISSION_GRANTED: Integer;
  end;

{ android.content.pm.PackageItemInfo }

  [JavaClassSignature('android/content/pm/PackageItemInfo')]
  JPackageItemInfo = interface(JObject)
    ['{62DB88DD-9B18-4FB9-BEEC-DF083D5F5F89}']
    function _GetBanner: Integer;
    procedure _SetBanner(const AValue: Integer);
    function _GetIcon: Integer;
    procedure _SetIcon(const AValue: Integer);
    function _GetLabelRes: Integer;
    procedure _SetLabelRes(const AValue: Integer);
    function _GetLogo: Integer;
    procedure _SetLogo(const AValue: Integer);
    function _GetMetaData: JBundle;
    procedure _SetMetaData(const AValue: JBundle);
    function _GetName: JString;
    procedure _SetName(const AValue: JString);
    function _GetNonLocalizedLabel: JCharSequence;
    procedure _SetNonLocalizedLabel(const AValue: JCharSequence);
    function _GetPackageName: JString;
    procedure _SetPackageName(const AValue: JString);
    function loadBanner(const AArg0: JPackageManager): JDrawable;
    function loadIcon(const AArg0: JPackageManager): JDrawable;
    function loadLabel(const AArg0: JPackageManager): JCharSequence;
    function loadLogo(const AArg0: JPackageManager): JDrawable;
    function loadUnbadgedIcon(const AArg0: JPackageManager): JDrawable; // Introduced in 22';
    { constants }
    property banner: Integer read _GetBanner write _SetBanner;
    property icon: Integer read _GetIcon write _SetIcon;
    property labelRes: Integer read _GetLabelRes write _SetLabelRes;
    property logo: Integer read _GetLogo write _SetLogo;
    property metaData: JBundle read _GetMetaData write _SetMetaData;
    property name: JString read _GetName write _SetName;
    property nonLocalizedLabel: JCharSequence read _GetNonLocalizedLabel write _SetNonLocalizedLabel;
    property packageName: JString read _GetPackageName write _SetPackageName;
  end;

  [JavaClassSignature('android/content/pm/PackageItemInfo')]
  TJPackageItemInfo = class(TJObject, JPackageItemInfo)
  private
    function _GetBanner: Integer;
    procedure _SetBanner(const AValue: Integer);
    function _GetIcon: Integer;
    procedure _SetIcon(const AValue: Integer);
    function _GetLabelRes: Integer;
    procedure _SetLabelRes(const AValue: Integer);
    function _GetLogo: Integer;
    procedure _SetLogo(const AValue: Integer);
    function _GetMetaData: JBundle;
    procedure _SetMetaData(const AValue: JBundle);
    function _GetName: JString;
    procedure _SetName(const AValue: JString);
    function _GetNonLocalizedLabel: JCharSequence;
    procedure _SetNonLocalizedLabel(const AValue: JCharSequence);
    function _GetPackageName: JString;
    procedure _SetPackageName(const AValue: JString);
  private
    { methods }
    function loadBanner(const AArg0: JPackageManager): JDrawable;
    function loadIcon(const AArg0: JPackageManager): JDrawable;
    function loadLabel(const AArg0: JPackageManager): JCharSequence;
    function loadLogo(const AArg0: JPackageManager): JDrawable;
    function loadUnbadgedIcon(const AArg0: JPackageManager): JDrawable; // Introduced in 22';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPackageItemInfo; overload;
    class function Wrap(const AObject: IJNIObject): JPackageItemInfo; overload;
    { constructors }
    class function Create: JPackageItemInfo; overload;
    class function Create(const AArg0: JPackageItemInfo): JPackageItemInfo; overload;
  end;

{ android.content.pm.ApplicationInfo }

  [JavaClassSignature('android/content/pm/ApplicationInfo')]
  JApplicationInfo = interface(JPackageItemInfo)
    ['{EE4BE77A-F1CC-4EAE-B222-1690101CE419}']
    function _GetAppComponentFactory: JString;
    procedure _SetAppComponentFactory(const AValue: JString);
    function _GetBackupAgentName: JString;
    procedure _SetBackupAgentName(const AValue: JString);
    function _GetCategory: Integer;
    procedure _SetCategory(const AValue: Integer);
    function _GetClassName: JString;
    procedure _SetClassName(const AValue: JString);
    function _GetCompatibleWidthLimitDp: Integer;
    procedure _SetCompatibleWidthLimitDp(const AValue: Integer);
    function _GetDataDir: JString;
    procedure _SetDataDir(const AValue: JString);
    function _GetDescriptionRes: Integer;
    procedure _SetDescriptionRes(const AValue: Integer);
    function _GetDeviceProtectedDataDir: JString;
    procedure _SetDeviceProtectedDataDir(const AValue: JString);
    function _GetEnabled: Boolean;
    procedure _SetEnabled(const AValue: Boolean);
    function _GetFlags: Integer;
    procedure _SetFlags(const AValue: Integer);
    function _GetLargestWidthLimitDp: Integer;
    procedure _SetLargestWidthLimitDp(const AValue: Integer);
    function _GetManageSpaceActivityName: JString;
    procedure _SetManageSpaceActivityName(const AValue: JString);
    function _GetMinSdkVersion: Integer;
    procedure _SetMinSdkVersion(const AValue: Integer);
    function _GetNativeLibraryDir: JString;
    procedure _SetNativeLibraryDir(const AValue: JString);
    function _GetPermission: JString;
    procedure _SetPermission(const AValue: JString);
    function _GetProcessName: JString;
    procedure _SetProcessName(const AValue: JString);
    function _GetPublicSourceDir: JString;
    procedure _SetPublicSourceDir(const AValue: JString);
    function _GetRequiresSmallestWidthDp: Integer;
    procedure _SetRequiresSmallestWidthDp(const AValue: Integer);
    function _GetSharedLibraryFiles: IJavaArray<JString>;
    procedure _SetSharedLibraryFiles(const AValue: IJavaArray<JString>);
    function _GetSourceDir: JString;
    procedure _SetSourceDir(const AValue: JString);
    function _GetSplitNames: IJavaArray<JString>;
    procedure _SetSplitNames(const AValue: IJavaArray<JString>);
    function _GetSplitPublicSourceDirs: IJavaArray<JString>;
    procedure _SetSplitPublicSourceDirs(const AValue: IJavaArray<JString>);
    function _GetSplitSourceDirs: IJavaArray<JString>;
    procedure _SetSplitSourceDirs(const AValue: IJavaArray<JString>);
    function _GetTargetSdkVersion: Integer;
    procedure _SetTargetSdkVersion(const AValue: Integer);
    function _GetTaskAffinity: JString;
    procedure _SetTaskAffinity(const AValue: JString);
    function _GetTheme: Integer;
    procedure _SetTheme(const AValue: Integer);
    function _GetUiOptions: Integer;
    procedure _SetUiOptions(const AValue: Integer);
    function _GetUid: Integer;
    procedure _SetUid(const AValue: Integer);
    function describeContents: Integer;
    function isVirtualPreload: Boolean; // Introduced in 27';
    function loadDescription(const AArg0: JPackageManager): JCharSequence;
    function toString: JString;
    { constants }
    property appComponentFactory: JString read _GetAppComponentFactory write _SetAppComponentFactory;
    property backupAgentName: JString read _GetBackupAgentName write _SetBackupAgentName;
    property category: Integer read _GetCategory write _SetCategory;
    property className_: JString read _GetClassName write _SetClassName;
    property compatibleWidthLimitDp: Integer read _GetCompatibleWidthLimitDp write _SetCompatibleWidthLimitDp;
    property dataDir: JString read _GetDataDir write _SetDataDir;
    property descriptionRes: Integer read _GetDescriptionRes write _SetDescriptionRes;
    property deviceProtectedDataDir: JString read _GetDeviceProtectedDataDir write _SetDeviceProtectedDataDir;
    property enabled: Boolean read _GetEnabled write _SetEnabled;
    property flags: Integer read _GetFlags write _SetFlags;
    property largestWidthLimitDp: Integer read _GetLargestWidthLimitDp write _SetLargestWidthLimitDp;
    property manageSpaceActivityName: JString read _GetManageSpaceActivityName write _SetManageSpaceActivityName;
    property minSdkVersion: Integer read _GetMinSdkVersion write _SetMinSdkVersion;
    property nativeLibraryDir: JString read _GetNativeLibraryDir write _SetNativeLibraryDir;
    property permission: JString read _GetPermission write _SetPermission;
    property processName: JString read _GetProcessName write _SetProcessName;
    property publicSourceDir: JString read _GetPublicSourceDir write _SetPublicSourceDir;
    property requiresSmallestWidthDp: Integer read _GetRequiresSmallestWidthDp write _SetRequiresSmallestWidthDp;
    property sharedLibraryFiles: IJavaArray<JString> read _GetSharedLibraryFiles write _SetSharedLibraryFiles;
    property sourceDir: JString read _GetSourceDir write _SetSourceDir;
    property splitNames: IJavaArray<JString> read _GetSplitNames write _SetSplitNames;
    property splitPublicSourceDirs: IJavaArray<JString> read _GetSplitPublicSourceDirs write _SetSplitPublicSourceDirs;
    property splitSourceDirs: IJavaArray<JString> read _GetSplitSourceDirs write _SetSplitSourceDirs;
    property targetSdkVersion: Integer read _GetTargetSdkVersion write _SetTargetSdkVersion;
    property taskAffinity: JString read _GetTaskAffinity write _SetTaskAffinity;
    property theme: Integer read _GetTheme write _SetTheme;
    property uiOptions: Integer read _GetUiOptions write _SetUiOptions;
    property uid: Integer read _GetUid write _SetUid;
  end;

  [JavaClassSignature('android/content/pm/ApplicationInfo')]
  TJApplicationInfo = class(TJPackageItemInfo, JApplicationInfo)
  private
    function _GetAppComponentFactory: JString;
    procedure _SetAppComponentFactory(const AValue: JString);
    function _GetBackupAgentName: JString;
    procedure _SetBackupAgentName(const AValue: JString);
    function _GetCategory: Integer;
    procedure _SetCategory(const AValue: Integer);
    function _GetClassName: JString;
    procedure _SetClassName(const AValue: JString);
    function _GetCompatibleWidthLimitDp: Integer;
    procedure _SetCompatibleWidthLimitDp(const AValue: Integer);
    function _GetDataDir: JString;
    procedure _SetDataDir(const AValue: JString);
    function _GetDescriptionRes: Integer;
    procedure _SetDescriptionRes(const AValue: Integer);
    function _GetDeviceProtectedDataDir: JString;
    procedure _SetDeviceProtectedDataDir(const AValue: JString);
    function _GetEnabled: Boolean;
    procedure _SetEnabled(const AValue: Boolean);
    function _GetFlags: Integer;
    procedure _SetFlags(const AValue: Integer);
    function _GetLargestWidthLimitDp: Integer;
    procedure _SetLargestWidthLimitDp(const AValue: Integer);
    function _GetManageSpaceActivityName: JString;
    procedure _SetManageSpaceActivityName(const AValue: JString);
    function _GetMinSdkVersion: Integer;
    procedure _SetMinSdkVersion(const AValue: Integer);
    function _GetNativeLibraryDir: JString;
    procedure _SetNativeLibraryDir(const AValue: JString);
    function _GetPermission: JString;
    procedure _SetPermission(const AValue: JString);
    function _GetProcessName: JString;
    procedure _SetProcessName(const AValue: JString);
    function _GetPublicSourceDir: JString;
    procedure _SetPublicSourceDir(const AValue: JString);
    function _GetRequiresSmallestWidthDp: Integer;
    procedure _SetRequiresSmallestWidthDp(const AValue: Integer);
    function _GetSharedLibraryFiles: IJavaArray<JString>;
    procedure _SetSharedLibraryFiles(const AValue: IJavaArray<JString>);
    function _GetSourceDir: JString;
    procedure _SetSourceDir(const AValue: JString);
    function _GetSplitNames: IJavaArray<JString>;
    procedure _SetSplitNames(const AValue: IJavaArray<JString>);
    function _GetSplitPublicSourceDirs: IJavaArray<JString>;
    procedure _SetSplitPublicSourceDirs(const AValue: IJavaArray<JString>);
    function _GetSplitSourceDirs: IJavaArray<JString>;
    procedure _SetSplitSourceDirs(const AValue: IJavaArray<JString>);
    function _GetTargetSdkVersion: Integer;
    procedure _SetTargetSdkVersion(const AValue: Integer);
    function _GetTaskAffinity: JString;
    procedure _SetTaskAffinity(const AValue: JString);
    function _GetTheme: Integer;
    procedure _SetTheme(const AValue: Integer);
    function _GetUiOptions: Integer;
    procedure _SetUiOptions(const AValue: Integer);
    function _GetUid: Integer;
    procedure _SetUid(const AValue: Integer);
  private
    { methods }
    function describeContents: Integer;
    function isVirtualPreload: Boolean; // Introduced in 27';
    function loadDescription(const AArg0: JPackageManager): JCharSequence;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JApplicationInfo; overload;
    class function Wrap(const AObject: IJNIObject): JApplicationInfo; overload;
    { constructors }
    class function Create: JApplicationInfo; overload;
    class function Create(const AArg0: JApplicationInfo): JApplicationInfo; overload;
    { constants }
    class function CATEGORY_AUDIO: Integer;
    class function CATEGORY_GAME: Integer;
    class function CATEGORY_IMAGE: Integer;
    class function CATEGORY_MAPS: Integer;
    class function CATEGORY_NEWS: Integer;
    class function CATEGORY_PRODUCTIVITY: Integer;
    class function CATEGORY_SOCIAL: Integer;
    class function CATEGORY_UNDEFINED: Integer;
    class function CATEGORY_VIDEO: Integer;
    class function FLAG_ALLOW_BACKUP: Integer;
    class function FLAG_ALLOW_CLEAR_USER_DATA: Integer;
    class function FLAG_ALLOW_TASK_REPARENTING: Integer;
    class function FLAG_DEBUGGABLE: Integer;
    class function FLAG_EXTERNAL_STORAGE: Integer;
    class function FLAG_EXTRACT_NATIVE_LIBS: Integer;
    class function FLAG_FACTORY_TEST: Integer;
    class function FLAG_FULL_BACKUP_ONLY: Integer;
    class function FLAG_HARDWARE_ACCELERATED: Integer;
    class function FLAG_HAS_CODE: Integer;
    class function FLAG_INSTALLED: Integer;
    class function FLAG_IS_DATA_ONLY: Integer;
    class function FLAG_IS_GAME: Integer;
    class function FLAG_KILL_AFTER_RESTORE: Integer;
    class function FLAG_LARGE_HEAP: Integer;
    class function FLAG_MULTIARCH: Integer;
    class function FLAG_PERSISTENT: Integer;
    class function FLAG_RESIZEABLE_FOR_SCREENS: Integer;
    class function FLAG_RESTORE_ANY_VERSION: Integer;
    class function FLAG_STOPPED: Integer;
    class function FLAG_SUPPORTS_LARGE_SCREENS: Integer;
    class function FLAG_SUPPORTS_NORMAL_SCREENS: Integer;
    class function FLAG_SUPPORTS_RTL: Integer;
    class function FLAG_SUPPORTS_SCREEN_DENSITIES: Integer;
    class function FLAG_SUPPORTS_SMALL_SCREENS: Integer;
    class function FLAG_SUPPORTS_XLARGE_SCREENS: Integer;
    class function FLAG_SUSPENDED: Integer;
    class function FLAG_SYSTEM: Integer;
    class function FLAG_TEST_ONLY: Integer;
    class function FLAG_UPDATED_SYSTEM_APP: Integer;
    class function FLAG_USES_CLEARTEXT_TRAFFIC: Integer;
    class function FLAG_VM_SAFE_MODE: Integer;
    { methods }
    class function getCategoryTitle(const AArg0: JContext; const AArg1: Integer): JCharSequence; // Introduced in 26';
  end;

{ android.content.pm.ComponentInfo }

  [JavaClassSignature('android/content/pm/ComponentInfo')]
  JComponentInfo = interface(JPackageItemInfo)
    ['{47EC5B25-30D1-4247-90A9-9133A9D9E8B2}']
    function _GetApplicationInfo: JApplicationInfo;
    procedure _SetApplicationInfo(const AValue: JApplicationInfo);
    function _GetDescriptionRes: Integer;
    procedure _SetDescriptionRes(const AValue: Integer);
    function _GetDirectBootAware: Boolean;
    procedure _SetDirectBootAware(const AValue: Boolean);
    function _GetEnabled: Boolean;
    procedure _SetEnabled(const AValue: Boolean);
    function _GetExported: Boolean;
    procedure _SetExported(const AValue: Boolean);
    function _GetProcessName: JString;
    procedure _SetProcessName(const AValue: JString);
    function _GetSplitName: JString;
    procedure _SetSplitName(const AValue: JString);
    function getBannerResource: Integer;
    function getIconResource: Integer;
    function getLogoResource: Integer;
    function isEnabled: Boolean;
    { constants }
    property applicationInfo: JApplicationInfo read _GetApplicationInfo write _SetApplicationInfo;
    property descriptionRes: Integer read _GetDescriptionRes write _SetDescriptionRes;
    property directBootAware: Boolean read _GetDirectBootAware write _SetDirectBootAware;
    property enabled: Boolean read _GetEnabled write _SetEnabled;
    property exported: Boolean read _GetExported write _SetExported;
    property processName: JString read _GetProcessName write _SetProcessName;
    property splitName: JString read _GetSplitName write _SetSplitName;
  end;

  [JavaClassSignature('android/content/pm/ComponentInfo')]
  TJComponentInfo = class(TJPackageItemInfo, JComponentInfo)
  private
    function _GetApplicationInfo: JApplicationInfo;
    procedure _SetApplicationInfo(const AValue: JApplicationInfo);
    function _GetDescriptionRes: Integer;
    procedure _SetDescriptionRes(const AValue: Integer);
    function _GetDirectBootAware: Boolean;
    procedure _SetDirectBootAware(const AValue: Boolean);
    function _GetEnabled: Boolean;
    procedure _SetEnabled(const AValue: Boolean);
    function _GetExported: Boolean;
    procedure _SetExported(const AValue: Boolean);
    function _GetProcessName: JString;
    procedure _SetProcessName(const AValue: JString);
    function _GetSplitName: JString;
    procedure _SetSplitName(const AValue: JString);
  private
    { methods }
    function getBannerResource: Integer;
    function getIconResource: Integer;
    function getLogoResource: Integer;
    function isEnabled: Boolean;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JComponentInfo; overload;
    class function Wrap(const AObject: IJNIObject): JComponentInfo; overload;
    { constructors }
    class function Create: JComponentInfo; overload;
    class function Create(const AArg0: JComponentInfo): JComponentInfo; overload;
  end;

{ android.content.pm.ActivityInfo }

  [JavaClassSignature('android/content/pm/ActivityInfo')]
  JActivityInfo = interface(JComponentInfo)
    ['{0B2B7A26-D5B6-41A6-B0BE-398A029B545E}']
    function _GetColorMode: Integer;
    procedure _SetColorMode(const AValue: Integer);
    function _GetConfigChanges: Integer;
    procedure _SetConfigChanges(const AValue: Integer);
    function _GetDocumentLaunchMode: Integer;
    procedure _SetDocumentLaunchMode(const AValue: Integer);
    function _GetFlags: Integer;
    procedure _SetFlags(const AValue: Integer);
    function _GetLaunchMode: Integer;
    procedure _SetLaunchMode(const AValue: Integer);
    function _GetMaxRecents: Integer;
    procedure _SetMaxRecents(const AValue: Integer);
    function _GetParentActivityName: JString;
    procedure _SetParentActivityName(const AValue: JString);
    function _GetPermission: JString;
    procedure _SetPermission(const AValue: JString);
    function _GetPersistableMode: Integer;
    procedure _SetPersistableMode(const AValue: Integer);
    function _GetScreenOrientation: Integer;
    procedure _SetScreenOrientation(const AValue: Integer);
    function _GetSoftInputMode: Integer;
    procedure _SetSoftInputMode(const AValue: Integer);
    function _GetTargetActivity: JString;
    procedure _SetTargetActivity(const AValue: JString);
    function _GetTaskAffinity: JString;
    procedure _SetTaskAffinity(const AValue: JString);
    function _GetTheme: Integer;
    procedure _SetTheme(const AValue: Integer);
    function _GetUiOptions: Integer;
    procedure _SetUiOptions(const AValue: Integer);
    function describeContents: Integer;
    function getThemeResource: Integer;
    function toString: JString;
    { constants }
    property colorMode: Integer read _GetColorMode write _SetColorMode;
    property configChanges: Integer read _GetConfigChanges write _SetConfigChanges;
    property documentLaunchMode: Integer read _GetDocumentLaunchMode write _SetDocumentLaunchMode;
    property flags: Integer read _GetFlags write _SetFlags;
    property launchMode: Integer read _GetLaunchMode write _SetLaunchMode;
    property maxRecents: Integer read _GetMaxRecents write _SetMaxRecents;
    property parentActivityName: JString read _GetParentActivityName write _SetParentActivityName;
    property permission: JString read _GetPermission write _SetPermission;
    property persistableMode: Integer read _GetPersistableMode write _SetPersistableMode;
    property screenOrientation: Integer read _GetScreenOrientation write _SetScreenOrientation;
    property softInputMode: Integer read _GetSoftInputMode write _SetSoftInputMode;
    property targetActivity: JString read _GetTargetActivity write _SetTargetActivity;
    property taskAffinity: JString read _GetTaskAffinity write _SetTaskAffinity;
    property theme: Integer read _GetTheme write _SetTheme;
    property uiOptions: Integer read _GetUiOptions write _SetUiOptions;
  end;

  [JavaClassSignature('android/content/pm/ActivityInfo')]
  TJActivityInfo = class(TJComponentInfo, JActivityInfo)
  private
    function _GetColorMode: Integer;
    procedure _SetColorMode(const AValue: Integer);
    function _GetConfigChanges: Integer;
    procedure _SetConfigChanges(const AValue: Integer);
    function _GetDocumentLaunchMode: Integer;
    procedure _SetDocumentLaunchMode(const AValue: Integer);
    function _GetFlags: Integer;
    procedure _SetFlags(const AValue: Integer);
    function _GetLaunchMode: Integer;
    procedure _SetLaunchMode(const AValue: Integer);
    function _GetMaxRecents: Integer;
    procedure _SetMaxRecents(const AValue: Integer);
    function _GetParentActivityName: JString;
    procedure _SetParentActivityName(const AValue: JString);
    function _GetPermission: JString;
    procedure _SetPermission(const AValue: JString);
    function _GetPersistableMode: Integer;
    procedure _SetPersistableMode(const AValue: Integer);
    function _GetScreenOrientation: Integer;
    procedure _SetScreenOrientation(const AValue: Integer);
    function _GetSoftInputMode: Integer;
    procedure _SetSoftInputMode(const AValue: Integer);
    function _GetTargetActivity: JString;
    procedure _SetTargetActivity(const AValue: JString);
    function _GetTaskAffinity: JString;
    procedure _SetTaskAffinity(const AValue: JString);
    function _GetTheme: Integer;
    procedure _SetTheme(const AValue: Integer);
    function _GetUiOptions: Integer;
    procedure _SetUiOptions(const AValue: Integer);
  private
    { methods }
    function describeContents: Integer;
    function getThemeResource: Integer;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JActivityInfo; overload;
    class function Wrap(const AObject: IJNIObject): JActivityInfo; overload;
    { constructors }
    class function Create: JActivityInfo; overload;
    class function Create(const AArg0: JActivityInfo): JActivityInfo; overload;
    { constants }
    class function COLOR_MODE_DEFAULT: Integer;
    class function COLOR_MODE_HDR: Integer;
    class function COLOR_MODE_WIDE_COLOR_GAMUT: Integer;
    class function CONFIG_COLOR_MODE: Integer;
    class function CONFIG_DENSITY: Integer;
    class function CONFIG_FONT_SCALE: Integer;
    class function CONFIG_KEYBOARD: Integer;
    class function CONFIG_KEYBOARD_HIDDEN: Integer;
    class function CONFIG_LAYOUT_DIRECTION: Integer;
    class function CONFIG_LOCALE: Integer;
    class function CONFIG_MCC: Integer;
    class function CONFIG_MNC: Integer;
    class function CONFIG_NAVIGATION: Integer;
    class function CONFIG_ORIENTATION: Integer;
    class function CONFIG_SCREEN_LAYOUT: Integer;
    class function CONFIG_SCREEN_SIZE: Integer;
    class function CONFIG_SMALLEST_SCREEN_SIZE: Integer;
    class function CONFIG_TOUCHSCREEN: Integer;
    class function CONFIG_UI_MODE: Integer;
    class function DOCUMENT_LAUNCH_ALWAYS: Integer;
    class function DOCUMENT_LAUNCH_INTO_EXISTING: Integer;
    class function DOCUMENT_LAUNCH_NEVER: Integer;
    class function DOCUMENT_LAUNCH_NONE: Integer;
    class function FLAG_ALLOW_TASK_REPARENTING: Integer;
    class function FLAG_ALWAYS_RETAIN_TASK_STATE: Integer;
    class function FLAG_AUTO_REMOVE_FROM_RECENTS: Integer;
    class function FLAG_CLEAR_TASK_ON_LAUNCH: Integer;
    class function FLAG_ENABLE_VR_MODE: Integer;
    class function FLAG_EXCLUDE_FROM_RECENTS: Integer;
    class function FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS: Integer;
    class function FLAG_FINISH_ON_TASK_LAUNCH: Integer;
    class function FLAG_HARDWARE_ACCELERATED: Integer;
    class function FLAG_IMMERSIVE: Integer;
    class function FLAG_MULTIPROCESS: Integer;
    class function FLAG_NO_HISTORY: Integer;
    class function FLAG_RELINQUISH_TASK_IDENTITY: Integer;
    class function FLAG_RESUME_WHILE_PAUSING: Integer;
    class function FLAG_SINGLE_USER: Integer;
    class function FLAG_STATE_NOT_NEEDED: Integer;
    class function LAUNCH_MULTIPLE: Integer;
    class function LAUNCH_SINGLE_INSTANCE: Integer;
    class function LAUNCH_SINGLE_TASK: Integer;
    class function LAUNCH_SINGLE_TOP: Integer;
    class function PERSIST_ACROSS_REBOOTS: Integer;
    class function PERSIST_NEVER: Integer;
    class function PERSIST_ROOT_ONLY: Integer;
    class function SCREEN_ORIENTATION_BEHIND: Integer;
    class function SCREEN_ORIENTATION_FULL_SENSOR: Integer;
    class function SCREEN_ORIENTATION_FULL_USER: Integer;
    class function SCREEN_ORIENTATION_LANDSCAPE: Integer;
    class function SCREEN_ORIENTATION_LOCKED: Integer;
    class function SCREEN_ORIENTATION_NOSENSOR: Integer;
    class function SCREEN_ORIENTATION_PORTRAIT: Integer;
    class function SCREEN_ORIENTATION_REVERSE_LANDSCAPE: Integer;
    class function SCREEN_ORIENTATION_REVERSE_PORTRAIT: Integer;
    class function SCREEN_ORIENTATION_SENSOR: Integer;
    class function SCREEN_ORIENTATION_SENSOR_LANDSCAPE: Integer;
    class function SCREEN_ORIENTATION_SENSOR_PORTRAIT: Integer;
    class function SCREEN_ORIENTATION_UNSPECIFIED: Integer;
    class function SCREEN_ORIENTATION_USER: Integer;
    class function SCREEN_ORIENTATION_USER_LANDSCAPE: Integer;
    class function SCREEN_ORIENTATION_USER_PORTRAIT: Integer;
    class function UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW: Integer;
  end;

{ android.content.pm.PackageManager }

  [JavaClassSignature('android/content/pm/PackageManager')]
  JPackageManager = interface(JObject)
    ['{1972E0C5-4F98-464B-B9CD-CC102BB74DB7}']
    procedure addPackageToPreferred(const AArg0: JString); deprecated 'Deprecated in 15';
    procedure addPreferredActivity(const AArg0: JIntentFilter; const AArg1: Integer; const AArg2: IJavaArray<JComponentName>; const AArg3: JComponentName); deprecated 'Deprecated in 15';
    function canRequestPackageInstalls: Boolean; // Introduced in 26';
    function canonicalToCurrentPackageNames(const AArg0: IJavaArray<JString>): IJavaArray<JString>;
    function checkPermission(const AArg0: JString; const AArg1: JString): Integer;
    function checkSignatures(const AArg0: JString; const AArg1: JString): Integer; overload;
    function checkSignatures(const AArg0: Integer; const AArg1: Integer): Integer; overload;
    procedure clearInstantAppCookie; // Introduced in 26';
    procedure clearPackagePreferredActivities(const AArg0: JString); deprecated 'Deprecated in 29';
    function currentToCanonicalPackageNames(const AArg0: IJavaArray<JString>): IJavaArray<JString>;
    procedure extendVerificationTimeout(const AArg0: Integer; const AArg1: Integer; const AArg2: Int64);
    function getActivityBanner(const AArg0: JComponentName): JDrawable; overload;
    function getActivityBanner(const AArg0: JIntent): JDrawable; overload;
    function getActivityIcon(const AArg0: JComponentName): JDrawable; overload;
    function getActivityIcon(const AArg0: JIntent): JDrawable; overload;
    function getActivityInfo(const AArg0: JComponentName; const AArg1: Integer): JActivityInfo;
    function getActivityLogo(const AArg0: JIntent): JDrawable; overload;
    function getActivityLogo(const AArg0: JComponentName): JDrawable; overload;
    function getAllPermissionGroups(const AArg0: Integer): JList;
    function getApplicationBanner(const AArg0: JApplicationInfo): JDrawable; overload;
    function getApplicationBanner(const AArg0: JString): JDrawable; overload;
    function getApplicationEnabledSetting(const AArg0: JString): Integer;
    function getApplicationIcon(const AArg0: JString): JDrawable; overload;
    function getApplicationIcon(const AArg0: JApplicationInfo): JDrawable; overload;
    function getApplicationInfo(const AArg0: JString; const AArg1: Integer): JApplicationInfo;
    function getApplicationLabel(const AArg0: JApplicationInfo): JCharSequence;
    function getApplicationLogo(const AArg0: JString): JDrawable; overload;
    function getApplicationLogo(const AArg0: JApplicationInfo): JDrawable; overload;
    function getComponentEnabledSetting(const AArg0: JComponentName): Integer;
    function getDefaultActivityIcon: JDrawable;
    function getDrawable(const AArg0: JString; const AArg1: Integer; const AArg2: JApplicationInfo): JDrawable;
    function getInstalledApplications(const AArg0: Integer): JList;
    function getInstalledPackages(const AArg0: Integer): JList;
    function getInstallerPackageName(const AArg0: JString): JString;
    function getInstantAppCookie: IJavaArray<Byte>; // Introduced in 26';
    function getInstantAppCookieMaxBytes: Integer; // Introduced in 26';
    function getLaunchIntentForPackage(const AArg0: JString): JIntent;
    function getLeanbackLaunchIntentForPackage(const AArg0: JString): JIntent;
    function getNameForUid(const AArg0: Integer): JString;
    function getPackageArchiveInfo(const AArg0: JString; const AArg1: Integer): JPackageInfo;
    function getPackageGids(const AArg0: JString; const AArg1: Integer): IJavaArray<Integer>; overload; // Introduced in 24';
    function getPackageGids(const AArg0: JString): IJavaArray<Integer>; overload;
    function getPackageInfo(const AArg0: JString; const AArg1: Integer): JPackageInfo;
    function getPackageUid(const AArg0: JString; const AArg1: Integer): Integer; // Introduced in 24';
    function getPackagesForUid(const AArg0: Integer): IJavaArray<JString>;
    function getPackagesHoldingPermissions(const AArg0: IJavaArray<JString>; const AArg1: Integer): JList;
    function getPreferredActivities(const AArg0: JList; const AArg1: JList; const AArg2: JString): Integer; deprecated 'Deprecated in 29';
    function getPreferredPackages(const AArg0: Integer): JList; deprecated 'Deprecated in 29';
    function getReceiverInfo(const AArg0: JComponentName; const AArg1: Integer): JActivityInfo;
    function getResourcesForActivity(const AArg0: JComponentName): JResources;
    function getResourcesForApplication(const AArg0: JApplicationInfo): JResources; overload;
    function getResourcesForApplication(const AArg0: JString): JResources; overload;
    function getSharedLibraries(const AArg0: Integer): JList; // Introduced in 26';
    function getSuspendedPackageAppExtras: JBundle; // Introduced in 28';
    function getSystemSharedLibraryNames: IJavaArray<JString>;
    function getText(const AArg0: JString; const AArg1: Integer; const AArg2: JApplicationInfo): JCharSequence;
    function getUserBadgedDrawableForDensity(const AArg0: JDrawable; const AArg1: JUserHandle; const AArg2: JRect; const AArg3: Integer): JDrawable;
    function getUserBadgedIcon(const AArg0: JDrawable; const AArg1: JUserHandle): JDrawable;
    function getUserBadgedLabel(const AArg0: JCharSequence; const AArg1: JUserHandle): JCharSequence;
    function hasSigningCertificate(const AArg0: Integer; const AArg1: IJavaArray<Byte>; const AArg2: Integer): Boolean; overload; // Introduced in 28';
    function hasSigningCertificate(const AArg0: JString; const AArg1: IJavaArray<Byte>; const AArg2: Integer): Boolean; overload; // Introduced in 28';
    function hasSystemFeature(const AArg0: JString; const AArg1: Integer): Boolean; overload; // Introduced in 24';
    function hasSystemFeature(const AArg0: JString): Boolean; overload;
    function isInstantApp: Boolean; overload; // Introduced in 26';
    function isInstantApp(const AArg0: JString): Boolean; overload; // Introduced in 26';
    function isPackageSuspended: Boolean; // Introduced in 28';
    function isPermissionRevokedByPolicy(const AArg0: JString; const AArg1: JString): Boolean; // Introduced in 23';
    function isSafeMode: Boolean;
    function queryBroadcastReceivers(const AArg0: JIntent; const AArg1: Integer): JList;
    function queryContentProviders(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): JList;
    function queryInstrumentation(const AArg0: JString; const AArg1: Integer): JList;
    function queryIntentActivities(const AArg0: JIntent; const AArg1: Integer): JList;
    function queryIntentActivityOptions(const AArg0: JComponentName; const AArg1: IJavaArray<JIntent>; const AArg2: JIntent; const AArg3: Integer): JList;
    function queryIntentContentProviders(const AArg0: JIntent; const AArg1: Integer): JList;
    function queryIntentServices(const AArg0: JIntent; const AArg1: Integer): JList;
    function queryPermissionsByGroup(const AArg0: JString; const AArg1: Integer): JList;
    procedure removePackageFromPreferred(const AArg0: JString); deprecated 'Deprecated in 15';
    procedure removePermission(const AArg0: JString);
    procedure setApplicationCategoryHint(const AArg0: JString; const AArg1: Integer); // Introduced in 26';
    procedure setApplicationEnabledSetting(const AArg0: JString; const AArg1: Integer; const AArg2: Integer);
    procedure setComponentEnabledSetting(const AArg0: JComponentName; const AArg1: Integer; const AArg2: Integer);
    procedure setInstallerPackageName(const AArg0: JString; const AArg1: JString);
    procedure updateInstantAppCookie(const AArg0: IJavaArray<Byte>); // Introduced in 26';
    procedure verifyPendingInstall(const AArg0: Integer; const AArg1: Integer);
  end;

  [JavaClassSignature('android/content/pm/PackageManager')]
  TJPackageManager = class(TJObject, JPackageManager)
  private
    { methods }
    procedure addPackageToPreferred(const AArg0: JString); deprecated 'Deprecated in 15';
    procedure addPreferredActivity(const AArg0: JIntentFilter; const AArg1: Integer; const AArg2: IJavaArray<JComponentName>; const AArg3: JComponentName); deprecated 'Deprecated in 15';
    function canRequestPackageInstalls: Boolean; // Introduced in 26';
    function canonicalToCurrentPackageNames(const AArg0: IJavaArray<JString>): IJavaArray<JString>;
    function checkPermission(const AArg0: JString; const AArg1: JString): Integer;
    function checkSignatures(const AArg0: JString; const AArg1: JString): Integer; overload;
    function checkSignatures(const AArg0: Integer; const AArg1: Integer): Integer; overload;
    procedure clearInstantAppCookie; // Introduced in 26';
    procedure clearPackagePreferredActivities(const AArg0: JString); deprecated 'Deprecated in 29';
    function currentToCanonicalPackageNames(const AArg0: IJavaArray<JString>): IJavaArray<JString>;
    procedure extendVerificationTimeout(const AArg0: Integer; const AArg1: Integer; const AArg2: Int64);
    function getActivityBanner(const AArg0: JComponentName): JDrawable; overload;
    function getActivityBanner(const AArg0: JIntent): JDrawable; overload;
    function getActivityIcon(const AArg0: JComponentName): JDrawable; overload;
    function getActivityIcon(const AArg0: JIntent): JDrawable; overload;
    function getActivityInfo(const AArg0: JComponentName; const AArg1: Integer): JActivityInfo;
    function getActivityLogo(const AArg0: JIntent): JDrawable; overload;
    function getActivityLogo(const AArg0: JComponentName): JDrawable; overload;
    function getAllPermissionGroups(const AArg0: Integer): JList;
    function getApplicationBanner(const AArg0: JApplicationInfo): JDrawable; overload;
    function getApplicationBanner(const AArg0: JString): JDrawable; overload;
    function getApplicationEnabledSetting(const AArg0: JString): Integer;
    function getApplicationIcon(const AArg0: JString): JDrawable; overload;
    function getApplicationIcon(const AArg0: JApplicationInfo): JDrawable; overload;
    function getApplicationInfo(const AArg0: JString; const AArg1: Integer): JApplicationInfo;
    function getApplicationLabel(const AArg0: JApplicationInfo): JCharSequence;
    function getApplicationLogo(const AArg0: JString): JDrawable; overload;
    function getApplicationLogo(const AArg0: JApplicationInfo): JDrawable; overload;
    function getComponentEnabledSetting(const AArg0: JComponentName): Integer;
    function getDefaultActivityIcon: JDrawable;
    function getDrawable(const AArg0: JString; const AArg1: Integer; const AArg2: JApplicationInfo): JDrawable;
    function getInstalledApplications(const AArg0: Integer): JList;
    function getInstalledPackages(const AArg0: Integer): JList;
    function getInstallerPackageName(const AArg0: JString): JString;
    function getInstantAppCookie: IJavaArray<Byte>; // Introduced in 26';
    function getInstantAppCookieMaxBytes: Integer; // Introduced in 26';
    function getLaunchIntentForPackage(const AArg0: JString): JIntent;
    function getLeanbackLaunchIntentForPackage(const AArg0: JString): JIntent;
    function getNameForUid(const AArg0: Integer): JString;
    function getPackageArchiveInfo(const AArg0: JString; const AArg1: Integer): JPackageInfo;
    function getPackageGids(const AArg0: JString; const AArg1: Integer): IJavaArray<Integer>; overload; // Introduced in 24';
    function getPackageGids(const AArg0: JString): IJavaArray<Integer>; overload;
    function getPackageInfo(const AArg0: JString; const AArg1: Integer): JPackageInfo;
    function getPackageUid(const AArg0: JString; const AArg1: Integer): Integer; // Introduced in 24';
    function getPackagesForUid(const AArg0: Integer): IJavaArray<JString>;
    function getPackagesHoldingPermissions(const AArg0: IJavaArray<JString>; const AArg1: Integer): JList;
    function getPreferredActivities(const AArg0: JList; const AArg1: JList; const AArg2: JString): Integer; deprecated 'Deprecated in 29';
    function getPreferredPackages(const AArg0: Integer): JList; deprecated 'Deprecated in 29';
    function getReceiverInfo(const AArg0: JComponentName; const AArg1: Integer): JActivityInfo;
    function getResourcesForActivity(const AArg0: JComponentName): JResources;
    function getResourcesForApplication(const AArg0: JApplicationInfo): JResources; overload;
    function getResourcesForApplication(const AArg0: JString): JResources; overload;
    function getSharedLibraries(const AArg0: Integer): JList; // Introduced in 26';
    function getSuspendedPackageAppExtras: JBundle; // Introduced in 28';
    function getSystemSharedLibraryNames: IJavaArray<JString>;
    function getText(const AArg0: JString; const AArg1: Integer; const AArg2: JApplicationInfo): JCharSequence;
    function getUserBadgedDrawableForDensity(const AArg0: JDrawable; const AArg1: JUserHandle; const AArg2: JRect; const AArg3: Integer): JDrawable;
    function getUserBadgedIcon(const AArg0: JDrawable; const AArg1: JUserHandle): JDrawable;
    function getUserBadgedLabel(const AArg0: JCharSequence; const AArg1: JUserHandle): JCharSequence;
    function hasSigningCertificate(const AArg0: Integer; const AArg1: IJavaArray<Byte>; const AArg2: Integer): Boolean; overload; // Introduced in 28';
    function hasSigningCertificate(const AArg0: JString; const AArg1: IJavaArray<Byte>; const AArg2: Integer): Boolean; overload; // Introduced in 28';
    function hasSystemFeature(const AArg0: JString; const AArg1: Integer): Boolean; overload; // Introduced in 24';
    function hasSystemFeature(const AArg0: JString): Boolean; overload;
    function isInstantApp: Boolean; overload; // Introduced in 26';
    function isInstantApp(const AArg0: JString): Boolean; overload; // Introduced in 26';
    function isPackageSuspended: Boolean; // Introduced in 28';
    function isPermissionRevokedByPolicy(const AArg0: JString; const AArg1: JString): Boolean; // Introduced in 23';
    function isSafeMode: Boolean;
    function queryBroadcastReceivers(const AArg0: JIntent; const AArg1: Integer): JList;
    function queryContentProviders(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): JList;
    function queryInstrumentation(const AArg0: JString; const AArg1: Integer): JList;
    function queryIntentActivities(const AArg0: JIntent; const AArg1: Integer): JList;
    function queryIntentActivityOptions(const AArg0: JComponentName; const AArg1: IJavaArray<JIntent>; const AArg2: JIntent; const AArg3: Integer): JList;
    function queryIntentContentProviders(const AArg0: JIntent; const AArg1: Integer): JList;
    function queryIntentServices(const AArg0: JIntent; const AArg1: Integer): JList;
    function queryPermissionsByGroup(const AArg0: JString; const AArg1: Integer): JList;
    procedure removePackageFromPreferred(const AArg0: JString); deprecated 'Deprecated in 15';
    procedure removePermission(const AArg0: JString);
    procedure setApplicationCategoryHint(const AArg0: JString; const AArg1: Integer); // Introduced in 26';
    procedure setApplicationEnabledSetting(const AArg0: JString; const AArg1: Integer; const AArg2: Integer);
    procedure setComponentEnabledSetting(const AArg0: JComponentName; const AArg1: Integer; const AArg2: Integer);
    procedure setInstallerPackageName(const AArg0: JString; const AArg1: JString);
    procedure updateInstantAppCookie(const AArg0: IJavaArray<Byte>); // Introduced in 26';
    procedure verifyPendingInstall(const AArg0: Integer; const AArg1: Integer);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPackageManager; overload;
    class function Wrap(const AObject: IJNIObject): JPackageManager; overload;
    { constructors }
    class function Create: JPackageManager; overload;
    { constants }
    class function CERT_INPUT_RAW_X509: Integer;
    class function CERT_INPUT_SHA256: Integer;
    class function COMPONENT_ENABLED_STATE_DEFAULT: Integer;
    class function COMPONENT_ENABLED_STATE_DISABLED: Integer;
    class function COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED: Integer;
    class function COMPONENT_ENABLED_STATE_DISABLED_USER: Integer;
    class function COMPONENT_ENABLED_STATE_ENABLED: Integer;
    class function DONT_KILL_APP: Integer;
    class function EXTRA_VERIFICATION_ID: JString;
    class function EXTRA_VERIFICATION_RESULT: JString;
    class function FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS: JString;
    class function FEATURE_APP_WIDGETS: JString;
    class function FEATURE_AUDIO_LOW_LATENCY: JString;
    class function FEATURE_AUDIO_OUTPUT: JString;
    class function FEATURE_AUDIO_PRO: JString;
    class function FEATURE_AUTOFILL: JString;
    class function FEATURE_AUTOMOTIVE: JString;
    class function FEATURE_BACKUP: JString;
    class function FEATURE_BLUETOOTH: JString;
    class function FEATURE_BLUETOOTH_LE: JString;
    class function FEATURE_CAMERA: JString;
    class function FEATURE_CAMERA_ANY: JString;
    class function FEATURE_CAMERA_AR: JString;
    class function FEATURE_CAMERA_AUTOFOCUS: JString;
    class function FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING: JString;
    class function FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR: JString;
    class function FEATURE_CAMERA_CAPABILITY_RAW: JString;
    class function FEATURE_CAMERA_EXTERNAL: JString;
    class function FEATURE_CAMERA_FLASH: JString;
    class function FEATURE_CAMERA_FRONT: JString;
    class function FEATURE_CAMERA_LEVEL_FULL: JString;
    class function FEATURE_CANT_SAVE_STATE: JString;
    class function FEATURE_COMPANION_DEVICE_SETUP: JString;
    class function FEATURE_CONNECTION_SERVICE: JString;
    class function FEATURE_CONSUMER_IR: JString;
    class function FEATURE_DEVICE_ADMIN: JString;
    class function FEATURE_EMBEDDED: JString;
    class function FEATURE_ETHERNET: JString;
    class function FEATURE_FAKETOUCH: JString;
    class function FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT: JString;
    class function FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND: JString;
    class function FEATURE_FINGERPRINT: JString;
    class function FEATURE_FREEFORM_WINDOW_MANAGEMENT: JString;
    class function FEATURE_GAMEPAD: JString;
    class function FEATURE_HIFI_SENSORS: JString;
    class function FEATURE_HOME_SCREEN: JString;
    class function FEATURE_INPUT_METHODS: JString;
    class function FEATURE_LEANBACK: JString;
    class function FEATURE_LEANBACK_ONLY: JString;
    class function FEATURE_LIVE_TV: JString;
    class function FEATURE_LIVE_WALLPAPER: JString;
    class function FEATURE_LOCATION: JString;
    class function FEATURE_LOCATION_GPS: JString;
    class function FEATURE_LOCATION_NETWORK: JString;
    class function FEATURE_MANAGED_USERS: JString;
    class function FEATURE_MICROPHONE: JString;
    class function FEATURE_MIDI: JString;
    class function FEATURE_NFC: JString;
    class function FEATURE_NFC_HOST_CARD_EMULATION: JString;
    class function FEATURE_NFC_HOST_CARD_EMULATION_NFCF: JString;
    class function FEATURE_OPENGLES_EXTENSION_PACK: JString;
    class function FEATURE_PC: JString;
    class function FEATURE_PICTURE_IN_PICTURE: JString;
    class function FEATURE_PRINTING: JString;
    class function FEATURE_RAM_LOW: JString;
    class function FEATURE_RAM_NORMAL: JString;
    class function FEATURE_SCREEN_LANDSCAPE: JString;
    class function FEATURE_SCREEN_PORTRAIT: JString;
    class function FEATURE_SECURELY_REMOVES_USERS: JString;
    class function FEATURE_SENSOR_ACCELEROMETER: JString;
    class function FEATURE_SENSOR_AMBIENT_TEMPERATURE: JString;
    class function FEATURE_SENSOR_BAROMETER: JString;
    class function FEATURE_SENSOR_COMPASS: JString;
    class function FEATURE_SENSOR_GYROSCOPE: JString;
    class function FEATURE_SENSOR_HEART_RATE: JString;
    class function FEATURE_SENSOR_HEART_RATE_ECG: JString;
    class function FEATURE_SENSOR_LIGHT: JString;
    class function FEATURE_SENSOR_PROXIMITY: JString;
    class function FEATURE_SENSOR_RELATIVE_HUMIDITY: JString;
    class function FEATURE_SENSOR_STEP_COUNTER: JString;
    class function FEATURE_SENSOR_STEP_DETECTOR: JString;
    class function FEATURE_SIP: JString;
    class function FEATURE_SIP_VOIP: JString;
    class function FEATURE_STRONGBOX_KEYSTORE: JString;
    class function FEATURE_TELEPHONY: JString;
    class function FEATURE_TELEPHONY_CDMA: JString;
    class function FEATURE_TELEPHONY_EUICC: JString;
    class function FEATURE_TELEPHONY_GSM: JString;
    class function FEATURE_TELEPHONY_MBMS: JString;
    class function FEATURE_TELEVISION: JString;
    class function FEATURE_TOUCHSCREEN: JString;
    class function FEATURE_TOUCHSCREEN_MULTITOUCH: JString;
    class function FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT: JString;
    class function FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND: JString;
    class function FEATURE_USB_ACCESSORY: JString;
    class function FEATURE_USB_HOST: JString;
    class function FEATURE_VERIFIED_BOOT: JString;
    class function FEATURE_VR_HEADTRACKING: JString;
    class function FEATURE_VR_MODE: JString;
    class function FEATURE_VR_MODE_HIGH_PERFORMANCE: JString;
    class function FEATURE_VULKAN_HARDWARE_COMPUTE: JString;
    class function FEATURE_VULKAN_HARDWARE_LEVEL: JString;
    class function FEATURE_VULKAN_HARDWARE_VERSION: JString;
    class function FEATURE_WATCH: JString;
    class function FEATURE_WEBVIEW: JString;
    class function FEATURE_WIFI: JString;
    class function FEATURE_WIFI_AWARE: JString;
    class function FEATURE_WIFI_DIRECT: JString;
    class function FEATURE_WIFI_PASSPOINT: JString;
    class function FEATURE_WIFI_RTT: JString;
    class function GET_ACTIVITIES: Integer;
    class function GET_CONFIGURATIONS: Integer;
    class function GET_DISABLED_COMPONENTS: Integer;
    class function GET_DISABLED_UNTIL_USED_COMPONENTS: Integer;
    class function GET_GIDS: Integer;
    class function GET_INSTRUMENTATION: Integer;
    class function GET_INTENT_FILTERS: Integer;
    class function GET_META_DATA: Integer;
    class function GET_PERMISSIONS: Integer;
    class function GET_PROVIDERS: Integer;
    class function GET_RECEIVERS: Integer;
    class function GET_RESOLVED_FILTER: Integer;
    class function GET_SERVICES: Integer;
    class function GET_SHARED_LIBRARY_FILES: Integer;
    class function GET_SIGNATURES: Integer;
    class function GET_SIGNING_CERTIFICATES: Integer;
    class function GET_UNINSTALLED_PACKAGES: Integer;
    class function GET_URI_PERMISSION_PATTERNS: Integer;
    class function INSTALL_REASON_DEVICE_RESTORE: Integer;
    class function INSTALL_REASON_DEVICE_SETUP: Integer;
    class function INSTALL_REASON_POLICY: Integer;
    class function INSTALL_REASON_UNKNOWN: Integer;
    class function INSTALL_REASON_USER: Integer;
    class function MATCH_ALL: Integer;
    class function MATCH_DEFAULT_ONLY: Integer;
    class function MATCH_DIRECT_BOOT_AWARE: Integer;
    class function MATCH_DIRECT_BOOT_UNAWARE: Integer;
    class function MATCH_DISABLED_COMPONENTS: Integer;
    class function MATCH_DISABLED_UNTIL_USED_COMPONENTS: Integer;
    class function MATCH_SYSTEM_ONLY: Integer;
    class function MATCH_UNINSTALLED_PACKAGES: Integer;
    class function MAXIMUM_VERIFICATION_TIMEOUT: Int64;
    class function PERMISSION_DENIED: Integer;
    class function PERMISSION_GRANTED: Integer;
    class function SIGNATURE_FIRST_NOT_SIGNED: Integer;
    class function SIGNATURE_MATCH: Integer;
    class function SIGNATURE_NEITHER_SIGNED: Integer;
    class function SIGNATURE_NO_MATCH: Integer;
    class function SIGNATURE_SECOND_NOT_SIGNED: Integer;
    class function SIGNATURE_UNKNOWN_PACKAGE: Integer;
    class function VERIFICATION_ALLOW: Integer;
    class function VERIFICATION_REJECT: Integer;
    class function VERSION_CODE_HIGHEST: Integer;
  end;

{ android.content.res.AssetFileDescriptor }

  [JavaClassSignature('android/content/res/AssetFileDescriptor')]
  JAssetFileDescriptor = interface(JObject)
    ['{DEB421A5-4E49-4891-8ACA-C2949B9BE96B}']
    procedure close;
    function createInputStream: JFileInputStream;
    function createOutputStream: JFileOutputStream;
    function describeContents: Integer;
    function getDeclaredLength: Int64;
    function getExtras: JBundle;
    function getFileDescriptor: JFileDescriptor;
    function getLength: Int64;
    function getParcelFileDescriptor: JParcelFileDescriptor;
    function getStartOffset: Int64;
    function toString: JString;
  end;

  [JavaClassSignature('android/content/res/AssetFileDescriptor')]
  TJAssetFileDescriptor = class(TJObject, JAssetFileDescriptor)
  private
    { methods }
    procedure close;
    function createInputStream: JFileInputStream;
    function createOutputStream: JFileOutputStream;
    function describeContents: Integer;
    function getDeclaredLength: Int64;
    function getExtras: JBundle;
    function getFileDescriptor: JFileDescriptor;
    function getLength: Int64;
    function getParcelFileDescriptor: JParcelFileDescriptor;
    function getStartOffset: Int64;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JAssetFileDescriptor; overload;
    class function Wrap(const AObject: IJNIObject): JAssetFileDescriptor; overload;
    { constructors }
    class function Create(const AArg0: JParcelFileDescriptor; const AArg1: Int64; const AArg2: Int64): JAssetFileDescriptor; overload;
    class function Create(const AArg0: JParcelFileDescriptor; const AArg1: Int64; const AArg2: Int64; const AArg3: JBundle): JAssetFileDescriptor; overload;
    { constants }
    class function UNKNOWN_LENGTH: Int64;
  end;

{ android.content.res.AssetManager }

  [JavaClassSignature('android/content/res/AssetManager')]
  JAssetManager = interface(JObject)
    ['{E520C0EA-F482-47DE-9203-78C6C7AB0B11}']
    procedure close;
    function getLocales: IJavaArray<JString>;
    function list(const AArg0: JString): IJavaArray<JString>;
    function open(const AArg0: JString): JInputStream; overload;
    function open(const AArg0: JString; const AArg1: Integer): JInputStream; overload;
    function openFd(const AArg0: JString): JAssetFileDescriptor;
    function openNonAssetFd(const AArg0: Integer; const AArg1: JString): JAssetFileDescriptor; overload;
    function openNonAssetFd(const AArg0: JString): JAssetFileDescriptor; overload;
  end;

  [JavaClassSignature('android/content/res/AssetManager')]
  TJAssetManager = class(TJObject, JAssetManager)
  private
    { methods }
    procedure close;
    function getLocales: IJavaArray<JString>;
    function list(const AArg0: JString): IJavaArray<JString>;
    function open(const AArg0: JString): JInputStream; overload;
    function open(const AArg0: JString; const AArg1: Integer): JInputStream; overload;
    function openFd(const AArg0: JString): JAssetFileDescriptor;
    function openNonAssetFd(const AArg0: Integer; const AArg1: JString): JAssetFileDescriptor; overload;
    function openNonAssetFd(const AArg0: JString): JAssetFileDescriptor; overload;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JAssetManager; overload;
    class function Wrap(const AObject: IJNIObject): JAssetManager; overload;
    { constants }
    class function ACCESS_BUFFER: Integer;
    class function ACCESS_RANDOM: Integer;
    class function ACCESS_STREAMING: Integer;
    class function ACCESS_UNKNOWN: Integer;
  end;

{ android.content.res.ColorStateList }

  [JavaClassSignature('android/content/res/ColorStateList')]
  JColorStateList = interface(JObject)
    ['{40B43F83-1F20-44FD-BF21-AB1871D50B7C}']
    function describeContents: Integer;
    function getChangingConfigurations: Integer; // Introduced in 23';
    function getColorForState(const AArg0: IJavaArray<Integer>; const AArg1: Integer): Integer;
    function getDefaultColor: Integer;
    function isOpaque: Boolean;
    function isStateful: Boolean;
    function toString: JString;
    function withAlpha(const AArg0: Integer): JColorStateList;
  end;

  [JavaClassSignature('android/content/res/ColorStateList')]
  TJColorStateList = class(TJObject, JColorStateList)
  private
    { methods }
    function describeContents: Integer;
    function getChangingConfigurations: Integer; // Introduced in 23';
    function getColorForState(const AArg0: IJavaArray<Integer>; const AArg1: Integer): Integer;
    function getDefaultColor: Integer;
    function isOpaque: Boolean;
    function isStateful: Boolean;
    function toString: JString; reintroduce;
    function withAlpha(const AArg0: Integer): JColorStateList;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JColorStateList; overload;
    class function Wrap(const AObject: IJNIObject): JColorStateList; overload;
    { constructors }
    class function Create(const AArg0: IJavaArray<Integer>; const AArg1: IJavaArray<Integer>): JColorStateList; overload;
    { methods }
    class function valueOf(const AArg0: Integer): JColorStateList;
  end;

{ android.content.res.Configuration }

  [JavaClassSignature('android/content/res/Configuration')]
  JConfiguration = interface(JObject)
    ['{15E20D35-1732-45D4-8F78-04382A62966F}']
    function _GetColorMode: Integer;
    procedure _SetColorMode(const AValue: Integer);
    function _GetDensityDpi: Integer;
    procedure _SetDensityDpi(const AValue: Integer);
    function _GetFontScale: Single;
    procedure _SetFontScale(const AValue: Single);
    function _GetHardKeyboardHidden: Integer;
    procedure _SetHardKeyboardHidden(const AValue: Integer);
    function _GetKeyboard: Integer;
    procedure _SetKeyboard(const AValue: Integer);
    function _GetKeyboardHidden: Integer;
    procedure _SetKeyboardHidden(const AValue: Integer);
    function _GetLocale: JLocale;
    procedure _SetLocale(const AValue: JLocale);
    function _GetMcc: Integer;
    procedure _SetMcc(const AValue: Integer);
    function _GetMnc: Integer;
    procedure _SetMnc(const AValue: Integer);
    function _GetNavigation: Integer;
    procedure _SetNavigation(const AValue: Integer);
    function _GetNavigationHidden: Integer;
    procedure _SetNavigationHidden(const AValue: Integer);
    function _GetOrientation: Integer;
    procedure _SetOrientation(const AValue: Integer);
    function _GetScreenHeightDp: Integer;
    procedure _SetScreenHeightDp(const AValue: Integer);
    function _GetScreenLayout: Integer;
    procedure _SetScreenLayout(const AValue: Integer);
    function _GetScreenWidthDp: Integer;
    procedure _SetScreenWidthDp(const AValue: Integer);
    function _GetSmallestScreenWidthDp: Integer;
    procedure _SetSmallestScreenWidthDp(const AValue: Integer);
    function _GetTouchscreen: Integer;
    procedure _SetTouchscreen(const AValue: Integer);
    function _GetUiMode: Integer;
    procedure _SetUiMode(const AValue: Integer);
    function compareTo(const AArg0: JConfiguration): Integer; overload;
    function compareTo(const AArg0: JObject): Integer; overload;
    function describeContents: Integer;
    function diff(const AArg0: JConfiguration): Integer;
    function equals(const AArg0: JConfiguration): Boolean; overload;
    function equals(const AArg0: JObject): Boolean; overload;
    function getLayoutDirection: Integer;
    function hashCode: Integer;
    function isLayoutSizeAtLeast(const AArg0: Integer): Boolean;
    function isScreenHdr: Boolean; // Introduced in 26';
    function isScreenRound: Boolean; // Introduced in 23';
    function isScreenWideColorGamut: Boolean; // Introduced in 26';
    procedure setLayoutDirection(const AArg0: JLocale);
    procedure setLocale(const AArg0: JLocale);
    procedure setTo(const AArg0: JConfiguration);
    procedure setToDefaults;
    function toString: JString;
    function updateFrom(const AArg0: JConfiguration): Integer;
    { constants }
    property colorMode: Integer read _GetColorMode write _SetColorMode;
    property densityDpi: Integer read _GetDensityDpi write _SetDensityDpi;
    property fontScale: Single read _GetFontScale write _SetFontScale;
    property hardKeyboardHidden: Integer read _GetHardKeyboardHidden write _SetHardKeyboardHidden;
    property keyboard: Integer read _GetKeyboard write _SetKeyboard;
    property keyboardHidden: Integer read _GetKeyboardHidden write _SetKeyboardHidden;
    property locale: JLocale read _GetLocale write _SetLocale;
    property mcc: Integer read _GetMcc write _SetMcc;
    property mnc: Integer read _GetMnc write _SetMnc;
    property navigation: Integer read _GetNavigation write _SetNavigation;
    property navigationHidden: Integer read _GetNavigationHidden write _SetNavigationHidden;
    property orientation: Integer read _GetOrientation write _SetOrientation;
    property screenHeightDp: Integer read _GetScreenHeightDp write _SetScreenHeightDp;
    property screenLayout: Integer read _GetScreenLayout write _SetScreenLayout;
    property screenWidthDp: Integer read _GetScreenWidthDp write _SetScreenWidthDp;
    property smallestScreenWidthDp: Integer read _GetSmallestScreenWidthDp write _SetSmallestScreenWidthDp;
    property touchscreen: Integer read _GetTouchscreen write _SetTouchscreen;
    property uiMode: Integer read _GetUiMode write _SetUiMode;
  end;

  [JavaClassSignature('android/content/res/Configuration')]
  TJConfiguration = class(TJObject, JConfiguration)
  private
    function _GetColorMode: Integer;
    procedure _SetColorMode(const AValue: Integer);
    function _GetDensityDpi: Integer;
    procedure _SetDensityDpi(const AValue: Integer);
    function _GetFontScale: Single;
    procedure _SetFontScale(const AValue: Single);
    function _GetHardKeyboardHidden: Integer;
    procedure _SetHardKeyboardHidden(const AValue: Integer);
    function _GetKeyboard: Integer;
    procedure _SetKeyboard(const AValue: Integer);
    function _GetKeyboardHidden: Integer;
    procedure _SetKeyboardHidden(const AValue: Integer);
    function _GetLocale: JLocale;
    procedure _SetLocale(const AValue: JLocale);
    function _GetMcc: Integer;
    procedure _SetMcc(const AValue: Integer);
    function _GetMnc: Integer;
    procedure _SetMnc(const AValue: Integer);
    function _GetNavigation: Integer;
    procedure _SetNavigation(const AValue: Integer);
    function _GetNavigationHidden: Integer;
    procedure _SetNavigationHidden(const AValue: Integer);
    function _GetOrientation: Integer;
    procedure _SetOrientation(const AValue: Integer);
    function _GetScreenHeightDp: Integer;
    procedure _SetScreenHeightDp(const AValue: Integer);
    function _GetScreenLayout: Integer;
    procedure _SetScreenLayout(const AValue: Integer);
    function _GetScreenWidthDp: Integer;
    procedure _SetScreenWidthDp(const AValue: Integer);
    function _GetSmallestScreenWidthDp: Integer;
    procedure _SetSmallestScreenWidthDp(const AValue: Integer);
    function _GetTouchscreen: Integer;
    procedure _SetTouchscreen(const AValue: Integer);
    function _GetUiMode: Integer;
    procedure _SetUiMode(const AValue: Integer);
  private
    { methods }
    function compareTo(const AArg0: JConfiguration): Integer; overload;
    function compareTo(const AArg0: JObject): Integer; overload;
    function describeContents: Integer;
    function diff(const AArg0: JConfiguration): Integer;
    function equals(const AArg0: JConfiguration): Boolean; reintroduce; overload;
    function equals(const AArg0: JObject): Boolean; reintroduce; overload;
    function getLayoutDirection: Integer;
    function hashCode: Integer;
    function isLayoutSizeAtLeast(const AArg0: Integer): Boolean;
    function isScreenHdr: Boolean; // Introduced in 26';
    function isScreenRound: Boolean; // Introduced in 23';
    function isScreenWideColorGamut: Boolean; // Introduced in 26';
    procedure setLayoutDirection(const AArg0: JLocale);
    procedure setLocale(const AArg0: JLocale);
    procedure setTo(const AArg0: JConfiguration);
    procedure setToDefaults;
    function toString: JString; reintroduce;
    function updateFrom(const AArg0: JConfiguration): Integer;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JConfiguration; overload;
    class function Wrap(const AObject: IJNIObject): JConfiguration; overload;
    { constructors }
    class function Create: JConfiguration; overload;
    class function Create(const AArg0: JConfiguration): JConfiguration; overload;
    { constants }
    class function COLOR_MODE_HDR_MASK: Integer;
    class function COLOR_MODE_HDR_NO: Integer;
    class function COLOR_MODE_HDR_SHIFT: Integer;
    class function COLOR_MODE_HDR_UNDEFINED: Integer;
    class function COLOR_MODE_HDR_YES: Integer;
    class function COLOR_MODE_UNDEFINED: Integer;
    class function COLOR_MODE_WIDE_COLOR_GAMUT_MASK: Integer;
    class function COLOR_MODE_WIDE_COLOR_GAMUT_NO: Integer;
    class function COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED: Integer;
    class function COLOR_MODE_WIDE_COLOR_GAMUT_YES: Integer;
    class function DENSITY_DPI_UNDEFINED: Integer;
    class function HARDKEYBOARDHIDDEN_NO: Integer;
    class function HARDKEYBOARDHIDDEN_UNDEFINED: Integer;
    class function HARDKEYBOARDHIDDEN_YES: Integer;
    class function KEYBOARDHIDDEN_NO: Integer;
    class function KEYBOARDHIDDEN_UNDEFINED: Integer;
    class function KEYBOARDHIDDEN_YES: Integer;
    class function KEYBOARD_12KEY: Integer;
    class function KEYBOARD_NOKEYS: Integer;
    class function KEYBOARD_QWERTY: Integer;
    class function KEYBOARD_UNDEFINED: Integer;
    class function MNC_ZERO: Integer;
    class function NAVIGATIONHIDDEN_NO: Integer;
    class function NAVIGATIONHIDDEN_UNDEFINED: Integer;
    class function NAVIGATIONHIDDEN_YES: Integer;
    class function NAVIGATION_DPAD: Integer;
    class function NAVIGATION_NONAV: Integer;
    class function NAVIGATION_TRACKBALL: Integer;
    class function NAVIGATION_UNDEFINED: Integer;
    class function NAVIGATION_WHEEL: Integer;
    class function ORIENTATION_LANDSCAPE: Integer;
    class function ORIENTATION_PORTRAIT: Integer;
    class function ORIENTATION_SQUARE: Integer;
    class function ORIENTATION_UNDEFINED: Integer;
    class function SCREENLAYOUT_LAYOUTDIR_LTR: Integer;
    class function SCREENLAYOUT_LAYOUTDIR_MASK: Integer;
    class function SCREENLAYOUT_LAYOUTDIR_RTL: Integer;
    class function SCREENLAYOUT_LAYOUTDIR_SHIFT: Integer;
    class function SCREENLAYOUT_LAYOUTDIR_UNDEFINED: Integer;
    class function SCREENLAYOUT_LONG_MASK: Integer;
    class function SCREENLAYOUT_LONG_NO: Integer;
    class function SCREENLAYOUT_LONG_UNDEFINED: Integer;
    class function SCREENLAYOUT_LONG_YES: Integer;
    class function SCREENLAYOUT_ROUND_MASK: Integer;
    class function SCREENLAYOUT_ROUND_NO: Integer;
    class function SCREENLAYOUT_ROUND_UNDEFINED: Integer;
    class function SCREENLAYOUT_ROUND_YES: Integer;
    class function SCREENLAYOUT_SIZE_LARGE: Integer;
    class function SCREENLAYOUT_SIZE_MASK: Integer;
    class function SCREENLAYOUT_SIZE_NORMAL: Integer;
    class function SCREENLAYOUT_SIZE_SMALL: Integer;
    class function SCREENLAYOUT_SIZE_UNDEFINED: Integer;
    class function SCREENLAYOUT_SIZE_XLARGE: Integer;
    class function SCREENLAYOUT_UNDEFINED: Integer;
    class function SCREEN_HEIGHT_DP_UNDEFINED: Integer;
    class function SCREEN_WIDTH_DP_UNDEFINED: Integer;
    class function SMALLEST_SCREEN_WIDTH_DP_UNDEFINED: Integer;
    class function TOUCHSCREEN_FINGER: Integer;
    class function TOUCHSCREEN_NOTOUCH: Integer;
    class function TOUCHSCREEN_STYLUS: Integer;
    class function TOUCHSCREEN_UNDEFINED: Integer;
    class function UI_MODE_NIGHT_MASK: Integer;
    class function UI_MODE_NIGHT_NO: Integer;
    class function UI_MODE_NIGHT_UNDEFINED: Integer;
    class function UI_MODE_NIGHT_YES: Integer;
    class function UI_MODE_TYPE_APPLIANCE: Integer;
    class function UI_MODE_TYPE_CAR: Integer;
    class function UI_MODE_TYPE_DESK: Integer;
    class function UI_MODE_TYPE_MASK: Integer;
    class function UI_MODE_TYPE_NORMAL: Integer;
    class function UI_MODE_TYPE_TELEVISION: Integer;
    class function UI_MODE_TYPE_UNDEFINED: Integer;
    class function UI_MODE_TYPE_VR_HEADSET: Integer;
    class function UI_MODE_TYPE_WATCH: Integer;
    { methods }
    class function needNewResources(const AArg0: Integer; const AArg1: Integer): Boolean;
  end;

{ android.content.res.Resources }

  [JavaClassSignature('android/content/res/Resources')]
  JResources = interface(JObject)
    ['{842A5E6B-E6F9-4784-BB76-19FAB8DBFAA6}']
    procedure finishPreloading;
    procedure flushLayoutCache;
    function getAssets: JAssetManager;
    function getBoolean(const AArg0: Integer): Boolean;
    function getColor(const AArg0: Integer): Integer; overload; deprecated 'Deprecated in 23';
    function getColor(const AArg0: Integer; const AArg1: JResources_Theme): Integer; overload; // Introduced in 23';
    function getColorStateList(const AArg0: Integer): JColorStateList; overload; deprecated 'Deprecated in 23';
    function getColorStateList(const AArg0: Integer; const AArg1: JResources_Theme): JColorStateList; overload; // Introduced in 23';
    function getConfiguration: JConfiguration;
    function getDimension(const AArg0: Integer): Single;
    function getDimensionPixelOffset(const AArg0: Integer): Integer;
    function getDimensionPixelSize(const AArg0: Integer): Integer;
    function getDisplayMetrics: JDisplayMetrics;
    function getDrawable(const AArg0: Integer; const AArg1: JResources_Theme): JDrawable; overload;
    function getDrawable(const AArg0: Integer): JDrawable; overload; deprecated 'Deprecated in 22';
    function getDrawableForDensity(const AArg0: Integer; const AArg1: Integer; const AArg2: JResources_Theme): JDrawable; overload;
    function getDrawableForDensity(const AArg0: Integer; const AArg1: Integer): JDrawable; overload; deprecated 'Deprecated in 22';
    function getFont(const AArg0: Integer): JTypeface; // Introduced in 26';
    function getFraction(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Single;
    function getIdentifier(const AArg0: JString; const AArg1: JString; const AArg2: JString): Integer;
    function getIntArray(const AArg0: Integer): IJavaArray<Integer>;
    function getInteger(const AArg0: Integer): Integer;
    function getQuantityString(const AArg0: Integer; const AArg1: Integer): JString; overload;
    function getQuantityString(const AArg0: Integer; const AArg1: Integer; const AArg2: IJavaArray<JObject>): JString; overload;
    function getQuantityText(const AArg0: Integer; const AArg1: Integer): JCharSequence;
    function getResourceEntryName(const AArg0: Integer): JString;
    function getResourceName(const AArg0: Integer): JString;
    function getResourcePackageName(const AArg0: Integer): JString;
    function getResourceTypeName(const AArg0: Integer): JString;
    function getString(const AArg0: Integer): JString; overload;
    function getString(const AArg0: Integer; const AArg1: IJavaArray<JObject>): JString; overload;
    function getStringArray(const AArg0: Integer): IJavaArray<JString>;
    function getText(const AArg0: Integer; const AArg1: JCharSequence): JCharSequence; overload;
    function getText(const AArg0: Integer): JCharSequence; overload;
    function getTextArray(const AArg0: Integer): IJavaArray<JCharSequence>;
    procedure getValue(const AArg0: JString; const AArg1: JTypedValue; const AArg2: Boolean); overload;
    procedure getValue(const AArg0: Integer; const AArg1: JTypedValue; const AArg2: Boolean); overload;
    procedure getValueForDensity(const AArg0: Integer; const AArg1: Integer; const AArg2: JTypedValue; const AArg3: Boolean);
    function newTheme: JResources_Theme;
    function openRawResource(const AArg0: Integer): JInputStream; overload;
    function openRawResource(const AArg0: Integer; const AArg1: JTypedValue): JInputStream; overload;
    function openRawResourceFd(const AArg0: Integer): JAssetFileDescriptor;
    procedure parseBundleExtra(const AArg0: JString; const AArg1: JAttributeSet; const AArg2: JBundle);
    procedure updateConfiguration(const AArg0: JConfiguration; const AArg1: JDisplayMetrics); deprecated 'Deprecated in 25';
  end;

  [JavaClassSignature('android/content/res/Resources')]
  TJResources = class(TJObject, JResources)
  private
    { methods }
    procedure finishPreloading;
    procedure flushLayoutCache;
    function getAssets: JAssetManager;
    function getBoolean(const AArg0: Integer): Boolean;
    function getColor(const AArg0: Integer): Integer; overload; deprecated 'Deprecated in 23';
    function getColor(const AArg0: Integer; const AArg1: JResources_Theme): Integer; overload; // Introduced in 23';
    function getColorStateList(const AArg0: Integer): JColorStateList; overload; deprecated 'Deprecated in 23';
    function getColorStateList(const AArg0: Integer; const AArg1: JResources_Theme): JColorStateList; overload; // Introduced in 23';
    function getConfiguration: JConfiguration;
    function getDimension(const AArg0: Integer): Single;
    function getDimensionPixelOffset(const AArg0: Integer): Integer;
    function getDimensionPixelSize(const AArg0: Integer): Integer;
    function getDisplayMetrics: JDisplayMetrics;
    function getDrawable(const AArg0: Integer; const AArg1: JResources_Theme): JDrawable; overload;
    function getDrawable(const AArg0: Integer): JDrawable; overload; deprecated 'Deprecated in 22';
    function getDrawableForDensity(const AArg0: Integer; const AArg1: Integer; const AArg2: JResources_Theme): JDrawable; overload;
    function getDrawableForDensity(const AArg0: Integer; const AArg1: Integer): JDrawable; overload; deprecated 'Deprecated in 22';
    function getFont(const AArg0: Integer): JTypeface; // Introduced in 26';
    function getFraction(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Single;
    function getIdentifier(const AArg0: JString; const AArg1: JString; const AArg2: JString): Integer;
    function getIntArray(const AArg0: Integer): IJavaArray<Integer>;
    function getInteger(const AArg0: Integer): Integer;
    function getQuantityString(const AArg0: Integer; const AArg1: Integer): JString; overload;
    function getQuantityString(const AArg0: Integer; const AArg1: Integer; const AArg2: IJavaArray<JObject>): JString; overload;
    function getQuantityText(const AArg0: Integer; const AArg1: Integer): JCharSequence;
    function getResourceEntryName(const AArg0: Integer): JString;
    function getResourceName(const AArg0: Integer): JString;
    function getResourcePackageName(const AArg0: Integer): JString;
    function getResourceTypeName(const AArg0: Integer): JString;
    function getString(const AArg0: Integer): JString; overload;
    function getString(const AArg0: Integer; const AArg1: IJavaArray<JObject>): JString; overload;
    function getStringArray(const AArg0: Integer): IJavaArray<JString>;
    function getText(const AArg0: Integer; const AArg1: JCharSequence): JCharSequence; overload;
    function getText(const AArg0: Integer): JCharSequence; overload;
    function getTextArray(const AArg0: Integer): IJavaArray<JCharSequence>;
    procedure getValue(const AArg0: JString; const AArg1: JTypedValue; const AArg2: Boolean); overload;
    procedure getValue(const AArg0: Integer; const AArg1: JTypedValue; const AArg2: Boolean); overload;
    procedure getValueForDensity(const AArg0: Integer; const AArg1: Integer; const AArg2: JTypedValue; const AArg3: Boolean);
    function newTheme: JResources_Theme;
    function openRawResource(const AArg0: Integer): JInputStream; overload;
    function openRawResource(const AArg0: Integer; const AArg1: JTypedValue): JInputStream; overload;
    function openRawResourceFd(const AArg0: Integer): JAssetFileDescriptor;
    procedure parseBundleExtra(const AArg0: JString; const AArg1: JAttributeSet; const AArg2: JBundle);
    procedure updateConfiguration(const AArg0: JConfiguration; const AArg1: JDisplayMetrics); deprecated 'Deprecated in 25';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JResources; overload;
    class function Wrap(const AObject: IJNIObject): JResources; overload;
    { constructors }
    class function Create(const AArg0: JAssetManager; const AArg1: JDisplayMetrics; const AArg2: JConfiguration): JResources; overload;
    { methods }
    class function getSystem: JResources;
  end;

{ android.content.res.Resources_Theme }

  [JavaClassSignature('android/content/res/Resources$Theme')]
  JResources_Theme = interface(JObject)
    ['{40AF876A-6E3A-4C6C-B00F-AA93B0CAADB3}']
    procedure applyStyle(const AArg0: Integer; const AArg1: Boolean);
    procedure dump(const AArg0: Integer; const AArg1: JString; const AArg2: JString);
    function getChangingConfigurations: Integer; // Introduced in 23';
    function getDrawable(const AArg0: Integer): JDrawable;
    function getResources: JResources;
    function resolveAttribute(const AArg0: Integer; const AArg1: JTypedValue; const AArg2: Boolean): Boolean;
    procedure setTo(const AArg0: JResources_Theme);
  end;

  [JavaClassSignature('android/content/res/Resources$Theme')]
  TJResources_Theme = class(TJObject, JResources_Theme)
  private
    { methods }
    procedure applyStyle(const AArg0: Integer; const AArg1: Boolean);
    procedure dump(const AArg0: Integer; const AArg1: JString; const AArg2: JString);
    function getChangingConfigurations: Integer; // Introduced in 23';
    function getDrawable(const AArg0: Integer): JDrawable;
    function getResources: JResources;
    function resolveAttribute(const AArg0: Integer; const AArg1: JTypedValue; const AArg2: Boolean): Boolean;
    procedure setTo(const AArg0: JResources_Theme);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JResources_Theme; overload;
    class function Wrap(const AObject: IJNIObject): JResources_Theme; overload;
  end;

{ android.database.AbstractCursor }

  [JavaClassSignature('android/database/AbstractCursor')]
  JAbstractCursor = interface(JObject)
    ['{0C9349AF-5590-4ECC-B00C-41E76A45CAFD}']
    procedure close;
    procedure deactivate;
    function getBlob(const AArg0: Integer): IJavaArray<Byte>;
    function getColumnCount: Integer;
    function getColumnIndex(const AArg0: JString): Integer;
    function getColumnIndexOrThrow(const AArg0: JString): Integer;
    function getColumnName(const AArg0: Integer): JString;
    function getColumnNames: IJavaArray<JString>;
    function getCount: Integer;
    function getDouble(const AArg0: Integer): Double;
    function getExtras: JBundle;
    function getFloat(const AArg0: Integer): Single;
    function getInt(const AArg0: Integer): Integer;
    function getLong(const AArg0: Integer): Int64;
    function getNotificationUri: JUri;
    function getPosition: Integer;
    function getShort(const AArg0: Integer): ShortInt;
    function getString(const AArg0: Integer): JString;
    function getType(const AArg0: Integer): Integer;
    function getWantsAllOnMoveCalls: Boolean;
    function isAfterLast: Boolean;
    function isBeforeFirst: Boolean;
    function isClosed: Boolean;
    function isFirst: Boolean;
    function isLast: Boolean;
    function isNull(const AArg0: Integer): Boolean;
    function move(const AArg0: Integer): Boolean;
    function moveToFirst: Boolean;
    function moveToLast: Boolean;
    function moveToNext: Boolean;
    function moveToPosition(const AArg0: Integer): Boolean;
    function moveToPrevious: Boolean;
    function onMove(const AArg0: Integer; const AArg1: Integer): Boolean;
    procedure registerContentObserver(const AArg0: JContentObserver);
    procedure registerDataSetObserver(const AArg0: JDataSetObserver);
    function requery: Boolean;
    function respond(const AArg0: JBundle): JBundle;
    procedure setExtras(const AArg0: JBundle);
    procedure setNotificationUri(const AArg0: JContentResolver; const AArg1: JUri);
    procedure unregisterContentObserver(const AArg0: JContentObserver);
    procedure unregisterDataSetObserver(const AArg0: JDataSetObserver);
  end;

  [JavaClassSignature('android/database/AbstractCursor')]
  TJAbstractCursor = class(TJObject, JAbstractCursor)
  private
    { methods }
    procedure close;
    procedure deactivate;
    function getBlob(const AArg0: Integer): IJavaArray<Byte>;
    function getColumnCount: Integer;
    function getColumnIndex(const AArg0: JString): Integer;
    function getColumnIndexOrThrow(const AArg0: JString): Integer;
    function getColumnName(const AArg0: Integer): JString;
    function getColumnNames: IJavaArray<JString>;
    function getCount: Integer;
    function getDouble(const AArg0: Integer): Double;
    function getExtras: JBundle;
    function getFloat(const AArg0: Integer): Single;
    function getInt(const AArg0: Integer): Integer;
    function getLong(const AArg0: Integer): Int64;
    function getNotificationUri: JUri;
    function getPosition: Integer;
    function getShort(const AArg0: Integer): ShortInt;
    function getString(const AArg0: Integer): JString;
    function getType(const AArg0: Integer): Integer;
    function getWantsAllOnMoveCalls: Boolean;
    function isAfterLast: Boolean;
    function isBeforeFirst: Boolean;
    function isClosed: Boolean;
    function isFirst: Boolean;
    function isLast: Boolean;
    function isNull(const AArg0: Integer): Boolean;
    function move(const AArg0: Integer): Boolean;
    function moveToFirst: Boolean;
    function moveToLast: Boolean;
    function moveToNext: Boolean;
    function moveToPosition(const AArg0: Integer): Boolean;
    function moveToPrevious: Boolean;
    function onMove(const AArg0: Integer; const AArg1: Integer): Boolean;
    procedure registerContentObserver(const AArg0: JContentObserver);
    procedure registerDataSetObserver(const AArg0: JDataSetObserver);
    function requery: Boolean;
    function respond(const AArg0: JBundle): JBundle;
    procedure setExtras(const AArg0: JBundle);
    procedure setNotificationUri(const AArg0: JContentResolver; const AArg1: JUri);
    procedure unregisterContentObserver(const AArg0: JContentObserver);
    procedure unregisterDataSetObserver(const AArg0: JDataSetObserver);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JAbstractCursor; overload;
    class function Wrap(const AObject: IJNIObject): JAbstractCursor; overload;
    { constructors }
    class function Create: JAbstractCursor; overload;
  end;

{ android.database.MatrixCursor }

  [JavaClassSignature('android/database/MatrixCursor')]
  JMatrixCursor = interface(JAbstractCursor)
    ['{8B0BE709-4AAC-44BC-9759-E730E6700ED9}']
    procedure addRow(const AArg0: JIterable); overload;
    procedure addRow(const AArg0: IJavaArray<JObject>); overload;
    function getBlob(const AArg0: Integer): IJavaArray<Byte>;
    function getColumnNames: IJavaArray<JString>;
    function getCount: Integer;
    function getDouble(const AArg0: Integer): Double;
    function getFloat(const AArg0: Integer): Single;
    function getInt(const AArg0: Integer): Integer;
    function getLong(const AArg0: Integer): Int64;
    function getShort(const AArg0: Integer): ShortInt;
    function getString(const AArg0: Integer): JString;
    function getType(const AArg0: Integer): Integer;
    function isNull(const AArg0: Integer): Boolean;
  end;

  [JavaClassSignature('android/database/MatrixCursor')]
  TJMatrixCursor = class(TJAbstractCursor, JMatrixCursor)
  private
    { methods }
    procedure addRow(const AArg0: JIterable); overload;
    procedure addRow(const AArg0: IJavaArray<JObject>); overload;
    function getBlob(const AArg0: Integer): IJavaArray<Byte>;
    function getColumnNames: IJavaArray<JString>;
    function getCount: Integer;
    function getDouble(const AArg0: Integer): Double;
    function getFloat(const AArg0: Integer): Single;
    function getInt(const AArg0: Integer): Integer;
    function getLong(const AArg0: Integer): Int64;
    function getShort(const AArg0: Integer): ShortInt;
    function getString(const AArg0: Integer): JString;
    function getType(const AArg0: Integer): Integer;
    function isNull(const AArg0: Integer): Boolean;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMatrixCursor; overload;
    class function Wrap(const AObject: IJNIObject): JMatrixCursor; overload;
    { constructors }
    class function Create(const AArg0: IJavaArray<JString>; const AArg1: Integer): JMatrixCursor; overload;
    class function Create(const AArg0: IJavaArray<JString>): JMatrixCursor; overload;
  end;

{ android.database.ContentObserver }

  [JavaClassSignature('android/database/ContentObserver')]
  JContentObserver = interface(JObject)
    ['{4DC32590-C762-4DCB-8A70-38BE84CF5951}']
    function deliverSelfNotifications: Boolean;
    procedure dispatchChange(const AArg0: Boolean); overload; deprecated 'Deprecated in 16';
    procedure dispatchChange(const AArg0: Boolean; const AArg1: JUri); overload;
    procedure onChange(const AArg0: Boolean; const AArg1: JUri); overload;
    procedure onChange(const AArg0: Boolean); overload;
  end;

  [JavaClassSignature('android/database/ContentObserver')]
  TJContentObserver = class(TJObject, JContentObserver)
  private
    { methods }
    function deliverSelfNotifications: Boolean;
    procedure dispatchChange(const AArg0: Boolean); overload; deprecated 'Deprecated in 16';
    procedure dispatchChange(const AArg0: Boolean; const AArg1: JUri); overload;
    procedure onChange(const AArg0: Boolean; const AArg1: JUri); overload;
    procedure onChange(const AArg0: Boolean); overload;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContentObserver; overload;
    class function Wrap(const AObject: IJNIObject): JContentObserver; overload;
    { constructors }
    class function Create(const AArg0: JHandler): JContentObserver; overload;
  end;

{ android.database.Cursor - interface }

  [JavaClassSignature('android/database/Cursor')]
  JCursor = interface(JCloseable)
    ['{633C77CB-E945-4328-BD59-07705E7B3D26}']
    procedure close;
    procedure deactivate; deprecated 'Deprecated in 16';
    function getBlob(const AArg0: Integer): IJavaArray<Byte>;
    function getColumnCount: Integer;
    function getColumnIndex(const AArg0: JString): Integer;
    function getColumnIndexOrThrow(const AArg0: JString): Integer;
    function getColumnName(const AArg0: Integer): JString;
    function getColumnNames: IJavaArray<JString>;
    function getCount: Integer;
    function getDouble(const AArg0: Integer): Double;
    function getExtras: JBundle;
    function getFloat(const AArg0: Integer): Single;
    function getInt(const AArg0: Integer): Integer;
    function getLong(const AArg0: Integer): Int64;
    function getNotificationUri: JUri;
    function getPosition: Integer;
    function getShort(const AArg0: Integer): ShortInt;
    function getString(const AArg0: Integer): JString;
    function getType(const AArg0: Integer): Integer;
    function getWantsAllOnMoveCalls: Boolean;
    function isAfterLast: Boolean;
    function isBeforeFirst: Boolean;
    function isClosed: Boolean;
    function isFirst: Boolean;
    function isLast: Boolean;
    function isNull(const AArg0: Integer): Boolean;
    function move(const AArg0: Integer): Boolean;
    function moveToFirst: Boolean;
    function moveToLast: Boolean;
    function moveToNext: Boolean;
    function moveToPosition(const AArg0: Integer): Boolean;
    function moveToPrevious: Boolean;
    procedure registerContentObserver(const AArg0: JContentObserver);
    procedure registerDataSetObserver(const AArg0: JDataSetObserver);
    function requery: Boolean; deprecated 'Deprecated in 15';
    function respond(const AArg0: JBundle): JBundle;
    procedure setExtras(const AArg0: JBundle); // Introduced in 23';
    procedure setNotificationUri(const AArg0: JContentResolver; const AArg1: JUri);
    procedure unregisterContentObserver(const AArg0: JContentObserver);
    procedure unregisterDataSetObserver(const AArg0: JDataSetObserver);
  end;

  [JavaClassSignature('android/database/Cursor')]
  TJCursor = class(TJCloseable, JCursor)
  private
    { methods }
    procedure close;
    procedure deactivate; deprecated 'Deprecated in 16';
    function getBlob(const AArg0: Integer): IJavaArray<Byte>;
    function getColumnCount: Integer;
    function getColumnIndex(const AArg0: JString): Integer;
    function getColumnIndexOrThrow(const AArg0: JString): Integer;
    function getColumnName(const AArg0: Integer): JString;
    function getColumnNames: IJavaArray<JString>;
    function getCount: Integer;
    function getDouble(const AArg0: Integer): Double;
    function getExtras: JBundle;
    function getFloat(const AArg0: Integer): Single;
    function getInt(const AArg0: Integer): Integer;
    function getLong(const AArg0: Integer): Int64;
    function getNotificationUri: JUri;
    function getPosition: Integer;
    function getShort(const AArg0: Integer): ShortInt;
    function getString(const AArg0: Integer): JString;
    function getType(const AArg0: Integer): Integer;
    function getWantsAllOnMoveCalls: Boolean;
    function isAfterLast: Boolean;
    function isBeforeFirst: Boolean;
    function isClosed: Boolean;
    function isFirst: Boolean;
    function isLast: Boolean;
    function isNull(const AArg0: Integer): Boolean;
    function move(const AArg0: Integer): Boolean;
    function moveToFirst: Boolean;
    function moveToLast: Boolean;
    function moveToNext: Boolean;
    function moveToPosition(const AArg0: Integer): Boolean;
    function moveToPrevious: Boolean;
    procedure registerContentObserver(const AArg0: JContentObserver);
    procedure registerDataSetObserver(const AArg0: JDataSetObserver);
    function requery: Boolean; deprecated 'Deprecated in 15';
    function respond(const AArg0: JBundle): JBundle;
    procedure setExtras(const AArg0: JBundle); // Introduced in 23';
    procedure setNotificationUri(const AArg0: JContentResolver; const AArg1: JUri);
    procedure unregisterContentObserver(const AArg0: JContentObserver);
    procedure unregisterDataSetObserver(const AArg0: JDataSetObserver);
  protected
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JCursor; overload;
    class function Wrap(const AObject: IJNIObject): JCursor; overload;
    { constants }
    class function FIELD_TYPE_BLOB: Integer;
    class function FIELD_TYPE_FLOAT: Integer;
    class function FIELD_TYPE_INTEGER: Integer;
    class function FIELD_TYPE_NULL: Integer;
    class function FIELD_TYPE_STRING: Integer;
  end;

{ android.database.DataSetObserver }

  [JavaClassSignature('android/database/DataSetObserver')]
  JDataSetObserver = interface(JObject)
    ['{346B20BC-372A-443D-8C94-D395CD878CD7}']
    procedure onChanged;
    procedure onInvalidated;
  end;

  [JavaClassSignature('android/database/DataSetObserver')]
  TJDataSetObserver = class(TJObject, JDataSetObserver)
  private
    { methods }
    procedure onChanged;
    procedure onInvalidated;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDataSetObserver; overload;
    class function Wrap(const AObject: IJNIObject): JDataSetObserver; overload;
    { constructors }
    class function Create: JDataSetObserver; overload;
  end;

{ android.database.Observable }

  [JavaClassSignature('android/database/Observable')]
  JObservable = interface(JObject)
    ['{52BE5D83-B3E5-41E0-B9B8-374ED71E9F12}']
    procedure registerObserver(const AArg0: JObject);
    procedure unregisterAll;
    procedure unregisterObserver(const AArg0: JObject);
  end;

  [JavaClassSignature('android/database/Observable')]
  TJObservable = class(TJObject, JObservable)
  private
    { methods }
    procedure registerObserver(const AArg0: JObject);
    procedure unregisterAll;
    procedure unregisterObserver(const AArg0: JObject);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JObservable; overload;
    class function Wrap(const AObject: IJNIObject): JObservable; overload;
    { constructors }
    class function Create: JObservable; overload;
  end;

{ android.database.DataSetObservable }

  [JavaClassSignature('android/database/DataSetObservable')]
  JDataSetObservable = interface(JObservable)
    ['{D70B0704-C8A3-45AB-A25D-7CE9E47D7AB6}']
    procedure notifyChanged;
    procedure notifyInvalidated;
  end;

  [JavaClassSignature('android/database/DataSetObservable')]
  TJDataSetObservable = class(TJObservable, JDataSetObservable)
  private
    { methods }
    procedure notifyChanged;
    procedure notifyInvalidated;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDataSetObservable; overload;
    class function Wrap(const AObject: IJNIObject): JDataSetObservable; overload;
    { constructors }
    class function Create: JDataSetObservable; overload;
  end;

{ android.graphics.Bitmap }

  [JavaClassSignature('android/graphics/Bitmap')]
  JBitmap = interface(JObject)
    ['{DF950A10-1E0E-4381-AB0E-46B091E45370}']
    function compress(const AArg0: JBitmap_CompressFormat; const AArg1: Integer; const AArg2: JOutputStream): Boolean;
    function copy(const AArg0: JBitmap_Config; const AArg1: Boolean): JBitmap;
    function describeContents: Integer;
    procedure eraseColor(const AArg0: Integer);
    function extractAlpha: JBitmap; overload;
    function extractAlpha(const AArg0: JPaint; const AArg1: IJavaArray<Integer>): JBitmap; overload;
    function getAllocationByteCount: Integer;
    function getByteCount: Integer;
    function getConfig: JBitmap_Config;
    function getDensity: Integer;
    function getGenerationId: Integer;
    function getHeight: Integer;
    function getNinePatchChunk: IJavaArray<Byte>;
    function getPixel(const AArg0: Integer; const AArg1: Integer): Integer;
    procedure getPixels(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer);
    function getRowBytes: Integer;
    function getScaledHeight(const AArg0: JDisplayMetrics): Integer; overload;
    function getScaledHeight(const AArg0: Integer): Integer; overload;
    function getScaledHeight(const AArg0: JCanvas): Integer; overload;
    function getScaledWidth(const AArg0: JCanvas): Integer; overload;
    function getScaledWidth(const AArg0: Integer): Integer; overload;
    function getScaledWidth(const AArg0: JDisplayMetrics): Integer; overload;
    function getWidth: Integer;
    function hasAlpha: Boolean;
    function hasMipMap: Boolean;
    function isMutable: Boolean;
    function isPremultiplied: Boolean;
    function isRecycled: Boolean;
    procedure prepareToDraw;
    procedure reconfigure(const AArg0: Integer; const AArg1: Integer; const AArg2: JBitmap_Config);
    procedure recycle;
    function sameAs(const AArg0: JBitmap): Boolean;
    procedure setConfig(const AArg0: JBitmap_Config);
    procedure setDensity(const AArg0: Integer);
    procedure setHasAlpha(const AArg0: Boolean);
    procedure setHasMipMap(const AArg0: Boolean);
    procedure setHeight(const AArg0: Integer);
    procedure setPixel(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
    procedure setPixels(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer);
    procedure setPremultiplied(const AArg0: Boolean);
    procedure setWidth(const AArg0: Integer);
  end;

  [JavaClassSignature('android/graphics/Bitmap')]
  TJBitmap = class(TJObject, JBitmap)
  private
    { methods }
    function compress(const AArg0: JBitmap_CompressFormat; const AArg1: Integer; const AArg2: JOutputStream): Boolean;
    function copy(const AArg0: JBitmap_Config; const AArg1: Boolean): JBitmap;
    function describeContents: Integer;
    procedure eraseColor(const AArg0: Integer);
    function extractAlpha: JBitmap; overload;
    function extractAlpha(const AArg0: JPaint; const AArg1: IJavaArray<Integer>): JBitmap; overload;
    function getAllocationByteCount: Integer;
    function getByteCount: Integer;
    function getConfig: JBitmap_Config;
    function getDensity: Integer;
    function getGenerationId: Integer;
    function getHeight: Integer;
    function getNinePatchChunk: IJavaArray<Byte>;
    function getPixel(const AArg0: Integer; const AArg1: Integer): Integer;
    procedure getPixels(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer);
    function getRowBytes: Integer;
    function getScaledHeight(const AArg0: JDisplayMetrics): Integer; overload;
    function getScaledHeight(const AArg0: Integer): Integer; overload;
    function getScaledHeight(const AArg0: JCanvas): Integer; overload;
    function getScaledWidth(const AArg0: JCanvas): Integer; overload;
    function getScaledWidth(const AArg0: Integer): Integer; overload;
    function getScaledWidth(const AArg0: JDisplayMetrics): Integer; overload;
    function getWidth: Integer;
    function hasAlpha: Boolean;
    function hasMipMap: Boolean;
    function isMutable: Boolean;
    function isPremultiplied: Boolean;
    function isRecycled: Boolean;
    procedure prepareToDraw;
    procedure reconfigure(const AArg0: Integer; const AArg1: Integer; const AArg2: JBitmap_Config);
    procedure recycle;
    function sameAs(const AArg0: JBitmap): Boolean;
    procedure setConfig(const AArg0: JBitmap_Config);
    procedure setDensity(const AArg0: Integer);
    procedure setHasAlpha(const AArg0: Boolean);
    procedure setHasMipMap(const AArg0: Boolean);
    procedure setHeight(const AArg0: Integer);
    procedure setPixel(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
    procedure setPixels(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer);
    procedure setPremultiplied(const AArg0: Boolean);
    procedure setWidth(const AArg0: Integer);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBitmap; overload;
    class function Wrap(const AObject: IJNIObject): JBitmap; overload;
    { constants }
    class function DENSITY_NONE: Integer;
    { methods }
    class function createBitmap(const AArg0: Integer; const AArg1: Integer; const AArg2: JBitmap_Config): JBitmap; overload;
    class function createBitmap(const AArg0: JDisplayMetrics; const AArg1: Integer; const AArg2: Integer; const AArg3: JBitmap_Config): JBitmap; overload;
    class function createBitmap(const AArg0: Integer; const AArg1: Integer; const AArg2: JBitmap_Config; const AArg3: Boolean): JBitmap; overload; // Introduced in 26';
    class function createBitmap(const AArg0: JDisplayMetrics; const AArg1: Integer; const AArg2: Integer; const AArg3: JBitmap_Config; const AArg4: Boolean): JBitmap; overload; // Introduced in 26';
    class function createBitmap(const AArg0: JDisplayMetrics; const AArg1: IJavaArray<Integer>; const AArg2: Integer; const AArg3: Integer; const AArg4: JBitmap_Config): JBitmap; overload;
    class function createBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: JBitmap_Config): JBitmap; overload;
    class function createBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBitmap_Config): JBitmap; overload;
    class function createBitmap(const AArg0: JDisplayMetrics; const AArg1: IJavaArray<Integer>; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JBitmap_Config): JBitmap; overload;
    class function createBitmap(const AArg0: JBitmap): JBitmap; overload;
    class function createBitmap(const AArg0: JBitmap; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer): JBitmap; overload;
    class function createBitmap(const AArg0: JBitmap; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JMatrix; const AArg6: Boolean): JBitmap; overload;
    class function createScaledBitmap(const AArg0: JBitmap; const AArg1: Integer; const AArg2: Integer; const AArg3: Boolean): JBitmap;
  end;

{ android.graphics.Bitmap_CompressFormat }

  [JavaClassSignature('android/graphics/Bitmap$CompressFormat')]
  JBitmap_CompressFormat = interface(JEnum)
    ['{716DBF04-B773-477A-8EE5-25FD8ADF09E1}']
  end;

  [JavaClassSignature('android/graphics/Bitmap$CompressFormat')]
  TJBitmap_CompressFormat = class(TJEnum, JBitmap_CompressFormat)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBitmap_CompressFormat; overload;
    class function Wrap(const AObject: IJNIObject): JBitmap_CompressFormat; overload;
    { constants }
    class function JPEG: JBitmap_CompressFormat;
    class function PNG: JBitmap_CompressFormat;
    class function WEBP: JBitmap_CompressFormat;
    { methods }
    class function valueOf(const AArg0: JString): JBitmap_CompressFormat; overload;
    class function values: IJavaArray<JBitmap_CompressFormat>;
  end;

{ android.graphics.Bitmap_Config }

  [JavaClassSignature('android/graphics/Bitmap$Config')]
  JBitmap_Config = interface(JEnum)
    ['{2FBBDE99-36D0-4B4E-9A36-8800D25069E6}']
  end;

  [JavaClassSignature('android/graphics/Bitmap$Config')]
  TJBitmap_Config = class(TJEnum, JBitmap_Config)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBitmap_Config; overload;
    class function Wrap(const AObject: IJNIObject): JBitmap_Config; overload;
    { constants }
    class function ALPHA_8: JBitmap_Config;
    class function ARGB_4444: JBitmap_Config;
    class function ARGB_8888: JBitmap_Config;
    class function HARDWARE: JBitmap_Config;
    class function RGBA_F16: JBitmap_Config;
    class function RGB_565: JBitmap_Config;
    { methods }
    class function valueOf(const AArg0: JString): JBitmap_Config; overload;
    class function values: IJavaArray<JBitmap_Config>;
  end;

{ android.graphics.BitmapFactory }

  [JavaClassSignature('android/graphics/BitmapFactory')]
  JBitmapFactory = interface(JObject)
    ['{A6EB25AD-DF7F-4FE8-8DA3-B7128B04BD00}']
  end;

  [JavaClassSignature('android/graphics/BitmapFactory')]
  TJBitmapFactory = class(TJObject, JBitmapFactory)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBitmapFactory; overload;
    class function Wrap(const AObject: IJNIObject): JBitmapFactory; overload;
    { constructors }
    class function Create: JBitmapFactory; overload;
    { methods }
    class function decodeByteArray(const AArg0: IJavaArray<Byte>; const AArg1: Integer; const AArg2: Integer): JBitmap; overload;
    class function decodeByteArray(const AArg0: IJavaArray<Byte>; const AArg1: Integer; const AArg2: Integer; const AArg3: JBitmapFactory_Options): JBitmap; overload;
    class function decodeFile(const AArg0: JString; const AArg1: JBitmapFactory_Options): JBitmap; overload;
    class function decodeFile(const AArg0: JString): JBitmap; overload;
    class function decodeFileDescriptor(const AArg0: JFileDescriptor): JBitmap; overload;
    class function decodeFileDescriptor(const AArg0: JFileDescriptor; const AArg1: JRect; const AArg2: JBitmapFactory_Options): JBitmap; overload;
    class function decodeResource(const AArg0: JResources; const AArg1: Integer; const AArg2: JBitmapFactory_Options): JBitmap; overload;
    class function decodeResource(const AArg0: JResources; const AArg1: Integer): JBitmap; overload;
    class function decodeResourceStream(const AArg0: JResources; const AArg1: JTypedValue; const AArg2: JInputStream; const AArg3: JRect; const AArg4: JBitmapFactory_Options): JBitmap;
    class function decodeStream(const AArg0: JInputStream): JBitmap; overload;
    class function decodeStream(const AArg0: JInputStream; const AArg1: JRect; const AArg2: JBitmapFactory_Options): JBitmap; overload;
  end;

{ android.graphics.BitmapFactory_Options }

  [JavaClassSignature('android/graphics/BitmapFactory$Options')]
  JBitmapFactory_Options = interface(JObject)
    ['{B981D530-08B8-4CC1-B230-0CB6E6E73AD5}']
    function _GetInBitmap: JBitmap;
    procedure _SetInBitmap(const AValue: JBitmap);
    function _GetInDensity: Integer;
    procedure _SetInDensity(const AValue: Integer);
    function _GetInDither: Boolean;
    procedure _SetInDither(const AValue: Boolean);
    function _GetInInputShareable: Boolean;
    procedure _SetInInputShareable(const AValue: Boolean);
    function _GetInJustDecodeBounds: Boolean;
    procedure _SetInJustDecodeBounds(const AValue: Boolean);
    function _GetInMutable: Boolean;
    procedure _SetInMutable(const AValue: Boolean);
    function _GetInPreferQualityOverSpeed: Boolean;
    procedure _SetInPreferQualityOverSpeed(const AValue: Boolean);
    function _GetInPreferredConfig: JBitmap_Config;
    procedure _SetInPreferredConfig(const AValue: JBitmap_Config);
    function _GetInPremultiplied: Boolean;
    procedure _SetInPremultiplied(const AValue: Boolean);
    function _GetInPurgeable: Boolean;
    procedure _SetInPurgeable(const AValue: Boolean);
    function _GetInSampleSize: Integer;
    procedure _SetInSampleSize(const AValue: Integer);
    function _GetInScaled: Boolean;
    procedure _SetInScaled(const AValue: Boolean);
    function _GetInScreenDensity: Integer;
    procedure _SetInScreenDensity(const AValue: Integer);
    function _GetInTargetDensity: Integer;
    procedure _SetInTargetDensity(const AValue: Integer);
    function _GetInTempStorage: IJavaArray<Byte>;
    procedure _SetInTempStorage(const AValue: IJavaArray<Byte>);
    function _GetMCancel: Boolean;
    procedure _SetMCancel(const AValue: Boolean);
    function _GetOutConfig: JBitmap_Config;
    procedure _SetOutConfig(const AValue: JBitmap_Config);
    function _GetOutHeight: Integer;
    procedure _SetOutHeight(const AValue: Integer);
    function _GetOutMimeType: JString;
    procedure _SetOutMimeType(const AValue: JString);
    function _GetOutWidth: Integer;
    procedure _SetOutWidth(const AValue: Integer);
    procedure requestCancelDecode; deprecated 'Deprecated in 24';
    { constants }
    property inBitmap: JBitmap read _GetInBitmap write _SetInBitmap;
    property inDensity: Integer read _GetInDensity write _SetInDensity;
    property inDither: Boolean read _GetInDither write _SetInDither;
    property inInputShareable: Boolean read _GetInInputShareable write _SetInInputShareable;
    property inJustDecodeBounds: Boolean read _GetInJustDecodeBounds write _SetInJustDecodeBounds;
    property inMutable: Boolean read _GetInMutable write _SetInMutable;
    property inPreferQualityOverSpeed: Boolean read _GetInPreferQualityOverSpeed write _SetInPreferQualityOverSpeed;
    property inPreferredConfig: JBitmap_Config read _GetInPreferredConfig write _SetInPreferredConfig;
    property inPremultiplied: Boolean read _GetInPremultiplied write _SetInPremultiplied;
    property inPurgeable: Boolean read _GetInPurgeable write _SetInPurgeable;
    property inSampleSize: Integer read _GetInSampleSize write _SetInSampleSize;
    property inScaled: Boolean read _GetInScaled write _SetInScaled;
    property inScreenDensity: Integer read _GetInScreenDensity write _SetInScreenDensity;
    property inTargetDensity: Integer read _GetInTargetDensity write _SetInTargetDensity;
    property inTempStorage: IJavaArray<Byte> read _GetInTempStorage write _SetInTempStorage;
    property mCancel: Boolean read _GetMCancel write _SetMCancel;
    property outConfig: JBitmap_Config read _GetOutConfig write _SetOutConfig;
    property outHeight: Integer read _GetOutHeight write _SetOutHeight;
    property outMimeType: JString read _GetOutMimeType write _SetOutMimeType;
    property outWidth: Integer read _GetOutWidth write _SetOutWidth;
  end;

  [JavaClassSignature('android/graphics/BitmapFactory$Options')]
  TJBitmapFactory_Options = class(TJObject, JBitmapFactory_Options)
  private
    function _GetInBitmap: JBitmap;
    procedure _SetInBitmap(const AValue: JBitmap);
    function _GetInDensity: Integer;
    procedure _SetInDensity(const AValue: Integer);
    function _GetInDither: Boolean;
    procedure _SetInDither(const AValue: Boolean);
    function _GetInInputShareable: Boolean;
    procedure _SetInInputShareable(const AValue: Boolean);
    function _GetInJustDecodeBounds: Boolean;
    procedure _SetInJustDecodeBounds(const AValue: Boolean);
    function _GetInMutable: Boolean;
    procedure _SetInMutable(const AValue: Boolean);
    function _GetInPreferQualityOverSpeed: Boolean;
    procedure _SetInPreferQualityOverSpeed(const AValue: Boolean);
    function _GetInPreferredConfig: JBitmap_Config;
    procedure _SetInPreferredConfig(const AValue: JBitmap_Config);
    function _GetInPremultiplied: Boolean;
    procedure _SetInPremultiplied(const AValue: Boolean);
    function _GetInPurgeable: Boolean;
    procedure _SetInPurgeable(const AValue: Boolean);
    function _GetInSampleSize: Integer;
    procedure _SetInSampleSize(const AValue: Integer);
    function _GetInScaled: Boolean;
    procedure _SetInScaled(const AValue: Boolean);
    function _GetInScreenDensity: Integer;
    procedure _SetInScreenDensity(const AValue: Integer);
    function _GetInTargetDensity: Integer;
    procedure _SetInTargetDensity(const AValue: Integer);
    function _GetInTempStorage: IJavaArray<Byte>;
    procedure _SetInTempStorage(const AValue: IJavaArray<Byte>);
    function _GetMCancel: Boolean;
    procedure _SetMCancel(const AValue: Boolean);
    function _GetOutConfig: JBitmap_Config;
    procedure _SetOutConfig(const AValue: JBitmap_Config);
    function _GetOutHeight: Integer;
    procedure _SetOutHeight(const AValue: Integer);
    function _GetOutMimeType: JString;
    procedure _SetOutMimeType(const AValue: JString);
    function _GetOutWidth: Integer;
    procedure _SetOutWidth(const AValue: Integer);
  private
    { methods }
    procedure requestCancelDecode; deprecated 'Deprecated in 24';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBitmapFactory_Options; overload;
    class function Wrap(const AObject: IJNIObject): JBitmapFactory_Options; overload;
    { constructors }
    class function Create: JBitmapFactory_Options; overload;
  end;

{ android.graphics.Canvas }

  [JavaClassSignature('android/graphics/Canvas')]
  JCanvas = interface(JObject)
    ['{71B24239-DD6B-4831-8960-8E945BEE0D2E}']
    function clipOutPath(const AArg0: JPath): Boolean; // Introduced in 26';
    function clipOutRect(const AArg0: JRectF): Boolean; overload; // Introduced in 26';
    function clipOutRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload; // Introduced in 26';
    function clipOutRect(const AArg0: JRect): Boolean; overload; // Introduced in 26';
    function clipOutRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload; // Introduced in 26';
    function clipPath(const AArg0: JPath): Boolean;
    function clipRect(const AArg0: JRectF): Boolean; overload;
    function clipRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload;
    function clipRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function clipRect(const AArg0: JRect): Boolean; overload;
    procedure concat(const AArg0: JMatrix);
    procedure drawARGB(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure drawArc(const AArg0: JRectF; const AArg1: Single; const AArg2: Single; const AArg3: Boolean; const AArg4: JPaint); overload;
    procedure drawArc(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: Boolean; const AArg7: JPaint); overload;
    procedure drawBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Boolean; const AArg8: JPaint); overload; deprecated 'Deprecated in 21';
    procedure drawBitmap(const AArg0: JBitmap; const AArg1: JMatrix; const AArg2: JPaint); overload;
    procedure drawBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: Integer; const AArg6: Integer; const AArg7: Boolean; const AArg8: JPaint); overload; deprecated 'Deprecated in 21';
    procedure drawBitmap(const AArg0: JBitmap; const AArg1: JRect; const AArg2: JRect; const AArg3: JPaint); overload;
    procedure drawBitmap(const AArg0: JBitmap; const AArg1: Single; const AArg2: Single; const AArg3: JPaint); overload;
    procedure drawBitmap(const AArg0: JBitmap; const AArg1: JRect; const AArg2: JRectF; const AArg3: JPaint); overload;
    procedure drawBitmapMesh(const AArg0: JBitmap; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>; const AArg4: Integer; const AArg5: IJavaArray<Integer>; const AArg6: Integer; const AArg7: JPaint);
    procedure drawCircle(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: JPaint);
    procedure drawColor(const AArg0: Integer; const AArg1: JPorterDuff_Mode); overload;
    procedure drawColor(const AArg0: Integer); overload;
    procedure drawLine(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint);
    procedure drawLines(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: Integer; const AArg3: JPaint); overload;
    procedure drawLines(const AArg0: IJavaArray<Single>; const AArg1: JPaint); overload;
    procedure drawOval(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint); overload;
    procedure drawOval(const AArg0: JRectF; const AArg1: JPaint); overload;
    procedure drawPaint(const AArg0: JPaint);
    procedure drawPath(const AArg0: JPath; const AArg1: JPaint);
    procedure drawPoint(const AArg0: Single; const AArg1: Single; const AArg2: JPaint);
    procedure drawPoints(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: Integer; const AArg3: JPaint); overload;
    procedure drawPoints(const AArg0: IJavaArray<Single>; const AArg1: JPaint); overload;
    procedure drawPosText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>; const AArg4: JPaint); overload; deprecated 'Deprecated in 16';
    procedure drawPosText(const AArg0: JString; const AArg1: IJavaArray<Single>; const AArg2: JPaint); overload; deprecated 'Deprecated in 16';
    procedure drawRGB(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
    procedure drawRect(const AArg0: JRectF; const AArg1: JPaint); overload;
    procedure drawRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint); overload;
    procedure drawRect(const AArg0: JRect; const AArg1: JPaint); overload;
    procedure drawRoundRect(const AArg0: JRectF; const AArg1: Single; const AArg2: Single; const AArg3: JPaint); overload;
    procedure drawRoundRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: JPaint); overload;
    procedure drawText(const AArg0: JString; const AArg1: Single; const AArg2: Single; const AArg3: JPaint); overload;
    procedure drawText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPaint); overload;
    procedure drawText(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPaint); overload;
    procedure drawText(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPaint); overload;
    procedure drawTextOnPath(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: JPath; const AArg4: Single; const AArg5: Single; const AArg6: JPaint); overload;
    procedure drawTextOnPath(const AArg0: JString; const AArg1: JPath; const AArg2: Single; const AArg3: Single; const AArg4: JPaint); overload;
    procedure drawTextRun(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Single; const AArg6: Single; const AArg7: Boolean; const AArg8: JPaint); overload; // Introduced in 23';
    procedure drawTextRun(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Single; const AArg6: Single; const AArg7: Boolean; const AArg8: JPaint); overload; // Introduced in 23';
    function getClipBounds(const AArg0: JRect): Boolean; overload;
    function getClipBounds: JRect; overload;
    function getDensity: Integer;
    function getHeight: Integer;
    function getMatrix: JMatrix; overload; deprecated 'Deprecated in 16';
    procedure getMatrix(const AArg0: JMatrix); overload; deprecated 'Deprecated in 16';
    function getMaximumBitmapHeight: Integer;
    function getMaximumBitmapWidth: Integer;
    function getSaveCount: Integer;
    function getWidth: Integer;
    function isHardwareAccelerated: Boolean;
    function isOpaque: Boolean;
    procedure restore;
    procedure restoreToCount(const AArg0: Integer);
    procedure rotate(const AArg0: Single); overload;
    procedure rotate(const AArg0: Single; const AArg1: Single; const AArg2: Single); overload;
    function save: Integer;
    function saveLayer(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint; const AArg5: Integer): Integer; overload; deprecated 'Deprecated in 26';
    function saveLayer(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint): Integer; overload;
    function saveLayer(const AArg0: JRectF; const AArg1: JPaint; const AArg2: Integer): Integer; overload; deprecated 'Deprecated in 26';
    function saveLayer(const AArg0: JRectF; const AArg1: JPaint): Integer; overload;
    function saveLayerAlpha(const AArg0: JRectF; const AArg1: Integer): Integer; overload;
    function saveLayerAlpha(const AArg0: JRectF; const AArg1: Integer; const AArg2: Integer): Integer; overload; deprecated 'Deprecated in 26';
    function saveLayerAlpha(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Integer; const AArg5: Integer): Integer; overload; deprecated 'Deprecated in 26';
    function saveLayerAlpha(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Integer): Integer; overload;
    procedure scale(const AArg0: Single; const AArg1: Single); overload;
    procedure scale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setBitmap(const AArg0: JBitmap);
    procedure setDensity(const AArg0: Integer);
    procedure setMatrix(const AArg0: JMatrix);
    procedure skew(const AArg0: Single; const AArg1: Single);
    procedure translate(const AArg0: Single; const AArg1: Single);
  end;

  [JavaClassSignature('android/graphics/Canvas')]
  TJCanvas = class(TJObject, JCanvas)
  private
    { methods }
    function clipOutPath(const AArg0: JPath): Boolean; // Introduced in 26';
    function clipOutRect(const AArg0: JRectF): Boolean; overload; // Introduced in 26';
    function clipOutRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload; // Introduced in 26';
    function clipOutRect(const AArg0: JRect): Boolean; overload; // Introduced in 26';
    function clipOutRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload; // Introduced in 26';
    function clipPath(const AArg0: JPath): Boolean;
    function clipRect(const AArg0: JRectF): Boolean; overload;
    function clipRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload;
    function clipRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function clipRect(const AArg0: JRect): Boolean; overload;
    procedure concat(const AArg0: JMatrix);
    procedure drawARGB(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure drawArc(const AArg0: JRectF; const AArg1: Single; const AArg2: Single; const AArg3: Boolean; const AArg4: JPaint); overload;
    procedure drawArc(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: Boolean; const AArg7: JPaint); overload;
    procedure drawBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Boolean; const AArg8: JPaint); overload; deprecated 'Deprecated in 21';
    procedure drawBitmap(const AArg0: JBitmap; const AArg1: JMatrix; const AArg2: JPaint); overload;
    procedure drawBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: Integer; const AArg6: Integer; const AArg7: Boolean; const AArg8: JPaint); overload; deprecated 'Deprecated in 21';
    procedure drawBitmap(const AArg0: JBitmap; const AArg1: JRect; const AArg2: JRect; const AArg3: JPaint); overload;
    procedure drawBitmap(const AArg0: JBitmap; const AArg1: Single; const AArg2: Single; const AArg3: JPaint); overload;
    procedure drawBitmap(const AArg0: JBitmap; const AArg1: JRect; const AArg2: JRectF; const AArg3: JPaint); overload;
    procedure drawBitmapMesh(const AArg0: JBitmap; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>; const AArg4: Integer; const AArg5: IJavaArray<Integer>; const AArg6: Integer; const AArg7: JPaint);
    procedure drawCircle(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: JPaint);
    procedure drawColor(const AArg0: Integer; const AArg1: JPorterDuff_Mode); overload;
    procedure drawColor(const AArg0: Integer); overload;
    procedure drawLine(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint);
    procedure drawLines(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: Integer; const AArg3: JPaint); overload;
    procedure drawLines(const AArg0: IJavaArray<Single>; const AArg1: JPaint); overload;
    procedure drawOval(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint); overload;
    procedure drawOval(const AArg0: JRectF; const AArg1: JPaint); overload;
    procedure drawPaint(const AArg0: JPaint);
    procedure drawPath(const AArg0: JPath; const AArg1: JPaint);
    procedure drawPoint(const AArg0: Single; const AArg1: Single; const AArg2: JPaint);
    procedure drawPoints(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: Integer; const AArg3: JPaint); overload;
    procedure drawPoints(const AArg0: IJavaArray<Single>; const AArg1: JPaint); overload;
    procedure drawPosText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>; const AArg4: JPaint); overload; deprecated 'Deprecated in 16';
    procedure drawPosText(const AArg0: JString; const AArg1: IJavaArray<Single>; const AArg2: JPaint); overload; deprecated 'Deprecated in 16';
    procedure drawRGB(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
    procedure drawRect(const AArg0: JRectF; const AArg1: JPaint); overload;
    procedure drawRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint); overload;
    procedure drawRect(const AArg0: JRect; const AArg1: JPaint); overload;
    procedure drawRoundRect(const AArg0: JRectF; const AArg1: Single; const AArg2: Single; const AArg3: JPaint); overload;
    procedure drawRoundRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: JPaint); overload;
    procedure drawText(const AArg0: JString; const AArg1: Single; const AArg2: Single; const AArg3: JPaint); overload;
    procedure drawText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPaint); overload;
    procedure drawText(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPaint); overload;
    procedure drawText(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPaint); overload;
    procedure drawTextOnPath(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: JPath; const AArg4: Single; const AArg5: Single; const AArg6: JPaint); overload;
    procedure drawTextOnPath(const AArg0: JString; const AArg1: JPath; const AArg2: Single; const AArg3: Single; const AArg4: JPaint); overload;
    procedure drawTextRun(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Single; const AArg6: Single; const AArg7: Boolean; const AArg8: JPaint); overload; // Introduced in 23';
    procedure drawTextRun(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Single; const AArg6: Single; const AArg7: Boolean; const AArg8: JPaint); overload; // Introduced in 23';
    function getClipBounds(const AArg0: JRect): Boolean; overload;
    function getClipBounds: JRect; overload;
    function getDensity: Integer;
    function getHeight: Integer;
    function getMatrix: JMatrix; overload; deprecated 'Deprecated in 16';
    procedure getMatrix(const AArg0: JMatrix); overload; deprecated 'Deprecated in 16';
    function getMaximumBitmapHeight: Integer;
    function getMaximumBitmapWidth: Integer;
    function getSaveCount: Integer;
    function getWidth: Integer;
    function isHardwareAccelerated: Boolean;
    function isOpaque: Boolean;
    procedure restore;
    procedure restoreToCount(const AArg0: Integer);
    procedure rotate(const AArg0: Single); overload;
    procedure rotate(const AArg0: Single; const AArg1: Single; const AArg2: Single); overload;
    function save: Integer;
    function saveLayer(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint; const AArg5: Integer): Integer; overload; deprecated 'Deprecated in 26';
    function saveLayer(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint): Integer; overload;
    function saveLayer(const AArg0: JRectF; const AArg1: JPaint; const AArg2: Integer): Integer; overload; deprecated 'Deprecated in 26';
    function saveLayer(const AArg0: JRectF; const AArg1: JPaint): Integer; overload;
    function saveLayerAlpha(const AArg0: JRectF; const AArg1: Integer): Integer; overload;
    function saveLayerAlpha(const AArg0: JRectF; const AArg1: Integer; const AArg2: Integer): Integer; overload; deprecated 'Deprecated in 26';
    function saveLayerAlpha(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Integer; const AArg5: Integer): Integer; overload; deprecated 'Deprecated in 26';
    function saveLayerAlpha(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Integer): Integer; overload;
    procedure scale(const AArg0: Single; const AArg1: Single); overload;
    procedure scale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setBitmap(const AArg0: JBitmap);
    procedure setDensity(const AArg0: Integer);
    procedure setMatrix(const AArg0: JMatrix);
    procedure skew(const AArg0: Single; const AArg1: Single);
    procedure translate(const AArg0: Single; const AArg1: Single);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JCanvas; overload;
    class function Wrap(const AObject: IJNIObject): JCanvas; overload;
    { constructors }
    class function Create: JCanvas; overload;
    class function Create(const AArg0: JBitmap): JCanvas; overload;
    { constants }
    class function ALL_SAVE_FLAG: Integer;
  end;

{ android.graphics.Color }

  [JavaClassSignature('android/graphics/Color')]
  JColor = interface(JObject)
    ['{DB18925A-8D67-447E-A2FB-B3813FA6DBF9}']
    function alpha: Single; overload; // Introduced in 26';
    function blue: Single; overload; // Introduced in 26';
    function equals(const AArg0: JObject): Boolean;
    function getComponent(const AArg0: Integer): Single; // Introduced in 26';
    function getComponentCount: Integer; // Introduced in 26';
    function getComponents: IJavaArray<Single>; overload; // Introduced in 26';
    function getComponents(const AArg0: IJavaArray<Single>): IJavaArray<Single>; overload; // Introduced in 26';
    function green: Single; overload; // Introduced in 26';
    function hashCode: Integer;
    function isSrgb: Boolean; overload; // Introduced in 26';
    function isWideGamut: Boolean; overload; // Introduced in 26';
    function luminance: Single; overload; // Introduced in 26';
    function pack: Int64; overload; // Introduced in 26';
    function red: Single; overload; // Introduced in 26';
    function toArgb: Integer; overload; // Introduced in 26';
    function toString: JString;
  end;

  [JavaClassSignature('android/graphics/Color')]
  TJColor = class(TJObject, JColor)
  private
    { methods }
    function alpha: Single; overload; // Introduced in 26';
    function blue: Single; overload; // Introduced in 26';
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function getComponent(const AArg0: Integer): Single; // Introduced in 26';
    function getComponentCount: Integer; // Introduced in 26';
    function getComponents: IJavaArray<Single>; overload; // Introduced in 26';
    function getComponents(const AArg0: IJavaArray<Single>): IJavaArray<Single>; overload; // Introduced in 26';
    function green: Single; overload; // Introduced in 26';
    function hashCode: Integer;
    function isSrgb: Boolean; overload; // Introduced in 26';
    function isWideGamut: Boolean; overload; // Introduced in 26';
    function luminance: Single; overload; // Introduced in 26';
    function pack: Int64; overload; // Introduced in 26';
    function red: Single; overload; // Introduced in 26';
    function toArgb: Integer; overload; // Introduced in 26';
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JColor; overload;
    class function Wrap(const AObject: IJNIObject): JColor; overload;
    { constructors }
    class function Create: JColor; overload;
    { constants }
    class function BLACK: Integer;
    class function BLUE_: Integer; overload;
    class function CYAN: Integer;
    class function DKGRAY: Integer;
    class function GRAY: Integer;
    class function GREEN_: Integer; overload;
    class function LTGRAY: Integer;
    class function MAGENTA: Integer;
    class function RED_: Integer; overload;
    class function TRANSPARENT: Integer;
    class function WHITE: Integer;
    class function YELLOW: Integer;
    { methods }
    class function HSVToColor(const AArg0: Integer; const AArg1: IJavaArray<Single>): Integer; overload;
    class function HSVToColor(const AArg0: IJavaArray<Single>): Integer; overload;
    class procedure RGBToHSV(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>);
    class function alpha(const AArg0: Integer): Integer; overload;
    class function alpha(const AArg0: Int64): Single; overload; // Introduced in 26';
    class function argb(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Integer; overload; // Introduced in 26';
    class function argb(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Integer; overload;
    class function blue(const AArg0: Int64): Single; overload; // Introduced in 26';
    class function blue(const AArg0: Integer): Integer; overload;
    class procedure colorToHSV(const AArg0: Integer; const AArg1: IJavaArray<Single>);
    class function green(const AArg0: Integer): Integer; overload;
    class function green(const AArg0: Int64): Single; overload; // Introduced in 26';
    class function isSrgb(const AArg0: Int64): Boolean; overload; // Introduced in 26';
    class function isWideGamut(const AArg0: Int64): Boolean; overload; // Introduced in 26';
    class function luminance(const AArg0: Int64): Single; overload; // Introduced in 26';
    class function luminance(const AArg0: Integer): Single; overload; // Introduced in 24';
    class function pack(const AArg0: Integer): Int64; overload; // Introduced in 26';
    class function pack(const AArg0: Single; const AArg1: Single; const AArg2: Single): Int64; overload; // Introduced in 26';
    class function pack(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Int64; overload; // Introduced in 26';
    class function parseColor(const AArg0: JString): Integer;
    class function red(const AArg0: Integer): Integer; overload;
    class function red(const AArg0: Int64): Single; overload; // Introduced in 26';
    class function rgb(const AArg0: Single; const AArg1: Single; const AArg2: Single): Integer; overload; // Introduced in 26';
    class function rgb(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Integer; overload;
    class function toArgb(const AArg0: Int64): Integer; overload; // Introduced in 26';
    class function valueOf(const AArg0: Single; const AArg1: Single; const AArg2: Single): JColor; overload; // Introduced in 26';
    class function valueOf(const AArg0: Int64): JColor; overload; // Introduced in 26';
    class function valueOf(const AArg0: Integer): JColor; overload; // Introduced in 26';
    class function valueOf(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): JColor; overload; // Introduced in 26';
  end;

{ android.graphics.ColorFilter }

  [JavaClassSignature('android/graphics/ColorFilter')]
  JColorFilter = interface(JObject)
    ['{E62FF65B-35B3-498F-9B34-F2A2780477BD}']
  end;

  [JavaClassSignature('android/graphics/ColorFilter')]
  TJColorFilter = class(TJObject, JColorFilter)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JColorFilter; overload;
    class function Wrap(const AObject: IJNIObject): JColorFilter; overload;
    { constructors }
    class function Create: JColorFilter; overload;
  end;

{ android.graphics.PorterDuffColorFilter }

  [JavaClassSignature('android/graphics/PorterDuffColorFilter')]
  JPorterDuffColorFilter = interface(JColorFilter)
    ['{E68B5B6F-740F-4228-A172-919BAD802464}']
    function equals(const AArg0: JObject): Boolean;
    function hashCode: Integer;
  end;

  [JavaClassSignature('android/graphics/PorterDuffColorFilter')]
  TJPorterDuffColorFilter = class(TJColorFilter, JPorterDuffColorFilter)
  private
    { methods }
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function hashCode: Integer;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPorterDuffColorFilter; overload;
    class function Wrap(const AObject: IJNIObject): JPorterDuffColorFilter; overload;
    { constructors }
    class function Create(const AArg0: Integer; const AArg1: JPorterDuff_Mode): JPorterDuffColorFilter; overload;
  end;

{ android.graphics.ImageFormat }

  [JavaClassSignature('android/graphics/ImageFormat')]
  JImageFormat = interface(JObject)
    ['{A222713A-2C17-499D-9576-0217C1D084B8}']
  end;

  [JavaClassSignature('android/graphics/ImageFormat')]
  TJImageFormat = class(TJObject, JImageFormat)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JImageFormat; overload;
    class function Wrap(const AObject: IJNIObject): JImageFormat; overload;
    { constructors }
    class function Create: JImageFormat; overload;
    { constants }
    class function DEPTH16: Integer;
    class function DEPTH_POINT_CLOUD: Integer;
    class function FLEX_RGBA_8888: Integer;
    class function FLEX_RGB_888: Integer;
    class function JPEG: Integer;
    class function NV16: Integer;
    class function NV21: Integer;
    class function PRIVATE: Integer;
    class function RAW10: Integer;
    class function RAW12: Integer;
    class function RAW_PRIVATE: Integer;
    class function RAW_SENSOR: Integer;
    class function RGB_565: Integer;
    class function UNKNOWN: Integer;
    class function YUV_420_888: Integer;
    class function YUV_422_888: Integer;
    class function YUV_444_888: Integer;
    class function YUY2: Integer;
    class function YV12: Integer;
    { methods }
    class function getBitsPerPixel(const AArg0: Integer): Integer;
  end;

{ android.graphics.Matrix }

  [JavaClassSignature('android/graphics/Matrix')]
  JMatrix = interface(JObject)
    ['{C854FBF4-526A-415A-AF50-5D833C9E311A}']
    function equals(const AArg0: JObject): Boolean;
    procedure getValues(const AArg0: IJavaArray<Single>);
    function hashCode: Integer;
    function invert(const AArg0: JMatrix): Boolean;
    function isAffine: Boolean;
    function isIdentity: Boolean;
    procedure mapPoints(const AArg0: IJavaArray<Single>); overload;
    procedure mapPoints(const AArg0: IJavaArray<Single>; const AArg1: IJavaArray<Single>); overload;
    procedure mapPoints(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: IJavaArray<Single>; const AArg3: Integer; const AArg4: Integer); overload;
    function mapRadius(const AArg0: Single): Single;
    function mapRect(const AArg0: JRectF): Boolean; overload;
    function mapRect(const AArg0: JRectF; const AArg1: JRectF): Boolean; overload;
    procedure mapVectors(const AArg0: IJavaArray<Single>); overload;
    procedure mapVectors(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: IJavaArray<Single>; const AArg3: Integer; const AArg4: Integer); overload;
    procedure mapVectors(const AArg0: IJavaArray<Single>; const AArg1: IJavaArray<Single>); overload;
    function postConcat(const AArg0: JMatrix): Boolean;
    function postRotate(const AArg0: Single; const AArg1: Single; const AArg2: Single): Boolean; overload;
    function postRotate(const AArg0: Single): Boolean; overload;
    function postScale(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function postScale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function postSkew(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function postSkew(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function postTranslate(const AArg0: Single; const AArg1: Single): Boolean;
    function preConcat(const AArg0: JMatrix): Boolean;
    function preRotate(const AArg0: Single; const AArg1: Single; const AArg2: Single): Boolean; overload;
    function preRotate(const AArg0: Single): Boolean; overload;
    function preScale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function preScale(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function preSkew(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function preSkew(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function preTranslate(const AArg0: Single; const AArg1: Single): Boolean;
    function rectStaysRect: Boolean;
    procedure reset;
    procedure &set(const AArg0: JMatrix);
    function setConcat(const AArg0: JMatrix; const AArg1: JMatrix): Boolean;
    function setPolyToPoly(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: IJavaArray<Single>; const AArg3: Integer; const AArg4: Integer): Boolean;
    function setRectToRect(const AArg0: JRectF; const AArg1: JRectF; const AArg2: JMatrix_ScaleToFit): Boolean;
    procedure setRotate(const AArg0: Single; const AArg1: Single; const AArg2: Single); overload;
    procedure setRotate(const AArg0: Single); overload;
    procedure setScale(const AArg0: Single; const AArg1: Single); overload;
    procedure setScale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setSinCos(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setSinCos(const AArg0: Single; const AArg1: Single); overload;
    procedure setSkew(const AArg0: Single; const AArg1: Single); overload;
    procedure setSkew(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setTranslate(const AArg0: Single; const AArg1: Single);
    procedure setValues(const AArg0: IJavaArray<Single>);
    function toShortString: JString;
    function toString: JString;
  end;

  [JavaClassSignature('android/graphics/Matrix')]
  TJMatrix = class(TJObject, JMatrix)
  private
    { methods }
    function equals(const AArg0: JObject): Boolean; reintroduce;
    procedure getValues(const AArg0: IJavaArray<Single>);
    function hashCode: Integer;
    function invert(const AArg0: JMatrix): Boolean;
    function isAffine: Boolean;
    function isIdentity: Boolean;
    procedure mapPoints(const AArg0: IJavaArray<Single>); overload;
    procedure mapPoints(const AArg0: IJavaArray<Single>; const AArg1: IJavaArray<Single>); overload;
    procedure mapPoints(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: IJavaArray<Single>; const AArg3: Integer; const AArg4: Integer); overload;
    function mapRadius(const AArg0: Single): Single;
    function mapRect(const AArg0: JRectF): Boolean; overload;
    function mapRect(const AArg0: JRectF; const AArg1: JRectF): Boolean; overload;
    procedure mapVectors(const AArg0: IJavaArray<Single>); overload;
    procedure mapVectors(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: IJavaArray<Single>; const AArg3: Integer; const AArg4: Integer); overload;
    procedure mapVectors(const AArg0: IJavaArray<Single>; const AArg1: IJavaArray<Single>); overload;
    function postConcat(const AArg0: JMatrix): Boolean;
    function postRotate(const AArg0: Single; const AArg1: Single; const AArg2: Single): Boolean; overload;
    function postRotate(const AArg0: Single): Boolean; overload;
    function postScale(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function postScale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function postSkew(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function postSkew(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function postTranslate(const AArg0: Single; const AArg1: Single): Boolean;
    function preConcat(const AArg0: JMatrix): Boolean;
    function preRotate(const AArg0: Single; const AArg1: Single; const AArg2: Single): Boolean; overload;
    function preRotate(const AArg0: Single): Boolean; overload;
    function preScale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function preScale(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function preSkew(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function preSkew(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function preTranslate(const AArg0: Single; const AArg1: Single): Boolean;
    function rectStaysRect: Boolean;
    procedure reset;
    procedure &set(const AArg0: JMatrix);
    function setConcat(const AArg0: JMatrix; const AArg1: JMatrix): Boolean;
    function setPolyToPoly(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: IJavaArray<Single>; const AArg3: Integer; const AArg4: Integer): Boolean;
    function setRectToRect(const AArg0: JRectF; const AArg1: JRectF; const AArg2: JMatrix_ScaleToFit): Boolean;
    procedure setRotate(const AArg0: Single; const AArg1: Single; const AArg2: Single); overload;
    procedure setRotate(const AArg0: Single); overload;
    procedure setScale(const AArg0: Single; const AArg1: Single); overload;
    procedure setScale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setSinCos(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setSinCos(const AArg0: Single; const AArg1: Single); overload;
    procedure setSkew(const AArg0: Single; const AArg1: Single); overload;
    procedure setSkew(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setTranslate(const AArg0: Single; const AArg1: Single);
    procedure setValues(const AArg0: IJavaArray<Single>);
    function toShortString: JString;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMatrix; overload;
    class function Wrap(const AObject: IJNIObject): JMatrix; overload;
    { constructors }
    class function Create: JMatrix; overload;
    class function Create(const AArg0: JMatrix): JMatrix; overload;
    { constants }
    class function MPERSP_0: Integer;
    class function MPERSP_1: Integer;
    class function MPERSP_2: Integer;
    class function MSCALE_X: Integer;
    class function MSCALE_Y: Integer;
    class function MSKEW_X: Integer;
    class function MSKEW_Y: Integer;
    class function MTRANS_X: Integer;
    class function MTRANS_Y: Integer;
  end;

{ android.graphics.Matrix_ScaleToFit }

  [JavaClassSignature('android/graphics/Matrix$ScaleToFit')]
  JMatrix_ScaleToFit = interface(JEnum)
    ['{79E269A2-FBE2-49DE-9805-977C24F3DCD3}']
  end;

  [JavaClassSignature('android/graphics/Matrix$ScaleToFit')]
  TJMatrix_ScaleToFit = class(TJEnum, JMatrix_ScaleToFit)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMatrix_ScaleToFit; overload;
    class function Wrap(const AObject: IJNIObject): JMatrix_ScaleToFit; overload;
    { constants }
    class function CENTER: JMatrix_ScaleToFit;
    class function &END: JMatrix_ScaleToFit;
    class function FILL: JMatrix_ScaleToFit;
    class function START: JMatrix_ScaleToFit;
    { methods }
    class function valueOf(const AArg0: JString): JMatrix_ScaleToFit; overload;
    class function values: IJavaArray<JMatrix_ScaleToFit>;
  end;

{ android.graphics.Outline }

  [JavaClassSignature('android/graphics/Outline')]
  JOutline = interface(JObject)
    ['{FE68B7A0-5B52-4457-AABC-0ADF91026104}']
    function canClip: Boolean;
    function getAlpha: Single;
    function getRadius: Single; // Introduced in 24';
    function getRect(const AArg0: JRect): Boolean; // Introduced in 24';
    function isEmpty: Boolean;
    procedure offset(const AArg0: Integer; const AArg1: Integer); // Introduced in 22';
    procedure &set(const AArg0: JOutline);
    procedure setAlpha(const AArg0: Single);
    procedure setConvexPath(const AArg0: JPath);
    procedure setEmpty;
    procedure setOval(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure setOval(const AArg0: JRect); overload;
    procedure setRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure setRect(const AArg0: JRect); overload;
    procedure setRoundRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Single); overload;
    procedure setRoundRect(const AArg0: JRect; const AArg1: Single); overload;
  end;

  [JavaClassSignature('android/graphics/Outline')]
  TJOutline = class(TJObject, JOutline)
  private
    { methods }
    function canClip: Boolean;
    function getAlpha: Single;
    function getRadius: Single; // Introduced in 24';
    function getRect(const AArg0: JRect): Boolean; // Introduced in 24';
    function isEmpty: Boolean;
    procedure offset(const AArg0: Integer; const AArg1: Integer); // Introduced in 22';
    procedure &set(const AArg0: JOutline);
    procedure setAlpha(const AArg0: Single);
    procedure setConvexPath(const AArg0: JPath);
    procedure setEmpty;
    procedure setOval(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure setOval(const AArg0: JRect); overload;
    procedure setRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure setRect(const AArg0: JRect); overload;
    procedure setRoundRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Single); overload;
    procedure setRoundRect(const AArg0: JRect; const AArg1: Single); overload;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JOutline; overload;
    class function Wrap(const AObject: IJNIObject): JOutline; overload;
    { constructors }
    class function Create: JOutline; overload;
    class function Create(const AArg0: JOutline): JOutline; overload;
  end;

{ android.graphics.Paint }

  [JavaClassSignature('android/graphics/Paint')]
  JPaint = interface(JObject)
    ['{4D96737C-C7E0-4668-8D78-B69F47234FF5}']
    function ascent: Single;
    function breakText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: IJavaArray<Single>): Integer; overload;
    function breakText(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Boolean; const AArg4: Single; const AArg5: IJavaArray<Single>): Integer; overload;
    function breakText(const AArg0: JString; const AArg1: Boolean; const AArg2: Single; const AArg3: IJavaArray<Single>): Integer; overload;
    procedure clearShadowLayer;
    function descent: Single;
    function equalsForTextMeasurement(const AArg0: JPaint): Boolean; // Introduced in 28';
    function getAlpha: Integer;
    function getColor: Integer;
    function getColorFilter: JColorFilter;
    function getFillPath(const AArg0: JPath; const AArg1: JPath): Boolean;
    function getFlags: Integer;
    function getFontFeatureSettings: JString;
    function getFontSpacing: Single;
    function getFontVariationSettings: JString; // Introduced in 26';
    function getHinting: Integer;
    function getLetterSpacing: Single;
    function getOffsetForAdvance(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Single): Integer; overload; // Introduced in 23';
    function getOffsetForAdvance(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Single): Integer; overload; // Introduced in 23';
    function getPathEffect: JPathEffect;
    function getRunAdvance(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Integer): Single; overload; // Introduced in 23';
    function getRunAdvance(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Integer): Single; overload; // Introduced in 23';
    function getShader: JShader;
    function getStrokeCap: JPaint_Cap;
    function getStrokeJoin: JPaint_Join;
    function getStrokeMiter: Single;
    function getStrokeWidth: Single;
    function getStyle: JPaint_Style;
    procedure getTextBounds(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect); overload;
    procedure getTextBounds(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect); overload;
    function getTextLocale: JLocale;
    procedure getTextPath(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPath); overload;
    procedure getTextPath(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPath); overload;
    function getTextScaleX: Single;
    function getTextSize: Single;
    function getTextSkewX: Single;
    function getTextWidths(const AArg0: JString; const AArg1: IJavaArray<Single>): Integer; overload;
    function getTextWidths(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>): Integer; overload;
    function getTextWidths(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>): Integer; overload;
    function getTextWidths(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>): Integer; overload;
    function getTypeface: JTypeface;
    function getXfermode: JXfermode;
    function hasGlyph(const AArg0: JString): Boolean; // Introduced in 23';
    function isAntiAlias: Boolean;
    function isDither: Boolean;
    function isElegantTextHeight: Boolean;
    function isFakeBoldText: Boolean;
    function isFilterBitmap: Boolean;
    function isLinearText: Boolean; deprecated 'Deprecated in 16';
    function isStrikeThruText: Boolean;
    function isSubpixelText: Boolean;
    function isUnderlineText: Boolean;
    function measureText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer): Single; overload;
    function measureText(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer): Single; overload;
    function measureText(const AArg0: JString): Single; overload;
    function measureText(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): Single; overload;
    procedure reset;
    procedure &set(const AArg0: JPaint);
    procedure setARGB(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setAlpha(const AArg0: Integer);
    procedure setAntiAlias(const AArg0: Boolean);
    procedure setColor(const AArg0: Integer);
    function setColorFilter(const AArg0: JColorFilter): JColorFilter;
    procedure setDither(const AArg0: Boolean);
    procedure setElegantTextHeight(const AArg0: Boolean);
    procedure setFakeBoldText(const AArg0: Boolean);
    procedure setFilterBitmap(const AArg0: Boolean);
    procedure setFlags(const AArg0: Integer);
    procedure setFontFeatureSettings(const AArg0: JString);
    function setFontVariationSettings(const AArg0: JString): Boolean; // Introduced in 26';
    procedure setHinting(const AArg0: Integer);
    procedure setLetterSpacing(const AArg0: Single);
    procedure setLinearText(const AArg0: Boolean); deprecated 'Deprecated in 16';
    function setPathEffect(const AArg0: JPathEffect): JPathEffect;
    function setShader(const AArg0: JShader): JShader;
    procedure setShadowLayer(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Integer);
    procedure setStrikeThruText(const AArg0: Boolean);
    procedure setStrokeCap(const AArg0: JPaint_Cap);
    procedure setStrokeJoin(const AArg0: JPaint_Join);
    procedure setStrokeMiter(const AArg0: Single);
    procedure setStrokeWidth(const AArg0: Single);
    procedure setStyle(const AArg0: JPaint_Style);
    procedure setSubpixelText(const AArg0: Boolean);
    procedure setTextLocale(const AArg0: JLocale);
    procedure setTextScaleX(const AArg0: Single);
    procedure setTextSize(const AArg0: Single);
    procedure setTextSkewX(const AArg0: Single);
    function setTypeface(const AArg0: JTypeface): JTypeface;
    procedure setUnderlineText(const AArg0: Boolean);
    function setXfermode(const AArg0: JXfermode): JXfermode;
  end;

  [JavaClassSignature('android/graphics/Paint')]
  TJPaint = class(TJObject, JPaint)
  private
    { methods }
    function ascent: Single;
    function breakText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: IJavaArray<Single>): Integer; overload;
    function breakText(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Boolean; const AArg4: Single; const AArg5: IJavaArray<Single>): Integer; overload;
    function breakText(const AArg0: JString; const AArg1: Boolean; const AArg2: Single; const AArg3: IJavaArray<Single>): Integer; overload;
    procedure clearShadowLayer;
    function descent: Single;
    function equalsForTextMeasurement(const AArg0: JPaint): Boolean; // Introduced in 28';
    function getAlpha: Integer;
    function getColor: Integer;
    function getColorFilter: JColorFilter;
    function getFillPath(const AArg0: JPath; const AArg1: JPath): Boolean;
    function getFlags: Integer;
    function getFontFeatureSettings: JString;
    function getFontSpacing: Single;
    function getFontVariationSettings: JString; // Introduced in 26';
    function getHinting: Integer;
    function getLetterSpacing: Single;
    function getOffsetForAdvance(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Single): Integer; overload; // Introduced in 23';
    function getOffsetForAdvance(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Single): Integer; overload; // Introduced in 23';
    function getPathEffect: JPathEffect;
    function getRunAdvance(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Integer): Single; overload; // Introduced in 23';
    function getRunAdvance(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Integer): Single; overload; // Introduced in 23';
    function getShader: JShader;
    function getStrokeCap: JPaint_Cap;
    function getStrokeJoin: JPaint_Join;
    function getStrokeMiter: Single;
    function getStrokeWidth: Single;
    function getStyle: JPaint_Style;
    procedure getTextBounds(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect); overload;
    procedure getTextBounds(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect); overload;
    function getTextLocale: JLocale;
    procedure getTextPath(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPath); overload;
    procedure getTextPath(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPath); overload;
    function getTextScaleX: Single;
    function getTextSize: Single;
    function getTextSkewX: Single;
    function getTextWidths(const AArg0: JString; const AArg1: IJavaArray<Single>): Integer; overload;
    function getTextWidths(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>): Integer; overload;
    function getTextWidths(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>): Integer; overload;
    function getTextWidths(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>): Integer; overload;
    function getTypeface: JTypeface;
    function getXfermode: JXfermode;
    function hasGlyph(const AArg0: JString): Boolean; // Introduced in 23';
    function isAntiAlias: Boolean;
    function isDither: Boolean;
    function isElegantTextHeight: Boolean;
    function isFakeBoldText: Boolean;
    function isFilterBitmap: Boolean;
    function isLinearText: Boolean; deprecated 'Deprecated in 16';
    function isStrikeThruText: Boolean;
    function isSubpixelText: Boolean;
    function isUnderlineText: Boolean;
    function measureText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer): Single; overload;
    function measureText(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer): Single; overload;
    function measureText(const AArg0: JString): Single; overload;
    function measureText(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): Single; overload;
    procedure reset;
    procedure &set(const AArg0: JPaint);
    procedure setARGB(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setAlpha(const AArg0: Integer);
    procedure setAntiAlias(const AArg0: Boolean);
    procedure setColor(const AArg0: Integer);
    function setColorFilter(const AArg0: JColorFilter): JColorFilter;
    procedure setDither(const AArg0: Boolean);
    procedure setElegantTextHeight(const AArg0: Boolean);
    procedure setFakeBoldText(const AArg0: Boolean);
    procedure setFilterBitmap(const AArg0: Boolean);
    procedure setFlags(const AArg0: Integer);
    procedure setFontFeatureSettings(const AArg0: JString);
    function setFontVariationSettings(const AArg0: JString): Boolean; // Introduced in 26';
    procedure setHinting(const AArg0: Integer);
    procedure setLetterSpacing(const AArg0: Single);
    procedure setLinearText(const AArg0: Boolean); deprecated 'Deprecated in 16';
    function setPathEffect(const AArg0: JPathEffect): JPathEffect;
    function setShader(const AArg0: JShader): JShader;
    procedure setShadowLayer(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Integer);
    procedure setStrikeThruText(const AArg0: Boolean);
    procedure setStrokeCap(const AArg0: JPaint_Cap);
    procedure setStrokeJoin(const AArg0: JPaint_Join);
    procedure setStrokeMiter(const AArg0: Single);
    procedure setStrokeWidth(const AArg0: Single);
    procedure setStyle(const AArg0: JPaint_Style);
    procedure setSubpixelText(const AArg0: Boolean);
    procedure setTextLocale(const AArg0: JLocale);
    procedure setTextScaleX(const AArg0: Single);
    procedure setTextSize(const AArg0: Single);
    procedure setTextSkewX(const AArg0: Single);
    function setTypeface(const AArg0: JTypeface): JTypeface;
    procedure setUnderlineText(const AArg0: Boolean);
    function setXfermode(const AArg0: JXfermode): JXfermode;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPaint; overload;
    class function Wrap(const AObject: IJNIObject): JPaint; overload;
    { constructors }
    class function Create: JPaint; overload;
    class function Create(const AArg0: Integer): JPaint; overload;
    class function Create(const AArg0: JPaint): JPaint; overload;
    { constants }
    class function ANTI_ALIAS_FLAG: Integer;
    class function DEV_KERN_TEXT_FLAG: Integer;
    class function DITHER_FLAG: Integer;
    class function EMBEDDED_BITMAP_TEXT_FLAG: Integer;
    class function FAKE_BOLD_TEXT_FLAG: Integer;
    class function FILTER_BITMAP_FLAG: Integer;
    class function HINTING_OFF: Integer;
    class function HINTING_ON: Integer;
    class function LINEAR_TEXT_FLAG: Integer;
    class function STRIKE_THRU_TEXT_FLAG: Integer;
    class function SUBPIXEL_TEXT_FLAG: Integer;
    class function UNDERLINE_TEXT_FLAG: Integer;
  end;

{ android.graphics.Paint_Cap }

  [JavaClassSignature('android/graphics/Paint$Cap')]
  JPaint_Cap = interface(JEnum)
    ['{7583E553-4477-4EA5-A395-4BFAE5BAA7CF}']
  end;

  [JavaClassSignature('android/graphics/Paint$Cap')]
  TJPaint_Cap = class(TJEnum, JPaint_Cap)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPaint_Cap; overload;
    class function Wrap(const AObject: IJNIObject): JPaint_Cap; overload;
    { constants }
    class function BUTT: JPaint_Cap;
    class function ROUND: JPaint_Cap;
    class function SQUARE: JPaint_Cap;
    { methods }
    class function valueOf(const AArg0: JString): JPaint_Cap; overload;
    class function values: IJavaArray<JPaint_Cap>;
  end;

{ android.graphics.Paint_Join }

  [JavaClassSignature('android/graphics/Paint$Join')]
  JPaint_Join = interface(JEnum)
    ['{DA52E34D-DD7A-4309-93EB-A4C140B8D6E8}']
  end;

  [JavaClassSignature('android/graphics/Paint$Join')]
  TJPaint_Join = class(TJEnum, JPaint_Join)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPaint_Join; overload;
    class function Wrap(const AObject: IJNIObject): JPaint_Join; overload;
    { constants }
    class function BEVEL: JPaint_Join;
    class function MITER: JPaint_Join;
    class function ROUND: JPaint_Join;
    { methods }
    class function valueOf(const AArg0: JString): JPaint_Join; overload;
    class function values: IJavaArray<JPaint_Join>;
  end;

{ android.graphics.Paint_Style }

  [JavaClassSignature('android/graphics/Paint$Style')]
  JPaint_Style = interface(JEnum)
    ['{FCD474CA-A0F2-4742-994E-519CAE60EDFB}']
  end;

  [JavaClassSignature('android/graphics/Paint$Style')]
  TJPaint_Style = class(TJEnum, JPaint_Style)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPaint_Style; overload;
    class function Wrap(const AObject: IJNIObject): JPaint_Style; overload;
    { constants }
    class function FILL: JPaint_Style;
    class function FILL_AND_STROKE: JPaint_Style;
    class function STROKE: JPaint_Style;
    { methods }
    class function valueOf(const AArg0: JString): JPaint_Style; overload;
    class function values: IJavaArray<JPaint_Style>;
  end;

{ android.graphics.Path }

  [JavaClassSignature('android/graphics/Path')]
  JPath = interface(JObject)
    ['{8A68A994-A1B7-4057-BA10-E1976796B460}']
    procedure addArc(const AArg0: JRectF; const AArg1: Single; const AArg2: Single); overload;
    procedure addArc(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single); overload;
    procedure addPath(const AArg0: JPath; const AArg1: JMatrix); overload;
    procedure addPath(const AArg0: JPath); overload;
    procedure addPath(const AArg0: JPath; const AArg1: Single; const AArg2: Single); overload;
    function approximate(const AArg0: Single): IJavaArray<Single>; // Introduced in 26';
    procedure arcTo(const AArg0: JRectF; const AArg1: Single; const AArg2: Single; const AArg3: Boolean); overload;
    procedure arcTo(const AArg0: JRectF; const AArg1: Single; const AArg2: Single); overload;
    procedure arcTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: Boolean); overload;
    procedure close;
    procedure computeBounds(const AArg0: JRectF; const AArg1: Boolean);
    procedure cubicTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single);
    function getFillType: JPath_FillType;
    procedure incReserve(const AArg0: Integer);
    function isConvex: Boolean;
    function isEmpty: Boolean;
    function isInverseFillType: Boolean;
    function isRect(const AArg0: JRectF): Boolean;
    procedure lineTo(const AArg0: Single; const AArg1: Single);
    procedure moveTo(const AArg0: Single; const AArg1: Single);
    procedure offset(const AArg0: Single; const AArg1: Single); overload;
    procedure offset(const AArg0: Single; const AArg1: Single; const AArg2: JPath); overload;
    procedure quadTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
    procedure rCubicTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single);
    procedure rLineTo(const AArg0: Single; const AArg1: Single);
    procedure rMoveTo(const AArg0: Single; const AArg1: Single);
    procedure rQuadTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
    procedure reset;
    procedure rewind;
    procedure &set(const AArg0: JPath);
    procedure setFillType(const AArg0: JPath_FillType);
    procedure setLastPoint(const AArg0: Single; const AArg1: Single);
    procedure toggleInverseFillType;
    procedure transform(const AArg0: JMatrix); overload;
    procedure transform(const AArg0: JMatrix; const AArg1: JPath); overload;
  end;

  [JavaClassSignature('android/graphics/Path')]
  TJPath = class(TJObject, JPath)
  private
    { methods }
    procedure addArc(const AArg0: JRectF; const AArg1: Single; const AArg2: Single); overload;
    procedure addArc(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single); overload;
    procedure addPath(const AArg0: JPath; const AArg1: JMatrix); overload;
    procedure addPath(const AArg0: JPath); overload;
    procedure addPath(const AArg0: JPath; const AArg1: Single; const AArg2: Single); overload;
    function approximate(const AArg0: Single): IJavaArray<Single>; // Introduced in 26';
    procedure arcTo(const AArg0: JRectF; const AArg1: Single; const AArg2: Single; const AArg3: Boolean); overload;
    procedure arcTo(const AArg0: JRectF; const AArg1: Single; const AArg2: Single); overload;
    procedure arcTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: Boolean); overload;
    procedure close;
    procedure computeBounds(const AArg0: JRectF; const AArg1: Boolean);
    procedure cubicTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single);
    function getFillType: JPath_FillType;
    procedure incReserve(const AArg0: Integer);
    function isConvex: Boolean;
    function isEmpty: Boolean;
    function isInverseFillType: Boolean;
    function isRect(const AArg0: JRectF): Boolean;
    procedure lineTo(const AArg0: Single; const AArg1: Single);
    procedure moveTo(const AArg0: Single; const AArg1: Single);
    procedure offset(const AArg0: Single; const AArg1: Single); overload;
    procedure offset(const AArg0: Single; const AArg1: Single; const AArg2: JPath); overload;
    procedure quadTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
    procedure rCubicTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single);
    procedure rLineTo(const AArg0: Single; const AArg1: Single);
    procedure rMoveTo(const AArg0: Single; const AArg1: Single);
    procedure rQuadTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
    procedure reset;
    procedure rewind;
    procedure &set(const AArg0: JPath);
    procedure setFillType(const AArg0: JPath_FillType);
    procedure setLastPoint(const AArg0: Single; const AArg1: Single);
    procedure toggleInverseFillType;
    procedure transform(const AArg0: JMatrix); overload;
    procedure transform(const AArg0: JMatrix; const AArg1: JPath); overload;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPath; overload;
    class function Wrap(const AObject: IJNIObject): JPath; overload;
    { constructors }
    class function Create: JPath; overload;
    class function Create(const AArg0: JPath): JPath; overload;
  end;

{ android.graphics.Path_FillType }

  [JavaClassSignature('android/graphics/Path$FillType')]
  JPath_FillType = interface(JEnum)
    ['{3418528F-29A1-4655-B182-4E2E71516FC3}']
  end;

  [JavaClassSignature('android/graphics/Path$FillType')]
  TJPath_FillType = class(TJEnum, JPath_FillType)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPath_FillType; overload;
    class function Wrap(const AObject: IJNIObject): JPath_FillType; overload;
    { constants }
    class function EVEN_ODD: JPath_FillType;
    class function INVERSE_EVEN_ODD: JPath_FillType;
    class function INVERSE_WINDING: JPath_FillType;
    class function WINDING: JPath_FillType;
    { methods }
    class function valueOf(const AArg0: JString): JPath_FillType; overload;
    class function values: IJavaArray<JPath_FillType>;
  end;

{ android.graphics.PathEffect }

  [JavaClassSignature('android/graphics/PathEffect')]
  JPathEffect = interface(JObject)
    ['{50E96204-750E-47A6-892C-87D6C176C325}']
  end;

  [JavaClassSignature('android/graphics/PathEffect')]
  TJPathEffect = class(TJObject, JPathEffect)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPathEffect; overload;
    class function Wrap(const AObject: IJNIObject): JPathEffect; overload;
    { constructors }
    class function Create: JPathEffect; overload;
  end;

{ android.graphics.DashPathEffect }

  [JavaClassSignature('android/graphics/DashPathEffect')]
  JDashPathEffect = interface(JPathEffect)
    ['{B6800EA1-20B8-45E0-8AB0-5FFF505CD59E}']
  end;

  [JavaClassSignature('android/graphics/DashPathEffect')]
  TJDashPathEffect = class(TJPathEffect, JDashPathEffect)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDashPathEffect; overload;
    class function Wrap(const AObject: IJNIObject): JDashPathEffect; overload;
    { constructors }
    class function Create(const AArg0: IJavaArray<Single>; const AArg1: Single): JDashPathEffect; overload;
  end;

{ android.graphics.Point }

  [JavaClassSignature('android/graphics/Point')]
  JPoint = interface(JObject)
    ['{1B799DA1-4BB7-4C83-A7BE-10857EC85B0C}']
    function _GetX: Integer;
    procedure _SetX(const AValue: Integer);
    function _GetY: Integer;
    procedure _SetY(const AValue: Integer);
    function describeContents: Integer;
    function equals(const AArg0: Integer; const AArg1: Integer): Boolean; overload;
    function equals(const AArg0: JObject): Boolean; overload;
    function hashCode: Integer;
    procedure negate;
    procedure offset(const AArg0: Integer; const AArg1: Integer);
    procedure &set(const AArg0: Integer; const AArg1: Integer);
    function toString: JString;
    { constants }
    property x: Integer read _GetX write _SetX;
    property y: Integer read _GetY write _SetY;
  end;

  [JavaClassSignature('android/graphics/Point')]
  TJPoint = class(TJObject, JPoint)
  private
    function _GetX: Integer;
    procedure _SetX(const AValue: Integer);
    function _GetY: Integer;
    procedure _SetY(const AValue: Integer);
  private
    { methods }
    function describeContents: Integer;
    function equals(const AArg0: Integer; const AArg1: Integer): Boolean; reintroduce; overload;
    function equals(const AArg0: JObject): Boolean; reintroduce; overload;
    function hashCode: Integer;
    procedure negate;
    procedure offset(const AArg0: Integer; const AArg1: Integer);
    procedure &set(const AArg0: Integer; const AArg1: Integer);
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPoint; overload;
    class function Wrap(const AObject: IJNIObject): JPoint; overload;
    { constructors }
    class function Create: JPoint; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer): JPoint; overload;
    class function Create(const AArg0: JPoint): JPoint; overload;
  end;

{ android.graphics.PointF }

  [JavaClassSignature('android/graphics/PointF')]
  JPointF = interface(JObject)
    ['{0AEBF9AF-EDD7-4FDD-88A0-4BC2BC689182}']
    function _GetX: Single;
    procedure _SetX(const AValue: Single);
    function _GetY: Single;
    procedure _SetY(const AValue: Single);
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; overload;
    function equals(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function hashCode: Integer;
    function length: Single; overload;
    procedure negate;
    procedure offset(const AArg0: Single; const AArg1: Single);
    procedure &set(const AArg0: Single; const AArg1: Single); overload;
    procedure &set(const AArg0: JPointF); overload;
    function toString: JString;
    { constants }
    property x: Single read _GetX write _SetX;
    property y: Single read _GetY write _SetY;
  end;

  [JavaClassSignature('android/graphics/PointF')]
  TJPointF = class(TJObject, JPointF)
  private
    function _GetX: Single;
    procedure _SetX(const AValue: Single);
    function _GetY: Single;
    procedure _SetY(const AValue: Single);
  private
    { methods }
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; reintroduce; overload;
    function equals(const AArg0: Single; const AArg1: Single): Boolean; reintroduce; overload;
    function hashCode: Integer;
    function length: Single; overload;
    procedure negate;
    procedure offset(const AArg0: Single; const AArg1: Single);
    procedure &set(const AArg0: Single; const AArg1: Single); overload;
    procedure &set(const AArg0: JPointF); overload;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPointF; overload;
    class function Wrap(const AObject: IJNIObject): JPointF; overload;
    { constructors }
    class function Create: JPointF; overload;
    class function Create(const AArg0: Single; const AArg1: Single): JPointF; overload;
    class function Create(const AArg0: JPoint): JPointF; overload;
    { methods }
    class function length(const AArg0: Single; const AArg1: Single): Single; overload;
  end;

{ android.graphics.PorterDuff }

  [JavaClassSignature('android/graphics/PorterDuff')]
  JPorterDuff = interface(JObject)
    ['{64F69C42-8C43-439C-9141-CD4D4DB9198D}']
  end;

  [JavaClassSignature('android/graphics/PorterDuff')]
  TJPorterDuff = class(TJObject, JPorterDuff)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPorterDuff; overload;
    class function Wrap(const AObject: IJNIObject): JPorterDuff; overload;
    { constructors }
    class function Create: JPorterDuff; overload;
  end;

{ android.graphics.PorterDuff_Mode }

  [JavaClassSignature('android/graphics/PorterDuff$Mode')]
  JPorterDuff_Mode = interface(JEnum)
    ['{5118C457-9B5A-47A9-9830-9645EEEF224F}']
  end;

  [JavaClassSignature('android/graphics/PorterDuff$Mode')]
  TJPorterDuff_Mode = class(TJEnum, JPorterDuff_Mode)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPorterDuff_Mode; overload;
    class function Wrap(const AObject: IJNIObject): JPorterDuff_Mode; overload;
    { constants }
    class function ADD: JPorterDuff_Mode;
    class function CLEAR: JPorterDuff_Mode;
    class function DARKEN: JPorterDuff_Mode;
    class function DST: JPorterDuff_Mode;
    class function DST_ATOP: JPorterDuff_Mode;
    class function DST_IN: JPorterDuff_Mode;
    class function DST_OUT: JPorterDuff_Mode;
    class function DST_OVER: JPorterDuff_Mode;
    class function LIGHTEN: JPorterDuff_Mode;
    class function MULTIPLY: JPorterDuff_Mode;
    class function OVERLAY: JPorterDuff_Mode;
    class function SCREEN: JPorterDuff_Mode;
    class function SRC: JPorterDuff_Mode;
    class function SRC_ATOP: JPorterDuff_Mode;
    class function SRC_IN: JPorterDuff_Mode;
    class function SRC_OUT: JPorterDuff_Mode;
    class function SRC_OVER: JPorterDuff_Mode;
    class function &XOR: JPorterDuff_Mode;
    { methods }
    class function valueOf(const AArg0: JString): JPorterDuff_Mode; overload;
    class function values: IJavaArray<JPorterDuff_Mode>;
  end;

{ android.graphics.Rect }

  [JavaClassSignature('android/graphics/Rect')]
  JRect = interface(JObject)
    ['{D3F77254-DA3F-475A-A819-0006F0987A51}']
    function _GetBottom: Integer;
    procedure _SetBottom(const AValue: Integer);
    function _GetLeft: Integer;
    procedure _SetLeft(const AValue: Integer);
    function _GetRight: Integer;
    procedure _SetRight(const AValue: Integer);
    function _GetTop: Integer;
    procedure _SetTop(const AValue: Integer);
    function centerX: Integer;
    function centerY: Integer;
    function contains(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload;
    function contains(const AArg0: JRect): Boolean; overload;
    function contains(const AArg0: Integer; const AArg1: Integer): Boolean; overload;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean;
    function exactCenterX: Single;
    function exactCenterY: Single;
    function flattenToString: JString;
    function hashCode: Integer;
    function height: Integer;
    procedure inset(const AArg0: Integer; const AArg1: Integer);
    function intersect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload;
    function intersect(const AArg0: JRect): Boolean; overload;
    function intersects(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload;
    function isEmpty: Boolean;
    procedure offset(const AArg0: Integer; const AArg1: Integer);
    procedure offsetTo(const AArg0: Integer; const AArg1: Integer);
    procedure &set(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure &set(const AArg0: JRect); overload;
    procedure setEmpty;
    function setIntersect(const AArg0: JRect; const AArg1: JRect): Boolean;
    procedure sort;
    function toShortString: JString;
    function toString: JString;
    procedure union(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure union(const AArg0: JRect); overload;
    procedure union(const AArg0: Integer; const AArg1: Integer); overload;
    function width: Integer;
    { constants }
    property bottom: Integer read _GetBottom write _SetBottom;
    property left: Integer read _GetLeft write _SetLeft;
    property right: Integer read _GetRight write _SetRight;
    property top: Integer read _GetTop write _SetTop;
  end;

  [JavaClassSignature('android/graphics/Rect')]
  TJRect = class(TJObject, JRect)
  private
    function _GetBottom: Integer;
    procedure _SetBottom(const AValue: Integer);
    function _GetLeft: Integer;
    procedure _SetLeft(const AValue: Integer);
    function _GetRight: Integer;
    procedure _SetRight(const AValue: Integer);
    function _GetTop: Integer;
    procedure _SetTop(const AValue: Integer);
  private
    { methods }
    function centerX: Integer;
    function centerY: Integer;
    function contains(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload;
    function contains(const AArg0: JRect): Boolean; overload;
    function contains(const AArg0: Integer; const AArg1: Integer): Boolean; overload;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function exactCenterX: Single;
    function exactCenterY: Single;
    function flattenToString: JString;
    function hashCode: Integer;
    function height: Integer;
    procedure inset(const AArg0: Integer; const AArg1: Integer);
    function intersect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload;
    function intersect(const AArg0: JRect): Boolean; overload;
    function intersects(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean; overload;
    function isEmpty: Boolean;
    procedure offset(const AArg0: Integer; const AArg1: Integer);
    procedure offsetTo(const AArg0: Integer; const AArg1: Integer);
    procedure &set(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure &set(const AArg0: JRect); overload;
    procedure setEmpty;
    function setIntersect(const AArg0: JRect; const AArg1: JRect): Boolean;
    procedure sort;
    function toShortString: JString;
    function toString: JString; reintroduce;
    procedure union(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure union(const AArg0: JRect); overload;
    procedure union(const AArg0: Integer; const AArg1: Integer); overload;
    function width: Integer;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JRect; overload;
    class function Wrap(const AObject: IJNIObject): JRect; overload;
    { constructors }
    class function Create: JRect; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JRect; overload;
    class function Create(const AArg0: JRect): JRect; overload;
    { methods }
    class function intersects(const AArg0: JRect; const AArg1: JRect): Boolean; overload;
    class function unflattenFromString(const AArg0: JString): JRect;
  end;

{ android.graphics.RectF }

  [JavaClassSignature('android/graphics/RectF')]
  JRectF = interface(JObject)
    ['{B74D4AA5-0294-465A-B1C0-B83FE5024D3A}']
    function _GetBottom: Single;
    procedure _SetBottom(const AValue: Single);
    function _GetLeft: Single;
    procedure _SetLeft(const AValue: Single);
    function _GetRight: Single;
    procedure _SetRight(const AValue: Single);
    function _GetTop: Single;
    procedure _SetTop(const AValue: Single);
    function centerX: Single;
    function centerY: Single;
    function contains(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function contains(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function contains(const AArg0: JRectF): Boolean; overload;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean;
    function hashCode: Integer;
    function height: Single;
    procedure inset(const AArg0: Single; const AArg1: Single);
    function intersect(const AArg0: JRectF): Boolean; overload;
    function intersect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function intersects(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function isEmpty: Boolean;
    procedure offset(const AArg0: Single; const AArg1: Single);
    procedure offsetTo(const AArg0: Single; const AArg1: Single);
    procedure round(const AArg0: JRect);
    procedure roundOut(const AArg0: JRect);
    procedure &set(const AArg0: JRect); overload;
    procedure &set(const AArg0: JRectF); overload;
    procedure &set(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setEmpty;
    function setIntersect(const AArg0: JRectF; const AArg1: JRectF): Boolean;
    procedure sort;
    function toShortString: JString;
    function toString: JString;
    procedure union(const AArg0: Single; const AArg1: Single); overload;
    procedure union(const AArg0: JRectF); overload;
    procedure union(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    function width: Single;
    { constants }
    property bottom: Single read _GetBottom write _SetBottom;
    property left: Single read _GetLeft write _SetLeft;
    property right: Single read _GetRight write _SetRight;
    property top: Single read _GetTop write _SetTop;
  end;

  [JavaClassSignature('android/graphics/RectF')]
  TJRectF = class(TJObject, JRectF)
  private
    function _GetBottom: Single;
    procedure _SetBottom(const AValue: Single);
    function _GetLeft: Single;
    procedure _SetLeft(const AValue: Single);
    function _GetRight: Single;
    procedure _SetRight(const AValue: Single);
    function _GetTop: Single;
    procedure _SetTop(const AValue: Single);
  private
    { methods }
    function centerX: Single;
    function centerY: Single;
    function contains(const AArg0: Single; const AArg1: Single): Boolean; overload;
    function contains(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function contains(const AArg0: JRectF): Boolean; overload;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function hashCode: Integer;
    function height: Single;
    procedure inset(const AArg0: Single; const AArg1: Single);
    function intersect(const AArg0: JRectF): Boolean; overload;
    function intersect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function intersects(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean; overload;
    function isEmpty: Boolean;
    procedure offset(const AArg0: Single; const AArg1: Single);
    procedure offsetTo(const AArg0: Single; const AArg1: Single);
    procedure round(const AArg0: JRect);
    procedure roundOut(const AArg0: JRect);
    procedure &set(const AArg0: JRect); overload;
    procedure &set(const AArg0: JRectF); overload;
    procedure &set(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    procedure setEmpty;
    function setIntersect(const AArg0: JRectF; const AArg1: JRectF): Boolean;
    procedure sort;
    function toShortString: JString;
    function toString: JString; reintroduce;
    procedure union(const AArg0: Single; const AArg1: Single); overload;
    procedure union(const AArg0: JRectF); overload;
    procedure union(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single); overload;
    function width: Single;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JRectF; overload;
    class function Wrap(const AObject: IJNIObject): JRectF; overload;
    { constructors }
    class function Create: JRectF; overload;
    class function Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): JRectF; overload;
    class function Create(const AArg0: JRectF): JRectF; overload;
    class function Create(const AArg0: JRect): JRectF; overload;
    { methods }
    class function intersects(const AArg0: JRectF; const AArg1: JRectF): Boolean; overload;
  end;

{ android.graphics.Shader }

  [JavaClassSignature('android/graphics/Shader')]
  JShader = interface(JObject)
    ['{7CDE0FB8-6B1D-454D-B3B7-81534C9389F8}']
    function getLocalMatrix(const AArg0: JMatrix): Boolean;
    procedure setLocalMatrix(const AArg0: JMatrix);
  end;

  [JavaClassSignature('android/graphics/Shader')]
  TJShader = class(TJObject, JShader)
  private
    { methods }
    function getLocalMatrix(const AArg0: JMatrix): Boolean;
    procedure setLocalMatrix(const AArg0: JMatrix);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JShader; overload;
    class function Wrap(const AObject: IJNIObject): JShader; overload;
    { constructors }
    class function Create: JShader; overload;
  end;

{ android.graphics.LinearGradient }

  [JavaClassSignature('android/graphics/LinearGradient')]
  JLinearGradient = interface(JShader)
    ['{EE8E9FA7-F3CA-4BBA-93CD-530AC03E4B02}']
  end;

  [JavaClassSignature('android/graphics/LinearGradient')]
  TJLinearGradient = class(TJShader, JLinearGradient)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JLinearGradient; overload;
    class function Wrap(const AObject: IJNIObject): JLinearGradient; overload;
    { constructors }
    class function Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: IJavaArray<Integer>; const AArg5: IJavaArray<Single>; const AArg6: JShader_TileMode): JLinearGradient; overload;
    class function Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Integer; const AArg5: Integer; const AArg6: JShader_TileMode): JLinearGradient; overload;
  end;

{ android.graphics.RadialGradient }

  [JavaClassSignature('android/graphics/RadialGradient')]
  JRadialGradient = interface(JShader)
    ['{87C6F3EB-5FD8-4030-AE49-73E78AC02303}']
  end;

  [JavaClassSignature('android/graphics/RadialGradient')]
  TJRadialGradient = class(TJShader, JRadialGradient)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JRadialGradient; overload;
    class function Wrap(const AObject: IJNIObject): JRadialGradient; overload;
    { constructors }
    class function Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: IJavaArray<Integer>; const AArg4: IJavaArray<Single>; const AArg5: JShader_TileMode): JRadialGradient; overload;
    class function Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Integer; const AArg4: Integer; const AArg5: JShader_TileMode): JRadialGradient; overload;
  end;

{ android.graphics.Shader_TileMode }

  [JavaClassSignature('android/graphics/Shader$TileMode')]
  JShader_TileMode = interface(JEnum)
    ['{634CFE1D-BA7F-4603-8459-AC868C0CAD74}']
  end;

  [JavaClassSignature('android/graphics/Shader$TileMode')]
  TJShader_TileMode = class(TJEnum, JShader_TileMode)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JShader_TileMode; overload;
    class function Wrap(const AObject: IJNIObject): JShader_TileMode; overload;
    { constants }
    class function CLAMP: JShader_TileMode;
    class function MIRROR: JShader_TileMode;
    class function &REPEAT: JShader_TileMode;
    { methods }
    class function valueOf(const AArg0: JString): JShader_TileMode; overload;
    class function values: IJavaArray<JShader_TileMode>;
  end;

{ android.graphics.SurfaceTexture }

  [JavaClassSignature('android/graphics/SurfaceTexture')]
  JSurfaceTexture = interface(JObject)
    ['{5A56EB39-D6BC-4E4C-9EE9-349C98494232}']
    procedure attachToGLContext(const AArg0: Integer);
    procedure detachFromGLContext;
    function getTimestamp: Int64;
    procedure getTransformMatrix(const AArg0: IJavaArray<Single>);
    function isReleased: Boolean; // Introduced in 26';
    procedure release;
    procedure releaseTexImage;
    procedure setDefaultBufferSize(const AArg0: Integer; const AArg1: Integer);
    procedure updateTexImage;
  end;

  [JavaClassSignature('android/graphics/SurfaceTexture')]
  TJSurfaceTexture = class(TJObject, JSurfaceTexture)
  private
    { methods }
    procedure attachToGLContext(const AArg0: Integer);
    procedure detachFromGLContext;
    function getTimestamp: Int64;
    procedure getTransformMatrix(const AArg0: IJavaArray<Single>);
    function isReleased: Boolean; // Introduced in 26';
    procedure release;
    procedure releaseTexImage;
    procedure setDefaultBufferSize(const AArg0: Integer; const AArg1: Integer);
    procedure updateTexImage;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSurfaceTexture; overload;
    class function Wrap(const AObject: IJNIObject): JSurfaceTexture; overload;
    { constructors }
    class function Create(const AArg0: Integer): JSurfaceTexture; overload;
    class function Create(const AArg0: Integer; const AArg1: Boolean): JSurfaceTexture; overload;
    class function Create(const AArg0: Boolean): JSurfaceTexture; overload;
  end;

{ android.graphics.Typeface }

  [JavaClassSignature('android/graphics/Typeface')]
  JTypeface = interface(JObject)
    ['{0CE6F79E-00EC-4055-A0AD-DBABB3D97942}']
    function equals(const AArg0: JObject): Boolean;
    function getStyle: Integer;
    function getWeight: Integer; // Introduced in 28';
    function hashCode: Integer;
    function isBold: Boolean;
    function isItalic: Boolean;
  end;

  [JavaClassSignature('android/graphics/Typeface')]
  TJTypeface = class(TJObject, JTypeface)
  private
    { methods }
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function getStyle: Integer;
    function getWeight: Integer; // Introduced in 28';
    function hashCode: Integer;
    function isBold: Boolean;
    function isItalic: Boolean;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JTypeface; overload;
    class function Wrap(const AObject: IJNIObject): JTypeface; overload;
    { constants }
    class function BOLD: Integer;
    class function BOLD_ITALIC: Integer;
    class function DEFAULT: JTypeface;
    class function DEFAULT_BOLD: JTypeface;
    class function ITALIC: Integer;
    class function MONOSPACE: JTypeface;
    class function NORMAL: Integer;
    class function SANS_SERIF: JTypeface;
    class function SERIF: JTypeface;
    { methods }
    class function create(const AArg0: JString; const AArg1: Integer): JTypeface; overload;
    class function create(const AArg0: JTypeface; const AArg1: Integer): JTypeface; overload;
    class function create(const AArg0: JTypeface; const AArg1: Integer; const AArg2: Boolean): JTypeface; overload; // Introduced in 28';
    class function createFromAsset(const AArg0: JAssetManager; const AArg1: JString): JTypeface;
    class function createFromFile(const AArg0: JFile): JTypeface; overload;
    class function createFromFile(const AArg0: JString): JTypeface; overload;
    class function defaultFromStyle(const AArg0: Integer): JTypeface;
  end;

{ android.graphics.Xfermode }

  [JavaClassSignature('android/graphics/Xfermode')]
  JXfermode = interface(JObject)
    ['{73F2E9CB-7BB6-49D7-8672-858455C2FDC7}']
  end;

  [JavaClassSignature('android/graphics/Xfermode')]
  TJXfermode = class(TJObject, JXfermode)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JXfermode; overload;
    class function Wrap(const AObject: IJNIObject): JXfermode; overload;
    { constructors }
    class function Create: JXfermode; overload;
  end;

{ android.graphics.PorterDuffXfermode }

  [JavaClassSignature('android/graphics/PorterDuffXfermode')]
  JPorterDuffXfermode = interface(JXfermode)
    ['{CDADDA8D-9314-4E3B-B123-460B16EA5B57}']
  end;

  [JavaClassSignature('android/graphics/PorterDuffXfermode')]
  TJPorterDuffXfermode = class(TJXfermode, JPorterDuffXfermode)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPorterDuffXfermode; overload;
    class function Wrap(const AObject: IJNIObject): JPorterDuffXfermode; overload;
    { constructors }
    class function Create(const AArg0: JPorterDuff_Mode): JPorterDuffXfermode; overload;
  end;

{ android.graphics.drawable.Drawable }

  [JavaClassSignature('android/graphics/drawable/Drawable')]
  JDrawable = interface(JObject)
    ['{8E4A8C8F-64F5-41C1-AC67-6F5E5AED840E}']
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure clearColorFilter;
    function copyBounds: JRect; overload;
    procedure copyBounds(const AArg0: JRect); overload;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getBounds: JRect;
    function getChangingConfigurations: Integer;
    function getColorFilter: JColorFilter;
    function getCurrent: JDrawable;
    function getDirtyBounds: JRect;
    procedure getHotspotBounds(const AArg0: JRect); // Introduced in 23';
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getLayoutDirection: Integer; // Introduced in 23';
    function getLevel: Integer;
    function getMinimumHeight: Integer;
    function getMinimumWidth: Integer;
    function getOpacity: Integer; deprecated 'Deprecated in 29';
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    function getState: IJavaArray<Integer>;
    procedure invalidateSelf;
    function isAutoMirrored: Boolean;
    function isFilterBitmap: Boolean; // Introduced in 23';
    function isStateful: Boolean;
    function isVisible: Boolean;
    procedure jumpToCurrentState;
    function mutate: JDrawable;
    function onLayoutDirectionChanged(const AArg0: Integer): Boolean; // Introduced in 23';
    procedure scheduleSelf(const AArg0: JRunnable; const AArg1: Int64);
    procedure setAlpha(const AArg0: Integer);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setBounds(const AArg0: JRect); overload;
    procedure setBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure setChangingConfigurations(const AArg0: Integer);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setColorFilter(const AArg0: Integer; const AArg1: JPorterDuff_Mode); overload; deprecated 'Deprecated in 29';
    procedure setDither(const AArg0: Boolean); deprecated 'Deprecated in 23';
    procedure setFilterBitmap(const AArg0: Boolean);
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    function setLayoutDirection(const AArg0: Integer): Boolean; // Introduced in 23';
    function setLevel(const AArg0: Integer): Boolean;
    function setState(const AArg0: IJavaArray<Integer>): Boolean;
    procedure setTint(const AArg0: Integer);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
    procedure unscheduleSelf(const AArg0: JRunnable);
  end;

  [JavaClassSignature('android/graphics/drawable/Drawable')]
  TJDrawable = class(TJObject, JDrawable)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure clearColorFilter;
    function copyBounds: JRect; overload;
    procedure copyBounds(const AArg0: JRect); overload;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getBounds: JRect;
    function getChangingConfigurations: Integer;
    function getColorFilter: JColorFilter;
    function getCurrent: JDrawable;
    function getDirtyBounds: JRect;
    procedure getHotspotBounds(const AArg0: JRect); // Introduced in 23';
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getLayoutDirection: Integer; // Introduced in 23';
    function getLevel: Integer;
    function getMinimumHeight: Integer;
    function getMinimumWidth: Integer;
    function getOpacity: Integer; deprecated 'Deprecated in 29';
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    function getState: IJavaArray<Integer>;
    procedure invalidateSelf;
    function isAutoMirrored: Boolean;
    function isFilterBitmap: Boolean; // Introduced in 23';
    function isStateful: Boolean;
    function isVisible: Boolean;
    procedure jumpToCurrentState;
    function mutate: JDrawable;
    function onLayoutDirectionChanged(const AArg0: Integer): Boolean; // Introduced in 23';
    procedure scheduleSelf(const AArg0: JRunnable; const AArg1: Int64);
    procedure setAlpha(const AArg0: Integer);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setBounds(const AArg0: JRect); overload;
    procedure setBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure setChangingConfigurations(const AArg0: Integer);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setColorFilter(const AArg0: Integer; const AArg1: JPorterDuff_Mode); overload; deprecated 'Deprecated in 29';
    procedure setDither(const AArg0: Boolean); deprecated 'Deprecated in 23';
    procedure setFilterBitmap(const AArg0: Boolean);
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    function setLayoutDirection(const AArg0: Integer): Boolean; // Introduced in 23';
    function setLevel(const AArg0: Integer): Boolean;
    function setState(const AArg0: IJavaArray<Integer>): Boolean;
    procedure setTint(const AArg0: Integer);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
    procedure unscheduleSelf(const AArg0: JRunnable);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JDrawable; overload;
    { constructors }
    class function Create: JDrawable; overload;
    { methods }
    class function createFromPath(const AArg0: JString): JDrawable;
    class function createFromResourceStream(const AArg0: JResources; const AArg1: JTypedValue; const AArg2: JInputStream; const AArg3: JString; const AArg4: JBitmapFactory_Options): JDrawable; overload; deprecated 'Deprecated in 28';
    class function createFromResourceStream(const AArg0: JResources; const AArg1: JTypedValue; const AArg2: JInputStream; const AArg3: JString): JDrawable; overload;
    class function createFromStream(const AArg0: JInputStream; const AArg1: JString): JDrawable;
    class function resolveOpacity(const AArg0: Integer; const AArg1: Integer): Integer;
  end;

{ android.graphics.drawable.BitmapDrawable }

  [JavaClassSignature('android/graphics/drawable/BitmapDrawable')]
  JBitmapDrawable = interface(JDrawable)
    ['{EB8417F9-7F27-41AA-897B-2B89CF868F21}']
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getBitmap: JBitmap;
    function getChangingConfigurations: Integer;
    function getColorFilter: JColorFilter;
    function getGravity: Integer;
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPaint: JPaint;
    function getTileModeX: JShader_TileMode;
    function getTileModeY: JShader_TileMode;
    function hasAntiAlias: Boolean;
    function hasMipMap: Boolean;
    function isAutoMirrored: Boolean;
    function isFilterBitmap: Boolean;
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setAntiAlias(const AArg0: Boolean);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDither(const AArg0: Boolean);
    procedure setFilterBitmap(const AArg0: Boolean);
    procedure setGravity(const AArg0: Integer);
    procedure setMipMap(const AArg0: Boolean);
    procedure setTargetDensity(const AArg0: JCanvas); overload;
    procedure setTargetDensity(const AArg0: JDisplayMetrics); overload;
    procedure setTargetDensity(const AArg0: Integer); overload;
    procedure setTileModeX(const AArg0: JShader_TileMode);
    procedure setTileModeXY(const AArg0: JShader_TileMode; const AArg1: JShader_TileMode);
    procedure setTileModeY(const AArg0: JShader_TileMode);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
  end;

  [JavaClassSignature('android/graphics/drawable/BitmapDrawable')]
  TJBitmapDrawable = class(TJDrawable, JBitmapDrawable)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getBitmap: JBitmap;
    function getChangingConfigurations: Integer;
    function getColorFilter: JColorFilter;
    function getGravity: Integer;
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPaint: JPaint;
    function getTileModeX: JShader_TileMode;
    function getTileModeY: JShader_TileMode;
    function hasAntiAlias: Boolean;
    function hasMipMap: Boolean;
    function isAutoMirrored: Boolean;
    function isFilterBitmap: Boolean;
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setAntiAlias(const AArg0: Boolean);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDither(const AArg0: Boolean);
    procedure setFilterBitmap(const AArg0: Boolean);
    procedure setGravity(const AArg0: Integer);
    procedure setMipMap(const AArg0: Boolean);
    procedure setTargetDensity(const AArg0: JCanvas); overload;
    procedure setTargetDensity(const AArg0: JDisplayMetrics); overload;
    procedure setTargetDensity(const AArg0: Integer); overload;
    procedure setTileModeX(const AArg0: JShader_TileMode);
    procedure setTileModeXY(const AArg0: JShader_TileMode; const AArg1: JShader_TileMode);
    procedure setTileModeY(const AArg0: JShader_TileMode);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JBitmapDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JBitmapDrawable; overload;
    { constructors }
    class function Create: JBitmapDrawable; overload;
    class function Create(const AArg0: JResources): JBitmapDrawable; overload;
    class function Create(const AArg0: JBitmap): JBitmapDrawable; overload;
    class function Create(const AArg0: JResources; const AArg1: JBitmap): JBitmapDrawable; overload;
    class function Create(const AArg0: JString): JBitmapDrawable; overload;
    class function Create(const AArg0: JResources; const AArg1: JString): JBitmapDrawable; overload;
    class function Create(const AArg0: JInputStream): JBitmapDrawable; overload;
    class function Create(const AArg0: JResources; const AArg1: JInputStream): JBitmapDrawable; overload;
  end;

{ android.graphics.drawable.ColorDrawable }

  [JavaClassSignature('android/graphics/drawable/ColorDrawable')]
  JColorDrawable = interface(JDrawable)
    ['{57F836A8-6C6B-4404-94D9-7610F35DA01A}']
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getColor: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setColor(const AArg0: Integer);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
  end;

  [JavaClassSignature('android/graphics/drawable/ColorDrawable')]
  TJColorDrawable = class(TJDrawable, JColorDrawable)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getColor: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setColor(const AArg0: Integer);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JColorDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JColorDrawable; overload;
    { constructors }
    class function Create: JColorDrawable; overload;
    class function Create(const AArg0: Integer): JColorDrawable; overload;
  end;

{ android.graphics.drawable.DrawableContainer }

  [JavaClassSignature('android/graphics/drawable/DrawableContainer')]
  JDrawableContainer = interface(JDrawable)
    ['{C62F55D0-9A41-402F-87C6-A7036851E3F9}']
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getCurrent: JDrawable;
    procedure getHotspotBounds(const AArg0: JRect);
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getMinimumHeight: Integer;
    function getMinimumWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    procedure invalidateDrawable(const AArg0: JDrawable);
    function isAutoMirrored: Boolean;
    function isStateful: Boolean;
    procedure jumpToCurrentState;
    function mutate: JDrawable;
    function onLayoutDirectionChanged(const AArg0: Integer): Boolean;
    procedure scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
    function selectDrawable(const AArg0: Integer): Boolean;
    procedure setAlpha(const AArg0: Integer);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDither(const AArg0: Boolean);
    procedure setEnterFadeDuration(const AArg0: Integer);
    procedure setExitFadeDuration(const AArg0: Integer);
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
    procedure unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
  end;

  [JavaClassSignature('android/graphics/drawable/DrawableContainer')]
  TJDrawableContainer = class(TJDrawable, JDrawableContainer)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getCurrent: JDrawable;
    procedure getHotspotBounds(const AArg0: JRect);
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getMinimumHeight: Integer;
    function getMinimumWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    procedure invalidateDrawable(const AArg0: JDrawable);
    function isAutoMirrored: Boolean;
    function isStateful: Boolean;
    procedure jumpToCurrentState;
    function mutate: JDrawable;
    function onLayoutDirectionChanged(const AArg0: Integer): Boolean;
    procedure scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
    function selectDrawable(const AArg0: Integer): Boolean;
    procedure setAlpha(const AArg0: Integer);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDither(const AArg0: Boolean);
    procedure setEnterFadeDuration(const AArg0: Integer);
    procedure setExitFadeDuration(const AArg0: Integer);
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
    procedure unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDrawableContainer; overload;
    class function Wrap(const AObject: IJNIObject): JDrawableContainer; overload;
    { constructors }
    class function Create: JDrawableContainer; overload;
  end;

{ android.graphics.drawable.StateListDrawable }

  [JavaClassSignature('android/graphics/drawable/StateListDrawable')]
  JStateListDrawable = interface(JDrawableContainer)
    ['{FD0CB104-21A6-48C7-9A9E-17669EA15FD1}']
    procedure addState(const AArg0: IJavaArray<Integer>; const AArg1: JDrawable);
    procedure applyTheme(const AArg0: JResources_Theme);
    function isStateful: Boolean;
    function mutate: JDrawable;
  end;

  [JavaClassSignature('android/graphics/drawable/StateListDrawable')]
  TJStateListDrawable = class(TJDrawableContainer, JStateListDrawable)
  private
    { methods }
    procedure addState(const AArg0: IJavaArray<Integer>; const AArg1: JDrawable);
    procedure applyTheme(const AArg0: JResources_Theme);
    function isStateful: Boolean;
    function mutate: JDrawable;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JStateListDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JStateListDrawable; overload;
    { constructors }
    class function Create: JStateListDrawable; overload;
  end;

{ android.graphics.drawable.DrawableWrapper }

  [JavaClassSignature('android/graphics/drawable/DrawableWrapper')]
  JDrawableWrapper = interface(JDrawable)
    ['{E70DA79D-CDD4-470C-AE8F-31C72010A357}']
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getColorFilter: JColorFilter;
    function getDrawable: JDrawable;
    procedure getHotspotBounds(const AArg0: JRect);
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    procedure invalidateDrawable(const AArg0: JDrawable);
    function isStateful: Boolean;
    function mutate: JDrawable;
    function onLayoutDirectionChanged(const AArg0: Integer): Boolean;
    procedure scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
    procedure setAlpha(const AArg0: Integer);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDrawable(const AArg0: JDrawable);
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
    procedure unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
  end;

  [JavaClassSignature('android/graphics/drawable/DrawableWrapper')]
  TJDrawableWrapper = class(TJDrawable, JDrawableWrapper)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getColorFilter: JColorFilter;
    function getDrawable: JDrawable;
    procedure getHotspotBounds(const AArg0: JRect);
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    procedure invalidateDrawable(const AArg0: JDrawable);
    function isStateful: Boolean;
    function mutate: JDrawable;
    function onLayoutDirectionChanged(const AArg0: Integer): Boolean;
    procedure scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
    procedure setAlpha(const AArg0: Integer);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDrawable(const AArg0: JDrawable);
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
    procedure unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDrawableWrapper; overload;
    class function Wrap(const AObject: IJNIObject): JDrawableWrapper; overload;
    { constructors }
    class function Create(const AArg0: JDrawable): JDrawableWrapper; overload;
  end;

{ android.graphics.drawable.InsetDrawable }

  [JavaClassSignature('android/graphics/drawable/InsetDrawable')]
  JInsetDrawable = interface(JDrawableWrapper)
    ['{543E2EED-7190-4EB8-A31C-9170F5261AE5}']
    procedure applyTheme(const AArg0: JResources_Theme);
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
  end;

  [JavaClassSignature('android/graphics/drawable/InsetDrawable')]
  TJInsetDrawable = class(TJDrawableWrapper, JInsetDrawable)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JInsetDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JInsetDrawable; overload;
    { constructors }
    class function Create(const AArg0: JDrawable; const AArg1: Integer): JInsetDrawable; overload;
    class function Create(const AArg0: JDrawable; const AArg1: Single): JInsetDrawable; overload;
    class function Create(const AArg0: JDrawable; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer): JInsetDrawable; overload;
    class function Create(const AArg0: JDrawable; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single): JInsetDrawable; overload;
  end;

{ android.graphics.drawable.GradientDrawable }

  [JavaClassSignature('android/graphics/drawable/GradientDrawable')]
  JGradientDrawable = interface(JDrawable)
    ['{67E6DB99-42D4-4963-8CC6-6383AF85CE6A}']
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getColor: JColorStateList; // Introduced in 24';
    function getColorFilter: JColorFilter;
    function getColors: IJavaArray<Integer>; // Introduced in 24';
    function getCornerRadii: IJavaArray<Single>; // Introduced in 24';
    function getCornerRadius: Single; // Introduced in 24';
    function getGradientCenterX: Single; // Introduced in 24';
    function getGradientCenterY: Single; // Introduced in 24';
    function getGradientRadius: Single;
    function getGradientType: Integer; // Introduced in 24';
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    function getShape: Integer; // Introduced in 24';
    function getUseLevel: Boolean; // Introduced in 24';
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setColor(const AArg0: JColorStateList); overload;
    procedure setColor(const AArg0: Integer); overload;
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setColors(const AArg0: IJavaArray<Integer>);
    procedure setCornerRadii(const AArg0: IJavaArray<Single>);
    procedure setCornerRadius(const AArg0: Single);
    procedure setDither(const AArg0: Boolean);
    procedure setGradientCenter(const AArg0: Single; const AArg1: Single);
    procedure setGradientRadius(const AArg0: Single);
    procedure setGradientType(const AArg0: Integer);
    procedure setShape(const AArg0: Integer);
    procedure setSize(const AArg0: Integer; const AArg1: Integer);
    procedure setStroke(const AArg0: Integer; const AArg1: Integer); overload;
    procedure setStroke(const AArg0: Integer; const AArg1: JColorStateList); overload;
    procedure setStroke(const AArg0: Integer; const AArg1: Integer; const AArg2: Single; const AArg3: Single); overload;
    procedure setStroke(const AArg0: Integer; const AArg1: JColorStateList; const AArg2: Single; const AArg3: Single); overload;
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    procedure setUseLevel(const AArg0: Boolean);
  end;

  [JavaClassSignature('android/graphics/drawable/GradientDrawable')]
  TJGradientDrawable = class(TJDrawable, JGradientDrawable)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getColor: JColorStateList; // Introduced in 24';
    function getColorFilter: JColorFilter;
    function getColors: IJavaArray<Integer>; // Introduced in 24';
    function getCornerRadii: IJavaArray<Single>; // Introduced in 24';
    function getCornerRadius: Single; // Introduced in 24';
    function getGradientCenterX: Single; // Introduced in 24';
    function getGradientCenterY: Single; // Introduced in 24';
    function getGradientRadius: Single;
    function getGradientType: Integer; // Introduced in 24';
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    function getShape: Integer; // Introduced in 24';
    function getUseLevel: Boolean; // Introduced in 24';
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setColor(const AArg0: JColorStateList); overload;
    procedure setColor(const AArg0: Integer); overload;
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setColors(const AArg0: IJavaArray<Integer>);
    procedure setCornerRadii(const AArg0: IJavaArray<Single>);
    procedure setCornerRadius(const AArg0: Single);
    procedure setDither(const AArg0: Boolean);
    procedure setGradientCenter(const AArg0: Single; const AArg1: Single);
    procedure setGradientRadius(const AArg0: Single);
    procedure setGradientType(const AArg0: Integer);
    procedure setShape(const AArg0: Integer);
    procedure setSize(const AArg0: Integer; const AArg1: Integer);
    procedure setStroke(const AArg0: Integer; const AArg1: Integer); overload;
    procedure setStroke(const AArg0: Integer; const AArg1: JColorStateList); overload;
    procedure setStroke(const AArg0: Integer; const AArg1: Integer; const AArg2: Single; const AArg3: Single); overload;
    procedure setStroke(const AArg0: Integer; const AArg1: JColorStateList; const AArg2: Single; const AArg3: Single); overload;
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    procedure setUseLevel(const AArg0: Boolean);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JGradientDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JGradientDrawable; overload;
    { constructors }
    class function Create: JGradientDrawable; overload;
    { constants }
    class function LINE: Integer;
    class function LINEAR_GRADIENT: Integer;
    class function OVAL: Integer;
    class function RADIAL_GRADIENT: Integer;
    class function RECTANGLE: Integer;
    class function RING: Integer;
    class function SWEEP_GRADIENT: Integer;
  end;

{ android.graphics.drawable.LayerDrawable }

  [JavaClassSignature('android/graphics/drawable/LayerDrawable')]
  JLayerDrawable = interface(JDrawable)
    ['{468C8ECB-7F2C-4E12-8C58-6CFC814E0CDD}']
    function addLayer(const AArg0: JDrawable): Integer; // Introduced in 23';
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function findDrawableByLayerId(const AArg0: Integer): JDrawable;
    function findIndexByLayerId(const AArg0: Integer): Integer; // Introduced in 23';
    function getAlpha: Integer;
    function getBottomPadding: Integer; // Introduced in 23';
    function getChangingConfigurations: Integer;
    function getDrawable(const AArg0: Integer): JDrawable;
    function getEndPadding: Integer; // Introduced in 23';
    procedure getHotspotBounds(const AArg0: JRect);
    function getId(const AArg0: Integer): Integer;
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getLayerGravity(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerHeight(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetBottom(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetEnd(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetLeft(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetRight(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetStart(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetTop(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerWidth(const AArg0: Integer): Integer; // Introduced in 23';
    function getLeftPadding: Integer; // Introduced in 23';
    function getNumberOfLayers: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    function getPaddingMode: Integer;
    function getRightPadding: Integer; // Introduced in 23';
    function getStartPadding: Integer; // Introduced in 23';
    function getTopPadding: Integer; // Introduced in 23';
    procedure invalidateDrawable(const AArg0: JDrawable);
    function isAutoMirrored: Boolean;
    function isStateful: Boolean;
    procedure jumpToCurrentState;
    function mutate: JDrawable;
    function onLayoutDirectionChanged(const AArg0: Integer): Boolean;
    procedure scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
    procedure setAlpha(const AArg0: Integer);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDither(const AArg0: Boolean);
    procedure setDrawable(const AArg0: Integer; const AArg1: JDrawable); // Introduced in 23';
    function setDrawableByLayerId(const AArg0: Integer; const AArg1: JDrawable): Boolean;
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setId(const AArg0: Integer; const AArg1: Integer);
    procedure setLayerGravity(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerHeight(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInset(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
    procedure setLayerInsetBottom(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetEnd(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetLeft(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetRelative(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); // Introduced in 23';
    procedure setLayerInsetRight(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetStart(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetTop(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerSize(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer); // Introduced in 23';
    procedure setLayerWidth(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setOpacity(const AArg0: Integer);
    procedure setPadding(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); // Introduced in 23';
    procedure setPaddingMode(const AArg0: Integer);
    procedure setPaddingRelative(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); // Introduced in 23';
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
    procedure unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
  end;

  [JavaClassSignature('android/graphics/drawable/LayerDrawable')]
  TJLayerDrawable = class(TJDrawable, JLayerDrawable)
  private
    { methods }
    function addLayer(const AArg0: JDrawable): Integer; // Introduced in 23';
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function findDrawableByLayerId(const AArg0: Integer): JDrawable;
    function findIndexByLayerId(const AArg0: Integer): Integer; // Introduced in 23';
    function getAlpha: Integer;
    function getBottomPadding: Integer; // Introduced in 23';
    function getChangingConfigurations: Integer;
    function getDrawable(const AArg0: Integer): JDrawable;
    function getEndPadding: Integer; // Introduced in 23';
    procedure getHotspotBounds(const AArg0: JRect);
    function getId(const AArg0: Integer): Integer;
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getLayerGravity(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerHeight(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetBottom(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetEnd(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetLeft(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetRight(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetStart(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerInsetTop(const AArg0: Integer): Integer; // Introduced in 23';
    function getLayerWidth(const AArg0: Integer): Integer; // Introduced in 23';
    function getLeftPadding: Integer; // Introduced in 23';
    function getNumberOfLayers: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    function getPaddingMode: Integer;
    function getRightPadding: Integer; // Introduced in 23';
    function getStartPadding: Integer; // Introduced in 23';
    function getTopPadding: Integer; // Introduced in 23';
    procedure invalidateDrawable(const AArg0: JDrawable);
    function isAutoMirrored: Boolean;
    function isStateful: Boolean;
    procedure jumpToCurrentState;
    function mutate: JDrawable;
    function onLayoutDirectionChanged(const AArg0: Integer): Boolean;
    procedure scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
    procedure setAlpha(const AArg0: Integer);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDither(const AArg0: Boolean);
    procedure setDrawable(const AArg0: Integer; const AArg1: JDrawable); // Introduced in 23';
    function setDrawableByLayerId(const AArg0: Integer; const AArg1: JDrawable): Boolean;
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setId(const AArg0: Integer; const AArg1: Integer);
    procedure setLayerGravity(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerHeight(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInset(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
    procedure setLayerInsetBottom(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetEnd(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetLeft(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetRelative(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); // Introduced in 23';
    procedure setLayerInsetRight(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetStart(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerInsetTop(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setLayerSize(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer); // Introduced in 23';
    procedure setLayerWidth(const AArg0: Integer; const AArg1: Integer); // Introduced in 23';
    procedure setOpacity(const AArg0: Integer);
    procedure setPadding(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); // Introduced in 23';
    procedure setPaddingMode(const AArg0: Integer);
    procedure setPaddingRelative(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); // Introduced in 23';
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
    procedure unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JLayerDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JLayerDrawable; overload;
    { constructors }
    class function Create(const AArg0: IJavaArray<JDrawable>): JLayerDrawable; overload;
    { constants }
    class function INSET_UNDEFINED: Integer;
    class function PADDING_MODE_NEST: Integer;
    class function PADDING_MODE_STACK: Integer;
  end;

{ android.graphics.drawable.RippleDrawable }

  [JavaClassSignature('android/graphics/drawable/RippleDrawable')]
  JRippleDrawable = interface(JLayerDrawable)
    ['{CF660B50-10C6-4A80-8DFA-515E2C1E30FA}']
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getDirtyBounds: JRect;
    procedure getHotspotBounds(const AArg0: JRect);
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getRadius: Integer; // Introduced in 23';
    procedure invalidateSelf;
    function isStateful: Boolean;
    procedure jumpToCurrentState;
    function mutate: JDrawable;
    procedure setColor(const AArg0: JColorStateList);
    function setDrawableByLayerId(const AArg0: Integer; const AArg1: JDrawable): Boolean;
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setPaddingMode(const AArg0: Integer);
    procedure setRadius(const AArg0: Integer); // Introduced in 23';
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
  end;

  [JavaClassSignature('android/graphics/drawable/RippleDrawable')]
  TJRippleDrawable = class(TJLayerDrawable, JRippleDrawable)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getDirtyBounds: JRect;
    procedure getHotspotBounds(const AArg0: JRect);
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getRadius: Integer; // Introduced in 23';
    procedure invalidateSelf;
    function isStateful: Boolean;
    procedure jumpToCurrentState;
    function mutate: JDrawable;
    procedure setColor(const AArg0: JColorStateList);
    function setDrawableByLayerId(const AArg0: Integer; const AArg1: JDrawable): Boolean;
    procedure setHotspot(const AArg0: Single; const AArg1: Single);
    procedure setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setPaddingMode(const AArg0: Integer);
    procedure setRadius(const AArg0: Integer); // Introduced in 23';
    function setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JRippleDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JRippleDrawable; overload;
    { constructors }
    class function Create(const AArg0: JColorStateList; const AArg1: JDrawable; const AArg2: JDrawable): JRippleDrawable; overload;
    { constants }
    class function RADIUS_AUTO: Integer;
  end;

{ android.graphics.drawable.ShapeDrawable }

  [JavaClassSignature('android/graphics/drawable/ShapeDrawable')]
  JShapeDrawable = interface(JDrawable)
    ['{51A76557-5F33-42E1-A4CB-8B20A973B806}']
    procedure applyTheme(const AArg0: JResources_Theme);
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    function getPaint: JPaint;
    function getShape: JShape;
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDither(const AArg0: Boolean);
    procedure setIntrinsicHeight(const AArg0: Integer);
    procedure setIntrinsicWidth(const AArg0: Integer);
    procedure setPadding(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure setPadding(const AArg0: JRect); overload;
    procedure setShape(const AArg0: JShape);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
  end;

  [JavaClassSignature('android/graphics/drawable/ShapeDrawable')]
  TJShapeDrawable = class(TJDrawable, JShapeDrawable)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    procedure getOutline(const AArg0: JOutline);
    function getPadding(const AArg0: JRect): Boolean;
    function getPaint: JPaint;
    function getShape: JShape;
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setDither(const AArg0: Boolean);
    procedure setIntrinsicHeight(const AArg0: Integer);
    procedure setIntrinsicWidth(const AArg0: Integer);
    procedure setPadding(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure setPadding(const AArg0: JRect); overload;
    procedure setShape(const AArg0: JShape);
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JShapeDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JShapeDrawable; overload;
    { constructors }
    class function Create: JShapeDrawable; overload;
    class function Create(const AArg0: JShape): JShapeDrawable; overload;
  end;

{ android.graphics.drawable.VectorDrawable }

  [JavaClassSignature('android/graphics/drawable/VectorDrawable')]
  JVectorDrawable = interface(JDrawable)
    ['{321D3AE9-73B5-4ECF-A4F5-898C7F16EF60}']
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getColorFilter: JColorFilter;
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    function isAutoMirrored: Boolean;
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
  end;

  [JavaClassSignature('android/graphics/drawable/VectorDrawable')]
  TJVectorDrawable = class(TJDrawable, JVectorDrawable)
  private
    { methods }
    procedure applyTheme(const AArg0: JResources_Theme);
    function canApplyTheme: Boolean;
    procedure draw(const AArg0: JCanvas);
    function getAlpha: Integer;
    function getChangingConfigurations: Integer;
    function getColorFilter: JColorFilter;
    function getIntrinsicHeight: Integer;
    function getIntrinsicWidth: Integer;
    function getOpacity: Integer;
    function isAutoMirrored: Boolean;
    function isStateful: Boolean;
    function mutate: JDrawable;
    procedure setAlpha(const AArg0: Integer);
    procedure setAutoMirrored(const AArg0: Boolean);
    procedure setColorFilter(const AArg0: JColorFilter); overload;
    procedure setTintList(const AArg0: JColorStateList);
    procedure setTintMode(const AArg0: JPorterDuff_Mode);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JVectorDrawable; overload;
    class function Wrap(const AObject: IJNIObject): JVectorDrawable; overload;
    { constructors }
    class function Create: JVectorDrawable; overload;
  end;

{ android.graphics.drawable.shapes.Shape }

  [JavaClassSignature('android/graphics/drawable/shapes/Shape')]
  JShape = interface(JObject)
    ['{09FF7436-02AD-4779-9517-C1988555C313}']
    function clone: JObject;
    procedure draw(const AArg0: JCanvas; const AArg1: JPaint);
    function getHeight: Single;
    procedure getOutline(const AArg0: JOutline);
    function getWidth: Single;
    function hasAlpha: Boolean;
    procedure resize(const AArg0: Single; const AArg1: Single);
  end;

  [JavaClassSignature('android/graphics/drawable/shapes/Shape')]
  TJShape = class(TJObject, JShape)
  private
    { methods }
    function clone: JObject;
    procedure draw(const AArg0: JCanvas; const AArg1: JPaint);
    function getHeight: Single;
    procedure getOutline(const AArg0: JOutline);
    function getWidth: Single;
    function hasAlpha: Boolean;
    procedure resize(const AArg0: Single; const AArg1: Single);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JShape; overload;
    class function Wrap(const AObject: IJNIObject): JShape; overload;
    { constructors }
    class function Create: JShape; overload;
  end;

{ android.graphics.drawable.shapes.RectShape }

  [JavaClassSignature('android/graphics/drawable/shapes/RectShape')]
  JRectShape = interface(JShape)
    ['{03529184-983B-4FAC-A509-744C9DCF78CF}']
    function clone: JRectShape; overload;
    procedure draw(const AArg0: JCanvas; const AArg1: JPaint);
    procedure getOutline(const AArg0: JOutline);
  end;

  [JavaClassSignature('android/graphics/drawable/shapes/RectShape')]
  TJRectShape = class(TJShape, JRectShape)
  private
    { methods }
    function clone: JRectShape; overload;
    procedure draw(const AArg0: JCanvas; const AArg1: JPaint);
    procedure getOutline(const AArg0: JOutline);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JRectShape; overload;
    class function Wrap(const AObject: IJNIObject): JRectShape; overload;
    { constructors }
    class function Create: JRectShape; overload;
  end;

{ android.graphics.drawable.shapes.RoundRectShape }

  [JavaClassSignature('android/graphics/drawable/shapes/RoundRectShape')]
  JRoundRectShape = interface(JRectShape)
    ['{27053B58-DCAD-4E06-B5EC-B986742D9347}']
    function clone: JRoundRectShape; overload;
    procedure draw(const AArg0: JCanvas; const AArg1: JPaint);
    procedure getOutline(const AArg0: JOutline);
  end;

  [JavaClassSignature('android/graphics/drawable/shapes/RoundRectShape')]
  TJRoundRectShape = class(TJRectShape, JRoundRectShape)
  private
    { methods }
    function clone: JRoundRectShape; overload;
    procedure draw(const AArg0: JCanvas; const AArg1: JPaint);
    procedure getOutline(const AArg0: JOutline);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JRoundRectShape; overload;
    class function Wrap(const AObject: IJNIObject): JRoundRectShape; overload;
    { constructors }
    class function Create(const AArg0: IJavaArray<Single>; const AArg1: JRectF; const AArg2: IJavaArray<Single>): JRoundRectShape; overload;
  end;

{ android.view.Display }

  [JavaClassSignature('android/view/Display')]
  JDisplay = interface(JObject)
    ['{F656CE95-6452-4312-973A-502C7BD65120}']
    function getAppVsyncOffsetNanos: Int64;
    procedure getCurrentSizeRange(const AArg0: JPoint; const AArg1: JPoint);
    function getDisplayId: Integer;
    function getFlags: Integer;
    function getHeight: Integer; deprecated 'Deprecated in 15';
    procedure getMetrics(const AArg0: JDisplayMetrics);
    function getMode: JDisplay_Mode; // Introduced in 23';
    function getName: JString;
    function getOrientation: Integer; deprecated 'Deprecated in 15';
    function getPixelFormat: Integer; deprecated 'Deprecated in 17';
    function getPresentationDeadlineNanos: Int64;
    procedure getRealMetrics(const AArg0: JDisplayMetrics);
    procedure getRealSize(const AArg0: JPoint);
    procedure getRectSize(const AArg0: JRect);
    function getRefreshRate: Single;
    function getRotation: Integer;
    procedure getSize(const AArg0: JPoint);
    function getState: Integer;
    function getSupportedModes: IJavaArray<JDisplay_Mode>; // Introduced in 23';
    function getSupportedRefreshRates: IJavaArray<Single>; deprecated 'Deprecated in 23';
    function getWidth: Integer; deprecated 'Deprecated in 15';
    function isHdr: Boolean; // Introduced in 26';
    function isValid: Boolean;
    function isWideColorGamut: Boolean; // Introduced in 26';
    function toString: JString;
  end;

  [JavaClassSignature('android/view/Display')]
  TJDisplay = class(TJObject, JDisplay)
  private
    { methods }
    function getAppVsyncOffsetNanos: Int64;
    procedure getCurrentSizeRange(const AArg0: JPoint; const AArg1: JPoint);
    function getDisplayId: Integer;
    function getFlags: Integer;
    function getHeight: Integer; deprecated 'Deprecated in 15';
    procedure getMetrics(const AArg0: JDisplayMetrics);
    function getMode: JDisplay_Mode; // Introduced in 23';
    function getName: JString;
    function getOrientation: Integer; deprecated 'Deprecated in 15';
    function getPixelFormat: Integer; deprecated 'Deprecated in 17';
    function getPresentationDeadlineNanos: Int64;
    procedure getRealMetrics(const AArg0: JDisplayMetrics);
    procedure getRealSize(const AArg0: JPoint);
    procedure getRectSize(const AArg0: JRect);
    function getRefreshRate: Single;
    function getRotation: Integer;
    procedure getSize(const AArg0: JPoint);
    function getState: Integer;
    function getSupportedModes: IJavaArray<JDisplay_Mode>; // Introduced in 23';
    function getSupportedRefreshRates: IJavaArray<Single>; deprecated 'Deprecated in 23';
    function getWidth: Integer; deprecated 'Deprecated in 15';
    function isHdr: Boolean; // Introduced in 26';
    function isValid: Boolean;
    function isWideColorGamut: Boolean; // Introduced in 26';
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDisplay; overload;
    class function Wrap(const AObject: IJNIObject): JDisplay; overload;
    { constants }
    class function DEFAULT_DISPLAY: Integer;
    class function FLAG_PRESENTATION: Integer;
    class function FLAG_PRIVATE: Integer;
    class function FLAG_ROUND: Integer;
    class function FLAG_SECURE: Integer;
    class function FLAG_SUPPORTS_PROTECTED_BUFFERS: Integer;
    class function INVALID_DISPLAY: Integer;
    class function STATE_DOZE: Integer;
    class function STATE_DOZE_SUSPEND: Integer;
    class function STATE_OFF: Integer;
    class function STATE_ON: Integer;
    class function STATE_ON_SUSPEND: Integer;
    class function STATE_UNKNOWN: Integer;
    class function STATE_VR: Integer;
  end;

{ android.view.Display_Mode }

  [JavaClassSignature('android/view/Display$Mode')]
  JDisplay_Mode = interface(JObject)
    ['{F11031BA-0D91-4D31-B32B-4813DF70CF29}']
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean;
    function getModeId: Integer;
    function getPhysicalHeight: Integer;
    function getPhysicalWidth: Integer;
    function getRefreshRate: Single;
    function hashCode: Integer;
    function toString: JString;
  end;

  [JavaClassSignature('android/view/Display$Mode')]
  TJDisplay_Mode = class(TJObject, JDisplay_Mode)
  private
    { methods }
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function getModeId: Integer;
    function getPhysicalHeight: Integer;
    function getPhysicalWidth: Integer;
    function getRefreshRate: Single;
    function hashCode: Integer;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDisplay_Mode; overload;
    class function Wrap(const AObject: IJNIObject): JDisplay_Mode; overload;
  end;

{ android.view.DragAndDropPermissions }

  [JavaClassSignature('android/view/DragAndDropPermissions')]
  JDragAndDropPermissions = interface(JObject)
    ['{5C529D6C-CCB9-411F-86EF-8903C0BF82FD}']
    function describeContents: Integer;
    procedure release;
  end;

  [JavaClassSignature('android/view/DragAndDropPermissions')]
  TJDragAndDropPermissions = class(TJObject, JDragAndDropPermissions)
  private
    { methods }
    function describeContents: Integer;
    procedure release;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDragAndDropPermissions; overload;
    class function Wrap(const AObject: IJNIObject): JDragAndDropPermissions; overload;
  end;

{ android.view.DragEvent }

  [JavaClassSignature('android/view/DragEvent')]
  JDragEvent = interface(JObject)
    ['{565AE36F-8B97-4141-807D-FA77862529FD}']
    function describeContents: Integer;
    function getAction: Integer;
    function getClipData: JClipData;
    function getClipDescription: JClipDescription;
    function getLocalState: JObject;
    function getResult: Boolean;
    function getX: Single;
    function getY: Single;
    function toString: JString;
  end;

  [JavaClassSignature('android/view/DragEvent')]
  TJDragEvent = class(TJObject, JDragEvent)
  private
    { methods }
    function describeContents: Integer;
    function getAction: Integer;
    function getClipData: JClipData;
    function getClipDescription: JClipDescription;
    function getLocalState: JObject;
    function getResult: Boolean;
    function getX: Single;
    function getY: Single;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDragEvent; overload;
    class function Wrap(const AObject: IJNIObject): JDragEvent; overload;
    { constants }
    class function ACTION_DRAG_ENDED: Integer;
    class function ACTION_DRAG_ENTERED: Integer;
    class function ACTION_DRAG_EXITED: Integer;
    class function ACTION_DRAG_LOCATION: Integer;
    class function ACTION_DRAG_STARTED: Integer;
    class function ACTION_DROP: Integer;
  end;

{ android.view.GestureDetector }

  [JavaClassSignature('android/view/GestureDetector')]
  JGestureDetector = interface(JObject)
    ['{CA358930-7DAE-4674-85DF-421FEC806358}']
    function isLongpressEnabled: Boolean;
    function onGenericMotionEvent(const AArg0: JMotionEvent): Boolean; // Introduced in 23';
    function onTouchEvent(const AArg0: JMotionEvent): Boolean;
    procedure setContextClickListener(const AArg0: JGestureDetector_OnContextClickListener); // Introduced in 23';
    procedure setIsLongpressEnabled(const AArg0: Boolean);
    procedure setOnDoubleTapListener(const AArg0: JGestureDetector_OnDoubleTapListener);
  end;

  [JavaClassSignature('android/view/GestureDetector')]
  TJGestureDetector = class(TJObject, JGestureDetector)
  private
    { methods }
    function isLongpressEnabled: Boolean;
    function onGenericMotionEvent(const AArg0: JMotionEvent): Boolean; // Introduced in 23';
    function onTouchEvent(const AArg0: JMotionEvent): Boolean;
    procedure setContextClickListener(const AArg0: JGestureDetector_OnContextClickListener); // Introduced in 23';
    procedure setIsLongpressEnabled(const AArg0: Boolean);
    procedure setOnDoubleTapListener(const AArg0: JGestureDetector_OnDoubleTapListener);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JGestureDetector; overload;
    class function Wrap(const AObject: IJNIObject): JGestureDetector; overload;
    { constructors }
    class function Create(const AArg0: JGestureDetector_OnGestureListener; const AArg1: JHandler): JGestureDetector; overload;
    class function Create(const AArg0: JGestureDetector_OnGestureListener): JGestureDetector; overload;
    class function Create(const AArg0: JContext; const AArg1: JGestureDetector_OnGestureListener): JGestureDetector; overload;
    class function Create(const AArg0: JContext; const AArg1: JGestureDetector_OnGestureListener; const AArg2: JHandler): JGestureDetector; overload;
    class function Create(const AArg0: JContext; const AArg1: JGestureDetector_OnGestureListener; const AArg2: JHandler; const AArg3: Boolean): JGestureDetector; overload;
  end;

{ android.view.GestureDetector_OnContextClickListener - interface }

  [JavaClassSignature('android/view/GestureDetector$OnContextClickListener')]
  JGestureDetector_OnContextClickListener = interface(IJavaObject)
    ['{00E5064B-1D6B-41FF-8593-F8AF6E90B19D}']
    function onContextClick(const AArg0: JMotionEvent): Boolean;
  end;

  [JavaClassSignature('android/view/GestureDetector$OnContextClickListener')]
  TJGestureDetector_OnContextClickListener = class(TJObject, JGestureDetector_OnContextClickListener)
  private
    { methods }
    function onContextClick(const AArg0: JMotionEvent): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JGestureDetector_OnContextClickListener; overload;
    class function Wrap(const AObject: IJNIObject): JGestureDetector_OnContextClickListener; overload;
  end;

{ android.view.GestureDetector_OnDoubleTapListener - interface }

  [JavaClassSignature('android/view/GestureDetector$OnDoubleTapListener')]
  JGestureDetector_OnDoubleTapListener = interface(IJavaObject)
    ['{76DF43C7-3674-4080-B454-1429C48F2A4E}']
    function onDoubleTap(const AArg0: JMotionEvent): Boolean;
    function onDoubleTapEvent(const AArg0: JMotionEvent): Boolean;
    function onSingleTapConfirmed(const AArg0: JMotionEvent): Boolean;
  end;

  [JavaClassSignature('android/view/GestureDetector$OnDoubleTapListener')]
  TJGestureDetector_OnDoubleTapListener = class(TJObject, JGestureDetector_OnDoubleTapListener)
  private
    { methods }
    function onDoubleTap(const AArg0: JMotionEvent): Boolean;
    function onDoubleTapEvent(const AArg0: JMotionEvent): Boolean;
    function onSingleTapConfirmed(const AArg0: JMotionEvent): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JGestureDetector_OnDoubleTapListener; overload;
    class function Wrap(const AObject: IJNIObject): JGestureDetector_OnDoubleTapListener; overload;
  end;

{ android.view.GestureDetector_OnGestureListener - interface }

  [JavaClassSignature('android/view/GestureDetector$OnGestureListener')]
  JGestureDetector_OnGestureListener = interface(IJavaObject)
    ['{47EAD34F-0F4E-4417-A163-8401A64BE88A}']
    function onDown(const AArg0: JMotionEvent): Boolean;
    function onFling(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
    procedure onLongPress(const AArg0: JMotionEvent);
    function onScroll(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
    procedure onShowPress(const AArg0: JMotionEvent);
    function onSingleTapUp(const AArg0: JMotionEvent): Boolean;
  end;

  [JavaClassSignature('android/view/GestureDetector$OnGestureListener')]
  TJGestureDetector_OnGestureListener = class(TJObject, JGestureDetector_OnGestureListener)
  private
    { methods }
    function onDown(const AArg0: JMotionEvent): Boolean;
    function onFling(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
    procedure onLongPress(const AArg0: JMotionEvent);
    function onScroll(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
    procedure onShowPress(const AArg0: JMotionEvent);
    function onSingleTapUp(const AArg0: JMotionEvent): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JGestureDetector_OnGestureListener; overload;
    class function Wrap(const AObject: IJNIObject): JGestureDetector_OnGestureListener; overload;
  end;

{ android.view.GestureDetector_SimpleOnGestureListener }

  [JavaClassSignature('android/view/GestureDetector$SimpleOnGestureListener')]
  JGestureDetector_SimpleOnGestureListener = interface(JObject)
    ['{F02E654B-E315-4D14-A585-6467264AA4A5}']
    function onContextClick(const AArg0: JMotionEvent): Boolean;
    function onDoubleTap(const AArg0: JMotionEvent): Boolean;
    function onDoubleTapEvent(const AArg0: JMotionEvent): Boolean;
    function onDown(const AArg0: JMotionEvent): Boolean;
    function onFling(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
    procedure onLongPress(const AArg0: JMotionEvent);
    function onScroll(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
    procedure onShowPress(const AArg0: JMotionEvent);
    function onSingleTapConfirmed(const AArg0: JMotionEvent): Boolean;
    function onSingleTapUp(const AArg0: JMotionEvent): Boolean;
  end;

  [JavaClassSignature('android/view/GestureDetector$SimpleOnGestureListener')]
  TJGestureDetector_SimpleOnGestureListener = class(TJObject, JGestureDetector_SimpleOnGestureListener)
  private
    { methods }
    function onContextClick(const AArg0: JMotionEvent): Boolean;
    function onDoubleTap(const AArg0: JMotionEvent): Boolean;
    function onDoubleTapEvent(const AArg0: JMotionEvent): Boolean;
    function onDown(const AArg0: JMotionEvent): Boolean;
    function onFling(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
    procedure onLongPress(const AArg0: JMotionEvent);
    function onScroll(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
    procedure onShowPress(const AArg0: JMotionEvent);
    function onSingleTapConfirmed(const AArg0: JMotionEvent): Boolean;
    function onSingleTapUp(const AArg0: JMotionEvent): Boolean;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JGestureDetector_SimpleOnGestureListener; overload;
    class function Wrap(const AObject: IJNIObject): JGestureDetector_SimpleOnGestureListener; overload;
    { constructors }
    class function Create: JGestureDetector_SimpleOnGestureListener; overload;
  end;

{ android.view.Gravity }

  [JavaClassSignature('android/view/Gravity')]
  JGravity = interface(JObject)
    ['{B69025A3-93DF-420A-AB04-0CFBFCF34B13}']
  end;

  [JavaClassSignature('android/view/Gravity')]
  TJGravity = class(TJObject, JGravity)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JGravity; overload;
    class function Wrap(const AObject: IJNIObject): JGravity; overload;
    { constructors }
    class function Create: JGravity; overload;
    { constants }
    class function AXIS_CLIP: Integer;
    class function AXIS_PULL_AFTER: Integer;
    class function AXIS_PULL_BEFORE: Integer;
    class function AXIS_SPECIFIED: Integer;
    class function AXIS_X_SHIFT: Integer;
    class function AXIS_Y_SHIFT: Integer;
    class function BOTTOM: Integer;
    class function CENTER: Integer;
    class function CENTER_HORIZONTAL: Integer;
    class function CENTER_VERTICAL: Integer;
    class function CLIP_HORIZONTAL: Integer;
    class function CLIP_VERTICAL: Integer;
    class function DISPLAY_CLIP_HORIZONTAL: Integer;
    class function DISPLAY_CLIP_VERTICAL: Integer;
    class function &END: Integer;
    class function FILL: Integer;
    class function FILL_HORIZONTAL: Integer;
    class function FILL_VERTICAL: Integer;
    class function HORIZONTAL_GRAVITY_MASK: Integer;
    class function LEFT: Integer;
    class function NO_GRAVITY: Integer;
    class function RELATIVE_HORIZONTAL_GRAVITY_MASK: Integer;
    class function RELATIVE_LAYOUT_DIRECTION: Integer;
    class function RIGHT: Integer;
    class function START: Integer;
    class function TOP: Integer;
    class function VERTICAL_GRAVITY_MASK: Integer;
    { methods }
    class procedure apply(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect; const AArg4: Integer; const AArg5: Integer; const AArg6: JRect; const AArg7: Integer); overload;
    class procedure apply(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect; const AArg4: Integer; const AArg5: Integer; const AArg6: JRect); overload;
    class procedure apply(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect; const AArg4: JRect); overload;
    class procedure apply(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect; const AArg4: JRect; const AArg5: Integer); overload;
    class procedure applyDisplay(const AArg0: Integer; const AArg1: JRect; const AArg2: JRect; const AArg3: Integer); overload;
    class procedure applyDisplay(const AArg0: Integer; const AArg1: JRect; const AArg2: JRect); overload;
    class function getAbsoluteGravity(const AArg0: Integer; const AArg1: Integer): Integer;
    class function isHorizontal(const AArg0: Integer): Boolean;
    class function isVertical(const AArg0: Integer): Boolean;
  end;

{ android.view.InputDevice }

  [JavaClassSignature('android/view/InputDevice')]
  JInputDevice = interface(JObject)
    ['{CFBC3524-524F-4694-8387-F1D1D4A8D575}']
    function describeContents: Integer;
    function getControllerNumber: Integer;
    function getDescriptor: JString;
    function getId: Integer;
    function getKeyboardType: Integer;
    function getMotionRanges: JList;
    function getName: JString;
    function getProductId: Integer;
    function getSources: Integer;
    function getVendorId: Integer;
    function hasKeys(const AArg0: IJavaArray<Integer>): IJavaArray<Boolean>;
    function hasMicrophone: Boolean; // Introduced in 23';
    function isEnabled: Boolean; // Introduced in 27';
    function isVirtual: Boolean;
    function supportsSource(const AArg0: Integer): Boolean;
    function toString: JString;
  end;

  [JavaClassSignature('android/view/InputDevice')]
  TJInputDevice = class(TJObject, JInputDevice)
  private
    { methods }
    function describeContents: Integer;
    function getControllerNumber: Integer;
    function getDescriptor: JString;
    function getId: Integer;
    function getKeyboardType: Integer;
    function getMotionRanges: JList;
    function getName: JString;
    function getProductId: Integer;
    function getSources: Integer;
    function getVendorId: Integer;
    function hasKeys(const AArg0: IJavaArray<Integer>): IJavaArray<Boolean>;
    function hasMicrophone: Boolean; // Introduced in 23';
    function isEnabled: Boolean; // Introduced in 27';
    function isVirtual: Boolean;
    function supportsSource(const AArg0: Integer): Boolean;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JInputDevice; overload;
    class function Wrap(const AObject: IJNIObject): JInputDevice; overload;
    { constants }
    class function KEYBOARD_TYPE_ALPHABETIC: Integer;
    class function KEYBOARD_TYPE_NONE: Integer;
    class function KEYBOARD_TYPE_NON_ALPHABETIC: Integer;
    class function MOTION_RANGE_ORIENTATION: Integer;
    class function MOTION_RANGE_PRESSURE: Integer;
    class function MOTION_RANGE_SIZE: Integer;
    class function MOTION_RANGE_TOOL_MAJOR: Integer;
    class function MOTION_RANGE_TOOL_MINOR: Integer;
    class function MOTION_RANGE_TOUCH_MAJOR: Integer;
    class function MOTION_RANGE_TOUCH_MINOR: Integer;
    class function MOTION_RANGE_X: Integer;
    class function MOTION_RANGE_Y: Integer;
    class function SOURCE_ANY: Integer;
    class function SOURCE_BLUETOOTH_STYLUS: Integer;
    class function SOURCE_CLASS_BUTTON: Integer;
    class function SOURCE_CLASS_JOYSTICK: Integer;
    class function SOURCE_CLASS_MASK: Integer;
    class function SOURCE_CLASS_NONE: Integer;
    class function SOURCE_CLASS_POINTER: Integer;
    class function SOURCE_CLASS_POSITION: Integer;
    class function SOURCE_CLASS_TRACKBALL: Integer;
    class function SOURCE_DPAD: Integer;
    class function SOURCE_GAMEPAD: Integer;
    class function SOURCE_HDMI: Integer;
    class function SOURCE_JOYSTICK: Integer;
    class function SOURCE_KEYBOARD: Integer;
    class function SOURCE_MOUSE: Integer;
    class function SOURCE_MOUSE_RELATIVE: Integer;
    class function SOURCE_ROTARY_ENCODER: Integer;
    class function SOURCE_STYLUS: Integer;
    class function SOURCE_TOUCHPAD: Integer;
    class function SOURCE_TOUCHSCREEN: Integer;
    class function SOURCE_TOUCH_NAVIGATION: Integer;
    class function SOURCE_TRACKBALL: Integer;
    class function SOURCE_UNKNOWN: Integer;
    { methods }
    class function getDevice(const AArg0: Integer): JInputDevice;
    class function getDeviceIds: IJavaArray<Integer>;
  end;

{ android.view.InputEvent }

  [JavaClassSignature('android/view/InputEvent')]
  JInputEvent = interface(JObject)
    ['{33C381A9-0DBA-4826-88DC-7D5A27BC8709}']
    function describeContents: Integer;
    function getDevice: JInputDevice;
    function getDeviceId: Integer;
    function getEventTime: Int64;
    function getSource: Integer;
    function isFromSource(const AArg0: Integer): Boolean;
  end;

  [JavaClassSignature('android/view/InputEvent')]
  TJInputEvent = class(TJObject, JInputEvent)
  private
    { methods }
    function describeContents: Integer;
    function getDevice: JInputDevice;
    function getDeviceId: Integer;
    function getEventTime: Int64;
    function getSource: Integer;
    function isFromSource(const AArg0: Integer): Boolean;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JInputEvent; overload;
    class function Wrap(const AObject: IJNIObject): JInputEvent; overload;
  end;

{ android.view.KeyEvent }

  [JavaClassSignature('android/view/KeyEvent')]
  JKeyEvent = interface(JInputEvent)
    ['{24A5BA9D-5A90-43C4-A5EE-315CF96155C3}']
    function getAction: Integer;
    function getCharacters: JString; deprecated 'Deprecated in 29';
    function getDeviceId: Integer;
    function getDisplayLabel: Char;
    function getDownTime: Int64;
    function getEventTime: Int64;
    function getFlags: Integer;
    function getKeyCode: Integer;
    function getMatch(const AArg0: IJavaArray<Char>): Char; overload;
    function getMatch(const AArg0: IJavaArray<Char>; const AArg1: Integer): Char; overload;
    function getMetaState: Integer;
    function getModifiers: Integer;
    function getNumber: Char;
    function getRepeatCount: Integer;
    function getScanCode: Integer;
    function getSource: Integer;
    function getUnicodeChar(const AArg0: Integer): Integer; overload;
    function getUnicodeChar: Integer; overload;
    function hasModifiers(const AArg0: Integer): Boolean;
    function hasNoModifiers: Boolean;
    function isAltPressed: Boolean;
    function isCanceled: Boolean;
    function isCapsLockOn: Boolean;
    function isCtrlPressed: Boolean;
    function isFunctionPressed: Boolean;
    function isLongPress: Boolean;
    function isMetaPressed: Boolean;
    function isNumLockOn: Boolean;
    function isPrintingKey: Boolean;
    function isScrollLockOn: Boolean;
    function isShiftPressed: Boolean;
    function isSymPressed: Boolean;
    function isSystem: Boolean;
    function isTracking: Boolean;
    procedure setSource(const AArg0: Integer);
    procedure startTracking;
    function toString: JString;
  end;

  [JavaClassSignature('android/view/KeyEvent')]
  TJKeyEvent = class(TJInputEvent, JKeyEvent)
  private
    { methods }
    function getAction: Integer;
    function getCharacters: JString; deprecated 'Deprecated in 29';
    function getDeviceId: Integer;
    function getDisplayLabel: Char;
    function getDownTime: Int64;
    function getEventTime: Int64;
    function getFlags: Integer;
    function getKeyCode: Integer;
    function getMatch(const AArg0: IJavaArray<Char>): Char; overload;
    function getMatch(const AArg0: IJavaArray<Char>; const AArg1: Integer): Char; overload;
    function getMetaState: Integer;
    function getModifiers: Integer;
    function getNumber: Char;
    function getRepeatCount: Integer;
    function getScanCode: Integer;
    function getSource: Integer;
    function getUnicodeChar(const AArg0: Integer): Integer; overload;
    function getUnicodeChar: Integer; overload;
    function hasModifiers(const AArg0: Integer): Boolean;
    function hasNoModifiers: Boolean;
    function isAltPressed: Boolean;
    function isCanceled: Boolean;
    function isCapsLockOn: Boolean;
    function isCtrlPressed: Boolean;
    function isFunctionPressed: Boolean;
    function isLongPress: Boolean;
    function isMetaPressed: Boolean;
    function isNumLockOn: Boolean;
    function isPrintingKey: Boolean;
    function isScrollLockOn: Boolean;
    function isShiftPressed: Boolean;
    function isSymPressed: Boolean;
    function isSystem: Boolean;
    function isTracking: Boolean;
    procedure setSource(const AArg0: Integer);
    procedure startTracking;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JKeyEvent; overload;
    class function Wrap(const AObject: IJNIObject): JKeyEvent; overload;
    { constructors }
    class function Create(const AArg0: Integer; const AArg1: Integer): JKeyEvent; overload;
    class function Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer): JKeyEvent; overload;
    class function Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer): JKeyEvent; overload;
    class function Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Integer): JKeyEvent; overload;
    class function Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Integer; const AArg8: Integer): JKeyEvent; overload;
    class function Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Integer; const AArg8: Integer; const AArg9: Integer): JKeyEvent; overload;
    class function Create(const AArg0: Int64; const AArg1: JString; const AArg2: Integer; const AArg3: Integer): JKeyEvent; overload;
    class function Create(const AArg0: JKeyEvent): JKeyEvent; overload;
    class function Create(const AArg0: JKeyEvent; const AArg1: Int64; const AArg2: Integer): JKeyEvent; overload;
    { constants }
    class function ACTION_DOWN: Integer;
    class function ACTION_MULTIPLE: Integer;
    class function ACTION_UP: Integer;
    class function FLAG_CANCELED: Integer;
    class function FLAG_CANCELED_LONG_PRESS: Integer;
    class function FLAG_EDITOR_ACTION: Integer;
    class function FLAG_FALLBACK: Integer;
    class function FLAG_FROM_SYSTEM: Integer;
    class function FLAG_KEEP_TOUCH_MODE: Integer;
    class function FLAG_LONG_PRESS: Integer;
    class function FLAG_SOFT_KEYBOARD: Integer;
    class function FLAG_TRACKING: Integer;
    class function FLAG_VIRTUAL_HARD_KEY: Integer;
    class function FLAG_WOKE_HERE: Integer;
    class function KEYCODE_0: Integer;
    class function KEYCODE_1: Integer;
    class function KEYCODE_11: Integer;
    class function KEYCODE_12: Integer;
    class function KEYCODE_2: Integer;
    class function KEYCODE_3: Integer;
    class function KEYCODE_3D_MODE: Integer;
    class function KEYCODE_4: Integer;
    class function KEYCODE_5: Integer;
    class function KEYCODE_6: Integer;
    class function KEYCODE_7: Integer;
    class function KEYCODE_8: Integer;
    class function KEYCODE_9: Integer;
    class function KEYCODE_A: Integer;
    class function KEYCODE_ALL_APPS: Integer;
    class function KEYCODE_ALT_LEFT: Integer;
    class function KEYCODE_ALT_RIGHT: Integer;
    class function KEYCODE_APOSTROPHE: Integer;
    class function KEYCODE_APP_SWITCH: Integer;
    class function KEYCODE_ASSIST: Integer;
    class function KEYCODE_AT: Integer;
    class function KEYCODE_AVR_INPUT: Integer;
    class function KEYCODE_AVR_POWER: Integer;
    class function KEYCODE_B: Integer;
    class function KEYCODE_BACK: Integer;
    class function KEYCODE_BACKSLASH: Integer;
    class function KEYCODE_BOOKMARK: Integer;
    class function KEYCODE_BREAK: Integer;
    class function KEYCODE_BRIGHTNESS_DOWN: Integer;
    class function KEYCODE_BRIGHTNESS_UP: Integer;
    class function KEYCODE_BUTTON_1: Integer;
    class function KEYCODE_BUTTON_10: Integer;
    class function KEYCODE_BUTTON_11: Integer;
    class function KEYCODE_BUTTON_12: Integer;
    class function KEYCODE_BUTTON_13: Integer;
    class function KEYCODE_BUTTON_14: Integer;
    class function KEYCODE_BUTTON_15: Integer;
    class function KEYCODE_BUTTON_16: Integer;
    class function KEYCODE_BUTTON_2: Integer;
    class function KEYCODE_BUTTON_3: Integer;
    class function KEYCODE_BUTTON_4: Integer;
    class function KEYCODE_BUTTON_5: Integer;
    class function KEYCODE_BUTTON_6: Integer;
    class function KEYCODE_BUTTON_7: Integer;
    class function KEYCODE_BUTTON_8: Integer;
    class function KEYCODE_BUTTON_9: Integer;
    class function KEYCODE_BUTTON_A: Integer;
    class function KEYCODE_BUTTON_B: Integer;
    class function KEYCODE_BUTTON_C: Integer;
    class function KEYCODE_BUTTON_L1: Integer;
    class function KEYCODE_BUTTON_L2: Integer;
    class function KEYCODE_BUTTON_MODE: Integer;
    class function KEYCODE_BUTTON_R1: Integer;
    class function KEYCODE_BUTTON_R2: Integer;
    class function KEYCODE_BUTTON_SELECT: Integer;
    class function KEYCODE_BUTTON_START: Integer;
    class function KEYCODE_BUTTON_THUMBL: Integer;
    class function KEYCODE_BUTTON_THUMBR: Integer;
    class function KEYCODE_BUTTON_X: Integer;
    class function KEYCODE_BUTTON_Y: Integer;
    class function KEYCODE_BUTTON_Z: Integer;
    class function KEYCODE_C: Integer;
    class function KEYCODE_CALCULATOR: Integer;
    class function KEYCODE_CALENDAR: Integer;
    class function KEYCODE_CALL: Integer;
    class function KEYCODE_CAMERA: Integer;
    class function KEYCODE_CAPS_LOCK: Integer;
    class function KEYCODE_CAPTIONS: Integer;
    class function KEYCODE_CHANNEL_DOWN: Integer;
    class function KEYCODE_CHANNEL_UP: Integer;
    class function KEYCODE_CLEAR: Integer;
    class function KEYCODE_COMMA: Integer;
    class function KEYCODE_CONTACTS: Integer;
    class function KEYCODE_COPY: Integer;
    class function KEYCODE_CTRL_LEFT: Integer;
    class function KEYCODE_CTRL_RIGHT: Integer;
    class function KEYCODE_CUT: Integer;
    class function KEYCODE_D: Integer;
    class function KEYCODE_DEL: Integer;
    class function KEYCODE_DPAD_CENTER: Integer;
    class function KEYCODE_DPAD_DOWN: Integer;
    class function KEYCODE_DPAD_DOWN_LEFT: Integer;
    class function KEYCODE_DPAD_DOWN_RIGHT: Integer;
    class function KEYCODE_DPAD_LEFT: Integer;
    class function KEYCODE_DPAD_RIGHT: Integer;
    class function KEYCODE_DPAD_UP: Integer;
    class function KEYCODE_DPAD_UP_LEFT: Integer;
    class function KEYCODE_DPAD_UP_RIGHT: Integer;
    class function KEYCODE_DVR: Integer;
    class function KEYCODE_E: Integer;
    class function KEYCODE_EISU: Integer;
    class function KEYCODE_ENDCALL: Integer;
    class function KEYCODE_ENTER: Integer;
    class function KEYCODE_ENVELOPE: Integer;
    class function KEYCODE_EQUALS: Integer;
    class function KEYCODE_ESCAPE: Integer;
    class function KEYCODE_EXPLORER: Integer;
    class function KEYCODE_F: Integer;
    class function KEYCODE_F1: Integer;
    class function KEYCODE_F10: Integer;
    class function KEYCODE_F11: Integer;
    class function KEYCODE_F12: Integer;
    class function KEYCODE_F2: Integer;
    class function KEYCODE_F3: Integer;
    class function KEYCODE_F4: Integer;
    class function KEYCODE_F5: Integer;
    class function KEYCODE_F6: Integer;
    class function KEYCODE_F7: Integer;
    class function KEYCODE_F8: Integer;
    class function KEYCODE_F9: Integer;
    class function KEYCODE_FOCUS: Integer;
    class function KEYCODE_FORWARD: Integer;
    class function KEYCODE_FORWARD_DEL: Integer;
    class function KEYCODE_FUNCTION: Integer;
    class function KEYCODE_G: Integer;
    class function KEYCODE_GRAVE: Integer;
    class function KEYCODE_GUIDE: Integer;
    class function KEYCODE_H: Integer;
    class function KEYCODE_HEADSETHOOK: Integer;
    class function KEYCODE_HELP: Integer;
    class function KEYCODE_HENKAN: Integer;
    class function KEYCODE_HOME: Integer;
    class function KEYCODE_I: Integer;
    class function KEYCODE_INFO: Integer;
    class function KEYCODE_INSERT: Integer;
    class function KEYCODE_J: Integer;
    class function KEYCODE_K: Integer;
    class function KEYCODE_KANA: Integer;
    class function KEYCODE_KATAKANA_HIRAGANA: Integer;
    class function KEYCODE_L: Integer;
    class function KEYCODE_LANGUAGE_SWITCH: Integer;
    class function KEYCODE_LAST_CHANNEL: Integer;
    class function KEYCODE_LEFT_BRACKET: Integer;
    class function KEYCODE_M: Integer;
    class function KEYCODE_MANNER_MODE: Integer;
    class function KEYCODE_MEDIA_AUDIO_TRACK: Integer;
    class function KEYCODE_MEDIA_CLOSE: Integer;
    class function KEYCODE_MEDIA_EJECT: Integer;
    class function KEYCODE_MEDIA_FAST_FORWARD: Integer;
    class function KEYCODE_MEDIA_NEXT: Integer;
    class function KEYCODE_MEDIA_PAUSE: Integer;
    class function KEYCODE_MEDIA_PLAY: Integer;
    class function KEYCODE_MEDIA_PLAY_PAUSE: Integer;
    class function KEYCODE_MEDIA_PREVIOUS: Integer;
    class function KEYCODE_MEDIA_RECORD: Integer;
    class function KEYCODE_MEDIA_REWIND: Integer;
    class function KEYCODE_MEDIA_SKIP_BACKWARD: Integer;
    class function KEYCODE_MEDIA_SKIP_FORWARD: Integer;
    class function KEYCODE_MEDIA_STEP_BACKWARD: Integer;
    class function KEYCODE_MEDIA_STEP_FORWARD: Integer;
    class function KEYCODE_MEDIA_STOP: Integer;
    class function KEYCODE_MEDIA_TOP_MENU: Integer;
    class function KEYCODE_MENU: Integer;
    class function KEYCODE_META_LEFT: Integer;
    class function KEYCODE_META_RIGHT: Integer;
    class function KEYCODE_MINUS: Integer;
    class function KEYCODE_MOVE_END: Integer;
    class function KEYCODE_MOVE_HOME: Integer;
    class function KEYCODE_MUHENKAN: Integer;
    class function KEYCODE_MUSIC: Integer;
    class function KEYCODE_MUTE: Integer;
    class function KEYCODE_N: Integer;
    class function KEYCODE_NAVIGATE_IN: Integer;
    class function KEYCODE_NAVIGATE_NEXT: Integer;
    class function KEYCODE_NAVIGATE_OUT: Integer;
    class function KEYCODE_NAVIGATE_PREVIOUS: Integer;
    class function KEYCODE_NOTIFICATION: Integer;
    class function KEYCODE_NUM: Integer;
    class function KEYCODE_NUMPAD_0: Integer;
    class function KEYCODE_NUMPAD_1: Integer;
    class function KEYCODE_NUMPAD_2: Integer;
    class function KEYCODE_NUMPAD_3: Integer;
    class function KEYCODE_NUMPAD_4: Integer;
    class function KEYCODE_NUMPAD_5: Integer;
    class function KEYCODE_NUMPAD_6: Integer;
    class function KEYCODE_NUMPAD_7: Integer;
    class function KEYCODE_NUMPAD_8: Integer;
    class function KEYCODE_NUMPAD_9: Integer;
    class function KEYCODE_NUMPAD_ADD: Integer;
    class function KEYCODE_NUMPAD_COMMA: Integer;
    class function KEYCODE_NUMPAD_DIVIDE: Integer;
    class function KEYCODE_NUMPAD_DOT: Integer;
    class function KEYCODE_NUMPAD_ENTER: Integer;
    class function KEYCODE_NUMPAD_EQUALS: Integer;
    class function KEYCODE_NUMPAD_LEFT_PAREN: Integer;
    class function KEYCODE_NUMPAD_MULTIPLY: Integer;
    class function KEYCODE_NUMPAD_RIGHT_PAREN: Integer;
    class function KEYCODE_NUMPAD_SUBTRACT: Integer;
    class function KEYCODE_NUM_LOCK: Integer;
    class function KEYCODE_O: Integer;
    class function KEYCODE_P: Integer;
    class function KEYCODE_PAGE_DOWN: Integer;
    class function KEYCODE_PAGE_UP: Integer;
    class function KEYCODE_PAIRING: Integer;
    class function KEYCODE_PASTE: Integer;
    class function KEYCODE_PERIOD: Integer;
    class function KEYCODE_PICTSYMBOLS: Integer;
    class function KEYCODE_PLUS: Integer;
    class function KEYCODE_POUND: Integer;
    class function KEYCODE_POWER: Integer;
    class function KEYCODE_PROG_BLUE: Integer;
    class function KEYCODE_PROG_GREEN: Integer;
    class function KEYCODE_PROG_RED: Integer;
    class function KEYCODE_PROG_YELLOW: Integer;
    class function KEYCODE_Q: Integer;
    class function KEYCODE_R: Integer;
    class function KEYCODE_REFRESH: Integer;
    class function KEYCODE_RIGHT_BRACKET: Integer;
    class function KEYCODE_RO: Integer;
    class function KEYCODE_S: Integer;
    class function KEYCODE_SCROLL_LOCK: Integer;
    class function KEYCODE_SEARCH: Integer;
    class function KEYCODE_SEMICOLON: Integer;
    class function KEYCODE_SETTINGS: Integer;
    class function KEYCODE_SHIFT_LEFT: Integer;
    class function KEYCODE_SHIFT_RIGHT: Integer;
    class function KEYCODE_SLASH: Integer;
    class function KEYCODE_SLEEP: Integer;
    class function KEYCODE_SOFT_LEFT: Integer;
    class function KEYCODE_SOFT_RIGHT: Integer;
    class function KEYCODE_SOFT_SLEEP: Integer;
    class function KEYCODE_SPACE: Integer;
    class function KEYCODE_STAR: Integer;
    class function KEYCODE_STB_INPUT: Integer;
    class function KEYCODE_STB_POWER: Integer;
    class function KEYCODE_STEM_1: Integer;
    class function KEYCODE_STEM_2: Integer;
    class function KEYCODE_STEM_3: Integer;
    class function KEYCODE_STEM_PRIMARY: Integer;
    class function KEYCODE_SWITCH_CHARSET: Integer;
    class function KEYCODE_SYM: Integer;
    class function KEYCODE_SYSRQ: Integer;
    class function KEYCODE_SYSTEM_NAVIGATION_DOWN: Integer;
    class function KEYCODE_SYSTEM_NAVIGATION_LEFT: Integer;
    class function KEYCODE_SYSTEM_NAVIGATION_RIGHT: Integer;
    class function KEYCODE_SYSTEM_NAVIGATION_UP: Integer;
    class function KEYCODE_T: Integer;
    class function KEYCODE_TAB: Integer;
    class function KEYCODE_TV: Integer;
    class function KEYCODE_TV_ANTENNA_CABLE: Integer;
    class function KEYCODE_TV_AUDIO_DESCRIPTION: Integer;
    class function KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN: Integer;
    class function KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP: Integer;
    class function KEYCODE_TV_CONTENTS_MENU: Integer;
    class function KEYCODE_TV_DATA_SERVICE: Integer;
    class function KEYCODE_TV_INPUT: Integer;
    class function KEYCODE_TV_INPUT_COMPONENT_1: Integer;
    class function KEYCODE_TV_INPUT_COMPONENT_2: Integer;
    class function KEYCODE_TV_INPUT_COMPOSITE_1: Integer;
    class function KEYCODE_TV_INPUT_COMPOSITE_2: Integer;
    class function KEYCODE_TV_INPUT_HDMI_1: Integer;
    class function KEYCODE_TV_INPUT_HDMI_2: Integer;
    class function KEYCODE_TV_INPUT_HDMI_3: Integer;
    class function KEYCODE_TV_INPUT_HDMI_4: Integer;
    class function KEYCODE_TV_INPUT_VGA_1: Integer;
    class function KEYCODE_TV_MEDIA_CONTEXT_MENU: Integer;
    class function KEYCODE_TV_NETWORK: Integer;
    class function KEYCODE_TV_NUMBER_ENTRY: Integer;
    class function KEYCODE_TV_POWER: Integer;
    class function KEYCODE_TV_RADIO_SERVICE: Integer;
    class function KEYCODE_TV_SATELLITE: Integer;
    class function KEYCODE_TV_SATELLITE_BS: Integer;
    class function KEYCODE_TV_SATELLITE_CS: Integer;
    class function KEYCODE_TV_SATELLITE_SERVICE: Integer;
    class function KEYCODE_TV_TELETEXT: Integer;
    class function KEYCODE_TV_TERRESTRIAL_ANALOG: Integer;
    class function KEYCODE_TV_TERRESTRIAL_DIGITAL: Integer;
    class function KEYCODE_TV_TIMER_PROGRAMMING: Integer;
    class function KEYCODE_TV_ZOOM_MODE: Integer;
    class function KEYCODE_U: Integer;
    class function KEYCODE_UNKNOWN: Integer;
    class function KEYCODE_V: Integer;
    class function KEYCODE_VOICE_ASSIST: Integer;
    class function KEYCODE_VOLUME_DOWN: Integer;
    class function KEYCODE_VOLUME_MUTE: Integer;
    class function KEYCODE_VOLUME_UP: Integer;
    class function KEYCODE_W: Integer;
    class function KEYCODE_WAKEUP: Integer;
    class function KEYCODE_WINDOW: Integer;
    class function KEYCODE_X: Integer;
    class function KEYCODE_Y: Integer;
    class function KEYCODE_YEN: Integer;
    class function KEYCODE_Z: Integer;
    class function KEYCODE_ZENKAKU_HANKAKU: Integer;
    class function KEYCODE_ZOOM_IN: Integer;
    class function KEYCODE_ZOOM_OUT: Integer;
    class function MAX_KEYCODE: Integer;
    class function META_ALT_LEFT_ON: Integer;
    class function META_ALT_MASK: Integer;
    class function META_ALT_ON: Integer;
    class function META_ALT_RIGHT_ON: Integer;
    class function META_CAPS_LOCK_ON: Integer;
    class function META_CTRL_LEFT_ON: Integer;
    class function META_CTRL_MASK: Integer;
    class function META_CTRL_ON: Integer;
    class function META_CTRL_RIGHT_ON: Integer;
    class function META_FUNCTION_ON: Integer;
    class function META_META_LEFT_ON: Integer;
    class function META_META_MASK: Integer;
    class function META_META_ON: Integer;
    class function META_META_RIGHT_ON: Integer;
    class function META_NUM_LOCK_ON: Integer;
    class function META_SCROLL_LOCK_ON: Integer;
    class function META_SHIFT_LEFT_ON: Integer;
    class function META_SHIFT_MASK: Integer;
    class function META_SHIFT_ON: Integer;
    class function META_SHIFT_RIGHT_ON: Integer;
    class function META_SYM_ON: Integer;
    { methods }
    class function changeAction(const AArg0: JKeyEvent; const AArg1: Integer): JKeyEvent;
    class function changeFlags(const AArg0: JKeyEvent; const AArg1: Integer): JKeyEvent;
    class function changeTimeRepeat(const AArg0: JKeyEvent; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer): JKeyEvent; overload;
    class function changeTimeRepeat(const AArg0: JKeyEvent; const AArg1: Int64; const AArg2: Integer): JKeyEvent; overload;
    class function getDeadChar(const AArg0: Integer; const AArg1: Integer): Integer;
    class function getMaxKeyCode: Integer;
    class function getModifierMetaStateMask: Integer;
    class function isGamepadButton(const AArg0: Integer): Boolean;
    class function isModifierKey(const AArg0: Integer): Boolean;
    class function keyCodeFromString(const AArg0: JString): Integer;
    class function keyCodeToString(const AArg0: Integer): JString;
    class function metaStateHasModifiers(const AArg0: Integer; const AArg1: Integer): Boolean;
    class function metaStateHasNoModifiers(const AArg0: Integer): Boolean;
    class function normalizeMetaState(const AArg0: Integer): Integer;
  end;

{ android.view.MotionEvent }

  [JavaClassSignature('android/view/MotionEvent')]
  JMotionEvent = interface(JInputEvent)
    ['{5C2B1A1D-D9DE-4C03-9CB5-CC0FC2FCDE11}']
    procedure addBatch(const AArg0: Int64; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Integer);
    function findPointerIndex(const AArg0: Integer): Integer;
    function getAction: Integer;
    function getActionButton: Integer; // Introduced in 23';
    function getActionIndex: Integer;
    function getActionMasked: Integer;
    function getAxisValue(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getAxisValue(const AArg0: Integer): Single; overload;
    function getButtonState: Integer;
    function getDeviceId: Integer;
    function getDownTime: Int64;
    function getEdgeFlags: Integer;
    function getEventTime: Int64;
    function getFlags: Integer;
    function getHistoricalAxisValue(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Single; overload;
    function getHistoricalAxisValue(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalEventTime(const AArg0: Integer): Int64;
    function getHistoricalOrientation(const AArg0: Integer): Single; overload;
    function getHistoricalOrientation(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalPressure(const AArg0: Integer): Single; overload;
    function getHistoricalPressure(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalSize(const AArg0: Integer): Single; overload;
    function getHistoricalSize(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalToolMajor(const AArg0: Integer): Single; overload;
    function getHistoricalToolMajor(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalToolMinor(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalToolMinor(const AArg0: Integer): Single; overload;
    function getHistoricalTouchMajor(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalTouchMajor(const AArg0: Integer): Single; overload;
    function getHistoricalTouchMinor(const AArg0: Integer): Single; overload;
    function getHistoricalTouchMinor(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalX(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalX(const AArg0: Integer): Single; overload;
    function getHistoricalY(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalY(const AArg0: Integer): Single; overload;
    function getHistorySize: Integer;
    function getMetaState: Integer;
    function getOrientation: Single; overload;
    function getOrientation(const AArg0: Integer): Single; overload;
    function getPointerCount: Integer;
    function getPointerId(const AArg0: Integer): Integer;
    function getPressure(const AArg0: Integer): Single; overload;
    function getPressure: Single; overload;
    function getRawX: Single;
    function getRawY: Single;
    function getSize(const AArg0: Integer): Single; overload;
    function getSize: Single; overload;
    function getSource: Integer;
    function getToolMajor(const AArg0: Integer): Single; overload;
    function getToolMajor: Single; overload;
    function getToolMinor(const AArg0: Integer): Single; overload;
    function getToolMinor: Single; overload;
    function getToolType(const AArg0: Integer): Integer;
    function getTouchMajor: Single; overload;
    function getTouchMajor(const AArg0: Integer): Single; overload;
    function getTouchMinor: Single; overload;
    function getTouchMinor(const AArg0: Integer): Single; overload;
    function getX: Single; overload;
    function getX(const AArg0: Integer): Single; overload;
    function getXPrecision: Single;
    function getY: Single; overload;
    function getY(const AArg0: Integer): Single; overload;
    function getYPrecision: Single;
    function isButtonPressed(const AArg0: Integer): Boolean;
    procedure offsetLocation(const AArg0: Single; const AArg1: Single);
    procedure recycle;
    procedure setAction(const AArg0: Integer);
    procedure setEdgeFlags(const AArg0: Integer);
    procedure setLocation(const AArg0: Single; const AArg1: Single);
    procedure setSource(const AArg0: Integer);
    function toString: JString;
    procedure transform(const AArg0: JMatrix);
  end;

  [JavaClassSignature('android/view/MotionEvent')]
  TJMotionEvent = class(TJInputEvent, JMotionEvent)
  private
    { methods }
    procedure addBatch(const AArg0: Int64; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Integer);
    function findPointerIndex(const AArg0: Integer): Integer;
    function getAction: Integer;
    function getActionButton: Integer; // Introduced in 23';
    function getActionIndex: Integer;
    function getActionMasked: Integer;
    function getAxisValue(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getAxisValue(const AArg0: Integer): Single; overload;
    function getButtonState: Integer;
    function getDeviceId: Integer;
    function getDownTime: Int64;
    function getEdgeFlags: Integer;
    function getEventTime: Int64;
    function getFlags: Integer;
    function getHistoricalAxisValue(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Single; overload;
    function getHistoricalAxisValue(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalEventTime(const AArg0: Integer): Int64;
    function getHistoricalOrientation(const AArg0: Integer): Single; overload;
    function getHistoricalOrientation(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalPressure(const AArg0: Integer): Single; overload;
    function getHistoricalPressure(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalSize(const AArg0: Integer): Single; overload;
    function getHistoricalSize(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalToolMajor(const AArg0: Integer): Single; overload;
    function getHistoricalToolMajor(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalToolMinor(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalToolMinor(const AArg0: Integer): Single; overload;
    function getHistoricalTouchMajor(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalTouchMajor(const AArg0: Integer): Single; overload;
    function getHistoricalTouchMinor(const AArg0: Integer): Single; overload;
    function getHistoricalTouchMinor(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalX(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalX(const AArg0: Integer): Single; overload;
    function getHistoricalY(const AArg0: Integer; const AArg1: Integer): Single; overload;
    function getHistoricalY(const AArg0: Integer): Single; overload;
    function getHistorySize: Integer;
    function getMetaState: Integer;
    function getOrientation: Single; overload;
    function getOrientation(const AArg0: Integer): Single; overload;
    function getPointerCount: Integer;
    function getPointerId(const AArg0: Integer): Integer;
    function getPressure(const AArg0: Integer): Single; overload;
    function getPressure: Single; overload;
    function getRawX: Single;
    function getRawY: Single;
    function getSize(const AArg0: Integer): Single; overload;
    function getSize: Single; overload;
    function getSource: Integer;
    function getToolMajor(const AArg0: Integer): Single; overload;
    function getToolMajor: Single; overload;
    function getToolMinor(const AArg0: Integer): Single; overload;
    function getToolMinor: Single; overload;
    function getToolType(const AArg0: Integer): Integer;
    function getTouchMajor: Single; overload;
    function getTouchMajor(const AArg0: Integer): Single; overload;
    function getTouchMinor: Single; overload;
    function getTouchMinor(const AArg0: Integer): Single; overload;
    function getX: Single; overload;
    function getX(const AArg0: Integer): Single; overload;
    function getXPrecision: Single;
    function getY: Single; overload;
    function getY(const AArg0: Integer): Single; overload;
    function getYPrecision: Single;
    function isButtonPressed(const AArg0: Integer): Boolean;
    procedure offsetLocation(const AArg0: Single; const AArg1: Single);
    procedure recycle;
    procedure setAction(const AArg0: Integer);
    procedure setEdgeFlags(const AArg0: Integer);
    procedure setLocation(const AArg0: Single; const AArg1: Single);
    procedure setSource(const AArg0: Integer);
    function toString: JString; reintroduce;
    procedure transform(const AArg0: JMatrix);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMotionEvent; overload;
    class function Wrap(const AObject: IJNIObject): JMotionEvent; overload;
    { constants }
    class function ACTION_BUTTON_PRESS: Integer;
    class function ACTION_BUTTON_RELEASE: Integer;
    class function ACTION_CANCEL: Integer;
    class function ACTION_DOWN: Integer;
    class function ACTION_HOVER_ENTER: Integer;
    class function ACTION_HOVER_EXIT: Integer;
    class function ACTION_HOVER_MOVE: Integer;
    class function ACTION_MASK: Integer;
    class function ACTION_MOVE: Integer;
    class function ACTION_OUTSIDE: Integer;
    class function ACTION_POINTER_1_DOWN: Integer;
    class function ACTION_POINTER_1_UP: Integer;
    class function ACTION_POINTER_2_DOWN: Integer;
    class function ACTION_POINTER_2_UP: Integer;
    class function ACTION_POINTER_3_DOWN: Integer;
    class function ACTION_POINTER_3_UP: Integer;
    class function ACTION_POINTER_DOWN: Integer;
    class function ACTION_POINTER_ID_MASK: Integer;
    class function ACTION_POINTER_ID_SHIFT: Integer;
    class function ACTION_POINTER_INDEX_MASK: Integer;
    class function ACTION_POINTER_INDEX_SHIFT: Integer;
    class function ACTION_POINTER_UP: Integer;
    class function ACTION_SCROLL: Integer;
    class function ACTION_UP: Integer;
    class function AXIS_BRAKE: Integer;
    class function AXIS_DISTANCE: Integer;
    class function AXIS_GAS: Integer;
    class function AXIS_GENERIC_1: Integer;
    class function AXIS_GENERIC_10: Integer;
    class function AXIS_GENERIC_11: Integer;
    class function AXIS_GENERIC_12: Integer;
    class function AXIS_GENERIC_13: Integer;
    class function AXIS_GENERIC_14: Integer;
    class function AXIS_GENERIC_15: Integer;
    class function AXIS_GENERIC_16: Integer;
    class function AXIS_GENERIC_2: Integer;
    class function AXIS_GENERIC_3: Integer;
    class function AXIS_GENERIC_4: Integer;
    class function AXIS_GENERIC_5: Integer;
    class function AXIS_GENERIC_6: Integer;
    class function AXIS_GENERIC_7: Integer;
    class function AXIS_GENERIC_8: Integer;
    class function AXIS_GENERIC_9: Integer;
    class function AXIS_HAT_X: Integer;
    class function AXIS_HAT_Y: Integer;
    class function AXIS_HSCROLL: Integer;
    class function AXIS_LTRIGGER: Integer;
    class function AXIS_ORIENTATION: Integer;
    class function AXIS_PRESSURE: Integer;
    class function AXIS_RELATIVE_X: Integer;
    class function AXIS_RELATIVE_Y: Integer;
    class function AXIS_RTRIGGER: Integer;
    class function AXIS_RUDDER: Integer;
    class function AXIS_RX: Integer;
    class function AXIS_RY: Integer;
    class function AXIS_RZ: Integer;
    class function AXIS_SCROLL: Integer;
    class function AXIS_SIZE: Integer;
    class function AXIS_THROTTLE: Integer;
    class function AXIS_TILT: Integer;
    class function AXIS_TOOL_MAJOR: Integer;
    class function AXIS_TOOL_MINOR: Integer;
    class function AXIS_TOUCH_MAJOR: Integer;
    class function AXIS_TOUCH_MINOR: Integer;
    class function AXIS_VSCROLL: Integer;
    class function AXIS_WHEEL: Integer;
    class function AXIS_X: Integer;
    class function AXIS_Y: Integer;
    class function AXIS_Z: Integer;
    class function BUTTON_BACK: Integer;
    class function BUTTON_FORWARD: Integer;
    class function BUTTON_PRIMARY: Integer;
    class function BUTTON_SECONDARY: Integer;
    class function BUTTON_STYLUS_PRIMARY: Integer;
    class function BUTTON_STYLUS_SECONDARY: Integer;
    class function BUTTON_TERTIARY: Integer;
    class function EDGE_BOTTOM: Integer;
    class function EDGE_LEFT: Integer;
    class function EDGE_RIGHT: Integer;
    class function EDGE_TOP: Integer;
    class function FLAG_WINDOW_IS_OBSCURED: Integer;
    class function INVALID_POINTER_ID: Integer;
    class function TOOL_TYPE_ERASER: Integer;
    class function TOOL_TYPE_FINGER: Integer;
    class function TOOL_TYPE_MOUSE: Integer;
    class function TOOL_TYPE_STYLUS: Integer;
    class function TOOL_TYPE_UNKNOWN: Integer;
    { methods }
    class function actionToString(const AArg0: Integer): JString;
    class function axisFromString(const AArg0: JString): Integer;
    class function axisToString(const AArg0: Integer): JString;
    class function obtain(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Single; const AArg5: Single; const AArg6: Single; const AArg7: Single; const AArg8: Integer; const AArg9: Single; const AArg10: Single; const AArg11: Integer; const AArg12: Integer): JMotionEvent; overload; deprecated 'Deprecated in 15';
    class function obtain(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: Integer): JMotionEvent; overload;
    class function obtain(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: Single; const AArg7: Integer; const AArg8: Single; const AArg9: Single; const AArg10: Integer; const AArg11: Integer): JMotionEvent; overload;
    class function obtain(const AArg0: JMotionEvent): JMotionEvent; overload;
    class function obtainNoHistory(const AArg0: JMotionEvent): JMotionEvent;
  end;

{ android.view.LayoutInflater }

  [JavaClassSignature('android/view/LayoutInflater')]
  JLayoutInflater = interface(JObject)
    ['{FC31C5F4-980E-4F5E-9072-6148ED98CC16}']
    function cloneInContext(const AArg0: JContext): JLayoutInflater;
    function createView(const AArg0: JString; const AArg1: JString; const AArg2: JAttributeSet): JView;
    function getContext: JContext;
    function inflate(const AArg0: Integer; const AArg1: JViewGroup): JView; overload;
    function inflate(const AArg0: Integer; const AArg1: JViewGroup; const AArg2: Boolean): JView; overload;
  end;

  [JavaClassSignature('android/view/LayoutInflater')]
  TJLayoutInflater = class(TJObject, JLayoutInflater)
  private
    { methods }
    function cloneInContext(const AArg0: JContext): JLayoutInflater;
    function createView(const AArg0: JString; const AArg1: JString; const AArg2: JAttributeSet): JView;
    function getContext: JContext;
    function inflate(const AArg0: Integer; const AArg1: JViewGroup): JView; overload;
    function inflate(const AArg0: Integer; const AArg1: JViewGroup; const AArg2: Boolean): JView; overload;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JLayoutInflater; overload;
    class function Wrap(const AObject: IJNIObject): JLayoutInflater; overload;
    { methods }
    class function from(const AArg0: JContext): JLayoutInflater;
  end;

{ android.view.Menu - interface }

  [JavaClassSignature('android/view/Menu')]
  JMenu = interface(IJavaObject)
    ['{3772E7EF-1564-4E7B-AB11-BD8C559051A2}']
    function add(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JMenuItem; overload;
    function add(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JCharSequence): JMenuItem; overload;
    function add(const AArg0: JCharSequence): JMenuItem; overload;
    function add(const AArg0: Integer): JMenuItem; overload;
    function addIntentOptions(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JComponentName; const AArg4: IJavaArray<JIntent>; const AArg5: JIntent; const AArg6: Integer; const AArg7: IJavaArray<JMenuItem>): Integer;
    function addSubMenu(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JSubMenu; overload;
    function addSubMenu(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JCharSequence): JSubMenu; overload;
    function addSubMenu(const AArg0: JCharSequence): JSubMenu; overload;
    function addSubMenu(const AArg0: Integer): JSubMenu; overload;
    procedure clear;
    procedure close;
    function findItem(const AArg0: Integer): JMenuItem;
    function getItem(const AArg0: Integer): JMenuItem;
    function hasVisibleItems: Boolean;
    function isShortcutKey(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function performIdentifierAction(const AArg0: Integer; const AArg1: Integer): Boolean;
    function performShortcut(const AArg0: Integer; const AArg1: JKeyEvent; const AArg2: Integer): Boolean;
    procedure removeGroup(const AArg0: Integer);
    procedure removeItem(const AArg0: Integer);
    procedure setGroupCheckable(const AArg0: Integer; const AArg1: Boolean; const AArg2: Boolean);
    procedure setGroupEnabled(const AArg0: Integer; const AArg1: Boolean);
    procedure setGroupVisible(const AArg0: Integer; const AArg1: Boolean);
    procedure setQwertyMode(const AArg0: Boolean);
    function size: Integer;
  end;

  [JavaClassSignature('android/view/Menu')]
  TJMenu = class(TJObject, JMenu)
  private
    { methods }
    function add(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JMenuItem; overload;
    function add(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JCharSequence): JMenuItem; overload;
    function add(const AArg0: JCharSequence): JMenuItem; overload;
    function add(const AArg0: Integer): JMenuItem; overload;
    function addIntentOptions(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JComponentName; const AArg4: IJavaArray<JIntent>; const AArg5: JIntent; const AArg6: Integer; const AArg7: IJavaArray<JMenuItem>): Integer;
    function addSubMenu(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JSubMenu; overload;
    function addSubMenu(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JCharSequence): JSubMenu; overload;
    function addSubMenu(const AArg0: JCharSequence): JSubMenu; overload;
    function addSubMenu(const AArg0: Integer): JSubMenu; overload;
    procedure clear;
    procedure close;
    function findItem(const AArg0: Integer): JMenuItem;
    function getItem(const AArg0: Integer): JMenuItem;
    function hasVisibleItems: Boolean;
    function isShortcutKey(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function performIdentifierAction(const AArg0: Integer; const AArg1: Integer): Boolean;
    function performShortcut(const AArg0: Integer; const AArg1: JKeyEvent; const AArg2: Integer): Boolean;
    procedure removeGroup(const AArg0: Integer);
    procedure removeItem(const AArg0: Integer);
    procedure setGroupCheckable(const AArg0: Integer; const AArg1: Boolean; const AArg2: Boolean);
    procedure setGroupEnabled(const AArg0: Integer; const AArg1: Boolean);
    procedure setGroupVisible(const AArg0: Integer; const AArg1: Boolean);
    procedure setQwertyMode(const AArg0: Boolean);
    function size: Integer;
  protected
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMenu; overload;
    class function Wrap(const AObject: IJNIObject): JMenu; overload;
    { constants }
    class function CATEGORY_ALTERNATIVE: Integer;
    class function CATEGORY_CONTAINER: Integer;
    class function CATEGORY_SECONDARY: Integer;
    class function CATEGORY_SYSTEM: Integer;
    class function FIRST: Integer;
    class function FLAG_ALWAYS_PERFORM_CLOSE: Integer;
    class function FLAG_APPEND_TO_GROUP: Integer;
    class function FLAG_PERFORM_NO_CLOSE: Integer;
    class function NONE: Integer;
    class function SUPPORTED_MODIFIERS_MASK: Integer;
  end;

{ android.view.SubMenu - interface }

  [JavaClassSignature('android/view/SubMenu')]
  JSubMenu = interface(JMenu)
    ['{A23F6117-6713-4EA8-9461-6A730E56BF05}']
    procedure clearHeader;
    function getItem: JMenuItem; overload;
    function setHeaderIcon(const AArg0: JDrawable): JSubMenu; overload;
    function setHeaderIcon(const AArg0: Integer): JSubMenu; overload;
    function setHeaderTitle(const AArg0: Integer): JSubMenu; overload;
    function setHeaderTitle(const AArg0: JCharSequence): JSubMenu; overload;
    function setHeaderView(const AArg0: JView): JSubMenu;
    function setIcon(const AArg0: JDrawable): JSubMenu; overload;
    function setIcon(const AArg0: Integer): JSubMenu; overload;
  end;

  [JavaClassSignature('android/view/SubMenu')]
  TJSubMenu = class(TJMenu, JSubMenu)
  private
    { methods }
    procedure clearHeader;
    function getItem: JMenuItem; overload;
    function setHeaderIcon(const AArg0: JDrawable): JSubMenu; overload;
    function setHeaderIcon(const AArg0: Integer): JSubMenu; overload;
    function setHeaderTitle(const AArg0: Integer): JSubMenu; overload;
    function setHeaderTitle(const AArg0: JCharSequence): JSubMenu; overload;
    function setHeaderView(const AArg0: JView): JSubMenu;
    function setIcon(const AArg0: JDrawable): JSubMenu; overload;
    function setIcon(const AArg0: Integer): JSubMenu; overload;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSubMenu; overload;
    class function Wrap(const AObject: IJNIObject): JSubMenu; overload;
  end;

{ android.view.MenuItem - interface }

  [JavaClassSignature('android/view/MenuItem')]
  JMenuItem = interface(IJavaObject)
    ['{8A23C8A3-98E7-42EC-AC06-CA4C16F88AC6}']
    function collapseActionView: Boolean;
    function expandActionView: Boolean;
    function getActionView: JView;
    function getAlphabeticShortcut: Char;
    function getGroupId: Integer;
    function getIcon: JDrawable;
    function getIntent: JIntent;
    function getItemId: Integer;
    function getNumericShortcut: Char;
    function getOrder: Integer;
    function getSubMenu: JSubMenu;
    function getTitle: JCharSequence;
    function getTitleCondensed: JCharSequence;
    function hasSubMenu: Boolean;
    function isActionViewExpanded: Boolean;
    function isCheckable: Boolean;
    function isChecked: Boolean;
    function isEnabled: Boolean;
    function isVisible: Boolean;
    function setActionView(const AArg0: Integer): JMenuItem; overload;
    function setActionView(const AArg0: JView): JMenuItem; overload;
    function setAlphabeticShortcut(const AArg0: Char): JMenuItem;
    function setCheckable(const AArg0: Boolean): JMenuItem;
    function setChecked(const AArg0: Boolean): JMenuItem;
    function setEnabled(const AArg0: Boolean): JMenuItem;
    function setIcon(const AArg0: JDrawable): JMenuItem; overload;
    function setIcon(const AArg0: Integer): JMenuItem; overload;
    function setIntent(const AArg0: JIntent): JMenuItem;
    function setNumericShortcut(const AArg0: Char): JMenuItem;
    function setOnActionExpandListener(const AArg0: JMenuItem_OnActionExpandListener): JMenuItem;
    function setOnMenuItemClickListener(const AArg0: JMenuItem_OnMenuItemClickListener): JMenuItem;
    function setShortcut(const AArg0: Char; const AArg1: Char): JMenuItem;
    procedure setShowAsAction(const AArg0: Integer);
    function setShowAsActionFlags(const AArg0: Integer): JMenuItem;
    function setTitle(const AArg0: Integer): JMenuItem; overload;
    function setTitle(const AArg0: JCharSequence): JMenuItem; overload;
    function setTitleCondensed(const AArg0: JCharSequence): JMenuItem;
    function setVisible(const AArg0: Boolean): JMenuItem;
  end;

  [JavaClassSignature('android/view/MenuItem')]
  TJMenuItem = class(TJObject, JMenuItem)
  private
    { methods }
    function collapseActionView: Boolean;
    function expandActionView: Boolean;
    function getActionView: JView;
    function getAlphabeticShortcut: Char;
    function getGroupId: Integer;
    function getIcon: JDrawable;
    function getIntent: JIntent;
    function getItemId: Integer;
    function getNumericShortcut: Char;
    function getOrder: Integer;
    function getSubMenu: JSubMenu;
    function getTitle: JCharSequence;
    function getTitleCondensed: JCharSequence;
    function hasSubMenu: Boolean;
    function isActionViewExpanded: Boolean;
    function isCheckable: Boolean;
    function isChecked: Boolean;
    function isEnabled: Boolean;
    function isVisible: Boolean;
    function setActionView(const AArg0: Integer): JMenuItem; overload;
    function setActionView(const AArg0: JView): JMenuItem; overload;
    function setAlphabeticShortcut(const AArg0: Char): JMenuItem;
    function setCheckable(const AArg0: Boolean): JMenuItem;
    function setChecked(const AArg0: Boolean): JMenuItem;
    function setEnabled(const AArg0: Boolean): JMenuItem;
    function setIcon(const AArg0: JDrawable): JMenuItem; overload;
    function setIcon(const AArg0: Integer): JMenuItem; overload;
    function setIntent(const AArg0: JIntent): JMenuItem;
    function setNumericShortcut(const AArg0: Char): JMenuItem;
    function setOnActionExpandListener(const AArg0: JMenuItem_OnActionExpandListener): JMenuItem;
    function setOnMenuItemClickListener(const AArg0: JMenuItem_OnMenuItemClickListener): JMenuItem;
    function setShortcut(const AArg0: Char; const AArg1: Char): JMenuItem;
    procedure setShowAsAction(const AArg0: Integer);
    function setShowAsActionFlags(const AArg0: Integer): JMenuItem;
    function setTitle(const AArg0: Integer): JMenuItem; overload;
    function setTitle(const AArg0: JCharSequence): JMenuItem; overload;
    function setTitleCondensed(const AArg0: JCharSequence): JMenuItem;
    function setVisible(const AArg0: Boolean): JMenuItem;
  protected
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMenuItem; overload;
    class function Wrap(const AObject: IJNIObject): JMenuItem; overload;
    { constants }
    class function SHOW_AS_ACTION_ALWAYS: Integer;
    class function SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: Integer;
    class function SHOW_AS_ACTION_IF_ROOM: Integer;
    class function SHOW_AS_ACTION_NEVER: Integer;
    class function SHOW_AS_ACTION_WITH_TEXT: Integer;
  end;

{ android.view.MenuItem_OnActionExpandListener - interface }

  [JavaClassSignature('android/view/MenuItem$OnActionExpandListener')]
  JMenuItem_OnActionExpandListener = interface(IJavaObject)
    ['{427CFBCC-CA09-4289-B693-EB9E85298FB8}']
    function onMenuItemActionCollapse(const AArg0: JMenuItem): Boolean;
    function onMenuItemActionExpand(const AArg0: JMenuItem): Boolean;
  end;

  [JavaClassSignature('android/view/MenuItem$OnActionExpandListener')]
  TJMenuItem_OnActionExpandListener = class(TJObject, JMenuItem_OnActionExpandListener)
  private
    { methods }
    function onMenuItemActionCollapse(const AArg0: JMenuItem): Boolean;
    function onMenuItemActionExpand(const AArg0: JMenuItem): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMenuItem_OnActionExpandListener; overload;
    class function Wrap(const AObject: IJNIObject): JMenuItem_OnActionExpandListener; overload;
  end;

{ android.view.MenuItem_OnMenuItemClickListener - interface }

  [JavaClassSignature('android/view/MenuItem$OnMenuItemClickListener')]
  JMenuItem_OnMenuItemClickListener = interface(IJavaObject)
    ['{EEC709C3-B10F-4138-AEB7-DA1A23DB1DAE}']
    function onMenuItemClick(const AArg0: JMenuItem): Boolean;
  end;

  [JavaClassSignature('android/view/MenuItem$OnMenuItemClickListener')]
  TJMenuItem_OnMenuItemClickListener = class(TJObject, JMenuItem_OnMenuItemClickListener)
  private
    { methods }
    function onMenuItemClick(const AArg0: JMenuItem): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JMenuItem_OnMenuItemClickListener; overload;
    class function Wrap(const AObject: IJNIObject): JMenuItem_OnMenuItemClickListener; overload;
  end;

{ android.view.ScaleGestureDetector }

  [JavaClassSignature('android/view/ScaleGestureDetector')]
  JScaleGestureDetector = interface(JObject)
    ['{D73F8C3A-7B76-4161-AC52-6A4A4468CEC5}']
    function getCurrentSpan: Single;
    function getCurrentSpanX: Single;
    function getCurrentSpanY: Single;
    function getEventTime: Int64;
    function getFocusX: Single;
    function getFocusY: Single;
    function getPreviousSpan: Single;
    function getPreviousSpanX: Single;
    function getPreviousSpanY: Single;
    function getScaleFactor: Single;
    function getTimeDelta: Int64;
    function isInProgress: Boolean;
    function isQuickScaleEnabled: Boolean;
    function isStylusScaleEnabled: Boolean; // Introduced in 23';
    function onTouchEvent(const AArg0: JMotionEvent): Boolean;
    procedure setQuickScaleEnabled(const AArg0: Boolean);
    procedure setStylusScaleEnabled(const AArg0: Boolean); // Introduced in 23';
  end;

  [JavaClassSignature('android/view/ScaleGestureDetector')]
  TJScaleGestureDetector = class(TJObject, JScaleGestureDetector)
  private
    { methods }
    function getCurrentSpan: Single;
    function getCurrentSpanX: Single;
    function getCurrentSpanY: Single;
    function getEventTime: Int64;
    function getFocusX: Single;
    function getFocusY: Single;
    function getPreviousSpan: Single;
    function getPreviousSpanX: Single;
    function getPreviousSpanY: Single;
    function getScaleFactor: Single;
    function getTimeDelta: Int64;
    function isInProgress: Boolean;
    function isQuickScaleEnabled: Boolean;
    function isStylusScaleEnabled: Boolean; // Introduced in 23';
    function onTouchEvent(const AArg0: JMotionEvent): Boolean;
    procedure setQuickScaleEnabled(const AArg0: Boolean);
    procedure setStylusScaleEnabled(const AArg0: Boolean); // Introduced in 23';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JScaleGestureDetector; overload;
    class function Wrap(const AObject: IJNIObject): JScaleGestureDetector; overload;
    { constructors }
    class function Create(const AArg0: JContext; const AArg1: JScaleGestureDetector_OnScaleGestureListener): JScaleGestureDetector; overload;
    class function Create(const AArg0: JContext; const AArg1: JScaleGestureDetector_OnScaleGestureListener; const AArg2: JHandler): JScaleGestureDetector; overload;
  end;

{ android.view.ScaleGestureDetector_OnScaleGestureListener - interface }

  [JavaClassSignature('android/view/ScaleGestureDetector$OnScaleGestureListener')]
  JScaleGestureDetector_OnScaleGestureListener = interface(IJavaObject)
    ['{090A9813-1025-4D0E-A25C-F518499A0170}']
    function onScale(const AArg0: JScaleGestureDetector): Boolean;
    function onScaleBegin(const AArg0: JScaleGestureDetector): Boolean;
    procedure onScaleEnd(const AArg0: JScaleGestureDetector);
  end;

  [JavaClassSignature('android/view/ScaleGestureDetector$OnScaleGestureListener')]
  TJScaleGestureDetector_OnScaleGestureListener = class(TJObject, JScaleGestureDetector_OnScaleGestureListener)
  private
    { methods }
    function onScale(const AArg0: JScaleGestureDetector): Boolean;
    function onScaleBegin(const AArg0: JScaleGestureDetector): Boolean;
    procedure onScaleEnd(const AArg0: JScaleGestureDetector);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JScaleGestureDetector_OnScaleGestureListener; overload;
    class function Wrap(const AObject: IJNIObject): JScaleGestureDetector_OnScaleGestureListener; overload;
  end;

{ android.view.ScaleGestureDetector_SimpleOnScaleGestureListener }

  [JavaClassSignature('android/view/ScaleGestureDetector$SimpleOnScaleGestureListener')]
  JScaleGestureDetector_SimpleOnScaleGestureListener = interface(JObject)
    ['{EB4DADCF-BEAF-49AF-9430-B853A699A56C}']
    function onScale(const AArg0: JScaleGestureDetector): Boolean;
    function onScaleBegin(const AArg0: JScaleGestureDetector): Boolean;
    procedure onScaleEnd(const AArg0: JScaleGestureDetector);
  end;

  [JavaClassSignature('android/view/ScaleGestureDetector$SimpleOnScaleGestureListener')]
  TJScaleGestureDetector_SimpleOnScaleGestureListener = class(TJObject, JScaleGestureDetector_SimpleOnScaleGestureListener)
  private
    { methods }
    function onScale(const AArg0: JScaleGestureDetector): Boolean;
    function onScaleBegin(const AArg0: JScaleGestureDetector): Boolean;
    procedure onScaleEnd(const AArg0: JScaleGestureDetector);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JScaleGestureDetector_SimpleOnScaleGestureListener; overload;
    class function Wrap(const AObject: IJNIObject): JScaleGestureDetector_SimpleOnScaleGestureListener; overload;
    { constructors }
    class function Create: JScaleGestureDetector_SimpleOnScaleGestureListener; overload;
  end;

{ android.view.Surface }

  [JavaClassSignature('android/view/Surface')]
  JSurface = interface(JObject)
    ['{B46A346E-5314-4590-8530-5A372EF1B9E3}']
    function describeContents: Integer;
    function isValid: Boolean;
    function lockCanvas(const AArg0: JRect): JCanvas;
    function lockHardwareCanvas: JCanvas; // Introduced in 23';
    procedure release;
    function toString: JString;
    procedure unlockCanvas(const AArg0: JCanvas); deprecated 'Deprecated in 17';
    procedure unlockCanvasAndPost(const AArg0: JCanvas);
  end;

  [JavaClassSignature('android/view/Surface')]
  TJSurface = class(TJObject, JSurface)
  private
    { methods }
    function describeContents: Integer;
    function isValid: Boolean;
    function lockCanvas(const AArg0: JRect): JCanvas;
    function lockHardwareCanvas: JCanvas; // Introduced in 23';
    procedure release;
    function toString: JString; reintroduce;
    procedure unlockCanvas(const AArg0: JCanvas); deprecated 'Deprecated in 17';
    procedure unlockCanvasAndPost(const AArg0: JCanvas);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSurface; overload;
    class function Wrap(const AObject: IJNIObject): JSurface; overload;
    { constructors }
    class function Create(const AArg0: JSurfaceTexture): JSurface; overload;
    { constants }
    class function ROTATION_0: Integer;
    class function ROTATION_180: Integer;
    class function ROTATION_270: Integer;
    class function ROTATION_90: Integer;
  end;

{ android.view.SurfaceHolder - interface }

  [JavaClassSignature('android/view/SurfaceHolder')]
  JSurfaceHolder = interface(IJavaObject)
    ['{A9D19874-C30F-44AD-A417-64C7A1198DE2}']
    procedure addCallback(const AArg0: JSurfaceHolder_Callback);
    function getSurface: JSurface;
    function getSurfaceFrame: JRect;
    function isCreating: Boolean;
    function lockCanvas(const AArg0: JRect): JCanvas; overload;
    function lockCanvas: JCanvas; overload;
    procedure removeCallback(const AArg0: JSurfaceHolder_Callback);
    procedure setFixedSize(const AArg0: Integer; const AArg1: Integer);
    procedure setFormat(const AArg0: Integer);
    procedure setKeepScreenOn(const AArg0: Boolean);
    procedure setSizeFromLayout;
    procedure setType(const AArg0: Integer); deprecated 'Deprecated in 15';
    procedure unlockCanvasAndPost(const AArg0: JCanvas);
  end;

  [JavaClassSignature('android/view/SurfaceHolder')]
  TJSurfaceHolder = class(TJObject, JSurfaceHolder)
  private
    { methods }
    procedure addCallback(const AArg0: JSurfaceHolder_Callback);
    function getSurface: JSurface;
    function getSurfaceFrame: JRect;
    function isCreating: Boolean;
    function lockCanvas(const AArg0: JRect): JCanvas; overload;
    function lockCanvas: JCanvas; overload;
    procedure removeCallback(const AArg0: JSurfaceHolder_Callback);
    procedure setFixedSize(const AArg0: Integer; const AArg1: Integer);
    procedure setFormat(const AArg0: Integer);
    procedure setKeepScreenOn(const AArg0: Boolean);
    procedure setSizeFromLayout;
    procedure setType(const AArg0: Integer); deprecated 'Deprecated in 15';
    procedure unlockCanvasAndPost(const AArg0: JCanvas);
  protected
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSurfaceHolder; overload;
    class function Wrap(const AObject: IJNIObject): JSurfaceHolder; overload;
    { constants }
    class function SURFACE_TYPE_GPU: Integer;
    class function SURFACE_TYPE_HARDWARE: Integer;
    class function SURFACE_TYPE_NORMAL: Integer;
    class function SURFACE_TYPE_PUSH_BUFFERS: Integer;
  end;

{ android.view.SurfaceHolder_BadSurfaceTypeException }

  [JavaClassSignature('android/view/SurfaceHolder$BadSurfaceTypeException')]
  JSurfaceHolder_BadSurfaceTypeException = interface(JRuntimeException)
    ['{A1B9638B-82D6-4160-91CA-1E4026771B92}']
  end;

  [JavaClassSignature('android/view/SurfaceHolder$BadSurfaceTypeException')]
  TJSurfaceHolder_BadSurfaceTypeException = class(TJRuntimeException, JSurfaceHolder_BadSurfaceTypeException)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSurfaceHolder_BadSurfaceTypeException; overload;
    class function Wrap(const AObject: IJNIObject): JSurfaceHolder_BadSurfaceTypeException; overload;
    { constructors }
    class function Create: JSurfaceHolder_BadSurfaceTypeException; overload;
    class function Create(const AArg0: JString): JSurfaceHolder_BadSurfaceTypeException; overload;
  end;

{ android.view.SurfaceHolder_Callback - interface }

  [JavaClassSignature('android/view/SurfaceHolder$Callback')]
  JSurfaceHolder_Callback = interface(IJavaObject)
    ['{6BFDE4FF-ABDF-472F-9FB7-4508C7F84350}']
    procedure surfaceChanged(const AArg0: JSurfaceHolder; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure surfaceCreated(const AArg0: JSurfaceHolder);
    procedure surfaceDestroyed(const AArg0: JSurfaceHolder);
  end;

  [JavaClassSignature('android/view/SurfaceHolder$Callback')]
  TJSurfaceHolder_Callback = class(TJObject, JSurfaceHolder_Callback)
  private
    { methods }
    procedure surfaceChanged(const AArg0: JSurfaceHolder; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure surfaceCreated(const AArg0: JSurfaceHolder);
    procedure surfaceDestroyed(const AArg0: JSurfaceHolder);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSurfaceHolder_Callback; overload;
    class function Wrap(const AObject: IJNIObject): JSurfaceHolder_Callback; overload;
  end;

{ android.view.SurfaceHolder_Callback2 - interface }

  [JavaClassSignature('android/view/SurfaceHolder$Callback2')]
  JSurfaceHolder_Callback2 = interface(JSurfaceHolder_Callback)
    ['{7D1075E3-A8B7-4992-B9BE-8EEFE6C9D3F2}']
    procedure surfaceRedrawNeeded(const AArg0: JSurfaceHolder);
  end;

  [JavaClassSignature('android/view/SurfaceHolder$Callback2')]
  TJSurfaceHolder_Callback2 = class(TJSurfaceHolder_Callback, JSurfaceHolder_Callback2)
  private
    { methods }
    procedure surfaceRedrawNeeded(const AArg0: JSurfaceHolder);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSurfaceHolder_Callback2; overload;
    class function Wrap(const AObject: IJNIObject): JSurfaceHolder_Callback2; overload;
  end;

{ android.view.TextureView_SurfaceTextureListener - interface }

  [JavaClassSignature('android/view/TextureView$SurfaceTextureListener')]
  JTextureView_SurfaceTextureListener = interface(IJavaObject)
    ['{CC1D396F-1211-4993-9ECF-E384E126B3C8}']
    procedure onSurfaceTextureAvailable(const AArg0: JSurfaceTexture; const AArg1: Integer; const AArg2: Integer);
    function onSurfaceTextureDestroyed(const AArg0: JSurfaceTexture): Boolean;
    procedure onSurfaceTextureSizeChanged(const AArg0: JSurfaceTexture; const AArg1: Integer; const AArg2: Integer);
    procedure onSurfaceTextureUpdated(const AArg0: JSurfaceTexture);
  end;

  [JavaClassSignature('android/view/TextureView$SurfaceTextureListener')]
  TJTextureView_SurfaceTextureListener = class(TJObject, JTextureView_SurfaceTextureListener)
  private
    { methods }
    procedure onSurfaceTextureAvailable(const AArg0: JSurfaceTexture; const AArg1: Integer; const AArg2: Integer);
    function onSurfaceTextureDestroyed(const AArg0: JSurfaceTexture): Boolean;
    procedure onSurfaceTextureSizeChanged(const AArg0: JSurfaceTexture; const AArg1: Integer; const AArg2: Integer);
    procedure onSurfaceTextureUpdated(const AArg0: JSurfaceTexture);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JTextureView_SurfaceTextureListener; overload;
    class function Wrap(const AObject: IJNIObject): JTextureView_SurfaceTextureListener; overload;
  end;

{ android.view.View }

  [JavaClassSignature('android/view/View')]
  JView = interface(JObject)
    ['{0976B67D-F638-43EC-9880-85B2A6671C7E}']
    procedure addChildrenForAccessibility(const AArg0: JArrayList);
    procedure addFocusables(const AArg0: JArrayList; const AArg1: Integer); overload;
    procedure addFocusables(const AArg0: JArrayList; const AArg1: Integer; const AArg2: Integer); overload;
    procedure addKeyboardNavigationClusters(const AArg0: JCollection; const AArg1: Integer); // Introduced in 26';
    procedure addOnLayoutChangeListener(const AArg0: JView_OnLayoutChangeListener);
    procedure addTouchables(const AArg0: JArrayList);
    procedure announceForAccessibility(const AArg0: JCharSequence);
    procedure autofill(const AArg0: JSparseArray); // Introduced in 26';
    procedure bringToFront;
    procedure buildDrawingCache(const AArg0: Boolean); overload; deprecated 'Deprecated in 28';
    procedure buildDrawingCache; overload; deprecated 'Deprecated in 28';
    procedure buildLayer;
    function callOnClick: Boolean;
    function canResolveLayoutDirection: Boolean;
    function canResolveTextAlignment: Boolean;
    function canResolveTextDirection: Boolean;
    function canScrollHorizontally(const AArg0: Integer): Boolean;
    function canScrollVertically(const AArg0: Integer): Boolean;
    procedure cancelDragAndDrop; // Introduced in 24';
    procedure cancelLongPress;
    procedure cancelPendingInputEvents;
    function checkInputConnectionProxy(const AArg0: JView): Boolean;
    procedure clearAnimation;
    procedure clearFocus;
    procedure computeScroll;
    procedure destroyDrawingCache; deprecated 'Deprecated in 28';
    function dispatchCapturedPointerEvent(const AArg0: JMotionEvent): Boolean; // Introduced in 26';
    procedure dispatchConfigurationChanged(const AArg0: JConfiguration);
    procedure dispatchDisplayHint(const AArg0: Integer);
    function dispatchDragEvent(const AArg0: JDragEvent): Boolean;
    procedure dispatchDrawableHotspotChanged(const AArg0: Single; const AArg1: Single); // Introduced in 22';
    procedure dispatchFinishTemporaryDetach; // Introduced in 24';
    function dispatchGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyEventPreIme(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchNestedFling(const AArg0: Single; const AArg1: Single; const AArg2: Boolean): Boolean;
    function dispatchNestedPreFling(const AArg0: Single; const AArg1: Single): Boolean;
    function dispatchNestedPrePerformAccessibilityAction(const AArg0: Integer; const AArg1: JBundle): Boolean; // Introduced in 22';
    function dispatchNestedPreScroll(const AArg0: Integer; const AArg1: Integer; const AArg2: IJavaArray<Integer>; const AArg3: IJavaArray<Integer>): Boolean;
    function dispatchNestedScroll(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: IJavaArray<Integer>): Boolean;
    procedure dispatchPointerCaptureChanged(const AArg0: Boolean); // Introduced in 26';
    procedure dispatchStartTemporaryDetach; // Introduced in 24';
    procedure dispatchSystemUiVisibilityChanged(const AArg0: Integer);
    function dispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchUnhandledMove(const AArg0: JView; const AArg1: Integer): Boolean;
    procedure dispatchWindowFocusChanged(const AArg0: Boolean);
    procedure dispatchWindowSystemUiVisiblityChanged(const AArg0: Integer);
    procedure dispatchWindowVisibilityChanged(const AArg0: Integer);
    procedure draw(const AArg0: JCanvas);
    procedure drawableHotspotChanged(const AArg0: Single; const AArg1: Single);
    function findFocus: JView;
    function findViewById(const AArg0: Integer): JView;
    function findViewWithTag(const AArg0: JObject): JView;
    procedure findViewsWithText(const AArg0: JArrayList; const AArg1: JCharSequence; const AArg2: Integer);
    function focusSearch(const AArg0: Integer): JView;
    procedure forceHasOverlappingRendering(const AArg0: Boolean); // Introduced in 24';
    procedure forceLayout;
    function getAccessibilityClassName: JCharSequence; // Introduced in 23';
    function getAccessibilityLiveRegion: Integer;
    function getAccessibilityPaneTitle: JCharSequence; // Introduced in 28';
    function getAccessibilityTraversalAfter: Integer; // Introduced in 22';
    function getAccessibilityTraversalBefore: Integer; // Introduced in 22';
    function getAlpha: Single;
    function getAnimation: JObject {JAnimation};
    function getApplicationWindowToken: JIBinder;
    function getAutofillHints: IJavaArray<JString>; // Introduced in 26';
    function getAutofillType: Integer; // Introduced in 26';
    function getBackground: JDrawable;
    function getBackgroundTintList: JColorStateList;
    function getBackgroundTintMode: JPorterDuff_Mode;
    function getBaseline: Integer;
    function getBottom: Integer;
    function getCameraDistance: Single;
    function getClipBounds(const AArg0: JRect): Boolean; overload; // Introduced in 23';
    function getClipBounds: JRect; overload;
    function getClipToOutline: Boolean;
    function getContentDescription: JCharSequence;
    function getContext: JContext;
    function getDefaultFocusHighlightEnabled: Boolean; // Introduced in 26';
    function getDisplay: JDisplay;
    function getDrawableState: IJavaArray<Integer>;
    function getDrawingCache(const AArg0: Boolean): JBitmap; overload; deprecated 'Deprecated in 28';
    function getDrawingCache: JBitmap; overload; deprecated 'Deprecated in 28';
    function getDrawingCacheBackgroundColor: Integer; deprecated 'Deprecated in 28';
    function getDrawingCacheQuality: Integer; deprecated 'Deprecated in 28';
    procedure getDrawingRect(const AArg0: JRect);
    function getDrawingTime: Int64;
    function getElevation: Single;
    function getFilterTouchesWhenObscured: Boolean;
    function getFitsSystemWindows: Boolean;
    function getFocusable: Integer; // Introduced in 26';
    function getFocusables(const AArg0: Integer): JArrayList;
    procedure getFocusedRect(const AArg0: JRect);
    function getForeground: JDrawable; // Introduced in 23';
    function getForegroundGravity: Integer; // Introduced in 23';
    function getForegroundTintList: JColorStateList; // Introduced in 23';
    function getForegroundTintMode: JPorterDuff_Mode; // Introduced in 23';
    function getGlobalVisibleRect(const AArg0: JRect): Boolean; overload;
    function getGlobalVisibleRect(const AArg0: JRect; const AArg1: JPoint): Boolean; overload;
    function getHandler: JHandler;
    function getHasOverlappingRendering: Boolean; // Introduced in 24';
    function getHeight: Integer;
    procedure getHitRect(const AArg0: JRect);
    function getHorizontalFadingEdgeLength: Integer;
    function getId: Integer;
    function getImportantForAccessibility: Integer;
    function getImportantForAutofill: Integer; // Introduced in 26';
    function getKeepScreenOn: Boolean;
    function getLabelFor: Integer;
    function getLayerType: Integer;
    function getLayoutDirection: Integer;
    function getLayoutParams: JViewGroup_LayoutParams;
    function getLeft: Integer;
    function getLocalVisibleRect(const AArg0: JRect): Boolean;
    procedure getLocationInWindow(const AArg0: IJavaArray<Integer>);
    procedure getLocationOnScreen(const AArg0: IJavaArray<Integer>);
    function getMatrix: JMatrix;
    function getMeasuredHeight: Integer;
    function getMeasuredHeightAndState: Integer;
    function getMeasuredState: Integer;
    function getMeasuredWidth: Integer;
    function getMeasuredWidthAndState: Integer;
    function getMinimumHeight: Integer;
    function getMinimumWidth: Integer;
    function getNextClusterForwardId: Integer; // Introduced in 26';
    function getNextFocusDownId: Integer;
    function getNextFocusForwardId: Integer;
    function getNextFocusLeftId: Integer;
    function getNextFocusRightId: Integer;
    function getNextFocusUpId: Integer;
    function getOnFocusChangeListener: JView_OnFocusChangeListener;
    function getOutlineAmbientShadowColor: Integer; // Introduced in 28';
    function getOutlineSpotShadowColor: Integer; // Introduced in 28';
    function getOverScrollMode: Integer;
    function getPaddingBottom: Integer;
    function getPaddingEnd: Integer;
    function getPaddingLeft: Integer;
    function getPaddingRight: Integer;
    function getPaddingStart: Integer;
    function getPaddingTop: Integer;
    function getParent: JViewParent;
    function getParentForAccessibility: JViewParent;
    function getPivotX: Single;
    function getPivotY: Single;
    function getResources: JResources;
    function getRevealOnFocusHint: Boolean; // Introduced in 25';
    function getRight: Integer;
    function getRootView: JView;
    function getRotation: Single;
    function getRotationX: Single;
    function getRotationY: Single;
    function getScaleX: Single;
    function getScaleY: Single;
    function getScrollBarDefaultDelayBeforeFade: Integer;
    function getScrollBarFadeDuration: Integer;
    function getScrollBarSize: Integer;
    function getScrollBarStyle: Integer;
    function getScrollIndicators: Integer; // Introduced in 23';
    function getScrollX: Integer;
    function getScrollY: Integer;
    function getSolidColor: Integer;
    function getSystemUiVisibility: Integer;
    function getTag: JObject; overload;
    function getTag(const AArg0: Integer): JObject; overload;
    function getTextAlignment: Integer;
    function getTextDirection: Integer;
    function getTooltipText: JCharSequence; // Introduced in 26';
    function getTop: Integer;
    function getTouchables: JArrayList;
    function getTransitionName: JString;
    function getTranslationX: Single;
    function getTranslationY: Single;
    function getTranslationZ: Single;
    function getVerticalFadingEdgeLength: Integer;
    function getVerticalScrollbarPosition: Integer;
    function getVerticalScrollbarWidth: Integer;
    function getViewTreeObserver: JViewTreeObserver;
    function getVisibility: Integer;
    function getWidth: Integer;
    function getWindowSystemUiVisibility: Integer;
    function getWindowToken: JIBinder;
    function getWindowVisibility: Integer;
    procedure getWindowVisibleDisplayFrame(const AArg0: JRect);
    function getX: Single;
    function getY: Single;
    function getZ: Single;
    function hasExplicitFocusable: Boolean; // Introduced in 26';
    function hasFocus: Boolean;
    function hasFocusable: Boolean;
    function hasNestedScrollingParent: Boolean;
    function hasOnClickListeners: Boolean;
    function hasOverlappingRendering: Boolean;
    function hasPointerCapture: Boolean; // Introduced in 26';
    function hasTransientState: Boolean;
    function hasWindowFocus: Boolean;
    procedure invalidate; overload;
    procedure invalidate(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload; deprecated 'Deprecated in 28';
    procedure invalidate(const AArg0: JRect); overload; deprecated 'Deprecated in 28';
    procedure invalidateDrawable(const AArg0: JDrawable);
    procedure invalidateOutline;
    function isAccessibilityFocused: Boolean;
    function isAccessibilityHeading: Boolean; // Introduced in 28';
    function isActivated: Boolean;
    function isAttachedToWindow: Boolean;
    function isClickable: Boolean;
    function isContextClickable: Boolean; // Introduced in 23';
    function isDirty: Boolean;
    function isDrawingCacheEnabled: Boolean; deprecated 'Deprecated in 28';
    function isDuplicateParentStateEnabled: Boolean;
    function isEnabled: Boolean;
    function isFocusable: Boolean;
    function isFocusableInTouchMode: Boolean;
    function isFocused: Boolean;
    function isFocusedByDefault: Boolean; // Introduced in 26';
    function isHapticFeedbackEnabled: Boolean;
    function isHardwareAccelerated: Boolean;
    function isHorizontalFadingEdgeEnabled: Boolean;
    function isHorizontalScrollBarEnabled: Boolean;
    function isHovered: Boolean;
    function isImportantForAccessibility: Boolean;
    function isImportantForAutofill: Boolean; // Introduced in 26';
    function isInEditMode: Boolean;
    function isInLayout: Boolean;
    function isInTouchMode: Boolean;
    function isKeyboardNavigationCluster: Boolean; // Introduced in 26';
    function isLaidOut: Boolean;
    function isLayoutDirectionResolved: Boolean;
    function isLayoutRequested: Boolean;
    function isLongClickable: Boolean;
    function isNestedScrollingEnabled: Boolean;
    function isOpaque: Boolean;
    function isPaddingRelative: Boolean;
    function isPivotSet: Boolean; // Introduced in 28';
    function isPressed: Boolean;
    function isSaveEnabled: Boolean;
    function isSaveFromParentEnabled: Boolean;
    function isScreenReaderFocusable: Boolean; // Introduced in 28';
    function isScrollContainer: Boolean;
    function isScrollbarFadingEnabled: Boolean;
    function isSelected: Boolean;
    function isShown: Boolean;
    function isSoundEffectsEnabled: Boolean;
    function isTemporarilyDetached: Boolean; // Introduced in 24';
    function isTextAlignmentResolved: Boolean;
    function isTextDirectionResolved: Boolean;
    function isVerticalFadingEdgeEnabled: Boolean;
    function isVerticalScrollBarEnabled: Boolean;
    function isVisibleToUserForAutofill(const AArg0: Integer): Boolean; // Introduced in 28';
    procedure jumpDrawablesToCurrentState;
    function keyboardNavigationClusterSearch(const AArg0: JView; const AArg1: Integer): JView; // Introduced in 26';
    procedure layout(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure measure(const AArg0: Integer; const AArg1: Integer);
    procedure offsetLeftAndRight(const AArg0: Integer);
    procedure offsetTopAndBottom(const AArg0: Integer);
    procedure onCancelPendingInputEvents;
    function onCapturedPointerEvent(const AArg0: JMotionEvent): Boolean; // Introduced in 26';
    function onCheckIsTextEditor: Boolean;
    function onDragEvent(const AArg0: JDragEvent): Boolean;
    procedure onDrawForeground(const AArg0: JCanvas); // Introduced in 23';
    function onFilterTouchEventForSecurity(const AArg0: JMotionEvent): Boolean;
    procedure onFinishTemporaryDetach;
    function onGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    procedure onHoverChanged(const AArg0: Boolean);
    function onHoverEvent(const AArg0: JMotionEvent): Boolean;
    function onKeyDown(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyLongPress(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyMultiple(const AArg0: Integer; const AArg1: Integer; const AArg2: JKeyEvent): Boolean;
    function onKeyPreIme(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyShortcut(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyUp(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    procedure onPointerCaptureChange(const AArg0: Boolean); // Introduced in 26';
    procedure onRtlPropertiesChanged(const AArg0: Integer);
    procedure onScreenStateChanged(const AArg0: Integer);
    procedure onStartTemporaryDetach;
    function onTouchEvent(const AArg0: JMotionEvent): Boolean;
    function onTrackballEvent(const AArg0: JMotionEvent): Boolean;
    procedure onVisibilityAggregated(const AArg0: Boolean); // Introduced in 24';
    procedure onWindowFocusChanged(const AArg0: Boolean);
    procedure onWindowSystemUiVisibilityChanged(const AArg0: Integer);
    function performAccessibilityAction(const AArg0: Integer; const AArg1: JBundle): Boolean;
    function performClick: Boolean;
    function performContextClick(const AArg0: Single; const AArg1: Single): Boolean; overload; // Introduced in 24';
    function performContextClick: Boolean; overload; // Introduced in 23';
    function performHapticFeedback(const AArg0: Integer): Boolean; overload;
    function performHapticFeedback(const AArg0: Integer; const AArg1: Integer): Boolean; overload;
    function performLongClick: Boolean; overload;
    function performLongClick(const AArg0: Single; const AArg1: Single): Boolean; overload; // Introduced in 24';
    procedure playSoundEffect(const AArg0: Integer);
    function post(const AArg0: JRunnable): Boolean;
    function postDelayed(const AArg0: JRunnable; const AArg1: Int64): Boolean;
    procedure postInvalidate; overload;
    procedure postInvalidate(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure postInvalidateDelayed(const AArg0: Int64); overload;
    procedure postInvalidateDelayed(const AArg0: Int64; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); overload;
    procedure postInvalidateOnAnimation; overload;
    procedure postInvalidateOnAnimation(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure postOnAnimation(const AArg0: JRunnable);
    procedure postOnAnimationDelayed(const AArg0: JRunnable; const AArg1: Int64);
    procedure refreshDrawableState;
    procedure releasePointerCapture; // Introduced in 26';
    function removeCallbacks(const AArg0: JRunnable): Boolean;
    procedure removeOnLayoutChangeListener(const AArg0: JView_OnLayoutChangeListener);
    procedure requestApplyInsets;
    procedure requestFitSystemWindows; deprecated 'Deprecated in 20';
    function requestFocus(const AArg0: Integer; const AArg1: JRect): Boolean; overload;
    function requestFocus(const AArg0: Integer): Boolean; overload;
    function requestFocus: Boolean; overload;
    function requestFocusFromTouch: Boolean;
    procedure requestLayout;
    procedure requestPointerCapture; // Introduced in 26';
    function requestRectangleOnScreen(const AArg0: JRect): Boolean; overload;
    function requestRectangleOnScreen(const AArg0: JRect; const AArg1: Boolean): Boolean; overload;
    procedure requestUnbufferedDispatch(const AArg0: JMotionEvent);
    function requireViewById(const AArg0: Integer): JView; // Introduced in 28';
    procedure resetPivot; // Introduced in 28';
    function restoreDefaultFocus: Boolean; // Introduced in 26';
    procedure restoreHierarchyState(const AArg0: JSparseArray);
    procedure saveHierarchyState(const AArg0: JSparseArray);
    procedure scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
    procedure scrollBy(const AArg0: Integer; const AArg1: Integer);
    procedure scrollTo(const AArg0: Integer; const AArg1: Integer);
    procedure sendAccessibilityEvent(const AArg0: Integer);
    procedure setAccessibilityHeading(const AArg0: Boolean); // Introduced in 28';
    procedure setAccessibilityLiveRegion(const AArg0: Integer);
    procedure setAccessibilityPaneTitle(const AArg0: JCharSequence); // Introduced in 28';
    procedure setAccessibilityTraversalAfter(const AArg0: Integer); // Introduced in 22';
    procedure setAccessibilityTraversalBefore(const AArg0: Integer); // Introduced in 22';
    procedure setActivated(const AArg0: Boolean);
    procedure setAlpha(const AArg0: Single);
    procedure setAnimation(const AArg0: JObject {JAnimation});
    procedure setAutofillHints(const AArg0: IJavaArray<JString>); // Introduced in 26';
    procedure setBackground(const AArg0: JDrawable);
    procedure setBackgroundColor(const AArg0: Integer);
    procedure setBackgroundDrawable(const AArg0: JDrawable); deprecated 'Deprecated in 16';
    procedure setBackgroundResource(const AArg0: Integer);
    procedure setBackgroundTintList(const AArg0: JColorStateList);
    procedure setBackgroundTintMode(const AArg0: JPorterDuff_Mode);
    procedure setBottom(const AArg0: Integer);
    procedure setCameraDistance(const AArg0: Single);
    procedure setClickable(const AArg0: Boolean);
    procedure setClipBounds(const AArg0: JRect);
    procedure setClipToOutline(const AArg0: Boolean);
    procedure setContentDescription(const AArg0: JCharSequence);
    procedure setContextClickable(const AArg0: Boolean); // Introduced in 23';
    procedure setDefaultFocusHighlightEnabled(const AArg0: Boolean); // Introduced in 26';
    procedure setDrawingCacheBackgroundColor(const AArg0: Integer); deprecated 'Deprecated in 28';
    procedure setDrawingCacheEnabled(const AArg0: Boolean); deprecated 'Deprecated in 28';
    procedure setDrawingCacheQuality(const AArg0: Integer); deprecated 'Deprecated in 28';
    procedure setDuplicateParentStateEnabled(const AArg0: Boolean);
    procedure setElevation(const AArg0: Single);
    procedure setEnabled(const AArg0: Boolean);
    procedure setFadingEdgeLength(const AArg0: Integer);
    procedure setFilterTouchesWhenObscured(const AArg0: Boolean);
    procedure setFitsSystemWindows(const AArg0: Boolean);
    procedure setFocusable(const AArg0: Boolean); overload;
    procedure setFocusable(const AArg0: Integer); overload; // Introduced in 26';
    procedure setFocusableInTouchMode(const AArg0: Boolean);
    procedure setFocusedByDefault(const AArg0: Boolean); // Introduced in 26';
    procedure setForeground(const AArg0: JDrawable); // Introduced in 23';
    procedure setForegroundGravity(const AArg0: Integer); // Introduced in 23';
    procedure setForegroundTintList(const AArg0: JColorStateList); // Introduced in 23';
    procedure setForegroundTintMode(const AArg0: JPorterDuff_Mode); // Introduced in 23';
    procedure setHapticFeedbackEnabled(const AArg0: Boolean);
    procedure setHasTransientState(const AArg0: Boolean);
    procedure setHorizontalFadingEdgeEnabled(const AArg0: Boolean);
    procedure setHorizontalScrollBarEnabled(const AArg0: Boolean);
    procedure setHovered(const AArg0: Boolean);
    procedure setId(const AArg0: Integer);
    procedure setImportantForAccessibility(const AArg0: Integer);
    procedure setImportantForAutofill(const AArg0: Integer); // Introduced in 26';
    procedure setKeepScreenOn(const AArg0: Boolean);
    procedure setKeyboardNavigationCluster(const AArg0: Boolean); // Introduced in 26';
    procedure setLabelFor(const AArg0: Integer);
    procedure setLayerPaint(const AArg0: JPaint);
    procedure setLayerType(const AArg0: Integer; const AArg1: JPaint);
    procedure setLayoutDirection(const AArg0: Integer);
    procedure setLayoutParams(const AArg0: JViewGroup_LayoutParams);
    procedure setLeft(const AArg0: Integer);
    procedure setLongClickable(const AArg0: Boolean);
    procedure setMinimumHeight(const AArg0: Integer);
    procedure setMinimumWidth(const AArg0: Integer);
    procedure setNestedScrollingEnabled(const AArg0: Boolean);
    procedure setNextClusterForwardId(const AArg0: Integer); // Introduced in 26';
    procedure setNextFocusDownId(const AArg0: Integer);
    procedure setNextFocusForwardId(const AArg0: Integer);
    procedure setNextFocusLeftId(const AArg0: Integer);
    procedure setNextFocusRightId(const AArg0: Integer);
    procedure setNextFocusUpId(const AArg0: Integer);
    procedure setOnClickListener(const AArg0: JView_OnClickListener);
    procedure setOnDragListener(const AArg0: JView_OnDragListener);
    procedure setOnFocusChangeListener(const AArg0: JView_OnFocusChangeListener);
    procedure setOnKeyListener(const AArg0: JView_OnKeyListener);
    procedure setOnLongClickListener(const AArg0: JView_OnLongClickListener);
    procedure setOnTouchListener(const AArg0: JView_OnTouchListener);
    procedure setOutlineAmbientShadowColor(const AArg0: Integer); // Introduced in 28';
    procedure setOutlineSpotShadowColor(const AArg0: Integer); // Introduced in 28';
    procedure setOverScrollMode(const AArg0: Integer);
    procedure setPadding(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setPaddingRelative(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setPivotX(const AArg0: Single);
    procedure setPivotY(const AArg0: Single);
    procedure setPressed(const AArg0: Boolean);
    procedure setRevealOnFocusHint(const AArg0: Boolean); // Introduced in 25';
    procedure setRight(const AArg0: Integer);
    procedure setRotation(const AArg0: Single);
    procedure setRotationX(const AArg0: Single);
    procedure setRotationY(const AArg0: Single);
    procedure setSaveEnabled(const AArg0: Boolean);
    procedure setSaveFromParentEnabled(const AArg0: Boolean);
    procedure setScaleX(const AArg0: Single);
    procedure setScaleY(const AArg0: Single);
    procedure setScreenReaderFocusable(const AArg0: Boolean); // Introduced in 28';
    procedure setScrollBarDefaultDelayBeforeFade(const AArg0: Integer);
    procedure setScrollBarFadeDuration(const AArg0: Integer);
    procedure setScrollBarSize(const AArg0: Integer);
    procedure setScrollBarStyle(const AArg0: Integer);
    procedure setScrollContainer(const AArg0: Boolean);
    procedure setScrollIndicators(const AArg0: Integer; const AArg1: Integer); overload; // Introduced in 23';
    procedure setScrollIndicators(const AArg0: Integer); overload; // Introduced in 23';
    procedure setScrollX(const AArg0: Integer);
    procedure setScrollY(const AArg0: Integer);
    procedure setScrollbarFadingEnabled(const AArg0: Boolean);
    procedure setSelected(const AArg0: Boolean);
    procedure setSoundEffectsEnabled(const AArg0: Boolean);
    procedure setSystemUiVisibility(const AArg0: Integer);
    procedure setTag(const AArg0: JObject); overload;
    procedure setTag(const AArg0: Integer; const AArg1: JObject); overload;
    procedure setTextAlignment(const AArg0: Integer);
    procedure setTextDirection(const AArg0: Integer);
    procedure setTooltipText(const AArg0: JCharSequence); // Introduced in 26';
    procedure setTop(const AArg0: Integer);
    procedure setTransitionName(const AArg0: JString);
    procedure setTranslationX(const AArg0: Single);
    procedure setTranslationY(const AArg0: Single);
    procedure setTranslationZ(const AArg0: Single);
    procedure setVerticalFadingEdgeEnabled(const AArg0: Boolean);
    procedure setVerticalScrollBarEnabled(const AArg0: Boolean);
    procedure setVerticalScrollbarPosition(const AArg0: Integer);
    procedure setVisibility(const AArg0: Integer);
    procedure setWillNotCacheDrawing(const AArg0: Boolean); deprecated 'Deprecated in 28';
    procedure setWillNotDraw(const AArg0: Boolean);
    procedure setX(const AArg0: Single);
    procedure setY(const AArg0: Single);
    procedure setZ(const AArg0: Single);
    function showContextMenu(const AArg0: Single; const AArg1: Single): Boolean; overload; // Introduced in 24';
    function showContextMenu: Boolean; overload;
    procedure startAnimation(const AArg0: JObject {JAnimation});
    function startDrag(const AArg0: JClipData; const AArg1: JView_DragShadowBuilder; const AArg2: JObject; const AArg3: Integer): Boolean; deprecated 'Deprecated in 24';
    function startDragAndDrop(const AArg0: JClipData; const AArg1: JView_DragShadowBuilder; const AArg2: JObject; const AArg3: Integer): Boolean; // Introduced in 24';
    function startNestedScroll(const AArg0: Integer): Boolean;
    procedure stopNestedScroll;
    function toString: JString;
    procedure unscheduleDrawable(const AArg0: JDrawable); overload;
    procedure unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable); overload;
    procedure updateDragShadow(const AArg0: JView_DragShadowBuilder); // Introduced in 24';
    function willNotCacheDrawing: Boolean; deprecated 'Deprecated in 28';
    function willNotDraw: Boolean;
  end;

  [JavaClassSignature('android/view/View')]
  TJView = class(TJObject, JView)
  private
    { methods }
    procedure addChildrenForAccessibility(const AArg0: JArrayList);
    procedure addFocusables(const AArg0: JArrayList; const AArg1: Integer); overload;
    procedure addFocusables(const AArg0: JArrayList; const AArg1: Integer; const AArg2: Integer); overload;
    procedure addKeyboardNavigationClusters(const AArg0: JCollection; const AArg1: Integer); // Introduced in 26';
    procedure addOnLayoutChangeListener(const AArg0: JView_OnLayoutChangeListener);
    procedure addTouchables(const AArg0: JArrayList);
    procedure announceForAccessibility(const AArg0: JCharSequence);
    procedure autofill(const AArg0: JSparseArray); // Introduced in 26';
    procedure bringToFront;
    procedure buildDrawingCache(const AArg0: Boolean); overload; deprecated 'Deprecated in 28';
    procedure buildDrawingCache; overload; deprecated 'Deprecated in 28';
    procedure buildLayer;
    function callOnClick: Boolean;
    function canResolveLayoutDirection: Boolean;
    function canResolveTextAlignment: Boolean;
    function canResolveTextDirection: Boolean;
    function canScrollHorizontally(const AArg0: Integer): Boolean;
    function canScrollVertically(const AArg0: Integer): Boolean;
    procedure cancelDragAndDrop; // Introduced in 24';
    procedure cancelLongPress;
    procedure cancelPendingInputEvents;
    function checkInputConnectionProxy(const AArg0: JView): Boolean;
    procedure clearAnimation;
    procedure clearFocus;
    procedure computeScroll;
    procedure destroyDrawingCache; deprecated 'Deprecated in 28';
    function dispatchCapturedPointerEvent(const AArg0: JMotionEvent): Boolean; // Introduced in 26';
    procedure dispatchConfigurationChanged(const AArg0: JConfiguration);
    procedure dispatchDisplayHint(const AArg0: Integer);
    function dispatchDragEvent(const AArg0: JDragEvent): Boolean;
    procedure dispatchDrawableHotspotChanged(const AArg0: Single; const AArg1: Single); // Introduced in 22';
    procedure dispatchFinishTemporaryDetach; // Introduced in 24';
    function dispatchGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyEventPreIme(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchNestedFling(const AArg0: Single; const AArg1: Single; const AArg2: Boolean): Boolean;
    function dispatchNestedPreFling(const AArg0: Single; const AArg1: Single): Boolean;
    function dispatchNestedPrePerformAccessibilityAction(const AArg0: Integer; const AArg1: JBundle): Boolean; // Introduced in 22';
    function dispatchNestedPreScroll(const AArg0: Integer; const AArg1: Integer; const AArg2: IJavaArray<Integer>; const AArg3: IJavaArray<Integer>): Boolean;
    function dispatchNestedScroll(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: IJavaArray<Integer>): Boolean;
    procedure dispatchPointerCaptureChanged(const AArg0: Boolean); // Introduced in 26';
    procedure dispatchStartTemporaryDetach; // Introduced in 24';
    procedure dispatchSystemUiVisibilityChanged(const AArg0: Integer);
    function dispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchUnhandledMove(const AArg0: JView; const AArg1: Integer): Boolean;
    procedure dispatchWindowFocusChanged(const AArg0: Boolean);
    procedure dispatchWindowSystemUiVisiblityChanged(const AArg0: Integer);
    procedure dispatchWindowVisibilityChanged(const AArg0: Integer);
    procedure draw(const AArg0: JCanvas);
    procedure drawableHotspotChanged(const AArg0: Single; const AArg1: Single);
    function findFocus: JView;
    function findViewById(const AArg0: Integer): JView;
    function findViewWithTag(const AArg0: JObject): JView;
    procedure findViewsWithText(const AArg0: JArrayList; const AArg1: JCharSequence; const AArg2: Integer);
    function focusSearch(const AArg0: Integer): JView;
    procedure forceHasOverlappingRendering(const AArg0: Boolean); // Introduced in 24';
    procedure forceLayout;
    function getAccessibilityClassName: JCharSequence; // Introduced in 23';
    function getAccessibilityLiveRegion: Integer;
    function getAccessibilityPaneTitle: JCharSequence; // Introduced in 28';
    function getAccessibilityTraversalAfter: Integer; // Introduced in 22';
    function getAccessibilityTraversalBefore: Integer; // Introduced in 22';
    function getAlpha: Single;
    function getAnimation: JObject {JAnimation};
    function getApplicationWindowToken: JIBinder;
    function getAutofillHints: IJavaArray<JString>; // Introduced in 26';
    function getAutofillType: Integer; // Introduced in 26';
    function getBackground: JDrawable;
    function getBackgroundTintList: JColorStateList;
    function getBackgroundTintMode: JPorterDuff_Mode;
    function getBaseline: Integer;
    function getBottom: Integer;
    function getCameraDistance: Single;
    function getClipBounds(const AArg0: JRect): Boolean; overload; // Introduced in 23';
    function getClipBounds: JRect; overload;
    function getClipToOutline: Boolean;
    function getContentDescription: JCharSequence;
    function getContext: JContext;
    function getDefaultFocusHighlightEnabled: Boolean; // Introduced in 26';
    function getDisplay: JDisplay;
    function getDrawableState: IJavaArray<Integer>;
    function getDrawingCache(const AArg0: Boolean): JBitmap; overload; deprecated 'Deprecated in 28';
    function getDrawingCache: JBitmap; overload; deprecated 'Deprecated in 28';
    function getDrawingCacheBackgroundColor: Integer; deprecated 'Deprecated in 28';
    function getDrawingCacheQuality: Integer; deprecated 'Deprecated in 28';
    procedure getDrawingRect(const AArg0: JRect);
    function getDrawingTime: Int64;
    function getElevation: Single;
    function getFilterTouchesWhenObscured: Boolean;
    function getFitsSystemWindows: Boolean;
    function getFocusable: Integer; // Introduced in 26';
    function getFocusables(const AArg0: Integer): JArrayList;
    procedure getFocusedRect(const AArg0: JRect);
    function getForeground: JDrawable; // Introduced in 23';
    function getForegroundGravity: Integer; // Introduced in 23';
    function getForegroundTintList: JColorStateList; // Introduced in 23';
    function getForegroundTintMode: JPorterDuff_Mode; // Introduced in 23';
    function getGlobalVisibleRect(const AArg0: JRect): Boolean; overload;
    function getGlobalVisibleRect(const AArg0: JRect; const AArg1: JPoint): Boolean; overload;
    function getHandler: JHandler;
    function getHasOverlappingRendering: Boolean; // Introduced in 24';
    function getHeight: Integer;
    procedure getHitRect(const AArg0: JRect);
    function getHorizontalFadingEdgeLength: Integer;
    function getId: Integer;
    function getImportantForAccessibility: Integer;
    function getImportantForAutofill: Integer; // Introduced in 26';
    function getKeepScreenOn: Boolean;
    function getLabelFor: Integer;
    function getLayerType: Integer;
    function getLayoutDirection: Integer;
    function getLayoutParams: JViewGroup_LayoutParams;
    function getLeft: Integer;
    function getLocalVisibleRect(const AArg0: JRect): Boolean;
    procedure getLocationInWindow(const AArg0: IJavaArray<Integer>);
    procedure getLocationOnScreen(const AArg0: IJavaArray<Integer>);
    function getMatrix: JMatrix;
    function getMeasuredHeight: Integer;
    function getMeasuredHeightAndState: Integer;
    function getMeasuredState: Integer;
    function getMeasuredWidth: Integer;
    function getMeasuredWidthAndState: Integer;
    function getMinimumHeight: Integer;
    function getMinimumWidth: Integer;
    function getNextClusterForwardId: Integer; // Introduced in 26';
    function getNextFocusDownId: Integer;
    function getNextFocusForwardId: Integer;
    function getNextFocusLeftId: Integer;
    function getNextFocusRightId: Integer;
    function getNextFocusUpId: Integer;
    function getOnFocusChangeListener: JView_OnFocusChangeListener;
    function getOutlineAmbientShadowColor: Integer; // Introduced in 28';
    function getOutlineSpotShadowColor: Integer; // Introduced in 28';
    function getOverScrollMode: Integer;
    function getPaddingBottom: Integer;
    function getPaddingEnd: Integer;
    function getPaddingLeft: Integer;
    function getPaddingRight: Integer;
    function getPaddingStart: Integer;
    function getPaddingTop: Integer;
    function getParent: JViewParent;
    function getParentForAccessibility: JViewParent;
    function getPivotX: Single;
    function getPivotY: Single;
    function getResources: JResources;
    function getRevealOnFocusHint: Boolean; // Introduced in 25';
    function getRight: Integer;
    function getRootView: JView;
    function getRotation: Single;
    function getRotationX: Single;
    function getRotationY: Single;
    function getScaleX: Single;
    function getScaleY: Single;
    function getScrollBarDefaultDelayBeforeFade: Integer;
    function getScrollBarFadeDuration: Integer;
    function getScrollBarSize: Integer;
    function getScrollBarStyle: Integer;
    function getScrollIndicators: Integer; // Introduced in 23';
    function getScrollX: Integer;
    function getScrollY: Integer;
    function getSolidColor: Integer;
    function getSystemUiVisibility: Integer;
    function getTag: JObject; overload;
    function getTag(const AArg0: Integer): JObject; overload;
    function getTextAlignment: Integer;
    function getTextDirection: Integer;
    function getTooltipText: JCharSequence; // Introduced in 26';
    function getTop: Integer;
    function getTouchables: JArrayList;
    function getTransitionName: JString;
    function getTranslationX: Single;
    function getTranslationY: Single;
    function getTranslationZ: Single;
    function getVerticalFadingEdgeLength: Integer;
    function getVerticalScrollbarPosition: Integer;
    function getVerticalScrollbarWidth: Integer;
    function getViewTreeObserver: JViewTreeObserver;
    function getVisibility: Integer;
    function getWidth: Integer;
    function getWindowSystemUiVisibility: Integer;
    function getWindowToken: JIBinder;
    function getWindowVisibility: Integer;
    procedure getWindowVisibleDisplayFrame(const AArg0: JRect);
    function getX: Single;
    function getY: Single;
    function getZ: Single;
    function hasExplicitFocusable: Boolean; // Introduced in 26';
    function hasFocus: Boolean;
    function hasFocusable: Boolean;
    function hasNestedScrollingParent: Boolean;
    function hasOnClickListeners: Boolean;
    function hasOverlappingRendering: Boolean;
    function hasPointerCapture: Boolean; // Introduced in 26';
    function hasTransientState: Boolean;
    function hasWindowFocus: Boolean;
    procedure invalidate; overload;
    procedure invalidate(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload; deprecated 'Deprecated in 28';
    procedure invalidate(const AArg0: JRect); overload; deprecated 'Deprecated in 28';
    procedure invalidateDrawable(const AArg0: JDrawable);
    procedure invalidateOutline;
    function isAccessibilityFocused: Boolean;
    function isAccessibilityHeading: Boolean; // Introduced in 28';
    function isActivated: Boolean;
    function isAttachedToWindow: Boolean;
    function isClickable: Boolean;
    function isContextClickable: Boolean; // Introduced in 23';
    function isDirty: Boolean;
    function isDrawingCacheEnabled: Boolean; deprecated 'Deprecated in 28';
    function isDuplicateParentStateEnabled: Boolean;
    function isEnabled: Boolean;
    function isFocusable: Boolean;
    function isFocusableInTouchMode: Boolean;
    function isFocused: Boolean;
    function isFocusedByDefault: Boolean; // Introduced in 26';
    function isHapticFeedbackEnabled: Boolean;
    function isHardwareAccelerated: Boolean;
    function isHorizontalFadingEdgeEnabled: Boolean;
    function isHorizontalScrollBarEnabled: Boolean;
    function isHovered: Boolean;
    function isImportantForAccessibility: Boolean;
    function isImportantForAutofill: Boolean; // Introduced in 26';
    function isInEditMode: Boolean;
    function isInLayout: Boolean;
    function isInTouchMode: Boolean;
    function isKeyboardNavigationCluster: Boolean; // Introduced in 26';
    function isLaidOut: Boolean;
    function isLayoutDirectionResolved: Boolean;
    function isLayoutRequested: Boolean;
    function isLongClickable: Boolean;
    function isNestedScrollingEnabled: Boolean;
    function isOpaque: Boolean;
    function isPaddingRelative: Boolean;
    function isPivotSet: Boolean; // Introduced in 28';
    function isPressed: Boolean;
    function isSaveEnabled: Boolean;
    function isSaveFromParentEnabled: Boolean;
    function isScreenReaderFocusable: Boolean; // Introduced in 28';
    function isScrollContainer: Boolean;
    function isScrollbarFadingEnabled: Boolean;
    function isSelected: Boolean;
    function isShown: Boolean;
    function isSoundEffectsEnabled: Boolean;
    function isTemporarilyDetached: Boolean; // Introduced in 24';
    function isTextAlignmentResolved: Boolean;
    function isTextDirectionResolved: Boolean;
    function isVerticalFadingEdgeEnabled: Boolean;
    function isVerticalScrollBarEnabled: Boolean;
    function isVisibleToUserForAutofill(const AArg0: Integer): Boolean; // Introduced in 28';
    procedure jumpDrawablesToCurrentState;
    function keyboardNavigationClusterSearch(const AArg0: JView; const AArg1: Integer): JView; // Introduced in 26';
    procedure layout(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure measure(const AArg0: Integer; const AArg1: Integer);
    procedure offsetLeftAndRight(const AArg0: Integer);
    procedure offsetTopAndBottom(const AArg0: Integer);
    procedure onCancelPendingInputEvents;
    function onCapturedPointerEvent(const AArg0: JMotionEvent): Boolean; // Introduced in 26';
    function onCheckIsTextEditor: Boolean;
    function onDragEvent(const AArg0: JDragEvent): Boolean;
    procedure onDrawForeground(const AArg0: JCanvas); // Introduced in 23';
    function onFilterTouchEventForSecurity(const AArg0: JMotionEvent): Boolean;
    procedure onFinishTemporaryDetach;
    function onGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    procedure onHoverChanged(const AArg0: Boolean);
    function onHoverEvent(const AArg0: JMotionEvent): Boolean;
    function onKeyDown(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyLongPress(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyMultiple(const AArg0: Integer; const AArg1: Integer; const AArg2: JKeyEvent): Boolean;
    function onKeyPreIme(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyShortcut(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function onKeyUp(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    procedure onPointerCaptureChange(const AArg0: Boolean); // Introduced in 26';
    procedure onRtlPropertiesChanged(const AArg0: Integer);
    procedure onScreenStateChanged(const AArg0: Integer);
    procedure onStartTemporaryDetach;
    function onTouchEvent(const AArg0: JMotionEvent): Boolean;
    function onTrackballEvent(const AArg0: JMotionEvent): Boolean;
    procedure onVisibilityAggregated(const AArg0: Boolean); // Introduced in 24';
    procedure onWindowFocusChanged(const AArg0: Boolean);
    procedure onWindowSystemUiVisibilityChanged(const AArg0: Integer);
    function performAccessibilityAction(const AArg0: Integer; const AArg1: JBundle): Boolean;
    function performClick: Boolean;
    function performContextClick(const AArg0: Single; const AArg1: Single): Boolean; overload; // Introduced in 24';
    function performContextClick: Boolean; overload; // Introduced in 23';
    function performHapticFeedback(const AArg0: Integer): Boolean; overload;
    function performHapticFeedback(const AArg0: Integer; const AArg1: Integer): Boolean; overload;
    function performLongClick: Boolean; overload;
    function performLongClick(const AArg0: Single; const AArg1: Single): Boolean; overload; // Introduced in 24';
    procedure playSoundEffect(const AArg0: Integer);
    function post(const AArg0: JRunnable): Boolean;
    function postDelayed(const AArg0: JRunnable; const AArg1: Int64): Boolean;
    procedure postInvalidate; overload;
    procedure postInvalidate(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure postInvalidateDelayed(const AArg0: Int64); overload;
    procedure postInvalidateDelayed(const AArg0: Int64; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); overload;
    procedure postInvalidateOnAnimation; overload;
    procedure postInvalidateOnAnimation(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer); overload;
    procedure postOnAnimation(const AArg0: JRunnable);
    procedure postOnAnimationDelayed(const AArg0: JRunnable; const AArg1: Int64);
    procedure refreshDrawableState;
    procedure releasePointerCapture; // Introduced in 26';
    function removeCallbacks(const AArg0: JRunnable): Boolean;
    procedure removeOnLayoutChangeListener(const AArg0: JView_OnLayoutChangeListener);
    procedure requestApplyInsets;
    procedure requestFitSystemWindows; deprecated 'Deprecated in 20';
    function requestFocus(const AArg0: Integer; const AArg1: JRect): Boolean; overload;
    function requestFocus(const AArg0: Integer): Boolean; overload;
    function requestFocus: Boolean; overload;
    function requestFocusFromTouch: Boolean;
    procedure requestLayout;
    procedure requestPointerCapture; // Introduced in 26';
    function requestRectangleOnScreen(const AArg0: JRect): Boolean; overload;
    function requestRectangleOnScreen(const AArg0: JRect; const AArg1: Boolean): Boolean; overload;
    procedure requestUnbufferedDispatch(const AArg0: JMotionEvent);
    function requireViewById(const AArg0: Integer): JView; // Introduced in 28';
    procedure resetPivot; // Introduced in 28';
    function restoreDefaultFocus: Boolean; // Introduced in 26';
    procedure restoreHierarchyState(const AArg0: JSparseArray);
    procedure saveHierarchyState(const AArg0: JSparseArray);
    procedure scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
    procedure scrollBy(const AArg0: Integer; const AArg1: Integer);
    procedure scrollTo(const AArg0: Integer; const AArg1: Integer);
    procedure sendAccessibilityEvent(const AArg0: Integer);
    procedure setAccessibilityHeading(const AArg0: Boolean); // Introduced in 28';
    procedure setAccessibilityLiveRegion(const AArg0: Integer);
    procedure setAccessibilityPaneTitle(const AArg0: JCharSequence); // Introduced in 28';
    procedure setAccessibilityTraversalAfter(const AArg0: Integer); // Introduced in 22';
    procedure setAccessibilityTraversalBefore(const AArg0: Integer); // Introduced in 22';
    procedure setActivated(const AArg0: Boolean);
    procedure setAlpha(const AArg0: Single);
    procedure setAnimation(const AArg0: JObject {JAnimation});
    procedure setAutofillHints(const AArg0: IJavaArray<JString>); // Introduced in 26';
    procedure setBackground(const AArg0: JDrawable);
    procedure setBackgroundColor(const AArg0: Integer);
    procedure setBackgroundDrawable(const AArg0: JDrawable); deprecated 'Deprecated in 16';
    procedure setBackgroundResource(const AArg0: Integer);
    procedure setBackgroundTintList(const AArg0: JColorStateList);
    procedure setBackgroundTintMode(const AArg0: JPorterDuff_Mode);
    procedure setBottom(const AArg0: Integer);
    procedure setCameraDistance(const AArg0: Single);
    procedure setClickable(const AArg0: Boolean);
    procedure setClipBounds(const AArg0: JRect);
    procedure setClipToOutline(const AArg0: Boolean);
    procedure setContentDescription(const AArg0: JCharSequence);
    procedure setContextClickable(const AArg0: Boolean); // Introduced in 23';
    procedure setDefaultFocusHighlightEnabled(const AArg0: Boolean); // Introduced in 26';
    procedure setDrawingCacheBackgroundColor(const AArg0: Integer); deprecated 'Deprecated in 28';
    procedure setDrawingCacheEnabled(const AArg0: Boolean); deprecated 'Deprecated in 28';
    procedure setDrawingCacheQuality(const AArg0: Integer); deprecated 'Deprecated in 28';
    procedure setDuplicateParentStateEnabled(const AArg0: Boolean);
    procedure setElevation(const AArg0: Single);
    procedure setEnabled(const AArg0: Boolean);
    procedure setFadingEdgeLength(const AArg0: Integer);
    procedure setFilterTouchesWhenObscured(const AArg0: Boolean);
    procedure setFitsSystemWindows(const AArg0: Boolean);
    procedure setFocusable(const AArg0: Boolean); overload;
    procedure setFocusable(const AArg0: Integer); overload; // Introduced in 26';
    procedure setFocusableInTouchMode(const AArg0: Boolean);
    procedure setFocusedByDefault(const AArg0: Boolean); // Introduced in 26';
    procedure setForeground(const AArg0: JDrawable); // Introduced in 23';
    procedure setForegroundGravity(const AArg0: Integer); // Introduced in 23';
    procedure setForegroundTintList(const AArg0: JColorStateList); // Introduced in 23';
    procedure setForegroundTintMode(const AArg0: JPorterDuff_Mode); // Introduced in 23';
    procedure setHapticFeedbackEnabled(const AArg0: Boolean);
    procedure setHasTransientState(const AArg0: Boolean);
    procedure setHorizontalFadingEdgeEnabled(const AArg0: Boolean);
    procedure setHorizontalScrollBarEnabled(const AArg0: Boolean);
    procedure setHovered(const AArg0: Boolean);
    procedure setId(const AArg0: Integer);
    procedure setImportantForAccessibility(const AArg0: Integer);
    procedure setImportantForAutofill(const AArg0: Integer); // Introduced in 26';
    procedure setKeepScreenOn(const AArg0: Boolean);
    procedure setKeyboardNavigationCluster(const AArg0: Boolean); // Introduced in 26';
    procedure setLabelFor(const AArg0: Integer);
    procedure setLayerPaint(const AArg0: JPaint);
    procedure setLayerType(const AArg0: Integer; const AArg1: JPaint);
    procedure setLayoutDirection(const AArg0: Integer);
    procedure setLayoutParams(const AArg0: JViewGroup_LayoutParams);
    procedure setLeft(const AArg0: Integer);
    procedure setLongClickable(const AArg0: Boolean);
    procedure setMinimumHeight(const AArg0: Integer);
    procedure setMinimumWidth(const AArg0: Integer);
    procedure setNestedScrollingEnabled(const AArg0: Boolean);
    procedure setNextClusterForwardId(const AArg0: Integer); // Introduced in 26';
    procedure setNextFocusDownId(const AArg0: Integer);
    procedure setNextFocusForwardId(const AArg0: Integer);
    procedure setNextFocusLeftId(const AArg0: Integer);
    procedure setNextFocusRightId(const AArg0: Integer);
    procedure setNextFocusUpId(const AArg0: Integer);
    procedure setOnClickListener(const AArg0: JView_OnClickListener);
    procedure setOnDragListener(const AArg0: JView_OnDragListener);
    procedure setOnFocusChangeListener(const AArg0: JView_OnFocusChangeListener);
    procedure setOnKeyListener(const AArg0: JView_OnKeyListener);
    procedure setOnLongClickListener(const AArg0: JView_OnLongClickListener);
    procedure setOnTouchListener(const AArg0: JView_OnTouchListener);
    procedure setOutlineAmbientShadowColor(const AArg0: Integer); // Introduced in 28';
    procedure setOutlineSpotShadowColor(const AArg0: Integer); // Introduced in 28';
    procedure setOverScrollMode(const AArg0: Integer);
    procedure setPadding(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setPaddingRelative(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure setPivotX(const AArg0: Single);
    procedure setPivotY(const AArg0: Single);
    procedure setPressed(const AArg0: Boolean);
    procedure setRevealOnFocusHint(const AArg0: Boolean); // Introduced in 25';
    procedure setRight(const AArg0: Integer);
    procedure setRotation(const AArg0: Single);
    procedure setRotationX(const AArg0: Single);
    procedure setRotationY(const AArg0: Single);
    procedure setSaveEnabled(const AArg0: Boolean);
    procedure setSaveFromParentEnabled(const AArg0: Boolean);
    procedure setScaleX(const AArg0: Single);
    procedure setScaleY(const AArg0: Single);
    procedure setScreenReaderFocusable(const AArg0: Boolean); // Introduced in 28';
    procedure setScrollBarDefaultDelayBeforeFade(const AArg0: Integer);
    procedure setScrollBarFadeDuration(const AArg0: Integer);
    procedure setScrollBarSize(const AArg0: Integer);
    procedure setScrollBarStyle(const AArg0: Integer);
    procedure setScrollContainer(const AArg0: Boolean);
    procedure setScrollIndicators(const AArg0: Integer; const AArg1: Integer); overload; // Introduced in 23';
    procedure setScrollIndicators(const AArg0: Integer); overload; // Introduced in 23';
    procedure setScrollX(const AArg0: Integer);
    procedure setScrollY(const AArg0: Integer);
    procedure setScrollbarFadingEnabled(const AArg0: Boolean);
    procedure setSelected(const AArg0: Boolean);
    procedure setSoundEffectsEnabled(const AArg0: Boolean);
    procedure setSystemUiVisibility(const AArg0: Integer);
    procedure setTag(const AArg0: JObject); overload;
    procedure setTag(const AArg0: Integer; const AArg1: JObject); overload;
    procedure setTextAlignment(const AArg0: Integer);
    procedure setTextDirection(const AArg0: Integer);
    procedure setTooltipText(const AArg0: JCharSequence); // Introduced in 26';
    procedure setTop(const AArg0: Integer);
    procedure setTransitionName(const AArg0: JString);
    procedure setTranslationX(const AArg0: Single);
    procedure setTranslationY(const AArg0: Single);
    procedure setTranslationZ(const AArg0: Single);
    procedure setVerticalFadingEdgeEnabled(const AArg0: Boolean);
    procedure setVerticalScrollBarEnabled(const AArg0: Boolean);
    procedure setVerticalScrollbarPosition(const AArg0: Integer);
    procedure setVisibility(const AArg0: Integer);
    procedure setWillNotCacheDrawing(const AArg0: Boolean); deprecated 'Deprecated in 28';
    procedure setWillNotDraw(const AArg0: Boolean);
    procedure setX(const AArg0: Single);
    procedure setY(const AArg0: Single);
    procedure setZ(const AArg0: Single);
    function showContextMenu(const AArg0: Single; const AArg1: Single): Boolean; overload; // Introduced in 24';
    function showContextMenu: Boolean; overload;
    procedure startAnimation(const AArg0: JObject {JAnimation});
    function startDrag(const AArg0: JClipData; const AArg1: JView_DragShadowBuilder; const AArg2: JObject; const AArg3: Integer): Boolean; deprecated 'Deprecated in 24';
    function startDragAndDrop(const AArg0: JClipData; const AArg1: JView_DragShadowBuilder; const AArg2: JObject; const AArg3: Integer): Boolean; // Introduced in 24';
    function startNestedScroll(const AArg0: Integer): Boolean;
    procedure stopNestedScroll;
    function toString: JString; reintroduce;
    procedure unscheduleDrawable(const AArg0: JDrawable); overload;
    procedure unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable); overload;
    procedure updateDragShadow(const AArg0: JView_DragShadowBuilder); // Introduced in 24';
    function willNotCacheDrawing: Boolean; deprecated 'Deprecated in 28';
    function willNotDraw: Boolean;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView; overload;
    class function Wrap(const AObject: IJNIObject): JView; overload;
    { constructors }
    class function Create(const AArg0: JContext): JView; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet): JView; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer): JView; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer; const AArg3: Integer): JView; overload;
    { constants }
    class function ACCESSIBILITY_LIVE_REGION_ASSERTIVE: Integer;
    class function ACCESSIBILITY_LIVE_REGION_NONE: Integer;
    class function ACCESSIBILITY_LIVE_REGION_POLITE: Integer;
    class function ALPHA: JProperty;
    class function AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS: Integer;
    class function AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE: JString;
    class function AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY: JString;
    class function AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH: JString;
    class function AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR: JString;
    class function AUTOFILL_HINT_CREDIT_CARD_NUMBER: JString;
    class function AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE: JString;
    class function AUTOFILL_HINT_EMAIL_ADDRESS: JString;
    class function AUTOFILL_HINT_NAME: JString;
    class function AUTOFILL_HINT_PASSWORD: JString;
    class function AUTOFILL_HINT_PHONE: JString;
    class function AUTOFILL_HINT_POSTAL_ADDRESS: JString;
    class function AUTOFILL_HINT_POSTAL_CODE: JString;
    class function AUTOFILL_HINT_USERNAME: JString;
    class function AUTOFILL_TYPE_DATE: Integer;
    class function AUTOFILL_TYPE_LIST: Integer;
    class function AUTOFILL_TYPE_NONE: Integer;
    class function AUTOFILL_TYPE_TEXT: Integer;
    class function AUTOFILL_TYPE_TOGGLE: Integer;
    class function DRAG_FLAG_GLOBAL: Integer;
    class function DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION: Integer;
    class function DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION: Integer;
    class function DRAG_FLAG_GLOBAL_URI_READ: Integer;
    class function DRAG_FLAG_GLOBAL_URI_WRITE: Integer;
    class function DRAG_FLAG_OPAQUE: Integer;
    class function DRAWING_CACHE_QUALITY_AUTO: Integer;
    class function DRAWING_CACHE_QUALITY_HIGH: Integer;
    class function DRAWING_CACHE_QUALITY_LOW: Integer;
    class function FIND_VIEWS_WITH_CONTENT_DESCRIPTION: Integer;
    class function FIND_VIEWS_WITH_TEXT: Integer;
    class function FOCUSABLE: Integer;
    class function FOCUSABLES_ALL: Integer;
    class function FOCUSABLES_TOUCH_MODE: Integer;
    class function FOCUSABLE_AUTO: Integer;
    class function FOCUS_BACKWARD: Integer;
    class function FOCUS_DOWN: Integer;
    class function FOCUS_FORWARD: Integer;
    class function FOCUS_LEFT: Integer;
    class function FOCUS_RIGHT: Integer;
    class function FOCUS_UP: Integer;
    class function GONE: Integer;
    class function HAPTIC_FEEDBACK_ENABLED: Integer;
    class function IMPORTANT_FOR_ACCESSIBILITY_AUTO: Integer;
    class function IMPORTANT_FOR_ACCESSIBILITY_NO: Integer;
    class function IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS: Integer;
    class function IMPORTANT_FOR_ACCESSIBILITY_YES: Integer;
    class function IMPORTANT_FOR_AUTOFILL_AUTO: Integer;
    class function IMPORTANT_FOR_AUTOFILL_NO: Integer;
    class function IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS: Integer;
    class function IMPORTANT_FOR_AUTOFILL_YES: Integer;
    class function IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS: Integer;
    class function INVISIBLE: Integer;
    class function KEEP_SCREEN_ON: Integer;
    class function LAYER_TYPE_HARDWARE: Integer;
    class function LAYER_TYPE_NONE: Integer;
    class function LAYER_TYPE_SOFTWARE: Integer;
    class function LAYOUT_DIRECTION_INHERIT: Integer;
    class function LAYOUT_DIRECTION_LOCALE: Integer;
    class function LAYOUT_DIRECTION_LTR: Integer;
    class function LAYOUT_DIRECTION_RTL: Integer;
    class function MEASURED_HEIGHT_STATE_SHIFT: Integer;
    class function MEASURED_SIZE_MASK: Integer;
    class function MEASURED_STATE_MASK: Integer;
    class function MEASURED_STATE_TOO_SMALL: Integer;
    class function NOT_FOCUSABLE: Integer;
    class function NO_ID: Integer;
    class function OVER_SCROLL_ALWAYS: Integer;
    class function OVER_SCROLL_IF_CONTENT_SCROLLS: Integer;
    class function OVER_SCROLL_NEVER: Integer;
    class function ROTATION: JProperty;
    class function ROTATION_X: JProperty;
    class function ROTATION_Y: JProperty;
    class function SCALE_X: JProperty;
    class function SCALE_Y: JProperty;
    class function SCREEN_STATE_OFF: Integer;
    class function SCREEN_STATE_ON: Integer;
    class function SCROLLBARS_INSIDE_INSET: Integer;
    class function SCROLLBARS_INSIDE_OVERLAY: Integer;
    class function SCROLLBARS_OUTSIDE_INSET: Integer;
    class function SCROLLBARS_OUTSIDE_OVERLAY: Integer;
    class function SCROLLBAR_POSITION_DEFAULT: Integer;
    class function SCROLLBAR_POSITION_LEFT: Integer;
    class function SCROLLBAR_POSITION_RIGHT: Integer;
    class function SCROLL_AXIS_HORIZONTAL: Integer;
    class function SCROLL_AXIS_NONE: Integer;
    class function SCROLL_AXIS_VERTICAL: Integer;
    class function SCROLL_INDICATOR_BOTTOM: Integer;
    class function SCROLL_INDICATOR_END: Integer;
    class function SCROLL_INDICATOR_LEFT: Integer;
    class function SCROLL_INDICATOR_RIGHT: Integer;
    class function SCROLL_INDICATOR_START: Integer;
    class function SCROLL_INDICATOR_TOP: Integer;
    class function SOUND_EFFECTS_ENABLED: Integer;
    class function STATUS_BAR_HIDDEN: Integer;
    class function STATUS_BAR_VISIBLE: Integer;
    class function SYSTEM_UI_FLAG_FULLSCREEN: Integer;
    class function SYSTEM_UI_FLAG_HIDE_NAVIGATION: Integer;
    class function SYSTEM_UI_FLAG_IMMERSIVE: Integer;
    class function SYSTEM_UI_FLAG_IMMERSIVE_STICKY: Integer;
    class function SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN: Integer;
    class function SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION: Integer;
    class function SYSTEM_UI_FLAG_LAYOUT_STABLE: Integer;
    class function SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR: Integer;
    class function SYSTEM_UI_FLAG_LIGHT_STATUS_BAR: Integer;
    class function SYSTEM_UI_FLAG_LOW_PROFILE: Integer;
    class function SYSTEM_UI_FLAG_VISIBLE: Integer;
    class function SYSTEM_UI_LAYOUT_FLAGS: Integer;
    class function TEXT_ALIGNMENT_CENTER: Integer;
    class function TEXT_ALIGNMENT_GRAVITY: Integer;
    class function TEXT_ALIGNMENT_INHERIT: Integer;
    class function TEXT_ALIGNMENT_TEXT_END: Integer;
    class function TEXT_ALIGNMENT_TEXT_START: Integer;
    class function TEXT_ALIGNMENT_VIEW_END: Integer;
    class function TEXT_ALIGNMENT_VIEW_START: Integer;
    class function TEXT_DIRECTION_ANY_RTL: Integer;
    class function TEXT_DIRECTION_FIRST_STRONG: Integer;
    class function TEXT_DIRECTION_FIRST_STRONG_LTR: Integer;
    class function TEXT_DIRECTION_FIRST_STRONG_RTL: Integer;
    class function TEXT_DIRECTION_INHERIT: Integer;
    class function TEXT_DIRECTION_LOCALE: Integer;
    class function TEXT_DIRECTION_LTR: Integer;
    class function TEXT_DIRECTION_RTL: Integer;
    class function TRANSLATION_X: JProperty;
    class function TRANSLATION_Y: JProperty;
    class function TRANSLATION_Z: JProperty;
    class function VISIBLE: Integer;
    class function X: JProperty;
    class function Y: JProperty;
    class function Z: JProperty;
    { methods }
    class function combineMeasuredStates(const AArg0: Integer; const AArg1: Integer): Integer;
    class function generateViewId: Integer;
    class function getDefaultSize(const AArg0: Integer; const AArg1: Integer): Integer;
    class function inflate(const AArg0: JContext; const AArg1: Integer; const AArg2: JViewGroup): JView;
    class function resolveSize(const AArg0: Integer; const AArg1: Integer): Integer;
    class function resolveSizeAndState(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Integer;
  end;

{ android.view.SurfaceView }

  [JavaClassSignature('android/view/SurfaceView')]
  JSurfaceView = interface(JView)
    ['{8048E62F-57DF-4EF0-A3F4-6F1852D4858B}']
    procedure draw(const AArg0: JCanvas);
    function getHolder: JSurfaceHolder;
    procedure setSecure(const AArg0: Boolean);
    procedure setVisibility(const AArg0: Integer);
    procedure setZOrderMediaOverlay(const AArg0: Boolean);
    procedure setZOrderOnTop(const AArg0: Boolean);
  end;

  [JavaClassSignature('android/view/SurfaceView')]
  TJSurfaceView = class(TJView, JSurfaceView)
  private
    { methods }
    procedure draw(const AArg0: JCanvas);
    function getHolder: JSurfaceHolder;
    procedure setSecure(const AArg0: Boolean);
    procedure setVisibility(const AArg0: Integer);
    procedure setZOrderMediaOverlay(const AArg0: Boolean);
    procedure setZOrderOnTop(const AArg0: Boolean);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSurfaceView; overload;
    class function Wrap(const AObject: IJNIObject): JSurfaceView; overload;
    { constructors }
    class function Create(const AArg0: JContext): JSurfaceView; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet): JSurfaceView; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer): JSurfaceView; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer; const AArg3: Integer): JSurfaceView; overload;
  end;

{ android.view.TextureView }

  [JavaClassSignature('android/view/TextureView')]
  JTextureView = interface(JView)
    ['{91DE3215-6D69-4E8F-811E-EC2F89BD937C}']
    procedure buildLayer;
    procedure draw(const AArg0: JCanvas);
    function getBitmap(const AArg0: Integer; const AArg1: Integer): JBitmap; overload;
    function getBitmap(const AArg0: JBitmap): JBitmap; overload;
    function getBitmap: JBitmap; overload;
    function getLayerType: Integer;
    function getSurfaceTexture: JSurfaceTexture;
    function getSurfaceTextureListener: JTextureView_SurfaceTextureListener;
    function getTransform(const AArg0: JMatrix): JMatrix;
    function isAvailable: Boolean;
    function isOpaque: Boolean;
    function lockCanvas: JCanvas; overload;
    function lockCanvas(const AArg0: JRect): JCanvas; overload;
    procedure setBackgroundDrawable(const AArg0: JDrawable);
    procedure setForeground(const AArg0: JDrawable);
    procedure setLayerPaint(const AArg0: JPaint);
    procedure setLayerType(const AArg0: Integer; const AArg1: JPaint);
    procedure setOpaque(const AArg0: Boolean);
    procedure setSurfaceTexture(const AArg0: JSurfaceTexture);
    procedure setSurfaceTextureListener(const AArg0: JTextureView_SurfaceTextureListener);
    procedure setTransform(const AArg0: JMatrix);
    procedure unlockCanvasAndPost(const AArg0: JCanvas);
  end;

  [JavaClassSignature('android/view/TextureView')]
  TJTextureView = class(TJView, JTextureView)
  private
    { methods }
    procedure buildLayer;
    procedure draw(const AArg0: JCanvas);
    function getBitmap(const AArg0: Integer; const AArg1: Integer): JBitmap; overload;
    function getBitmap(const AArg0: JBitmap): JBitmap; overload;
    function getBitmap: JBitmap; overload;
    function getLayerType: Integer;
    function getSurfaceTexture: JSurfaceTexture;
    function getSurfaceTextureListener: JTextureView_SurfaceTextureListener;
    function getTransform(const AArg0: JMatrix): JMatrix;
    function isAvailable: Boolean;
    function isOpaque: Boolean;
    function lockCanvas: JCanvas; overload;
    function lockCanvas(const AArg0: JRect): JCanvas; overload;
    procedure setBackgroundDrawable(const AArg0: JDrawable);
    procedure setForeground(const AArg0: JDrawable);
    procedure setLayerPaint(const AArg0: JPaint);
    procedure setLayerType(const AArg0: Integer; const AArg1: JPaint);
    procedure setOpaque(const AArg0: Boolean);
    procedure setSurfaceTexture(const AArg0: JSurfaceTexture);
    procedure setSurfaceTextureListener(const AArg0: JTextureView_SurfaceTextureListener);
    procedure setTransform(const AArg0: JMatrix);
    procedure unlockCanvasAndPost(const AArg0: JCanvas);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JTextureView; overload;
    class function Wrap(const AObject: IJNIObject): JTextureView; overload;
    { constructors }
    class function Create(const AArg0: JContext): JTextureView; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet): JTextureView; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer): JTextureView; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer; const AArg3: Integer): JTextureView; overload;
  end;

{ android.view.ViewGroup }

  [JavaClassSignature('android/view/ViewGroup')]
  JViewGroup = interface(JView)
    ['{250FCA92-0AB7-4B3E-820D-093C7C62F7D9}']
    procedure addChildrenForAccessibility(const AArg0: JArrayList);
    procedure addFocusables(const AArg0: JArrayList; const AArg1: Integer; const AArg2: Integer); overload;
    procedure addKeyboardNavigationClusters(const AArg0: JCollection; const AArg1: Integer);
    function addStatesFromChildren: Boolean;
    procedure addTouchables(const AArg0: JArrayList);
    procedure addView(const AArg0: JView; const AArg1: Integer); overload;
    procedure addView(const AArg0: JView); overload;
    procedure addView(const AArg0: JView; const AArg1: Integer; const AArg2: JViewGroup_LayoutParams); overload;
    procedure addView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams); overload;
    procedure addView(const AArg0: JView; const AArg1: Integer; const AArg2: Integer); overload;
    procedure bringChildToFront(const AArg0: JView);
    procedure childDrawableStateChanged(const AArg0: JView);
    procedure childHasTransientStateChanged(const AArg0: JView; const AArg1: Boolean);
    procedure clearChildFocus(const AArg0: JView);
    procedure clearDisappearingChildren;
    procedure clearFocus;
    function dispatchCapturedPointerEvent(const AArg0: JMotionEvent): Boolean;
    procedure dispatchConfigurationChanged(const AArg0: JConfiguration);
    procedure dispatchDisplayHint(const AArg0: Integer);
    function dispatchDragEvent(const AArg0: JDragEvent): Boolean;
    procedure dispatchDrawableHotspotChanged(const AArg0: Single; const AArg1: Single);
    procedure dispatchFinishTemporaryDetach;
    function dispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyEventPreIme(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
    procedure dispatchPointerCaptureChanged(const AArg0: Boolean);
    procedure dispatchSetActivated(const AArg0: Boolean);
    procedure dispatchSetSelected(const AArg0: Boolean);
    procedure dispatchStartTemporaryDetach;
    procedure dispatchSystemUiVisibilityChanged(const AArg0: Integer);
    function dispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchUnhandledMove(const AArg0: JView; const AArg1: Integer): Boolean;
    procedure dispatchWindowFocusChanged(const AArg0: Boolean);
    procedure dispatchWindowSystemUiVisiblityChanged(const AArg0: Integer);
    procedure dispatchWindowVisibilityChanged(const AArg0: Integer);
    procedure endViewTransition(const AArg0: JView);
    function findFocus: JView;
    procedure findViewsWithText(const AArg0: JArrayList; const AArg1: JCharSequence; const AArg2: Integer);
    function focusSearch(const AArg0: JView; const AArg1: Integer): JView; overload;
    procedure focusableViewAvailable(const AArg0: JView);
    function generateLayoutParams(const AArg0: JAttributeSet): JViewGroup_LayoutParams;
    function getAccessibilityClassName: JCharSequence;
    function getChildAt(const AArg0: Integer): JView;
    function getChildCount: Integer;
    function getChildVisibleRect(const AArg0: JView; const AArg1: JRect; const AArg2: JPoint): Boolean;
    function getClipChildren: Boolean;
    function getClipToPadding: Boolean;
    function getDescendantFocusability: Integer;
    function getFocusedChild: JView;
    function getLayoutAnimationListener: JObject {JAnimation_AnimationListener};
    function getLayoutMode: Integer;
    function getNestedScrollAxes: Integer;
    function getPersistentDrawingCache: Integer; deprecated 'Deprecated in 28';
    function getTouchscreenBlocksFocus: Boolean;
    function hasFocus: Boolean;
    function hasTransientState: Boolean;
    function indexOfChild(const AArg0: JView): Integer;
    procedure invalidateChild(const AArg0: JView; const AArg1: JRect);
    function invalidateChildInParent(const AArg0: IJavaArray<Integer>; const AArg1: JRect): JViewParent;
    function isAlwaysDrawnWithCacheEnabled: Boolean; deprecated 'Deprecated in 23';
    function isAnimationCacheEnabled: Boolean; deprecated 'Deprecated in 23';
    function isMotionEventSplittingEnabled: Boolean;
    function isTransitionGroup: Boolean;
    procedure jumpDrawablesToCurrentState;
    procedure layout(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure notifySubtreeAccessibilityStateChanged(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
    procedure offsetDescendantRectToMyCoords(const AArg0: JView; const AArg1: JRect);
    procedure offsetRectIntoDescendantCoords(const AArg0: JView; const AArg1: JRect);
    procedure onDescendantInvalidated(const AArg0: JView; const AArg1: JView);
    function onInterceptHoverEvent(const AArg0: JMotionEvent): Boolean;
    function onInterceptTouchEvent(const AArg0: JMotionEvent): Boolean;
    function onNestedFling(const AArg0: JView; const AArg1: Single; const AArg2: Single; const AArg3: Boolean): Boolean;
    function onNestedPreFling(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean;
    function onNestedPrePerformAccessibilityAction(const AArg0: JView; const AArg1: Integer; const AArg2: JBundle): Boolean;
    procedure onNestedPreScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Integer>);
    procedure onNestedScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
    procedure onNestedScrollAccepted(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
    function onStartNestedScroll(const AArg0: JView; const AArg1: JView; const AArg2: Integer): Boolean;
    procedure onStopNestedScroll(const AArg0: JView);
    procedure onViewAdded(const AArg0: JView); // Introduced in 23';
    procedure onViewRemoved(const AArg0: JView); // Introduced in 23';
    procedure recomputeViewAttributes(const AArg0: JView);
    procedure removeAllViews;
    procedure removeAllViewsInLayout;
    procedure removeView(const AArg0: JView);
    procedure removeViewAt(const AArg0: Integer);
    procedure removeViewInLayout(const AArg0: JView);
    procedure removeViews(const AArg0: Integer; const AArg1: Integer);
    procedure removeViewsInLayout(const AArg0: Integer; const AArg1: Integer);
    procedure requestChildFocus(const AArg0: JView; const AArg1: JView);
    function requestChildRectangleOnScreen(const AArg0: JView; const AArg1: JRect; const AArg2: Boolean): Boolean;
    procedure requestDisallowInterceptTouchEvent(const AArg0: Boolean);
    function requestFocus(const AArg0: Integer; const AArg1: JRect): Boolean; overload;
    procedure requestTransparentRegion(const AArg0: JView);
    function restoreDefaultFocus: Boolean;
    procedure scheduleLayoutAnimation;
    procedure setAddStatesFromChildren(const AArg0: Boolean);
    procedure setAlwaysDrawnWithCacheEnabled(const AArg0: Boolean); deprecated 'Deprecated in 23';
    procedure setAnimationCacheEnabled(const AArg0: Boolean); deprecated 'Deprecated in 23';
    procedure setClipChildren(const AArg0: Boolean);
    procedure setClipToPadding(const AArg0: Boolean);
    procedure setDescendantFocusability(const AArg0: Integer);
    procedure setLayoutAnimationListener(const AArg0: JObject {JAnimation_AnimationListener});
    procedure setLayoutMode(const AArg0: Integer);
    procedure setMotionEventSplittingEnabled(const AArg0: Boolean);
    procedure setPersistentDrawingCache(const AArg0: Integer); deprecated 'Deprecated in 28';
    procedure setTouchscreenBlocksFocus(const AArg0: Boolean);
    procedure setTransitionGroup(const AArg0: Boolean);
    function shouldDelayChildPressedState: Boolean;
    function showContextMenuForChild(const AArg0: JView): Boolean; overload;
    function showContextMenuForChild(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean; overload;
    procedure startLayoutAnimation;
    procedure startViewTransition(const AArg0: JView);
    procedure updateViewLayout(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
  end;

  [JavaClassSignature('android/view/ViewGroup')]
  TJViewGroup = class(TJView, JViewGroup)
  private
    { methods }
    procedure addChildrenForAccessibility(const AArg0: JArrayList);
    procedure addFocusables(const AArg0: JArrayList; const AArg1: Integer; const AArg2: Integer); overload;
    procedure addKeyboardNavigationClusters(const AArg0: JCollection; const AArg1: Integer);
    function addStatesFromChildren: Boolean;
    procedure addTouchables(const AArg0: JArrayList);
    procedure addView(const AArg0: JView; const AArg1: Integer); overload;
    procedure addView(const AArg0: JView); overload;
    procedure addView(const AArg0: JView; const AArg1: Integer; const AArg2: JViewGroup_LayoutParams); overload;
    procedure addView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams); overload;
    procedure addView(const AArg0: JView; const AArg1: Integer; const AArg2: Integer); overload;
    procedure bringChildToFront(const AArg0: JView);
    procedure childDrawableStateChanged(const AArg0: JView);
    procedure childHasTransientStateChanged(const AArg0: JView; const AArg1: Boolean);
    procedure clearChildFocus(const AArg0: JView);
    procedure clearDisappearingChildren;
    procedure clearFocus;
    function dispatchCapturedPointerEvent(const AArg0: JMotionEvent): Boolean;
    procedure dispatchConfigurationChanged(const AArg0: JConfiguration);
    procedure dispatchDisplayHint(const AArg0: Integer);
    function dispatchDragEvent(const AArg0: JDragEvent): Boolean;
    procedure dispatchDrawableHotspotChanged(const AArg0: Single; const AArg1: Single);
    procedure dispatchFinishTemporaryDetach;
    function dispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyEventPreIme(const AArg0: JKeyEvent): Boolean;
    function dispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
    procedure dispatchPointerCaptureChanged(const AArg0: Boolean);
    procedure dispatchSetActivated(const AArg0: Boolean);
    procedure dispatchSetSelected(const AArg0: Boolean);
    procedure dispatchStartTemporaryDetach;
    procedure dispatchSystemUiVisibilityChanged(const AArg0: Integer);
    function dispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
    function dispatchUnhandledMove(const AArg0: JView; const AArg1: Integer): Boolean;
    procedure dispatchWindowFocusChanged(const AArg0: Boolean);
    procedure dispatchWindowSystemUiVisiblityChanged(const AArg0: Integer);
    procedure dispatchWindowVisibilityChanged(const AArg0: Integer);
    procedure endViewTransition(const AArg0: JView);
    function findFocus: JView;
    procedure findViewsWithText(const AArg0: JArrayList; const AArg1: JCharSequence; const AArg2: Integer);
    function focusSearch(const AArg0: JView; const AArg1: Integer): JView; overload;
    procedure focusableViewAvailable(const AArg0: JView);
    function generateLayoutParams(const AArg0: JAttributeSet): JViewGroup_LayoutParams;
    function getAccessibilityClassName: JCharSequence;
    function getChildAt(const AArg0: Integer): JView;
    function getChildCount: Integer;
    function getChildVisibleRect(const AArg0: JView; const AArg1: JRect; const AArg2: JPoint): Boolean;
    function getClipChildren: Boolean;
    function getClipToPadding: Boolean;
    function getDescendantFocusability: Integer;
    function getFocusedChild: JView;
    function getLayoutAnimationListener: JObject {JAnimation_AnimationListener};
    function getLayoutMode: Integer;
    function getNestedScrollAxes: Integer;
    function getPersistentDrawingCache: Integer; deprecated 'Deprecated in 28';
    function getTouchscreenBlocksFocus: Boolean;
    function hasFocus: Boolean;
    function hasTransientState: Boolean;
    function indexOfChild(const AArg0: JView): Integer;
    procedure invalidateChild(const AArg0: JView; const AArg1: JRect);
    function invalidateChildInParent(const AArg0: IJavaArray<Integer>; const AArg1: JRect): JViewParent;
    function isAlwaysDrawnWithCacheEnabled: Boolean; deprecated 'Deprecated in 23';
    function isAnimationCacheEnabled: Boolean; deprecated 'Deprecated in 23';
    function isMotionEventSplittingEnabled: Boolean;
    function isTransitionGroup: Boolean;
    procedure jumpDrawablesToCurrentState;
    procedure layout(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    procedure notifySubtreeAccessibilityStateChanged(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
    procedure offsetDescendantRectToMyCoords(const AArg0: JView; const AArg1: JRect);
    procedure offsetRectIntoDescendantCoords(const AArg0: JView; const AArg1: JRect);
    procedure onDescendantInvalidated(const AArg0: JView; const AArg1: JView);
    function onInterceptHoverEvent(const AArg0: JMotionEvent): Boolean;
    function onInterceptTouchEvent(const AArg0: JMotionEvent): Boolean;
    function onNestedFling(const AArg0: JView; const AArg1: Single; const AArg2: Single; const AArg3: Boolean): Boolean;
    function onNestedPreFling(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean;
    function onNestedPrePerformAccessibilityAction(const AArg0: JView; const AArg1: Integer; const AArg2: JBundle): Boolean;
    procedure onNestedPreScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Integer>);
    procedure onNestedScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
    procedure onNestedScrollAccepted(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
    function onStartNestedScroll(const AArg0: JView; const AArg1: JView; const AArg2: Integer): Boolean;
    procedure onStopNestedScroll(const AArg0: JView);
    procedure onViewAdded(const AArg0: JView); // Introduced in 23';
    procedure onViewRemoved(const AArg0: JView); // Introduced in 23';
    procedure recomputeViewAttributes(const AArg0: JView);
    procedure removeAllViews;
    procedure removeAllViewsInLayout;
    procedure removeView(const AArg0: JView);
    procedure removeViewAt(const AArg0: Integer);
    procedure removeViewInLayout(const AArg0: JView);
    procedure removeViews(const AArg0: Integer; const AArg1: Integer);
    procedure removeViewsInLayout(const AArg0: Integer; const AArg1: Integer);
    procedure requestChildFocus(const AArg0: JView; const AArg1: JView);
    function requestChildRectangleOnScreen(const AArg0: JView; const AArg1: JRect; const AArg2: Boolean): Boolean;
    procedure requestDisallowInterceptTouchEvent(const AArg0: Boolean);
    function requestFocus(const AArg0: Integer; const AArg1: JRect): Boolean; overload;
    procedure requestTransparentRegion(const AArg0: JView);
    function restoreDefaultFocus: Boolean;
    procedure scheduleLayoutAnimation;
    procedure setAddStatesFromChildren(const AArg0: Boolean);
    procedure setAlwaysDrawnWithCacheEnabled(const AArg0: Boolean); deprecated 'Deprecated in 23';
    procedure setAnimationCacheEnabled(const AArg0: Boolean); deprecated 'Deprecated in 23';
    procedure setClipChildren(const AArg0: Boolean);
    procedure setClipToPadding(const AArg0: Boolean);
    procedure setDescendantFocusability(const AArg0: Integer);
    procedure setLayoutAnimationListener(const AArg0: JObject {JAnimation_AnimationListener});
    procedure setLayoutMode(const AArg0: Integer);
    procedure setMotionEventSplittingEnabled(const AArg0: Boolean);
    procedure setPersistentDrawingCache(const AArg0: Integer); deprecated 'Deprecated in 28';
    procedure setTouchscreenBlocksFocus(const AArg0: Boolean);
    procedure setTransitionGroup(const AArg0: Boolean);
    function shouldDelayChildPressedState: Boolean;
    function showContextMenuForChild(const AArg0: JView): Boolean; overload;
    function showContextMenuForChild(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean; overload;
    procedure startLayoutAnimation;
    procedure startViewTransition(const AArg0: JView);
    procedure updateViewLayout(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JViewGroup; overload;
    class function Wrap(const AObject: IJNIObject): JViewGroup; overload;
    { constructors }
    class function Create(const AArg0: JContext): JViewGroup; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet): JViewGroup; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer): JViewGroup; overload;
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer; const AArg3: Integer): JViewGroup; overload;
    { constants }
    class function FOCUS_AFTER_DESCENDANTS: Integer;
    class function FOCUS_BEFORE_DESCENDANTS: Integer;
    class function FOCUS_BLOCK_DESCENDANTS: Integer;
    class function LAYOUT_MODE_CLIP_BOUNDS: Integer;
    class function LAYOUT_MODE_OPTICAL_BOUNDS: Integer;
    class function PERSISTENT_ALL_CACHES: Integer;
    class function PERSISTENT_ANIMATION_CACHE: Integer;
    class function PERSISTENT_NO_CACHE: Integer;
    class function PERSISTENT_SCROLLING_CACHE: Integer;
    { methods }
    class function getChildMeasureSpec(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Integer;
  end;

{ android.view.View_DragShadowBuilder }

  [JavaClassSignature('android/view/View$DragShadowBuilder')]
  JView_DragShadowBuilder = interface(JObject)
    ['{8C5050F9-61D4-4A38-A889-E139F66890F7}']
    function getView: JView;
    procedure onDrawShadow(const AArg0: JCanvas);
    procedure onProvideShadowMetrics(const AArg0: JPoint; const AArg1: JPoint);
  end;

  [JavaClassSignature('android/view/View$DragShadowBuilder')]
  TJView_DragShadowBuilder = class(TJObject, JView_DragShadowBuilder)
  private
    { methods }
    function getView: JView;
    procedure onDrawShadow(const AArg0: JCanvas);
    procedure onProvideShadowMetrics(const AArg0: JPoint; const AArg1: JPoint);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView_DragShadowBuilder; overload;
    class function Wrap(const AObject: IJNIObject): JView_DragShadowBuilder; overload;
    { constructors }
    class function Create(const AArg0: JView): JView_DragShadowBuilder; overload;
    class function Create: JView_DragShadowBuilder; overload;
  end;

{ android.view.View_MeasureSpec }

  [JavaClassSignature('android/view/View$MeasureSpec')]
  JView_MeasureSpec = interface(JObject)
    ['{E6C07682-A930-492A-BF3E-0739A16D2831}']
  end;

  [JavaClassSignature('android/view/View$MeasureSpec')]
  TJView_MeasureSpec = class(TJObject, JView_MeasureSpec)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView_MeasureSpec; overload;
    class function Wrap(const AObject: IJNIObject): JView_MeasureSpec; overload;
    { constructors }
    class function Create: JView_MeasureSpec; overload;
    { constants }
    class function AT_MOST: Integer;
    class function EXACTLY: Integer;
    class function UNSPECIFIED: Integer;
    { methods }
    class function getMode(const AArg0: Integer): Integer;
    class function getSize(const AArg0: Integer): Integer;
    class function makeMeasureSpec(const AArg0: Integer; const AArg1: Integer): Integer;
    class function toString(const AArg0: Integer): JString; reintroduce; overload;
  end;

{ android.view.View_OnClickListener - interface }

  [JavaClassSignature('android/view/View$OnClickListener')]
  JView_OnClickListener = interface(IJavaObject)
    ['{B28D4386-17C8-4B03-8979-4EECC94A3F20}']
    procedure onClick(const AArg0: JView);
  end;

  [JavaClassSignature('android/view/View$OnClickListener')]
  TJView_OnClickListener = class(TJObject, JView_OnClickListener)
  private
    { methods }
    procedure onClick(const AArg0: JView);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView_OnClickListener; overload;
    class function Wrap(const AObject: IJNIObject): JView_OnClickListener; overload;
  end;

{ android.view.View_OnDragListener - interface }

  [JavaClassSignature('android/view/View$OnDragListener')]
  JView_OnDragListener = interface(IJavaObject)
    ['{83E9978D-A486-4502-8A6C-B3240DFB8C01}']
    function onDrag(const AArg0: JView; const AArg1: JDragEvent): Boolean;
  end;

  [JavaClassSignature('android/view/View$OnDragListener')]
  TJView_OnDragListener = class(TJObject, JView_OnDragListener)
  private
    { methods }
    function onDrag(const AArg0: JView; const AArg1: JDragEvent): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView_OnDragListener; overload;
    class function Wrap(const AObject: IJNIObject): JView_OnDragListener; overload;
  end;

{ android.view.View_OnFocusChangeListener - interface }

  [JavaClassSignature('android/view/View$OnFocusChangeListener')]
  JView_OnFocusChangeListener = interface(IJavaObject)
    ['{F31CEFBD-CDBD-4E53-9D00-32B31B57487B}']
    procedure onFocusChange(const AArg0: JView; const AArg1: Boolean);
  end;

  [JavaClassSignature('android/view/View$OnFocusChangeListener')]
  TJView_OnFocusChangeListener = class(TJObject, JView_OnFocusChangeListener)
  private
    { methods }
    procedure onFocusChange(const AArg0: JView; const AArg1: Boolean);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView_OnFocusChangeListener; overload;
    class function Wrap(const AObject: IJNIObject): JView_OnFocusChangeListener; overload;
  end;

{ android.view.View_OnKeyListener - interface }

  [JavaClassSignature('android/view/View$OnKeyListener')]
  JView_OnKeyListener = interface(IJavaObject)
    ['{A9A1AFE7-1FEE-447B-A11D-F2DCAC5F0CC3}']
    function onKey(const AArg0: JView; const AArg1: Integer; const AArg2: JKeyEvent): Boolean;
  end;

  [JavaClassSignature('android/view/View$OnKeyListener')]
  TJView_OnKeyListener = class(TJObject, JView_OnKeyListener)
  private
    { methods }
    function onKey(const AArg0: JView; const AArg1: Integer; const AArg2: JKeyEvent): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView_OnKeyListener; overload;
    class function Wrap(const AObject: IJNIObject): JView_OnKeyListener; overload;
  end;

{ android.view.View_OnLayoutChangeListener - interface }

  [JavaClassSignature('android/view/View$OnLayoutChangeListener')]
  JView_OnLayoutChangeListener = interface(IJavaObject)
    ['{2F2AD4C4-423B-4A1A-BC23-DDF198DBA4D0}']
    procedure onLayoutChange(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Integer; const AArg8: Integer);
  end;

  [JavaClassSignature('android/view/View$OnLayoutChangeListener')]
  TJView_OnLayoutChangeListener = class(TJObject, JView_OnLayoutChangeListener)
  private
    { methods }
    procedure onLayoutChange(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Integer; const AArg8: Integer);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView_OnLayoutChangeListener; overload;
    class function Wrap(const AObject: IJNIObject): JView_OnLayoutChangeListener; overload;
  end;

{ android.view.View_OnLongClickListener - interface }

  [JavaClassSignature('android/view/View$OnLongClickListener')]
  JView_OnLongClickListener = interface(IJavaObject)
    ['{696ACA74-1825-4A60-A3CB-B1330867A2E0}']
    function onLongClick(const AArg0: JView): Boolean;
  end;

  [JavaClassSignature('android/view/View$OnLongClickListener')]
  TJView_OnLongClickListener = class(TJObject, JView_OnLongClickListener)
  private
    { methods }
    function onLongClick(const AArg0: JView): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView_OnLongClickListener; overload;
    class function Wrap(const AObject: IJNIObject): JView_OnLongClickListener; overload;
  end;

{ android.view.View_OnTouchListener - interface }

  [JavaClassSignature('android/view/View$OnTouchListener')]
  JView_OnTouchListener = interface(IJavaObject)
    ['{04AEC963-6A98-42E0-BE2E-8C238A9E62CA}']
    function onTouch(const AArg0: JView; const AArg1: JMotionEvent): Boolean;
  end;

  [JavaClassSignature('android/view/View$OnTouchListener')]
  TJView_OnTouchListener = class(TJObject, JView_OnTouchListener)
  private
    { methods }
    function onTouch(const AArg0: JView; const AArg1: JMotionEvent): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JView_OnTouchListener; overload;
    class function Wrap(const AObject: IJNIObject): JView_OnTouchListener; overload;
  end;

{ android.view.ViewGroup_LayoutParams }

  [JavaClassSignature('android/view/ViewGroup$LayoutParams')]
  JViewGroup_LayoutParams = interface(JObject)
    ['{D848FDAC-72C1-4610-9E41-D93A59AFB60F}']
    function _GetHeight: Integer;
    procedure _SetHeight(const AValue: Integer);
    function _GetWidth: Integer;
    procedure _SetWidth(const AValue: Integer);
    procedure resolveLayoutDirection(const AArg0: Integer);
    { constants }
    property height: Integer read _GetHeight write _SetHeight;
    property width: Integer read _GetWidth write _SetWidth;
  end;

  [JavaClassSignature('android/view/ViewGroup$LayoutParams')]
  TJViewGroup_LayoutParams = class(TJObject, JViewGroup_LayoutParams)
  private
    function _GetHeight: Integer;
    procedure _SetHeight(const AValue: Integer);
    function _GetWidth: Integer;
    procedure _SetWidth(const AValue: Integer);
  private
    { methods }
    procedure resolveLayoutDirection(const AArg0: Integer);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JViewGroup_LayoutParams; overload;
    class function Wrap(const AObject: IJNIObject): JViewGroup_LayoutParams; overload;
    { constructors }
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet): JViewGroup_LayoutParams; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer): JViewGroup_LayoutParams; overload;
    class function Create(const AArg0: JViewGroup_LayoutParams): JViewGroup_LayoutParams; overload;
    { constants }
    class function FILL_PARENT: Integer;
    class function MATCH_PARENT: Integer;
    class function WRAP_CONTENT: Integer;
  end;

{ android.view.ViewGroup_MarginLayoutParams }

  [JavaClassSignature('android/view/ViewGroup$MarginLayoutParams')]
  JViewGroup_MarginLayoutParams = interface(JViewGroup_LayoutParams)
    ['{50B550DC-361A-46F4-A3A7-008F3EF0187D}']
    function _GetBottomMargin: Integer;
    procedure _SetBottomMargin(const AValue: Integer);
    function _GetLeftMargin: Integer;
    procedure _SetLeftMargin(const AValue: Integer);
    function _GetRightMargin: Integer;
    procedure _SetRightMargin(const AValue: Integer);
    function _GetTopMargin: Integer;
    procedure _SetTopMargin(const AValue: Integer);
    function getLayoutDirection: Integer;
    function getMarginEnd: Integer;
    function getMarginStart: Integer;
    function isMarginRelative: Boolean;
    procedure resolveLayoutDirection(const AArg0: Integer);
    procedure setLayoutDirection(const AArg0: Integer);
    procedure setMarginEnd(const AArg0: Integer);
    procedure setMarginStart(const AArg0: Integer);
    procedure setMargins(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
    { constants }
    property bottomMargin: Integer read _GetBottomMargin write _SetBottomMargin;
    property leftMargin: Integer read _GetLeftMargin write _SetLeftMargin;
    property rightMargin: Integer read _GetRightMargin write _SetRightMargin;
    property topMargin: Integer read _GetTopMargin write _SetTopMargin;
  end;

  [JavaClassSignature('android/view/ViewGroup$MarginLayoutParams')]
  TJViewGroup_MarginLayoutParams = class(TJViewGroup_LayoutParams, JViewGroup_MarginLayoutParams)
  private
    function _GetBottomMargin: Integer;
    procedure _SetBottomMargin(const AValue: Integer);
    function _GetLeftMargin: Integer;
    procedure _SetLeftMargin(const AValue: Integer);
    function _GetRightMargin: Integer;
    procedure _SetRightMargin(const AValue: Integer);
    function _GetTopMargin: Integer;
    procedure _SetTopMargin(const AValue: Integer);
  private
    { methods }
    function getLayoutDirection: Integer;
    function getMarginEnd: Integer;
    function getMarginStart: Integer;
    function isMarginRelative: Boolean;
    procedure resolveLayoutDirection(const AArg0: Integer);
    procedure setLayoutDirection(const AArg0: Integer);
    procedure setMarginEnd(const AArg0: Integer);
    procedure setMarginStart(const AArg0: Integer);
    procedure setMargins(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JViewGroup_MarginLayoutParams; overload;
    class function Wrap(const AObject: IJNIObject): JViewGroup_MarginLayoutParams; overload;
    { constructors }
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet): JViewGroup_MarginLayoutParams; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer): JViewGroup_MarginLayoutParams; overload;
    class function Create(const AArg0: JViewGroup_MarginLayoutParams): JViewGroup_MarginLayoutParams; overload;
    class function Create(const AArg0: JViewGroup_LayoutParams): JViewGroup_MarginLayoutParams; overload;
  end;

{ android.app.ActionBar_LayoutParams }

  [JavaClassSignature('android/app/ActionBar$LayoutParams')]
  JActionBar_LayoutParams = interface(JViewGroup_MarginLayoutParams)
    ['{6250BF92-F97F-47F4-93FB-C04B7284A9D8}']
    function _GetGravity: Integer;
    procedure _SetGravity(const AValue: Integer);
    { constants }
    property gravity: Integer read _GetGravity write _SetGravity;
  end;

  [JavaClassSignature('android/app/ActionBar$LayoutParams')]
  TJActionBar_LayoutParams = class(TJViewGroup_MarginLayoutParams, JActionBar_LayoutParams)
  private
    function _GetGravity: Integer;
    procedure _SetGravity(const AValue: Integer);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JActionBar_LayoutParams; overload;
    class function Wrap(const AObject: IJNIObject): JActionBar_LayoutParams; overload;
    { constructors }
    class function Create(const AArg0: JContext; const AArg1: JAttributeSet): JActionBar_LayoutParams; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer): JActionBar_LayoutParams; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): JActionBar_LayoutParams; overload;
    class function Create(const AArg0: Integer): JActionBar_LayoutParams; overload;
    class function Create(const AArg0: JActionBar_LayoutParams): JActionBar_LayoutParams; overload;
    class function Create(const AArg0: JViewGroup_LayoutParams): JActionBar_LayoutParams; overload;
  end;

{ android.view.WindowManager_LayoutParams }

  [JavaClassSignature('android/view/WindowManager$LayoutParams')]
  JWindowManager_LayoutParams = interface(JViewGroup_LayoutParams)
    ['{23919811-1320-4A5A-9AD6-D080F74A27AC}']
    function _GetAlpha: Single;
    procedure _SetAlpha(const AValue: Single);
    function _GetButtonBrightness: Single;
    procedure _SetButtonBrightness(const AValue: Single);
    function _GetDimAmount: Single;
    procedure _SetDimAmount(const AValue: Single);
    function _GetFlags: Integer;
    procedure _SetFlags(const AValue: Integer);
    function _GetFormat: Integer;
    procedure _SetFormat(const AValue: Integer);
    function _GetGravity: Integer;
    procedure _SetGravity(const AValue: Integer);
    function _GetHorizontalMargin: Single;
    procedure _SetHorizontalMargin(const AValue: Single);
    function _GetHorizontalWeight: Single;
    procedure _SetHorizontalWeight(const AValue: Single);
    function _GetLayoutInDisplayCutoutMode: Integer;
    procedure _SetLayoutInDisplayCutoutMode(const AValue: Integer);
    function _GetMemoryType: Integer;
    procedure _SetMemoryType(const AValue: Integer);
    function _GetPackageName: JString;
    procedure _SetPackageName(const AValue: JString);
    function _GetPreferredDisplayModeId: Integer;
    procedure _SetPreferredDisplayModeId(const AValue: Integer);
    function _GetPreferredRefreshRate: Single;
    procedure _SetPreferredRefreshRate(const AValue: Single);
    function _GetRotationAnimation: Integer;
    procedure _SetRotationAnimation(const AValue: Integer);
    function _GetScreenBrightness: Single;
    procedure _SetScreenBrightness(const AValue: Single);
    function _GetScreenOrientation: Integer;
    procedure _SetScreenOrientation(const AValue: Integer);
    function _GetSoftInputMode: Integer;
    procedure _SetSoftInputMode(const AValue: Integer);
    function _GetSystemUiVisibility: Integer;
    procedure _SetSystemUiVisibility(const AValue: Integer);
    function _GetToken: JIBinder;
    procedure _SetToken(const AValue: JIBinder);
    function _GetType: Integer;
    procedure _SetType(const AValue: Integer);
    function _GetVerticalMargin: Single;
    procedure _SetVerticalMargin(const AValue: Single);
    function _GetVerticalWeight: Single;
    procedure _SetVerticalWeight(const AValue: Single);
    function _GetWindowAnimations: Integer;
    procedure _SetWindowAnimations(const AValue: Integer);
    function _GetX: Integer;
    procedure _SetX(const AValue: Integer);
    function _GetY: Integer;
    procedure _SetY(const AValue: Integer);
    function copyFrom(const AArg0: JWindowManager_LayoutParams): Integer;
    function debug(const AArg0: JString): JString;
    function describeContents: Integer;
    function getColorMode: Integer; // Introduced in 26';
    function getTitle: JCharSequence;
    procedure setColorMode(const AArg0: Integer); // Introduced in 26';
    procedure setTitle(const AArg0: JCharSequence);
    function toString: JString;
    { constants }
    property alpha: Single read _GetAlpha write _SetAlpha;
    property buttonBrightness: Single read _GetButtonBrightness write _SetButtonBrightness;
    property dimAmount: Single read _GetDimAmount write _SetDimAmount;
    property flags: Integer read _GetFlags write _SetFlags;
    property format: Integer read _GetFormat write _SetFormat;
    property gravity: Integer read _GetGravity write _SetGravity;
    property horizontalMargin: Single read _GetHorizontalMargin write _SetHorizontalMargin;
    property horizontalWeight: Single read _GetHorizontalWeight write _SetHorizontalWeight;
    property layoutInDisplayCutoutMode: Integer read _GetLayoutInDisplayCutoutMode write _SetLayoutInDisplayCutoutMode;
    property memoryType: Integer read _GetMemoryType write _SetMemoryType;
    property packageName: JString read _GetPackageName write _SetPackageName;
    property preferredDisplayModeId: Integer read _GetPreferredDisplayModeId write _SetPreferredDisplayModeId;
    property preferredRefreshRate: Single read _GetPreferredRefreshRate write _SetPreferredRefreshRate;
    property rotationAnimation: Integer read _GetRotationAnimation write _SetRotationAnimation;
    property screenBrightness: Single read _GetScreenBrightness write _SetScreenBrightness;
    property screenOrientation: Integer read _GetScreenOrientation write _SetScreenOrientation;
    property softInputMode: Integer read _GetSoftInputMode write _SetSoftInputMode;
    property systemUiVisibility: Integer read _GetSystemUiVisibility write _SetSystemUiVisibility;
    property token: JIBinder read _GetToken write _SetToken;
    property &type: Integer read _GetType write _SetType;
    property verticalMargin: Single read _GetVerticalMargin write _SetVerticalMargin;
    property verticalWeight: Single read _GetVerticalWeight write _SetVerticalWeight;
    property windowAnimations: Integer read _GetWindowAnimations write _SetWindowAnimations;
    property x: Integer read _GetX write _SetX;
    property y: Integer read _GetY write _SetY;
  end;

  [JavaClassSignature('android/view/WindowManager$LayoutParams')]
  TJWindowManager_LayoutParams = class(TJViewGroup_LayoutParams, JWindowManager_LayoutParams)
  private
    function _GetAlpha: Single;
    procedure _SetAlpha(const AValue: Single);
    function _GetButtonBrightness: Single;
    procedure _SetButtonBrightness(const AValue: Single);
    function _GetDimAmount: Single;
    procedure _SetDimAmount(const AValue: Single);
    function _GetFlags: Integer;
    procedure _SetFlags(const AValue: Integer);
    function _GetFormat: Integer;
    procedure _SetFormat(const AValue: Integer);
    function _GetGravity: Integer;
    procedure _SetGravity(const AValue: Integer);
    function _GetHorizontalMargin: Single;
    procedure _SetHorizontalMargin(const AValue: Single);
    function _GetHorizontalWeight: Single;
    procedure _SetHorizontalWeight(const AValue: Single);
    function _GetLayoutInDisplayCutoutMode: Integer;
    procedure _SetLayoutInDisplayCutoutMode(const AValue: Integer);
    function _GetMemoryType: Integer;
    procedure _SetMemoryType(const AValue: Integer);
    function _GetPackageName: JString;
    procedure _SetPackageName(const AValue: JString);
    function _GetPreferredDisplayModeId: Integer;
    procedure _SetPreferredDisplayModeId(const AValue: Integer);
    function _GetPreferredRefreshRate: Single;
    procedure _SetPreferredRefreshRate(const AValue: Single);
    function _GetRotationAnimation: Integer;
    procedure _SetRotationAnimation(const AValue: Integer);
    function _GetScreenBrightness: Single;
    procedure _SetScreenBrightness(const AValue: Single);
    function _GetScreenOrientation: Integer;
    procedure _SetScreenOrientation(const AValue: Integer);
    function _GetSoftInputMode: Integer;
    procedure _SetSoftInputMode(const AValue: Integer);
    function _GetSystemUiVisibility: Integer;
    procedure _SetSystemUiVisibility(const AValue: Integer);
    function _GetToken: JIBinder;
    procedure _SetToken(const AValue: JIBinder);
    function _GetType: Integer;
    procedure _SetType(const AValue: Integer);
    function _GetVerticalMargin: Single;
    procedure _SetVerticalMargin(const AValue: Single);
    function _GetVerticalWeight: Single;
    procedure _SetVerticalWeight(const AValue: Single);
    function _GetWindowAnimations: Integer;
    procedure _SetWindowAnimations(const AValue: Integer);
    function _GetX: Integer;
    procedure _SetX(const AValue: Integer);
    function _GetY: Integer;
    procedure _SetY(const AValue: Integer);
  private
    { methods }
    function copyFrom(const AArg0: JWindowManager_LayoutParams): Integer;
    function debug(const AArg0: JString): JString;
    function describeContents: Integer;
    function getColorMode: Integer; // Introduced in 26';
    function getTitle: JCharSequence;
    procedure setColorMode(const AArg0: Integer); // Introduced in 26';
    procedure setTitle(const AArg0: JCharSequence);
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JWindowManager_LayoutParams; overload;
    class function Wrap(const AObject: IJNIObject): JWindowManager_LayoutParams; overload;
    { constructors }
    class function Create: JWindowManager_LayoutParams; overload;
    class function Create(const AArg0: Integer): JWindowManager_LayoutParams; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer): JWindowManager_LayoutParams; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): JWindowManager_LayoutParams; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer): JWindowManager_LayoutParams; overload;
    class function Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer): JWindowManager_LayoutParams; overload;
    { constants }
    class function ALPHA_CHANGED: Integer;
    class function ANIMATION_CHANGED: Integer;
    class function BRIGHTNESS_OVERRIDE_FULL: Single;
    class function BRIGHTNESS_OVERRIDE_NONE: Single;
    class function BRIGHTNESS_OVERRIDE_OFF: Single;
    class function DIM_AMOUNT_CHANGED: Integer;
    class function FIRST_APPLICATION_WINDOW: Integer;
    class function FIRST_SUB_WINDOW: Integer;
    class function FIRST_SYSTEM_WINDOW: Integer;
    class function FLAGS_CHANGED: Integer;
    class function FLAG_ALLOW_LOCK_WHILE_SCREEN_ON: Integer;
    class function FLAG_ALT_FOCUSABLE_IM: Integer;
    class function FLAG_BLUR_BEHIND: Integer;
    class function FLAG_DIM_BEHIND: Integer;
    class function FLAG_DISMISS_KEYGUARD: Integer;
    class function FLAG_DITHER: Integer;
    class function FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS: Integer;
    class function FLAG_FORCE_NOT_FULLSCREEN: Integer;
    class function FLAG_FULLSCREEN: Integer;
    class function FLAG_HARDWARE_ACCELERATED: Integer;
    class function FLAG_IGNORE_CHEEK_PRESSES: Integer;
    class function FLAG_KEEP_SCREEN_ON: Integer;
    class function FLAG_LAYOUT_ATTACHED_IN_DECOR: Integer;
    class function FLAG_LAYOUT_INSET_DECOR: Integer;
    class function FLAG_LAYOUT_IN_OVERSCAN: Integer;
    class function FLAG_LAYOUT_IN_SCREEN: Integer;
    class function FLAG_LAYOUT_NO_LIMITS: Integer;
    class function FLAG_LOCAL_FOCUS_MODE: Integer;
    class function FLAG_NOT_FOCUSABLE: Integer;
    class function FLAG_NOT_TOUCHABLE: Integer;
    class function FLAG_NOT_TOUCH_MODAL: Integer;
    class function FLAG_SCALED: Integer;
    class function FLAG_SECURE: Integer;
    class function FLAG_SHOW_WALLPAPER: Integer;
    class function FLAG_SHOW_WHEN_LOCKED: Integer;
    class function FLAG_SPLIT_TOUCH: Integer;
    class function FLAG_TOUCHABLE_WHEN_WAKING: Integer;
    class function FLAG_TRANSLUCENT_NAVIGATION: Integer;
    class function FLAG_TRANSLUCENT_STATUS: Integer;
    class function FLAG_TURN_SCREEN_ON: Integer;
    class function FLAG_WATCH_OUTSIDE_TOUCH: Integer;
    class function FORMAT_CHANGED: Integer;
    class function LAST_APPLICATION_WINDOW: Integer;
    class function LAST_SUB_WINDOW: Integer;
    class function LAST_SYSTEM_WINDOW: Integer;
    class function LAYOUT_CHANGED: Integer;
    class function LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT: Integer;
    class function LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER: Integer;
    class function LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES: Integer;
    class function MEMORY_TYPE_CHANGED: Integer;
    class function MEMORY_TYPE_GPU: Integer;
    class function MEMORY_TYPE_HARDWARE: Integer;
    class function MEMORY_TYPE_NORMAL: Integer;
    class function MEMORY_TYPE_PUSH_BUFFERS: Integer;
    class function ROTATION_ANIMATION_CHANGED: Integer;
    class function ROTATION_ANIMATION_CROSSFADE: Integer;
    class function ROTATION_ANIMATION_JUMPCUT: Integer;
    class function ROTATION_ANIMATION_ROTATE: Integer;
    class function ROTATION_ANIMATION_SEAMLESS: Integer;
    class function SCREEN_BRIGHTNESS_CHANGED: Integer;
    class function SCREEN_ORIENTATION_CHANGED: Integer;
    class function SOFT_INPUT_ADJUST_NOTHING: Integer;
    class function SOFT_INPUT_ADJUST_PAN: Integer;
    class function SOFT_INPUT_ADJUST_RESIZE: Integer;
    class function SOFT_INPUT_ADJUST_UNSPECIFIED: Integer;
    class function SOFT_INPUT_IS_FORWARD_NAVIGATION: Integer;
    class function SOFT_INPUT_MASK_ADJUST: Integer;
    class function SOFT_INPUT_MASK_STATE: Integer;
    class function SOFT_INPUT_MODE_CHANGED: Integer;
    class function SOFT_INPUT_STATE_ALWAYS_HIDDEN: Integer;
    class function SOFT_INPUT_STATE_ALWAYS_VISIBLE: Integer;
    class function SOFT_INPUT_STATE_HIDDEN: Integer;
    class function SOFT_INPUT_STATE_UNCHANGED: Integer;
    class function SOFT_INPUT_STATE_UNSPECIFIED: Integer;
    class function SOFT_INPUT_STATE_VISIBLE: Integer;
    class function TITLE_CHANGED: Integer;
    class function TYPE_ACCESSIBILITY_OVERLAY: Integer;
    class function TYPE_APPLICATION: Integer;
    class function TYPE_APPLICATION_ATTACHED_DIALOG: Integer;
    class function TYPE_APPLICATION_MEDIA: Integer;
    class function TYPE_APPLICATION_OVERLAY: Integer;
    class function TYPE_APPLICATION_PANEL: Integer;
    class function TYPE_APPLICATION_STARTING: Integer;
    class function TYPE_APPLICATION_SUB_PANEL: Integer;
    class function TYPE_BASE_APPLICATION: Integer;
    class function TYPE_CHANGED: Integer;
    class function TYPE_DRAWN_APPLICATION: Integer;
    class function TYPE_INPUT_METHOD: Integer;
    class function TYPE_INPUT_METHOD_DIALOG: Integer;
    class function TYPE_KEYGUARD_DIALOG: Integer;
    class function TYPE_PHONE: Integer;
    class function TYPE_PRIORITY_PHONE: Integer;
    class function TYPE_PRIVATE_PRESENTATION: Integer;
    class function TYPE_SEARCH_BAR: Integer;
    class function TYPE_STATUS_BAR: Integer;
    class function TYPE_STATUS_BAR_PANEL: Integer;
    class function TYPE_SYSTEM_ALERT: Integer;
    class function TYPE_SYSTEM_DIALOG: Integer;
    class function TYPE_SYSTEM_ERROR: Integer;
    class function TYPE_SYSTEM_OVERLAY: Integer;
    class function TYPE_TOAST: Integer;
    class function TYPE_WALLPAPER: Integer;
    { methods }
    class function mayUseInputMethod(const AArg0: Integer): Boolean;
  end;

{ android.view.ViewManager - interface }

  [JavaClassSignature('android/view/ViewManager')]
  JViewManager = interface(IJavaObject)
    ['{1839C9F3-4470-4C87-BB72-A49850F1120D}']
    procedure addView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
    procedure removeView(const AArg0: JView);
    procedure updateViewLayout(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
  end;

  [JavaClassSignature('android/view/ViewManager')]
  TJViewManager = class(TJObject, JViewManager)
  private
    { methods }
    procedure addView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
    procedure removeView(const AArg0: JView);
    procedure updateViewLayout(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JViewManager; overload;
    class function Wrap(const AObject: IJNIObject): JViewManager; overload;
  end;

{ android.view.WindowManager - interface }

  [JavaClassSignature('android/view/WindowManager')]
  JWindowManager = interface(JViewManager)
    ['{022F166D-800C-4DE0-93A1-DA360748506B}']
    function getDefaultDisplay: JDisplay;
    procedure removeViewImmediate(const AArg0: JView);
  end;

  [JavaClassSignature('android/view/WindowManager')]
  TJWindowManager = class(TJViewManager, JWindowManager)
  private
    { methods }
    function getDefaultDisplay: JDisplay;
    procedure removeViewImmediate(const AArg0: JView);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JWindowManager; overload;
    class function Wrap(const AObject: IJNIObject): JWindowManager; overload;
  end;

{ android.view.ViewParent - interface }

  [JavaClassSignature('android/view/ViewParent')]
  JViewParent = interface(IJavaObject)
    ['{3F7343A2-1395-43D7-AC8C-0DA4794E41F2}']
    procedure bringChildToFront(const AArg0: JView);
    function canResolveLayoutDirection: Boolean;
    function canResolveTextAlignment: Boolean;
    function canResolveTextDirection: Boolean;
    procedure childDrawableStateChanged(const AArg0: JView);
    procedure childHasTransientStateChanged(const AArg0: JView; const AArg1: Boolean);
    procedure clearChildFocus(const AArg0: JView);
    function focusSearch(const AArg0: JView; const AArg1: Integer): JView;
    procedure focusableViewAvailable(const AArg0: JView);
    function getChildVisibleRect(const AArg0: JView; const AArg1: JRect; const AArg2: JPoint): Boolean;
    function getLayoutDirection: Integer;
    function getParent: JViewParent;
    function getParentForAccessibility: JViewParent;
    function getTextAlignment: Integer;
    function getTextDirection: Integer;
    procedure invalidateChild(const AArg0: JView; const AArg1: JRect); deprecated 'Deprecated in 26';
    function invalidateChildInParent(const AArg0: IJavaArray<Integer>; const AArg1: JRect): JViewParent; deprecated 'Deprecated in 26';
    function isLayoutDirectionResolved: Boolean;
    function isLayoutRequested: Boolean;
    function isTextAlignmentResolved: Boolean;
    function isTextDirectionResolved: Boolean;
    function keyboardNavigationClusterSearch(const AArg0: JView; const AArg1: Integer): JView; // Introduced in 26';
    procedure notifySubtreeAccessibilityStateChanged(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
    function onNestedFling(const AArg0: JView; const AArg1: Single; const AArg2: Single; const AArg3: Boolean): Boolean;
    function onNestedPreFling(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean;
    function onNestedPrePerformAccessibilityAction(const AArg0: JView; const AArg1: Integer; const AArg2: JBundle): Boolean; // Introduced in 22';
    procedure onNestedPreScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Integer>);
    procedure onNestedScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
    procedure onNestedScrollAccepted(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
    function onStartNestedScroll(const AArg0: JView; const AArg1: JView; const AArg2: Integer): Boolean;
    procedure onStopNestedScroll(const AArg0: JView);
    procedure recomputeViewAttributes(const AArg0: JView);
    procedure requestChildFocus(const AArg0: JView; const AArg1: JView);
    function requestChildRectangleOnScreen(const AArg0: JView; const AArg1: JRect; const AArg2: Boolean): Boolean;
    procedure requestDisallowInterceptTouchEvent(const AArg0: Boolean);
    procedure requestFitSystemWindows;
    procedure requestLayout;
    procedure requestTransparentRegion(const AArg0: JView);
    function showContextMenuForChild(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean; overload; // Introduced in 24';
    function showContextMenuForChild(const AArg0: JView): Boolean; overload;
  end;

  [JavaClassSignature('android/view/ViewParent')]
  TJViewParent = class(TJObject, JViewParent)
  private
    { methods }
    procedure bringChildToFront(const AArg0: JView);
    function canResolveLayoutDirection: Boolean;
    function canResolveTextAlignment: Boolean;
    function canResolveTextDirection: Boolean;
    procedure childDrawableStateChanged(const AArg0: JView);
    procedure childHasTransientStateChanged(const AArg0: JView; const AArg1: Boolean);
    procedure clearChildFocus(const AArg0: JView);
    function focusSearch(const AArg0: JView; const AArg1: Integer): JView;
    procedure focusableViewAvailable(const AArg0: JView);
    function getChildVisibleRect(const AArg0: JView; const AArg1: JRect; const AArg2: JPoint): Boolean;
    function getLayoutDirection: Integer;
    function getParent: JViewParent;
    function getParentForAccessibility: JViewParent;
    function getTextAlignment: Integer;
    function getTextDirection: Integer;
    procedure invalidateChild(const AArg0: JView; const AArg1: JRect); deprecated 'Deprecated in 26';
    function invalidateChildInParent(const AArg0: IJavaArray<Integer>; const AArg1: JRect): JViewParent; deprecated 'Deprecated in 26';
    function isLayoutDirectionResolved: Boolean;
    function isLayoutRequested: Boolean;
    function isTextAlignmentResolved: Boolean;
    function isTextDirectionResolved: Boolean;
    function keyboardNavigationClusterSearch(const AArg0: JView; const AArg1: Integer): JView; // Introduced in 26';
    procedure notifySubtreeAccessibilityStateChanged(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
    function onNestedFling(const AArg0: JView; const AArg1: Single; const AArg2: Single; const AArg3: Boolean): Boolean;
    function onNestedPreFling(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean;
    function onNestedPrePerformAccessibilityAction(const AArg0: JView; const AArg1: Integer; const AArg2: JBundle): Boolean; // Introduced in 22';
    procedure onNestedPreScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Integer>);
    procedure onNestedScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
    procedure onNestedScrollAccepted(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
    function onStartNestedScroll(const AArg0: JView; const AArg1: JView; const AArg2: Integer): Boolean;
    procedure onStopNestedScroll(const AArg0: JView);
    procedure recomputeViewAttributes(const AArg0: JView);
    procedure requestChildFocus(const AArg0: JView; const AArg1: JView);
    function requestChildRectangleOnScreen(const AArg0: JView; const AArg1: JRect; const AArg2: Boolean): Boolean;
    procedure requestDisallowInterceptTouchEvent(const AArg0: Boolean);
    procedure requestFitSystemWindows;
    procedure requestLayout;
    procedure requestTransparentRegion(const AArg0: JView);
    function showContextMenuForChild(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean; overload; // Introduced in 24';
    function showContextMenuForChild(const AArg0: JView): Boolean; overload;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JViewParent; overload;
    class function Wrap(const AObject: IJNIObject): JViewParent; overload;
  end;

{ android.view.ViewTreeObserver }

  [JavaClassSignature('android/view/ViewTreeObserver')]
  JViewTreeObserver = interface(JObject)
    ['{1EC6FEDC-3010-4C14-BE28-667314AA61CF}']
    procedure addOnGlobalFocusChangeListener(const AArg0: JViewTreeObserver_OnGlobalFocusChangeListener);
    procedure addOnScrollChangedListener(const AArg0: JViewTreeObserver_OnScrollChangedListener);
    procedure dispatchOnDraw;
    procedure dispatchOnGlobalLayout;
    function dispatchOnPreDraw: Boolean;
    function isAlive: Boolean;
    procedure removeOnGlobalFocusChangeListener(const AArg0: JViewTreeObserver_OnGlobalFocusChangeListener);
    procedure removeOnScrollChangedListener(const AArg0: JViewTreeObserver_OnScrollChangedListener);
  end;

  [JavaClassSignature('android/view/ViewTreeObserver')]
  TJViewTreeObserver = class(TJObject, JViewTreeObserver)
  private
    { methods }
    procedure addOnGlobalFocusChangeListener(const AArg0: JViewTreeObserver_OnGlobalFocusChangeListener);
    procedure addOnScrollChangedListener(const AArg0: JViewTreeObserver_OnScrollChangedListener);
    procedure dispatchOnDraw;
    procedure dispatchOnGlobalLayout;
    function dispatchOnPreDraw: Boolean;
    function isAlive: Boolean;
    procedure removeOnGlobalFocusChangeListener(const AArg0: JViewTreeObserver_OnGlobalFocusChangeListener);
    procedure removeOnScrollChangedListener(const AArg0: JViewTreeObserver_OnScrollChangedListener);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JViewTreeObserver; overload;
    class function Wrap(const AObject: IJNIObject): JViewTreeObserver; overload;
  end;

{ android.view.ViewTreeObserver_OnGlobalFocusChangeListener - interface }

  [JavaClassSignature('android/view/ViewTreeObserver$OnGlobalFocusChangeListener')]
  JViewTreeObserver_OnGlobalFocusChangeListener = interface(IJavaObject)
    ['{66367ED7-A441-4AA5-9303-482867595582}']
    procedure onGlobalFocusChanged(const AArg0: JView; const AArg1: JView);
  end;

  [JavaClassSignature('android/view/ViewTreeObserver$OnGlobalFocusChangeListener')]
  TJViewTreeObserver_OnGlobalFocusChangeListener = class(TJObject, JViewTreeObserver_OnGlobalFocusChangeListener)
  private
    { methods }
    procedure onGlobalFocusChanged(const AArg0: JView; const AArg1: JView);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JViewTreeObserver_OnGlobalFocusChangeListener; overload;
    class function Wrap(const AObject: IJNIObject): JViewTreeObserver_OnGlobalFocusChangeListener; overload;
  end;

{ android.view.ViewTreeObserver_OnScrollChangedListener - interface }

  [JavaClassSignature('android/view/ViewTreeObserver$OnScrollChangedListener')]
  JViewTreeObserver_OnScrollChangedListener = interface(IJavaObject)
    ['{F9F8EC49-BAE3-4D0C-ABC1-DDD81E3B0A08}']
    procedure onScrollChanged;
  end;

  [JavaClassSignature('android/view/ViewTreeObserver$OnScrollChangedListener')]
  TJViewTreeObserver_OnScrollChangedListener = class(TJObject, JViewTreeObserver_OnScrollChangedListener)
  private
    { methods }
    procedure onScrollChanged;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JViewTreeObserver_OnScrollChangedListener; overload;
    class function Wrap(const AObject: IJNIObject): JViewTreeObserver_OnScrollChangedListener; overload;
  end;

{ android.view.Window }

  [JavaClassSignature('android/view/Window')]
  JWindow = interface(JObject)
    ['{65108D5D-FCA7-4357-935B-E40C29B95836}']
    procedure addContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
    procedure addFlags(const AArg0: Integer);
    procedure clearFlags(const AArg0: Integer);
    procedure closeAllPanels;
    procedure closePanel(const AArg0: Integer);
    function findViewById(const AArg0: Integer): JView;
    function getAllowEnterTransitionOverlap: Boolean;
    function getAllowReturnTransitionOverlap: Boolean;
    function getAttributes: JWindowManager_LayoutParams;
    function getColorMode: Integer; // Introduced in 26';
    function getContainer: JWindow;
    function getContext: JContext;
    function getCurrentFocus: JView;
    function getDecorView: JView;
    function getLayoutInflater: JLayoutInflater;
    function getNavigationBarColor: Integer;
    function getNavigationBarDividerColor: Integer; // Introduced in 28';
    function getSharedElementsUseOverlay: Boolean;
    function getStatusBarColor: Integer;
    function getTransitionBackgroundFadeDuration: Int64;
    function getVolumeControlStream: Integer;
    function getWindowManager: JWindowManager;
    function hasChildren: Boolean;
    function hasFeature(const AArg0: Integer): Boolean;
    procedure injectInputEvent(const AArg0: JInputEvent);
    procedure invalidatePanelMenu(const AArg0: Integer);
    function isActive: Boolean;
    function isFloating: Boolean;
    function isShortcutKey(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function isWideColorGamut: Boolean; // Introduced in 27';
    procedure makeActive;
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    procedure openPanel(const AArg0: Integer; const AArg1: JKeyEvent);
    function peekDecorView: JView;
    function performContextMenuIdentifierAction(const AArg0: Integer; const AArg1: Integer): Boolean;
    function performPanelIdentifierAction(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Boolean;
    function performPanelShortcut(const AArg0: Integer; const AArg1: Integer; const AArg2: JKeyEvent; const AArg3: Integer): Boolean;
    function requestFeature(const AArg0: Integer): Boolean;
    function requireViewById(const AArg0: Integer): JView; // Introduced in 28';
    procedure restoreHierarchyState(const AArg0: JBundle);
    function saveHierarchyState: JBundle;
    procedure setAllowEnterTransitionOverlap(const AArg0: Boolean);
    procedure setAllowReturnTransitionOverlap(const AArg0: Boolean);
    procedure setAttributes(const AArg0: JWindowManager_LayoutParams);
    procedure setBackgroundDrawable(const AArg0: JDrawable);
    procedure setBackgroundDrawableResource(const AArg0: Integer);
    procedure setChildDrawable(const AArg0: Integer; const AArg1: JDrawable);
    procedure setChildInt(const AArg0: Integer; const AArg1: Integer);
    procedure setClipToOutline(const AArg0: Boolean); // Introduced in 22';
    procedure setColorMode(const AArg0: Integer); // Introduced in 26';
    procedure setContainer(const AArg0: JWindow);
    procedure setContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams); overload;
    procedure setContentView(const AArg0: JView); overload;
    procedure setContentView(const AArg0: Integer); overload;
    procedure setDecorCaptionShade(const AArg0: Integer); // Introduced in 24';
    procedure setDimAmount(const AArg0: Single);
    procedure setElevation(const AArg0: Single); // Introduced in 22';
    procedure setFeatureDrawable(const AArg0: Integer; const AArg1: JDrawable);
    procedure setFeatureDrawableAlpha(const AArg0: Integer; const AArg1: Integer);
    procedure setFeatureDrawableResource(const AArg0: Integer; const AArg1: Integer);
    procedure setFeatureDrawableUri(const AArg0: Integer; const AArg1: JUri);
    procedure setFeatureInt(const AArg0: Integer; const AArg1: Integer);
    procedure setFlags(const AArg0: Integer; const AArg1: Integer);
    procedure setFormat(const AArg0: Integer);
    procedure setGravity(const AArg0: Integer);
    procedure setIcon(const AArg0: Integer);
    procedure setLayout(const AArg0: Integer; const AArg1: Integer);
    procedure setLocalFocus(const AArg0: Boolean; const AArg1: Boolean);
    procedure setLogo(const AArg0: Integer);
    procedure setNavigationBarColor(const AArg0: Integer);
    procedure setNavigationBarDividerColor(const AArg0: Integer); // Introduced in 28';
    procedure setResizingCaptionDrawable(const AArg0: JDrawable); // Introduced in 24';
    procedure setSharedElementsUseOverlay(const AArg0: Boolean);
    procedure setSoftInputMode(const AArg0: Integer);
    procedure setStatusBarColor(const AArg0: Integer);
    procedure setSustainedPerformanceMode(const AArg0: Boolean); // Introduced in 24';
    procedure setTitle(const AArg0: JCharSequence);
    procedure setTitleColor(const AArg0: Integer); deprecated 'Deprecated in 21';
    procedure setTransitionBackgroundFadeDuration(const AArg0: Int64);
    procedure setType(const AArg0: Integer);
    procedure setUiOptions(const AArg0: Integer); overload;
    procedure setUiOptions(const AArg0: Integer; const AArg1: Integer); overload;
    procedure setVolumeControlStream(const AArg0: Integer);
    procedure setWindowAnimations(const AArg0: Integer);
    procedure setWindowManager(const AArg0: JWindowManager; const AArg1: JIBinder; const AArg2: JString); overload;
    procedure setWindowManager(const AArg0: JWindowManager; const AArg1: JIBinder; const AArg2: JString; const AArg3: Boolean); overload;
    function superDispatchGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    function superDispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
    function superDispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
    function superDispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
    function superDispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
    procedure takeKeyEvents(const AArg0: Boolean);
    procedure takeSurface(const AArg0: JSurfaceHolder_Callback2);
    procedure togglePanel(const AArg0: Integer; const AArg1: JKeyEvent);
  end;

  [JavaClassSignature('android/view/Window')]
  TJWindow = class(TJObject, JWindow)
  private
    { methods }
    procedure addContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
    procedure addFlags(const AArg0: Integer);
    procedure clearFlags(const AArg0: Integer);
    procedure closeAllPanels;
    procedure closePanel(const AArg0: Integer);
    function findViewById(const AArg0: Integer): JView;
    function getAllowEnterTransitionOverlap: Boolean;
    function getAllowReturnTransitionOverlap: Boolean;
    function getAttributes: JWindowManager_LayoutParams;
    function getColorMode: Integer; // Introduced in 26';
    function getContainer: JWindow;
    function getContext: JContext;
    function getCurrentFocus: JView;
    function getDecorView: JView;
    function getLayoutInflater: JLayoutInflater;
    function getNavigationBarColor: Integer;
    function getNavigationBarDividerColor: Integer; // Introduced in 28';
    function getSharedElementsUseOverlay: Boolean;
    function getStatusBarColor: Integer;
    function getTransitionBackgroundFadeDuration: Int64;
    function getVolumeControlStream: Integer;
    function getWindowManager: JWindowManager;
    function hasChildren: Boolean;
    function hasFeature(const AArg0: Integer): Boolean;
    procedure injectInputEvent(const AArg0: JInputEvent);
    procedure invalidatePanelMenu(const AArg0: Integer);
    function isActive: Boolean;
    function isFloating: Boolean;
    function isShortcutKey(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
    function isWideColorGamut: Boolean; // Introduced in 27';
    procedure makeActive;
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    procedure openPanel(const AArg0: Integer; const AArg1: JKeyEvent);
    function peekDecorView: JView;
    function performContextMenuIdentifierAction(const AArg0: Integer; const AArg1: Integer): Boolean;
    function performPanelIdentifierAction(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Boolean;
    function performPanelShortcut(const AArg0: Integer; const AArg1: Integer; const AArg2: JKeyEvent; const AArg3: Integer): Boolean;
    function requestFeature(const AArg0: Integer): Boolean;
    function requireViewById(const AArg0: Integer): JView; // Introduced in 28';
    procedure restoreHierarchyState(const AArg0: JBundle);
    function saveHierarchyState: JBundle;
    procedure setAllowEnterTransitionOverlap(const AArg0: Boolean);
    procedure setAllowReturnTransitionOverlap(const AArg0: Boolean);
    procedure setAttributes(const AArg0: JWindowManager_LayoutParams);
    procedure setBackgroundDrawable(const AArg0: JDrawable);
    procedure setBackgroundDrawableResource(const AArg0: Integer);
    procedure setChildDrawable(const AArg0: Integer; const AArg1: JDrawable);
    procedure setChildInt(const AArg0: Integer; const AArg1: Integer);
    procedure setClipToOutline(const AArg0: Boolean); // Introduced in 22';
    procedure setColorMode(const AArg0: Integer); // Introduced in 26';
    procedure setContainer(const AArg0: JWindow);
    procedure setContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams); overload;
    procedure setContentView(const AArg0: JView); overload;
    procedure setContentView(const AArg0: Integer); overload;
    procedure setDecorCaptionShade(const AArg0: Integer); // Introduced in 24';
    procedure setDimAmount(const AArg0: Single);
    procedure setElevation(const AArg0: Single); // Introduced in 22';
    procedure setFeatureDrawable(const AArg0: Integer; const AArg1: JDrawable);
    procedure setFeatureDrawableAlpha(const AArg0: Integer; const AArg1: Integer);
    procedure setFeatureDrawableResource(const AArg0: Integer; const AArg1: Integer);
    procedure setFeatureDrawableUri(const AArg0: Integer; const AArg1: JUri);
    procedure setFeatureInt(const AArg0: Integer; const AArg1: Integer);
    procedure setFlags(const AArg0: Integer; const AArg1: Integer);
    procedure setFormat(const AArg0: Integer);
    procedure setGravity(const AArg0: Integer);
    procedure setIcon(const AArg0: Integer);
    procedure setLayout(const AArg0: Integer; const AArg1: Integer);
    procedure setLocalFocus(const AArg0: Boolean; const AArg1: Boolean);
    procedure setLogo(const AArg0: Integer);
    procedure setNavigationBarColor(const AArg0: Integer);
    procedure setNavigationBarDividerColor(const AArg0: Integer); // Introduced in 28';
    procedure setResizingCaptionDrawable(const AArg0: JDrawable); // Introduced in 24';
    procedure setSharedElementsUseOverlay(const AArg0: Boolean);
    procedure setSoftInputMode(const AArg0: Integer);
    procedure setStatusBarColor(const AArg0: Integer);
    procedure setSustainedPerformanceMode(const AArg0: Boolean); // Introduced in 24';
    procedure setTitle(const AArg0: JCharSequence);
    procedure setTitleColor(const AArg0: Integer); deprecated 'Deprecated in 21';
    procedure setTransitionBackgroundFadeDuration(const AArg0: Int64);
    procedure setType(const AArg0: Integer);
    procedure setUiOptions(const AArg0: Integer); overload;
    procedure setUiOptions(const AArg0: Integer; const AArg1: Integer); overload;
    procedure setVolumeControlStream(const AArg0: Integer);
    procedure setWindowAnimations(const AArg0: Integer);
    procedure setWindowManager(const AArg0: JWindowManager; const AArg1: JIBinder; const AArg2: JString); overload;
    procedure setWindowManager(const AArg0: JWindowManager; const AArg1: JIBinder; const AArg2: JString; const AArg3: Boolean); overload;
    function superDispatchGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
    function superDispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
    function superDispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
    function superDispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
    function superDispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
    procedure takeKeyEvents(const AArg0: Boolean);
    procedure takeSurface(const AArg0: JSurfaceHolder_Callback2);
    procedure togglePanel(const AArg0: Integer; const AArg1: JKeyEvent);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JWindow; overload;
    class function Wrap(const AObject: IJNIObject): JWindow; overload;
    { constructors }
    class function Create(const AArg0: JContext): JWindow; overload;
    { constants }
    class function DECOR_CAPTION_SHADE_AUTO: Integer;
    class function DECOR_CAPTION_SHADE_DARK: Integer;
    class function DECOR_CAPTION_SHADE_LIGHT: Integer;
    class function FEATURE_ACTION_BAR: Integer;
    class function FEATURE_ACTION_BAR_OVERLAY: Integer;
    class function FEATURE_ACTION_MODE_OVERLAY: Integer;
    class function FEATURE_ACTIVITY_TRANSITIONS: Integer;
    class function FEATURE_CONTENT_TRANSITIONS: Integer;
    class function FEATURE_CONTEXT_MENU: Integer;
    class function FEATURE_CUSTOM_TITLE: Integer;
    class function FEATURE_INDETERMINATE_PROGRESS: Integer;
    class function FEATURE_LEFT_ICON: Integer;
    class function FEATURE_NO_TITLE: Integer;
    class function FEATURE_OPTIONS_PANEL: Integer;
    class function FEATURE_PROGRESS: Integer;
    class function FEATURE_RIGHT_ICON: Integer;
    class function FEATURE_SWIPE_TO_DISMISS: Integer;
    class function ID_ANDROID_CONTENT: Integer;
    class function NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME: JString;
    class function PROGRESS_END: Integer;
    class function PROGRESS_INDETERMINATE_OFF: Integer;
    class function PROGRESS_INDETERMINATE_ON: Integer;
    class function PROGRESS_SECONDARY_END: Integer;
    class function PROGRESS_SECONDARY_START: Integer;
    class function PROGRESS_START: Integer;
    class function PROGRESS_VISIBILITY_OFF: Integer;
    class function PROGRESS_VISIBILITY_ON: Integer;
    class function STATUS_BAR_BACKGROUND_TRANSITION_NAME: JString;
    { methods }
    class function getDefaultFeatures(const AArg0: JContext): Integer; // Introduced in 22';
  end;

{ android.view.inputmethod.EditorInfo }

  [JavaClassSignature('android/view/inputmethod/EditorInfo')]
  JEditorInfo = interface(JObject)
    ['{052DEDCC-A70D-4EEC-AC51-A62348982CE7}']
    function _GetActionId: Integer;
    procedure _SetActionId(const AValue: Integer);
    function _GetActionLabel: JCharSequence;
    procedure _SetActionLabel(const AValue: JCharSequence);
    function _GetContentMimeTypes: IJavaArray<JString>;
    procedure _SetContentMimeTypes(const AValue: IJavaArray<JString>);
    function _GetExtras: JBundle;
    procedure _SetExtras(const AValue: JBundle);
    function _GetFieldId: Integer;
    procedure _SetFieldId(const AValue: Integer);
    function _GetFieldName: JString;
    procedure _SetFieldName(const AValue: JString);
    function _GetHintText: JCharSequence;
    procedure _SetHintText(const AValue: JCharSequence);
    function _GetImeOptions: Integer;
    procedure _SetImeOptions(const AValue: Integer);
    function _GetInitialCapsMode: Integer;
    procedure _SetInitialCapsMode(const AValue: Integer);
    function _GetInitialSelEnd: Integer;
    procedure _SetInitialSelEnd(const AValue: Integer);
    function _GetInitialSelStart: Integer;
    procedure _SetInitialSelStart(const AValue: Integer);
    function _GetInputType: Integer;
    procedure _SetInputType(const AValue: Integer);
    function _GetLabel: JCharSequence;
    procedure _SetLabel(const AValue: JCharSequence);
    function _GetPackageName: JString;
    procedure _SetPackageName(const AValue: JString);
    function _GetPrivateImeOptions: JString;
    procedure _SetPrivateImeOptions(const AValue: JString);
    function describeContents: Integer;
    procedure makeCompatible(const AArg0: Integer);
    { constants }
    property actionId: Integer read _GetActionId write _SetActionId;
    property actionLabel: JCharSequence read _GetActionLabel write _SetActionLabel;
    property contentMimeTypes: IJavaArray<JString> read _GetContentMimeTypes write _SetContentMimeTypes;
    property extras: JBundle read _GetExtras write _SetExtras;
    property fieldId: Integer read _GetFieldId write _SetFieldId;
    property fieldName: JString read _GetFieldName write _SetFieldName;
    property hintText: JCharSequence read _GetHintText write _SetHintText;
    property imeOptions: Integer read _GetImeOptions write _SetImeOptions;
    property initialCapsMode: Integer read _GetInitialCapsMode write _SetInitialCapsMode;
    property initialSelEnd: Integer read _GetInitialSelEnd write _SetInitialSelEnd;
    property initialSelStart: Integer read _GetInitialSelStart write _SetInitialSelStart;
    property inputType: Integer read _GetInputType write _SetInputType;
    property &label: JCharSequence read _GetLabel write _SetLabel;
    property packageName: JString read _GetPackageName write _SetPackageName;
    property privateImeOptions: JString read _GetPrivateImeOptions write _SetPrivateImeOptions;
  end;

  [JavaClassSignature('android/view/inputmethod/EditorInfo')]
  TJEditorInfo = class(TJObject, JEditorInfo)
  private
    function _GetActionId: Integer;
    procedure _SetActionId(const AValue: Integer);
    function _GetActionLabel: JCharSequence;
    procedure _SetActionLabel(const AValue: JCharSequence);
    function _GetContentMimeTypes: IJavaArray<JString>;
    procedure _SetContentMimeTypes(const AValue: IJavaArray<JString>);
    function _GetExtras: JBundle;
    procedure _SetExtras(const AValue: JBundle);
    function _GetFieldId: Integer;
    procedure _SetFieldId(const AValue: Integer);
    function _GetFieldName: JString;
    procedure _SetFieldName(const AValue: JString);
    function _GetHintText: JCharSequence;
    procedure _SetHintText(const AValue: JCharSequence);
    function _GetImeOptions: Integer;
    procedure _SetImeOptions(const AValue: Integer);
    function _GetInitialCapsMode: Integer;
    procedure _SetInitialCapsMode(const AValue: Integer);
    function _GetInitialSelEnd: Integer;
    procedure _SetInitialSelEnd(const AValue: Integer);
    function _GetInitialSelStart: Integer;
    procedure _SetInitialSelStart(const AValue: Integer);
    function _GetInputType: Integer;
    procedure _SetInputType(const AValue: Integer);
    function _GetLabel: JCharSequence;
    procedure _SetLabel(const AValue: JCharSequence);
    function _GetPackageName: JString;
    procedure _SetPackageName(const AValue: JString);
    function _GetPrivateImeOptions: JString;
    procedure _SetPrivateImeOptions(const AValue: JString);
  private
    { methods }
    function describeContents: Integer;
    procedure makeCompatible(const AArg0: Integer);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JEditorInfo; overload;
    class function Wrap(const AObject: IJNIObject): JEditorInfo; overload;
    { constructors }
    class function Create: JEditorInfo; overload;
    { constants }
    class function IME_ACTION_DONE: Integer;
    class function IME_ACTION_GO: Integer;
    class function IME_ACTION_NEXT: Integer;
    class function IME_ACTION_NONE: Integer;
    class function IME_ACTION_PREVIOUS: Integer;
    class function IME_ACTION_SEARCH: Integer;
    class function IME_ACTION_SEND: Integer;
    class function IME_ACTION_UNSPECIFIED: Integer;
    class function IME_FLAG_FORCE_ASCII: Integer;
    class function IME_FLAG_NAVIGATE_NEXT: Integer;
    class function IME_FLAG_NAVIGATE_PREVIOUS: Integer;
    class function IME_FLAG_NO_ACCESSORY_ACTION: Integer;
    class function IME_FLAG_NO_ENTER_ACTION: Integer;
    class function IME_FLAG_NO_EXTRACT_UI: Integer;
    class function IME_FLAG_NO_FULLSCREEN: Integer;
    class function IME_FLAG_NO_PERSONALIZED_LEARNING: Integer;
    class function IME_MASK_ACTION: Integer;
    class function IME_NULL: Integer;
  end;

{ android.view.inputmethod.InputMethodManager }

  [JavaClassSignature('android/view/inputmethod/InputMethodManager')]
  JInputMethodManager = interface(JObject)
    ['{27242354-066F-447C-AFD0-5BBC215F1C94}']
    procedure dispatchKeyEventFromInputMethod(const AArg0: JView; const AArg1: JKeyEvent); // Introduced in 24';
    function getEnabledInputMethodList: JList;
    function getInputMethodList: JList;
    function getShortcutInputMethodsAndSubtypes: JMap;
    procedure hideSoftInputFromInputMethod(const AArg0: JIBinder; const AArg1: Integer); deprecated 'Deprecated in 28';
    function hideSoftInputFromWindow(const AArg0: JIBinder; const AArg1: Integer): Boolean;
    procedure hideStatusIcon(const AArg0: JIBinder); deprecated 'Deprecated in 28';
    function isAcceptingText: Boolean;
    function isActive: Boolean; overload;
    function isActive(const AArg0: JView): Boolean; overload;
    function isFullscreenMode: Boolean;
    function isWatchingCursor(const AArg0: JView): Boolean; deprecated 'Deprecated in 21';
    procedure restartInput(const AArg0: JView);
    procedure sendAppPrivateCommand(const AArg0: JView; const AArg1: JString; const AArg2: JBundle);
    procedure setInputMethod(const AArg0: JIBinder; const AArg1: JString); deprecated 'Deprecated in 28';
    function shouldOfferSwitchingToNextInputMethod(const AArg0: JIBinder): Boolean; deprecated 'Deprecated in 28';
    procedure showInputMethodAndSubtypeEnabler(const AArg0: JString);
    procedure showInputMethodPicker;
    function showSoftInput(const AArg0: JView; const AArg1: Integer): Boolean;
    procedure showSoftInputFromInputMethod(const AArg0: JIBinder; const AArg1: Integer); deprecated 'Deprecated in 28';
    procedure showStatusIcon(const AArg0: JIBinder; const AArg1: JString; const AArg2: Integer); deprecated 'Deprecated in 28';
    function switchToLastInputMethod(const AArg0: JIBinder): Boolean; deprecated 'Deprecated in 28';
    function switchToNextInputMethod(const AArg0: JIBinder; const AArg1: Boolean): Boolean; deprecated 'Deprecated in 28';
    procedure toggleSoftInput(const AArg0: Integer; const AArg1: Integer);
    procedure toggleSoftInputFromWindow(const AArg0: JIBinder; const AArg1: Integer; const AArg2: Integer);
    procedure updateCursor(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); deprecated 'Deprecated in 21';
    procedure updateSelection(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
    procedure viewClicked(const AArg0: JView); deprecated 'Deprecated in 29';
  end;

  [JavaClassSignature('android/view/inputmethod/InputMethodManager')]
  TJInputMethodManager = class(TJObject, JInputMethodManager)
  private
    { methods }
    procedure dispatchKeyEventFromInputMethod(const AArg0: JView; const AArg1: JKeyEvent); // Introduced in 24';
    function getEnabledInputMethodList: JList;
    function getInputMethodList: JList;
    function getShortcutInputMethodsAndSubtypes: JMap;
    procedure hideSoftInputFromInputMethod(const AArg0: JIBinder; const AArg1: Integer); deprecated 'Deprecated in 28';
    function hideSoftInputFromWindow(const AArg0: JIBinder; const AArg1: Integer): Boolean;
    procedure hideStatusIcon(const AArg0: JIBinder); deprecated 'Deprecated in 28';
    function isAcceptingText: Boolean;
    function isActive: Boolean; overload;
    function isActive(const AArg0: JView): Boolean; overload;
    function isFullscreenMode: Boolean;
    function isWatchingCursor(const AArg0: JView): Boolean; deprecated 'Deprecated in 21';
    procedure restartInput(const AArg0: JView);
    procedure sendAppPrivateCommand(const AArg0: JView; const AArg1: JString; const AArg2: JBundle);
    procedure setInputMethod(const AArg0: JIBinder; const AArg1: JString); deprecated 'Deprecated in 28';
    function shouldOfferSwitchingToNextInputMethod(const AArg0: JIBinder): Boolean; deprecated 'Deprecated in 28';
    procedure showInputMethodAndSubtypeEnabler(const AArg0: JString);
    procedure showInputMethodPicker;
    function showSoftInput(const AArg0: JView; const AArg1: Integer): Boolean;
    procedure showSoftInputFromInputMethod(const AArg0: JIBinder; const AArg1: Integer); deprecated 'Deprecated in 28';
    procedure showStatusIcon(const AArg0: JIBinder; const AArg1: JString; const AArg2: Integer); deprecated 'Deprecated in 28';
    function switchToLastInputMethod(const AArg0: JIBinder): Boolean; deprecated 'Deprecated in 28';
    function switchToNextInputMethod(const AArg0: JIBinder; const AArg1: Boolean): Boolean; deprecated 'Deprecated in 28';
    procedure toggleSoftInput(const AArg0: Integer; const AArg1: Integer);
    procedure toggleSoftInputFromWindow(const AArg0: JIBinder; const AArg1: Integer; const AArg2: Integer);
    procedure updateCursor(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer); deprecated 'Deprecated in 21';
    procedure updateSelection(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
    procedure viewClicked(const AArg0: JView); deprecated 'Deprecated in 29';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JInputMethodManager; overload;
    class function Wrap(const AObject: IJNIObject): JInputMethodManager; overload;
    { constants }
    class function HIDE_IMPLICIT_ONLY: Integer;
    class function HIDE_NOT_ALWAYS: Integer;
    class function RESULT_HIDDEN: Integer;
    class function RESULT_SHOWN: Integer;
    class function RESULT_UNCHANGED_HIDDEN: Integer;
    class function RESULT_UNCHANGED_SHOWN: Integer;
    class function SHOW_FORCED: Integer;
    class function SHOW_IMPLICIT: Integer;
  end;

{ android.util.AndroidException }

  [JavaClassSignature('android/util/AndroidException')]
  JAndroidException = interface(JException)
    ['{EF232080-2DC3-4574-92D3-F8E465643B5B}']
  end;

  [JavaClassSignature('android/util/AndroidException')]
  TJAndroidException = class(TJException, JAndroidException)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JAndroidException; overload;
    class function Wrap(const AObject: IJNIObject): JAndroidException; overload;
    { constructors }
    class function Create: JAndroidException; overload;
    class function Create(const AArg0: JString): JAndroidException; overload;
    class function Create(const AArg0: JString; const AArg1: JThrowable): JAndroidException; overload;
    class function Create(const AArg0: JException): JAndroidException; overload;
  end;

{ android.content.IntentFilter_MalformedMimeTypeException }

  [JavaClassSignature('android/content/IntentFilter$MalformedMimeTypeException')]
  JIntentFilter_MalformedMimeTypeException = interface(JAndroidException)
    ['{3480F43C-DEFF-41DD-B2A2-7CC606CB7FAC}']
  end;

  [JavaClassSignature('android/content/IntentFilter$MalformedMimeTypeException')]
  TJIntentFilter_MalformedMimeTypeException = class(TJAndroidException, JIntentFilter_MalformedMimeTypeException)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JIntentFilter_MalformedMimeTypeException; overload;
    class function Wrap(const AObject: IJNIObject): JIntentFilter_MalformedMimeTypeException; overload;
    { constructors }
    class function Create: JIntentFilter_MalformedMimeTypeException; overload;
    class function Create(const AArg0: JString): JIntentFilter_MalformedMimeTypeException; overload;
  end;

{ android.util.AttributeSet - interface }

  [JavaClassSignature('android/util/AttributeSet')]
  JAttributeSet = interface(IJavaObject)
    ['{E99E5782-F4BB-4621-9A9C-6276F9B59140}']
    function getAttributeBooleanValue(const AArg0: JString; const AArg1: JString; const AArg2: Boolean): Boolean; overload;
    function getAttributeBooleanValue(const AArg0: Integer; const AArg1: Boolean): Boolean; overload;
    function getAttributeCount: Integer;
    function getAttributeFloatValue(const AArg0: Integer; const AArg1: Single): Single; overload;
    function getAttributeFloatValue(const AArg0: JString; const AArg1: JString; const AArg2: Single): Single; overload;
    function getAttributeIntValue(const AArg0: JString; const AArg1: JString; const AArg2: Integer): Integer; overload;
    function getAttributeIntValue(const AArg0: Integer; const AArg1: Integer): Integer; overload;
    function getAttributeListValue(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: Integer): Integer; overload;
    function getAttributeListValue(const AArg0: JString; const AArg1: JString; const AArg2: IJavaArray<JString>; const AArg3: Integer): Integer; overload;
    function getAttributeName(const AArg0: Integer): JString;
    function getAttributeNameResource(const AArg0: Integer): Integer;
    function getAttributeResourceValue(const AArg0: Integer; const AArg1: Integer): Integer; overload;
    function getAttributeResourceValue(const AArg0: JString; const AArg1: JString; const AArg2: Integer): Integer; overload;
    function getAttributeUnsignedIntValue(const AArg0: Integer; const AArg1: Integer): Integer; overload;
    function getAttributeUnsignedIntValue(const AArg0: JString; const AArg1: JString; const AArg2: Integer): Integer; overload;
    function getAttributeValue(const AArg0: Integer): JString; overload;
    function getAttributeValue(const AArg0: JString; const AArg1: JString): JString; overload;
    function getClassAttribute: JString;
    function getIdAttribute: JString;
    function getIdAttributeResourceValue(const AArg0: Integer): Integer;
    function getPositionDescription: JString;
    function getStyleAttribute: Integer;
  end;

  [JavaClassSignature('android/util/AttributeSet')]
  TJAttributeSet = class(TJObject, JAttributeSet)
  private
    { methods }
    function getAttributeBooleanValue(const AArg0: JString; const AArg1: JString; const AArg2: Boolean): Boolean; overload;
    function getAttributeBooleanValue(const AArg0: Integer; const AArg1: Boolean): Boolean; overload;
    function getAttributeCount: Integer;
    function getAttributeFloatValue(const AArg0: Integer; const AArg1: Single): Single; overload;
    function getAttributeFloatValue(const AArg0: JString; const AArg1: JString; const AArg2: Single): Single; overload;
    function getAttributeIntValue(const AArg0: JString; const AArg1: JString; const AArg2: Integer): Integer; overload;
    function getAttributeIntValue(const AArg0: Integer; const AArg1: Integer): Integer; overload;
    function getAttributeListValue(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: Integer): Integer; overload;
    function getAttributeListValue(const AArg0: JString; const AArg1: JString; const AArg2: IJavaArray<JString>; const AArg3: Integer): Integer; overload;
    function getAttributeName(const AArg0: Integer): JString;
    function getAttributeNameResource(const AArg0: Integer): Integer;
    function getAttributeResourceValue(const AArg0: Integer; const AArg1: Integer): Integer; overload;
    function getAttributeResourceValue(const AArg0: JString; const AArg1: JString; const AArg2: Integer): Integer; overload;
    function getAttributeUnsignedIntValue(const AArg0: Integer; const AArg1: Integer): Integer; overload;
    function getAttributeUnsignedIntValue(const AArg0: JString; const AArg1: JString; const AArg2: Integer): Integer; overload;
    function getAttributeValue(const AArg0: Integer): JString; overload;
    function getAttributeValue(const AArg0: JString; const AArg1: JString): JString; overload;
    function getClassAttribute: JString;
    function getIdAttribute: JString;
    function getIdAttributeResourceValue(const AArg0: Integer): Integer;
    function getPositionDescription: JString;
    function getStyleAttribute: Integer;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JAttributeSet; overload;
    class function Wrap(const AObject: IJNIObject): JAttributeSet; overload;
  end;

{ android.util.DisplayMetrics }

  [JavaClassSignature('android/util/DisplayMetrics')]
  JDisplayMetrics = interface(JObject)
    ['{F7950E85-3026-45EC-BF00-59330CB9E699}']
    function _GetDensity: Single;
    procedure _SetDensity(const AValue: Single);
    function _GetDensityDpi: Integer;
    procedure _SetDensityDpi(const AValue: Integer);
    function _GetHeightPixels: Integer;
    procedure _SetHeightPixels(const AValue: Integer);
    function _GetScaledDensity: Single;
    procedure _SetScaledDensity(const AValue: Single);
    function _GetWidthPixels: Integer;
    procedure _SetWidthPixels(const AValue: Integer);
    function _GetXdpi: Single;
    procedure _SetXdpi(const AValue: Single);
    function _GetYdpi: Single;
    procedure _SetYdpi(const AValue: Single);
    function equals(const AArg0: JDisplayMetrics): Boolean; overload;
    function equals(const AArg0: JObject): Boolean; overload;
    function hashCode: Integer;
    procedure setTo(const AArg0: JDisplayMetrics);
    procedure setToDefaults;
    function toString: JString;
    { constants }
    property density: Single read _GetDensity write _SetDensity;
    property densityDpi: Integer read _GetDensityDpi write _SetDensityDpi;
    property heightPixels: Integer read _GetHeightPixels write _SetHeightPixels;
    property scaledDensity: Single read _GetScaledDensity write _SetScaledDensity;
    property widthPixels: Integer read _GetWidthPixels write _SetWidthPixels;
    property xdpi: Single read _GetXdpi write _SetXdpi;
    property ydpi: Single read _GetYdpi write _SetYdpi;
  end;

  [JavaClassSignature('android/util/DisplayMetrics')]
  TJDisplayMetrics = class(TJObject, JDisplayMetrics)
  private
    function _GetDensity: Single;
    procedure _SetDensity(const AValue: Single);
    function _GetDensityDpi: Integer;
    procedure _SetDensityDpi(const AValue: Integer);
    function _GetHeightPixels: Integer;
    procedure _SetHeightPixels(const AValue: Integer);
    function _GetScaledDensity: Single;
    procedure _SetScaledDensity(const AValue: Single);
    function _GetWidthPixels: Integer;
    procedure _SetWidthPixels(const AValue: Integer);
    function _GetXdpi: Single;
    procedure _SetXdpi(const AValue: Single);
    function _GetYdpi: Single;
    procedure _SetYdpi(const AValue: Single);
  private
    { methods }
    function equals(const AArg0: JDisplayMetrics): Boolean; reintroduce; overload;
    function equals(const AArg0: JObject): Boolean; reintroduce; overload;
    function hashCode: Integer;
    procedure setTo(const AArg0: JDisplayMetrics);
    procedure setToDefaults;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDisplayMetrics; overload;
    class function Wrap(const AObject: IJNIObject): JDisplayMetrics; overload;
    { constructors }
    class function Create: JDisplayMetrics; overload;
    { constants }
    class function DENSITY_260: Integer;
    class function DENSITY_280: Integer;
    class function DENSITY_300: Integer;
    class function DENSITY_340: Integer;
    class function DENSITY_360: Integer;
    class function DENSITY_400: Integer;
    class function DENSITY_420: Integer;
    class function DENSITY_440: Integer;
    class function DENSITY_560: Integer;
    class function DENSITY_DEFAULT: Integer;
    class function DENSITY_DEVICE_STABLE: Integer;
    class function DENSITY_HIGH: Integer;
    class function DENSITY_LOW: Integer;
    class function DENSITY_MEDIUM: Integer;
    class function DENSITY_TV: Integer;
    class function DENSITY_XHIGH: Integer;
    class function DENSITY_XXHIGH: Integer;
    class function DENSITY_XXXHIGH: Integer;
  end;

{ android.util.Property }

  [JavaClassSignature('android/util/Property')]
  JProperty = interface(JObject)
    ['{F141B760-2240-4890-BAD7-A156EB7631B4}']
    function get(const AArg0: JObject): JObject;
    function getName: JString;
    function getType: JClass;
    function isReadOnly: Boolean;
    procedure &set(const AArg0: JObject; const AArg1: JObject);
  end;

  [JavaClassSignature('android/util/Property')]
  TJProperty = class(TJObject, JProperty)
  private
    { methods }
    function get(const AArg0: JObject): JObject;
    function getName: JString;
    function getType: JClass;
    function isReadOnly: Boolean;
    procedure &set(const AArg0: JObject; const AArg1: JObject);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JProperty; overload;
    class function Wrap(const AObject: IJNIObject): JProperty; overload;
    { constructors }
    class function Create(const AArg0: JClass; const AArg1: JString): JProperty; overload;
    { methods }
    class function &of(const AArg0: JClass; const AArg1: JClass; const AArg2: JString): JProperty;
  end;

{ android.util.FloatProperty }

  [JavaClassSignature('android/util/FloatProperty')]
  JFloatProperty = interface(JProperty)
    ['{E02C9B53-B77C-4ED7-97D6-F0BFF34EE991}']
    procedure &set(const AArg0: JObject; const AArg1: JObject); overload;
    procedure &set(const AArg0: JObject; const AArg1: JFloat); overload;
    procedure setValue(const AArg0: JObject; const AArg1: Single);
  end;

  [JavaClassSignature('android/util/FloatProperty')]
  TJFloatProperty = class(TJProperty, JFloatProperty)
  private
    { methods }
    procedure &set(const AArg0: JObject; const AArg1: JObject); overload;
    procedure &set(const AArg0: JObject; const AArg1: JFloat); overload;
    procedure setValue(const AArg0: JObject; const AArg1: Single);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JFloatProperty; overload;
    class function Wrap(const AObject: IJNIObject): JFloatProperty; overload;
    { constructors }
    class function Create(const AArg0: JString): JFloatProperty; overload;
  end;

{ android.util.IntProperty }

  [JavaClassSignature('android/util/IntProperty')]
  JIntProperty = interface(JProperty)
    ['{08B53E2E-57C1-45B5-A753-0D29B2A772CA}']
    procedure &set(const AArg0: JObject; const AArg1: JObject); overload;
    procedure &set(const AArg0: JObject; const AArg1: JInteger); overload;
    procedure setValue(const AArg0: JObject; const AArg1: Integer);
  end;

  [JavaClassSignature('android/util/IntProperty')]
  TJIntProperty = class(TJProperty, JIntProperty)
  private
    { methods }
    procedure &set(const AArg0: JObject; const AArg1: JObject); overload;
    procedure &set(const AArg0: JObject; const AArg1: JInteger); overload;
    procedure setValue(const AArg0: JObject; const AArg1: Integer);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JIntProperty; overload;
    class function Wrap(const AObject: IJNIObject): JIntProperty; overload;
    { constructors }
    class function Create(const AArg0: JString): JIntProperty; overload;
  end;

{ android.util.Size }

  [JavaClassSignature('android/util/Size')]
  JSize = interface(JObject)
    ['{548BA79D-891D-4B8C-B069-5A6ECFE0AB92}']
    function equals(const AArg0: JObject): Boolean;
    function getHeight: Integer;
    function getWidth: Integer;
    function hashCode: Integer;
    function toString: JString;
  end;

  [JavaClassSignature('android/util/Size')]
  TJSize = class(TJObject, JSize)
  private
    { methods }
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function getHeight: Integer;
    function getWidth: Integer;
    function hashCode: Integer;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSize; overload;
    class function Wrap(const AObject: IJNIObject): JSize; overload;
    { constructors }
    class function Create(const AArg0: Integer; const AArg1: Integer): JSize; overload;
    { methods }
    class function parseSize(const AArg0: JString): JSize;
  end;

{ android.util.SparseArray }

  [JavaClassSignature('android/util/SparseArray')]
  JSparseArray = interface(JObject)
    ['{B3EA523D-EBE1-4654-9791-B1239D4CE0B3}']
    procedure append(const AArg0: Integer; const AArg1: JObject);
    procedure clear;
    function clone: JObject;
    procedure delete(const AArg0: Integer);
    function get(const AArg0: Integer): JObject; overload;
    function get(const AArg0: Integer; const AArg1: JObject): JObject; overload;
    function indexOfKey(const AArg0: Integer): Integer;
    function indexOfValue(const AArg0: JObject): Integer;
    function keyAt(const AArg0: Integer): Integer;
    procedure put(const AArg0: Integer; const AArg1: JObject);
    procedure remove(const AArg0: Integer);
    procedure removeAt(const AArg0: Integer);
    procedure removeAtRange(const AArg0: Integer; const AArg1: Integer);
    procedure setValueAt(const AArg0: Integer; const AArg1: JObject);
    function size: Integer;
    function toString: JString;
    function valueAt(const AArg0: Integer): JObject;
  end;

  [JavaClassSignature('android/util/SparseArray')]
  TJSparseArray = class(TJObject, JSparseArray)
  private
    { methods }
    procedure append(const AArg0: Integer; const AArg1: JObject);
    procedure clear;
    function clone: JObject;
    procedure delete(const AArg0: Integer);
    function get(const AArg0: Integer): JObject; overload;
    function get(const AArg0: Integer; const AArg1: JObject): JObject; overload;
    function indexOfKey(const AArg0: Integer): Integer;
    function indexOfValue(const AArg0: JObject): Integer;
    function keyAt(const AArg0: Integer): Integer;
    procedure put(const AArg0: Integer; const AArg1: JObject);
    procedure remove(const AArg0: Integer);
    procedure removeAt(const AArg0: Integer);
    procedure removeAtRange(const AArg0: Integer; const AArg1: Integer);
    procedure setValueAt(const AArg0: Integer; const AArg1: JObject);
    function size: Integer;
    function toString: JString; reintroduce;
    function valueAt(const AArg0: Integer): JObject;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JSparseArray; overload;
    class function Wrap(const AObject: IJNIObject): JSparseArray; overload;
    { constructors }
    class function Create: JSparseArray; overload;
    class function Create(const AArg0: Integer): JSparseArray; overload;
  end;

{ android.util.TypedValue }

  [JavaClassSignature('android/util/TypedValue')]
  JTypedValue = interface(JObject)
    ['{96461406-5427-4625-8DED-AB2CE7E1A3F5}']
    function _GetAssetCookie: Integer;
    procedure _SetAssetCookie(const AValue: Integer);
    function _GetChangingConfigurations: Integer;
    procedure _SetChangingConfigurations(const AValue: Integer);
    function _GetData: Integer;
    procedure _SetData(const AValue: Integer);
    function _GetDensity: Integer;
    procedure _SetDensity(const AValue: Integer);
    function _GetResourceId: Integer;
    procedure _SetResourceId(const AValue: Integer);
    function _GetString: JCharSequence;
    procedure _SetString(const AValue: JCharSequence);
    function _GetType: Integer;
    procedure _SetType(const AValue: Integer);
    function coerceToString: JCharSequence; overload;
    function getComplexUnit: Integer; // Introduced in 22';
    function getDimension(const AArg0: JDisplayMetrics): Single;
    function getFloat: Single;
    function getFraction(const AArg0: Single; const AArg1: Single): Single;
    procedure setTo(const AArg0: JTypedValue);
    function toString: JString;
    { constants }
    property assetCookie: Integer read _GetAssetCookie write _SetAssetCookie;
    property changingConfigurations: Integer read _GetChangingConfigurations write _SetChangingConfigurations;
    property data: Integer read _GetData write _SetData;
    property density: Integer read _GetDensity write _SetDensity;
    property resourceId: Integer read _GetResourceId write _SetResourceId;
    property &string: JCharSequence read _GetString write _SetString;
    property &type: Integer read _GetType write _SetType;
  end;

  [JavaClassSignature('android/util/TypedValue')]
  TJTypedValue = class(TJObject, JTypedValue)
  private
    function _GetAssetCookie: Integer;
    procedure _SetAssetCookie(const AValue: Integer);
    function _GetChangingConfigurations: Integer;
    procedure _SetChangingConfigurations(const AValue: Integer);
    function _GetData: Integer;
    procedure _SetData(const AValue: Integer);
    function _GetDensity: Integer;
    procedure _SetDensity(const AValue: Integer);
    function _GetResourceId: Integer;
    procedure _SetResourceId(const AValue: Integer);
    function _GetString: JCharSequence;
    procedure _SetString(const AValue: JCharSequence);
    function _GetType: Integer;
    procedure _SetType(const AValue: Integer);
  private
    { methods }
    function coerceToString: JCharSequence; overload;
    function getComplexUnit: Integer; // Introduced in 22';
    function getDimension(const AArg0: JDisplayMetrics): Single;
    function getFloat: Single;
    function getFraction(const AArg0: Single; const AArg1: Single): Single;
    procedure setTo(const AArg0: JTypedValue);
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JTypedValue; overload;
    class function Wrap(const AObject: IJNIObject): JTypedValue; overload;
    { constructors }
    class function Create: JTypedValue; overload;
    { constants }
    class function COMPLEX_MANTISSA_MASK: Integer;
    class function COMPLEX_MANTISSA_SHIFT: Integer;
    class function COMPLEX_RADIX_0p23: Integer;
    class function COMPLEX_RADIX_16p7: Integer;
    class function COMPLEX_RADIX_23p0: Integer;
    class function COMPLEX_RADIX_8p15: Integer;
    class function COMPLEX_RADIX_MASK: Integer;
    class function COMPLEX_RADIX_SHIFT: Integer;
    class function COMPLEX_UNIT_DIP: Integer;
    class function COMPLEX_UNIT_FRACTION: Integer;
    class function COMPLEX_UNIT_FRACTION_PARENT: Integer;
    class function COMPLEX_UNIT_IN: Integer;
    class function COMPLEX_UNIT_MASK: Integer;
    class function COMPLEX_UNIT_MM: Integer;
    class function COMPLEX_UNIT_PT: Integer;
    class function COMPLEX_UNIT_PX: Integer;
    class function COMPLEX_UNIT_SHIFT: Integer;
    class function COMPLEX_UNIT_SP: Integer;
    class function DATA_NULL_EMPTY: Integer;
    class function DATA_NULL_UNDEFINED: Integer;
    class function DENSITY_DEFAULT: Integer;
    class function DENSITY_NONE: Integer;
    class function TYPE_ATTRIBUTE: Integer;
    class function TYPE_DIMENSION: Integer;
    class function TYPE_FIRST_COLOR_INT: Integer;
    class function TYPE_FIRST_INT: Integer;
    class function TYPE_FLOAT: Integer;
    class function TYPE_FRACTION: Integer;
    class function TYPE_INT_BOOLEAN: Integer;
    class function TYPE_INT_COLOR_ARGB4: Integer;
    class function TYPE_INT_COLOR_ARGB8: Integer;
    class function TYPE_INT_COLOR_RGB4: Integer;
    class function TYPE_INT_COLOR_RGB8: Integer;
    class function TYPE_INT_DEC: Integer;
    class function TYPE_INT_HEX: Integer;
    class function TYPE_LAST_COLOR_INT: Integer;
    class function TYPE_LAST_INT: Integer;
    class function TYPE_NULL: Integer;
    class function TYPE_REFERENCE: Integer;
    class function TYPE_STRING: Integer;
    { methods }
    class function applyDimension(const AArg0: Integer; const AArg1: Single; const AArg2: JDisplayMetrics): Single;
    class function coerceToString(const AArg0: Integer; const AArg1: Integer): JString; overload;
    class function complexToDimension(const AArg0: Integer; const AArg1: JDisplayMetrics): Single;
    class function complexToDimensionPixelOffset(const AArg0: Integer; const AArg1: JDisplayMetrics): Integer;
    class function complexToDimensionPixelSize(const AArg0: Integer; const AArg1: JDisplayMetrics): Integer;
    class function complexToFloat(const AArg0: Integer): Single;
    class function complexToFraction(const AArg0: Integer; const AArg1: Single; const AArg2: Single): Single;
  end;

{ android.app.Fragment }

  [JavaClassSignature('android/app/Fragment')]
  JFragment = interface(JObject)
    ['{584937CC-7164-4811-A1D5-B3A1B6F2412E}']
    function equals(const AArg0: JObject): Boolean;
    function getActivity: JActivity; deprecated 'Deprecated in 29';
    function getAllowEnterTransitionOverlap: Boolean; deprecated 'Deprecated in 29';
    function getAllowReturnTransitionOverlap: Boolean; deprecated 'Deprecated in 29';
    function getArguments: JBundle; deprecated 'Deprecated in 29';
    function getChildFragmentManager: JFragmentManager; deprecated 'Deprecated in 29';
    function getContext: JContext; deprecated 'Deprecated in 29';
    function getFragmentManager: JFragmentManager; deprecated 'Deprecated in 29';
    function getHost: JObject; deprecated 'Deprecated in 29';
    function getId: Integer; deprecated 'Deprecated in 29';
    function getLayoutInflater: JLayoutInflater; deprecated 'Deprecated in 29';
    function getParentFragment: JFragment; deprecated 'Deprecated in 29';
    function getResources: JResources; deprecated 'Deprecated in 29';
    function getRetainInstance: Boolean; deprecated 'Deprecated in 29';
    function getString(const AArg0: Integer): JString; overload; deprecated 'Deprecated in 29';
    function getString(const AArg0: Integer; const AArg1: IJavaArray<JObject>): JString; overload; deprecated 'Deprecated in 29';
    function getTag: JString; deprecated 'Deprecated in 29';
    function getTargetFragment: JFragment; deprecated 'Deprecated in 29';
    function getTargetRequestCode: Integer; deprecated 'Deprecated in 29';
    function getText(const AArg0: Integer): JCharSequence; deprecated 'Deprecated in 29';
    function getUserVisibleHint: Boolean; deprecated 'Deprecated in 29';
    function getView: JView; deprecated 'Deprecated in 29';
    function hashCode: Integer;
    function isAdded: Boolean; deprecated 'Deprecated in 29';
    function isDetached: Boolean; deprecated 'Deprecated in 29';
    function isHidden: Boolean; deprecated 'Deprecated in 29';
    function isInLayout: Boolean; deprecated 'Deprecated in 29';
    function isRemoving: Boolean; deprecated 'Deprecated in 29';
    function isResumed: Boolean; deprecated 'Deprecated in 29';
    function isStateSaved: Boolean; deprecated 'Deprecated in 29';
    function isVisible: Boolean; deprecated 'Deprecated in 29';
    procedure onActivityCreated(const AArg0: JBundle); deprecated 'Deprecated in 29';
    procedure onActivityResult(const AArg0: Integer; const AArg1: Integer; const AArg2: JIntent); deprecated 'Deprecated in 29';
    procedure onAttach(const AArg0: JActivity); overload; deprecated 'Deprecated in 23';
    procedure onAttach(const AArg0: JContext); overload; deprecated 'Deprecated in 29';
    procedure onAttachFragment(const AArg0: JFragment); deprecated 'Deprecated in 29';
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    function onContextItemSelected(const AArg0: JMenuItem): Boolean; deprecated 'Deprecated in 29';
    procedure onCreate(const AArg0: JBundle); deprecated 'Deprecated in 29';
    function onCreateAnimator(const AArg0: Integer; const AArg1: Boolean; const AArg2: Integer): JObject {JAnimator}; deprecated 'Deprecated in 29';
    function onCreateView(const AArg0: JLayoutInflater; const AArg1: JViewGroup; const AArg2: JBundle): JView; deprecated 'Deprecated in 29';
    procedure onDestroy; deprecated 'Deprecated in 29';
    procedure onDestroyOptionsMenu; deprecated 'Deprecated in 29';
    procedure onDestroyView; deprecated 'Deprecated in 29';
    procedure onDetach; deprecated 'Deprecated in 29';
    function onGetLayoutInflater(const AArg0: JBundle): JLayoutInflater; deprecated 'Deprecated in 29';
    procedure onHiddenChanged(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure onInflate(const AArg0: JActivity; const AArg1: JAttributeSet; const AArg2: JBundle); overload; deprecated 'Deprecated in 23';
    procedure onInflate(const AArg0: JAttributeSet; const AArg1: JBundle); overload; deprecated 'Deprecated in 15';
    procedure onInflate(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: JBundle); overload; deprecated 'Deprecated in 29';
    procedure onLowMemory;
    procedure onMultiWindowModeChanged(const AArg0: Boolean; const AArg1: JConfiguration); overload; deprecated 'Deprecated in 29';
    procedure onMultiWindowModeChanged(const AArg0: Boolean); overload; deprecated 'Deprecated in 26';
    function onOptionsItemSelected(const AArg0: JMenuItem): Boolean; deprecated 'Deprecated in 29';
    procedure onOptionsMenuClosed(const AArg0: JMenu); deprecated 'Deprecated in 29';
    procedure onPause; deprecated 'Deprecated in 29';
    procedure onPictureInPictureModeChanged(const AArg0: Boolean); overload; deprecated 'Deprecated in 26';
    procedure onPictureInPictureModeChanged(const AArg0: Boolean; const AArg1: JConfiguration); overload; deprecated 'Deprecated in 29';
    procedure onPrepareOptionsMenu(const AArg0: JMenu); deprecated 'Deprecated in 29';
    procedure onRequestPermissionsResult(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: IJavaArray<Integer>); deprecated 'Deprecated in 29';
    procedure onResume; deprecated 'Deprecated in 29';
    procedure onSaveInstanceState(const AArg0: JBundle); deprecated 'Deprecated in 29';
    procedure onStart; deprecated 'Deprecated in 29';
    procedure onStop; deprecated 'Deprecated in 29';
    procedure onTrimMemory(const AArg0: Integer);
    procedure onViewCreated(const AArg0: JView; const AArg1: JBundle); deprecated 'Deprecated in 29';
    procedure onViewStateRestored(const AArg0: JBundle); deprecated 'Deprecated in 29';
    procedure postponeEnterTransition; deprecated 'Deprecated in 29';
    procedure registerForContextMenu(const AArg0: JView); deprecated 'Deprecated in 29';
    procedure requestPermissions(const AArg0: IJavaArray<JString>; const AArg1: Integer); deprecated 'Deprecated in 29';
    procedure setAllowEnterTransitionOverlap(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setAllowReturnTransitionOverlap(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setArguments(const AArg0: JBundle); deprecated 'Deprecated in 29';
    procedure setHasOptionsMenu(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setMenuVisibility(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setRetainInstance(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setTargetFragment(const AArg0: JFragment; const AArg1: Integer); deprecated 'Deprecated in 29';
    procedure setUserVisibleHint(const AArg0: Boolean); deprecated 'Deprecated in 29';
    function shouldShowRequestPermissionRationale(const AArg0: JString): Boolean; deprecated 'Deprecated in 29';
    procedure startActivity(const AArg0: JIntent; const AArg1: JBundle); overload; deprecated 'Deprecated in 29';
    procedure startActivity(const AArg0: JIntent); overload; deprecated 'Deprecated in 29';
    procedure startActivityForResult(const AArg0: JIntent; const AArg1: Integer); overload; deprecated 'Deprecated in 29';
    procedure startActivityForResult(const AArg0: JIntent; const AArg1: Integer; const AArg2: JBundle); overload; deprecated 'Deprecated in 29';
    procedure startIntentSenderForResult(const AArg0: JIntentSender; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JBundle); deprecated 'Deprecated in 29';
    procedure startPostponedEnterTransition; deprecated 'Deprecated in 29';
    function toString: JString;
    procedure unregisterForContextMenu(const AArg0: JView); deprecated 'Deprecated in 29';
  end;

  [JavaClassSignature('android/app/Fragment')]
  TJFragment = class(TJObject, JFragment)
  private
    { methods }
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function getActivity: JActivity; deprecated 'Deprecated in 29';
    function getAllowEnterTransitionOverlap: Boolean; deprecated 'Deprecated in 29';
    function getAllowReturnTransitionOverlap: Boolean; deprecated 'Deprecated in 29';
    function getArguments: JBundle; deprecated 'Deprecated in 29';
    function getChildFragmentManager: JFragmentManager; deprecated 'Deprecated in 29';
    function getContext: JContext; deprecated 'Deprecated in 29';
    function getFragmentManager: JFragmentManager; deprecated 'Deprecated in 29';
    function getHost: JObject; deprecated 'Deprecated in 29';
    function getId: Integer; deprecated 'Deprecated in 29';
    function getLayoutInflater: JLayoutInflater; deprecated 'Deprecated in 29';
    function getParentFragment: JFragment; deprecated 'Deprecated in 29';
    function getResources: JResources; deprecated 'Deprecated in 29';
    function getRetainInstance: Boolean; deprecated 'Deprecated in 29';
    function getString(const AArg0: Integer): JString; overload; deprecated 'Deprecated in 29';
    function getString(const AArg0: Integer; const AArg1: IJavaArray<JObject>): JString; overload; deprecated 'Deprecated in 29';
    function getTag: JString; deprecated 'Deprecated in 29';
    function getTargetFragment: JFragment; deprecated 'Deprecated in 29';
    function getTargetRequestCode: Integer; deprecated 'Deprecated in 29';
    function getText(const AArg0: Integer): JCharSequence; deprecated 'Deprecated in 29';
    function getUserVisibleHint: Boolean; deprecated 'Deprecated in 29';
    function getView: JView; deprecated 'Deprecated in 29';
    function hashCode: Integer;
    function isAdded: Boolean; deprecated 'Deprecated in 29';
    function isDetached: Boolean; deprecated 'Deprecated in 29';
    function isHidden: Boolean; deprecated 'Deprecated in 29';
    function isInLayout: Boolean; deprecated 'Deprecated in 29';
    function isRemoving: Boolean; deprecated 'Deprecated in 29';
    function isResumed: Boolean; deprecated 'Deprecated in 29';
    function isStateSaved: Boolean; deprecated 'Deprecated in 29';
    function isVisible: Boolean; deprecated 'Deprecated in 29';
    procedure onActivityCreated(const AArg0: JBundle); deprecated 'Deprecated in 29';
    procedure onActivityResult(const AArg0: Integer; const AArg1: Integer; const AArg2: JIntent); deprecated 'Deprecated in 29';
    procedure onAttach(const AArg0: JActivity); overload; deprecated 'Deprecated in 23';
    procedure onAttach(const AArg0: JContext); overload; deprecated 'Deprecated in 29';
    procedure onAttachFragment(const AArg0: JFragment); deprecated 'Deprecated in 29';
    procedure onConfigurationChanged(const AArg0: JConfiguration);
    function onContextItemSelected(const AArg0: JMenuItem): Boolean; deprecated 'Deprecated in 29';
    procedure onCreate(const AArg0: JBundle); deprecated 'Deprecated in 29';
    function onCreateAnimator(const AArg0: Integer; const AArg1: Boolean; const AArg2: Integer): JObject {JAnimator}; deprecated 'Deprecated in 29';
    function onCreateView(const AArg0: JLayoutInflater; const AArg1: JViewGroup; const AArg2: JBundle): JView; deprecated 'Deprecated in 29';
    procedure onDestroy; deprecated 'Deprecated in 29';
    procedure onDestroyOptionsMenu; deprecated 'Deprecated in 29';
    procedure onDestroyView; deprecated 'Deprecated in 29';
    procedure onDetach; deprecated 'Deprecated in 29';
    function onGetLayoutInflater(const AArg0: JBundle): JLayoutInflater; deprecated 'Deprecated in 29';
    procedure onHiddenChanged(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure onInflate(const AArg0: JActivity; const AArg1: JAttributeSet; const AArg2: JBundle); overload; deprecated 'Deprecated in 23';
    procedure onInflate(const AArg0: JAttributeSet; const AArg1: JBundle); overload; deprecated 'Deprecated in 15';
    procedure onInflate(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: JBundle); overload; deprecated 'Deprecated in 29';
    procedure onLowMemory;
    procedure onMultiWindowModeChanged(const AArg0: Boolean; const AArg1: JConfiguration); overload; deprecated 'Deprecated in 29';
    procedure onMultiWindowModeChanged(const AArg0: Boolean); overload; deprecated 'Deprecated in 26';
    function onOptionsItemSelected(const AArg0: JMenuItem): Boolean; deprecated 'Deprecated in 29';
    procedure onOptionsMenuClosed(const AArg0: JMenu); deprecated 'Deprecated in 29';
    procedure onPause; deprecated 'Deprecated in 29';
    procedure onPictureInPictureModeChanged(const AArg0: Boolean); overload; deprecated 'Deprecated in 26';
    procedure onPictureInPictureModeChanged(const AArg0: Boolean; const AArg1: JConfiguration); overload; deprecated 'Deprecated in 29';
    procedure onPrepareOptionsMenu(const AArg0: JMenu); deprecated 'Deprecated in 29';
    procedure onRequestPermissionsResult(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: IJavaArray<Integer>); deprecated 'Deprecated in 29';
    procedure onResume; deprecated 'Deprecated in 29';
    procedure onSaveInstanceState(const AArg0: JBundle); deprecated 'Deprecated in 29';
    procedure onStart; deprecated 'Deprecated in 29';
    procedure onStop; deprecated 'Deprecated in 29';
    procedure onTrimMemory(const AArg0: Integer);
    procedure onViewCreated(const AArg0: JView; const AArg1: JBundle); deprecated 'Deprecated in 29';
    procedure onViewStateRestored(const AArg0: JBundle); deprecated 'Deprecated in 29';
    procedure postponeEnterTransition; deprecated 'Deprecated in 29';
    procedure registerForContextMenu(const AArg0: JView); deprecated 'Deprecated in 29';
    procedure requestPermissions(const AArg0: IJavaArray<JString>; const AArg1: Integer); deprecated 'Deprecated in 29';
    procedure setAllowEnterTransitionOverlap(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setAllowReturnTransitionOverlap(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setArguments(const AArg0: JBundle); deprecated 'Deprecated in 29';
    procedure setHasOptionsMenu(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setMenuVisibility(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setRetainInstance(const AArg0: Boolean); deprecated 'Deprecated in 29';
    procedure setTargetFragment(const AArg0: JFragment; const AArg1: Integer); deprecated 'Deprecated in 29';
    procedure setUserVisibleHint(const AArg0: Boolean); deprecated 'Deprecated in 29';
    function shouldShowRequestPermissionRationale(const AArg0: JString): Boolean; deprecated 'Deprecated in 29';
    procedure startActivity(const AArg0: JIntent; const AArg1: JBundle); overload; deprecated 'Deprecated in 29';
    procedure startActivity(const AArg0: JIntent); overload; deprecated 'Deprecated in 29';
    procedure startActivityForResult(const AArg0: JIntent; const AArg1: Integer); overload; deprecated 'Deprecated in 29';
    procedure startActivityForResult(const AArg0: JIntent; const AArg1: Integer; const AArg2: JBundle); overload; deprecated 'Deprecated in 29';
    procedure startIntentSenderForResult(const AArg0: JIntentSender; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JBundle); deprecated 'Deprecated in 29';
    procedure startPostponedEnterTransition; deprecated 'Deprecated in 29';
    function toString: JString; reintroduce;
    procedure unregisterForContextMenu(const AArg0: JView); deprecated 'Deprecated in 29';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JFragment; overload;
    class function Wrap(const AObject: IJNIObject): JFragment; overload;
    { constructors }
    class function Create: JFragment; overload;
    { methods }
    class function instantiate(const AArg0: JContext; const AArg1: JString): JFragment; overload; deprecated 'Deprecated in 29';
    class function instantiate(const AArg0: JContext; const AArg1: JString; const AArg2: JBundle): JFragment; overload; deprecated 'Deprecated in 29';
  end;

{ android.app.FragmentManager }

  [JavaClassSignature('android/app/FragmentManager')]
  JFragmentManager = interface(JObject)
    ['{A2C932E9-B0DA-4DC8-A53C-C3A6DF7D77A1}']
    function beginTransaction: JFragmentTransaction; deprecated 'Deprecated in 29';
    function executePendingTransactions: Boolean; deprecated 'Deprecated in 29';
    function findFragmentById(const AArg0: Integer): JFragment; deprecated 'Deprecated in 29';
    function findFragmentByTag(const AArg0: JString): JFragment; deprecated 'Deprecated in 29';
    function getBackStackEntryCount: Integer; deprecated 'Deprecated in 29';
    function getFragment(const AArg0: JBundle; const AArg1: JString): JFragment; deprecated 'Deprecated in 29';
    function getFragments: JList; deprecated 'Deprecated in 29';
    function getPrimaryNavigationFragment: JFragment; deprecated 'Deprecated in 29';
    procedure invalidateOptionsMenu; deprecated 'Deprecated in 29';
    function isDestroyed: Boolean; deprecated 'Deprecated in 29';
    function isStateSaved: Boolean; deprecated 'Deprecated in 29';
    procedure popBackStack(const AArg0: Integer; const AArg1: Integer); overload; deprecated 'Deprecated in 29';
    procedure popBackStack(const AArg0: JString; const AArg1: Integer); overload; deprecated 'Deprecated in 29';
    procedure popBackStack; overload; deprecated 'Deprecated in 29';
    function popBackStackImmediate: Boolean; overload; deprecated 'Deprecated in 29';
    function popBackStackImmediate(const AArg0: JString; const AArg1: Integer): Boolean; overload; deprecated 'Deprecated in 29';
    function popBackStackImmediate(const AArg0: Integer; const AArg1: Integer): Boolean; overload; deprecated 'Deprecated in 29';
    procedure putFragment(const AArg0: JBundle; const AArg1: JString; const AArg2: JFragment); deprecated 'Deprecated in 29';
  end;

  [JavaClassSignature('android/app/FragmentManager')]
  TJFragmentManager = class(TJObject, JFragmentManager)
  private
    { methods }
    function beginTransaction: JFragmentTransaction; deprecated 'Deprecated in 29';
    function executePendingTransactions: Boolean; deprecated 'Deprecated in 29';
    function findFragmentById(const AArg0: Integer): JFragment; deprecated 'Deprecated in 29';
    function findFragmentByTag(const AArg0: JString): JFragment; deprecated 'Deprecated in 29';
    function getBackStackEntryCount: Integer; deprecated 'Deprecated in 29';
    function getFragment(const AArg0: JBundle; const AArg1: JString): JFragment; deprecated 'Deprecated in 29';
    function getFragments: JList; deprecated 'Deprecated in 29';
    function getPrimaryNavigationFragment: JFragment; deprecated 'Deprecated in 29';
    procedure invalidateOptionsMenu; deprecated 'Deprecated in 29';
    function isDestroyed: Boolean; deprecated 'Deprecated in 29';
    function isStateSaved: Boolean; deprecated 'Deprecated in 29';
    procedure popBackStack(const AArg0: Integer; const AArg1: Integer); overload; deprecated 'Deprecated in 29';
    procedure popBackStack(const AArg0: JString; const AArg1: Integer); overload; deprecated 'Deprecated in 29';
    procedure popBackStack; overload; deprecated 'Deprecated in 29';
    function popBackStackImmediate: Boolean; overload; deprecated 'Deprecated in 29';
    function popBackStackImmediate(const AArg0: JString; const AArg1: Integer): Boolean; overload; deprecated 'Deprecated in 29';
    function popBackStackImmediate(const AArg0: Integer; const AArg1: Integer): Boolean; overload; deprecated 'Deprecated in 29';
    procedure putFragment(const AArg0: JBundle; const AArg1: JString; const AArg2: JFragment); deprecated 'Deprecated in 29';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JFragmentManager; overload;
    class function Wrap(const AObject: IJNIObject): JFragmentManager; overload;
    { constructors }
    class function Create: JFragmentManager; overload;
    { constants }
    class function POP_BACK_STACK_INCLUSIVE: Integer;
    { methods }
    class procedure enableDebugLogging(const AArg0: Boolean); deprecated 'Deprecated in 29';
  end;

{ android.app.FragmentTransaction }

  [JavaClassSignature('android/app/FragmentTransaction')]
  JFragmentTransaction = interface(JObject)
    ['{5F0824A0-3B9A-443F-A70F-84CB493EFA85}']
    function add(const AArg0: Integer; const AArg1: JFragment; const AArg2: JString): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function add(const AArg0: Integer; const AArg1: JFragment): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function add(const AArg0: JFragment; const AArg1: JString): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function addSharedElement(const AArg0: JView; const AArg1: JString): JFragmentTransaction; deprecated 'Deprecated in 29';
    function addToBackStack(const AArg0: JString): JFragmentTransaction; deprecated 'Deprecated in 29';
    function attach(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function commit: Integer; deprecated 'Deprecated in 29';
    function commitAllowingStateLoss: Integer; deprecated 'Deprecated in 29';
    procedure commitNow; deprecated 'Deprecated in 29';
    procedure commitNowAllowingStateLoss; deprecated 'Deprecated in 29';
    function detach(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function disallowAddToBackStack: JFragmentTransaction; deprecated 'Deprecated in 29';
    function hide(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function isAddToBackStackAllowed: Boolean; deprecated 'Deprecated in 29';
    function isEmpty: Boolean; deprecated 'Deprecated in 29';
    function remove(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function replace(const AArg0: Integer; const AArg1: JFragment; const AArg2: JString): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function replace(const AArg0: Integer; const AArg1: JFragment): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function runOnCommit(const AArg0: JRunnable): JFragmentTransaction; deprecated 'Deprecated in 29';
    function setBreadCrumbShortTitle(const AArg0: Integer): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setBreadCrumbShortTitle(const AArg0: JCharSequence): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setBreadCrumbTitle(const AArg0: JCharSequence): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setBreadCrumbTitle(const AArg0: Integer): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setCustomAnimations(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setCustomAnimations(const AArg0: Integer; const AArg1: Integer): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setPrimaryNavigationFragment(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function setReorderingAllowed(const AArg0: Boolean): JFragmentTransaction; deprecated 'Deprecated in 29';
    function setTransition(const AArg0: Integer): JFragmentTransaction; deprecated 'Deprecated in 29';
    function setTransitionStyle(const AArg0: Integer): JFragmentTransaction; deprecated 'Deprecated in 29';
    function show(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
  end;

  [JavaClassSignature('android/app/FragmentTransaction')]
  TJFragmentTransaction = class(TJObject, JFragmentTransaction)
  private
    { methods }
    function add(const AArg0: Integer; const AArg1: JFragment; const AArg2: JString): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function add(const AArg0: Integer; const AArg1: JFragment): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function add(const AArg0: JFragment; const AArg1: JString): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function addSharedElement(const AArg0: JView; const AArg1: JString): JFragmentTransaction; deprecated 'Deprecated in 29';
    function addToBackStack(const AArg0: JString): JFragmentTransaction; deprecated 'Deprecated in 29';
    function attach(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function commit: Integer; deprecated 'Deprecated in 29';
    function commitAllowingStateLoss: Integer; deprecated 'Deprecated in 29';
    procedure commitNow; deprecated 'Deprecated in 29';
    procedure commitNowAllowingStateLoss; deprecated 'Deprecated in 29';
    function detach(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function disallowAddToBackStack: JFragmentTransaction; deprecated 'Deprecated in 29';
    function hide(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function isAddToBackStackAllowed: Boolean; deprecated 'Deprecated in 29';
    function isEmpty: Boolean; deprecated 'Deprecated in 29';
    function remove(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function replace(const AArg0: Integer; const AArg1: JFragment; const AArg2: JString): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function replace(const AArg0: Integer; const AArg1: JFragment): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function runOnCommit(const AArg0: JRunnable): JFragmentTransaction; deprecated 'Deprecated in 29';
    function setBreadCrumbShortTitle(const AArg0: Integer): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setBreadCrumbShortTitle(const AArg0: JCharSequence): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setBreadCrumbTitle(const AArg0: JCharSequence): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setBreadCrumbTitle(const AArg0: Integer): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setCustomAnimations(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setCustomAnimations(const AArg0: Integer; const AArg1: Integer): JFragmentTransaction; overload; deprecated 'Deprecated in 29';
    function setPrimaryNavigationFragment(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
    function setReorderingAllowed(const AArg0: Boolean): JFragmentTransaction; deprecated 'Deprecated in 29';
    function setTransition(const AArg0: Integer): JFragmentTransaction; deprecated 'Deprecated in 29';
    function setTransitionStyle(const AArg0: Integer): JFragmentTransaction; deprecated 'Deprecated in 29';
    function show(const AArg0: JFragment): JFragmentTransaction; deprecated 'Deprecated in 29';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JFragmentTransaction; overload;
    class function Wrap(const AObject: IJNIObject): JFragmentTransaction; overload;
    { constructors }
    class function Create: JFragmentTransaction; overload;
    { constants }
    class function TRANSIT_ENTER_MASK: Integer;
    class function TRANSIT_EXIT_MASK: Integer;
    class function TRANSIT_FRAGMENT_CLOSE: Integer;
    class function TRANSIT_FRAGMENT_FADE: Integer;
    class function TRANSIT_FRAGMENT_OPEN: Integer;
    class function TRANSIT_NONE: Integer;
    class function TRANSIT_UNSET: Integer;
  end;

{ android.app.ActivityManager_TaskDescription }

  [JavaClassSignature('android/app/ActivityManager$TaskDescription')]
  JActivityManager_TaskDescription = interface(JObject)
    ['{1522A4DE-F697-4637-AC48-FF7D44E08B65}']
    function describeContents: Integer;
    function getIcon: JBitmap;
    function getLabel: JString;
    function getPrimaryColor: Integer;
    function toString: JString;
  end;

  [JavaClassSignature('android/app/ActivityManager$TaskDescription')]
  TJActivityManager_TaskDescription = class(TJObject, JActivityManager_TaskDescription)
  private
    { methods }
    function describeContents: Integer;
    function getIcon: JBitmap;
    function getLabel: JString;
    function getPrimaryColor: Integer;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JActivityManager_TaskDescription; overload;
    class function Wrap(const AObject: IJNIObject): JActivityManager_TaskDescription; overload;
    { constructors }
    class function Create(const AArg0: JString; const AArg1: JBitmap; const AArg2: Integer): JActivityManager_TaskDescription; overload;
    class function Create(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): JActivityManager_TaskDescription; overload;
    class function Create(const AArg0: JString; const AArg1: JBitmap): JActivityManager_TaskDescription; overload;
    class function Create(const AArg0: JString; const AArg1: Integer): JActivityManager_TaskDescription; overload;
    class function Create(const AArg0: JString): JActivityManager_TaskDescription; overload;
    class function Create: JActivityManager_TaskDescription; overload;
    class function Create(const AArg0: JActivityManager_TaskDescription): JActivityManager_TaskDescription; overload;
  end;

{ android.app.AlarmManager }

  [JavaClassSignature('android/app/AlarmManager')]
  JAlarmManager = interface(JObject)
    ['{FA7FC29C-86CD-4DC4-887E-F21B924E3F46}']
    procedure cancel(const AArg0: JPendingIntent); overload;
    procedure cancel(const AArg0: JAlarmManager_OnAlarmListener); overload; // Introduced in 24';
    function getNextAlarmClock: JAlarmManager_AlarmClockInfo;
    procedure &set(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent); overload;
    procedure &set(const AArg0: Integer; const AArg1: Int64; const AArg2: JString; const AArg3: JAlarmManager_OnAlarmListener; const AArg4: JHandler); overload; // Introduced in 24';
    procedure setAlarmClock(const AArg0: JAlarmManager_AlarmClockInfo; const AArg1: JPendingIntent);
    procedure setAndAllowWhileIdle(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent); // Introduced in 23';
    procedure setExact(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent); overload;
    procedure setExact(const AArg0: Integer; const AArg1: Int64; const AArg2: JString; const AArg3: JAlarmManager_OnAlarmListener; const AArg4: JHandler); overload; // Introduced in 24';
    procedure setExactAndAllowWhileIdle(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent); // Introduced in 23';
    procedure setInexactRepeating(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JPendingIntent);
    procedure setRepeating(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JPendingIntent);
    procedure setTime(const AArg0: Int64);
    procedure setTimeZone(const AArg0: JString);
    procedure setWindow(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JPendingIntent); overload;
    procedure setWindow(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JString; const AArg4: JAlarmManager_OnAlarmListener; const AArg5: JHandler); overload; // Introduced in 24';
  end;

  [JavaClassSignature('android/app/AlarmManager')]
  TJAlarmManager = class(TJObject, JAlarmManager)
  private
    { methods }
    procedure cancel(const AArg0: JPendingIntent); overload;
    procedure cancel(const AArg0: JAlarmManager_OnAlarmListener); overload; // Introduced in 24';
    function getNextAlarmClock: JAlarmManager_AlarmClockInfo;
    procedure &set(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent); overload;
    procedure &set(const AArg0: Integer; const AArg1: Int64; const AArg2: JString; const AArg3: JAlarmManager_OnAlarmListener; const AArg4: JHandler); overload; // Introduced in 24';
    procedure setAlarmClock(const AArg0: JAlarmManager_AlarmClockInfo; const AArg1: JPendingIntent);
    procedure setAndAllowWhileIdle(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent); // Introduced in 23';
    procedure setExact(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent); overload;
    procedure setExact(const AArg0: Integer; const AArg1: Int64; const AArg2: JString; const AArg3: JAlarmManager_OnAlarmListener; const AArg4: JHandler); overload; // Introduced in 24';
    procedure setExactAndAllowWhileIdle(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent); // Introduced in 23';
    procedure setInexactRepeating(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JPendingIntent);
    procedure setRepeating(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JPendingIntent);
    procedure setTime(const AArg0: Int64);
    procedure setTimeZone(const AArg0: JString);
    procedure setWindow(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JPendingIntent); overload;
    procedure setWindow(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JString; const AArg4: JAlarmManager_OnAlarmListener; const AArg5: JHandler); overload; // Introduced in 24';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JAlarmManager; overload;
    class function Wrap(const AObject: IJNIObject): JAlarmManager; overload;
    { constants }
    class function ACTION_NEXT_ALARM_CLOCK_CHANGED: JString;
    class function ELAPSED_REALTIME: Integer;
    class function ELAPSED_REALTIME_WAKEUP: Integer;
    class function INTERVAL_DAY: Int64;
    class function INTERVAL_FIFTEEN_MINUTES: Int64;
    class function INTERVAL_HALF_DAY: Int64;
    class function INTERVAL_HALF_HOUR: Int64;
    class function INTERVAL_HOUR: Int64;
    class function RTC: Integer;
    class function RTC_WAKEUP: Integer;
  end;

{ android.app.AlarmManager_AlarmClockInfo }

  [JavaClassSignature('android/app/AlarmManager$AlarmClockInfo')]
  JAlarmManager_AlarmClockInfo = interface(JObject)
    ['{BE063100-D730-4110-A25C-71B2A2B6D427}']
    function describeContents: Integer;
    function getShowIntent: JPendingIntent;
    function getTriggerTime: Int64;
  end;

  [JavaClassSignature('android/app/AlarmManager$AlarmClockInfo')]
  TJAlarmManager_AlarmClockInfo = class(TJObject, JAlarmManager_AlarmClockInfo)
  private
    { methods }
    function describeContents: Integer;
    function getShowIntent: JPendingIntent;
    function getTriggerTime: Int64;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JAlarmManager_AlarmClockInfo; overload;
    class function Wrap(const AObject: IJNIObject): JAlarmManager_AlarmClockInfo; overload;
    { constructors }
    class function Create(const AArg0: Int64; const AArg1: JPendingIntent): JAlarmManager_AlarmClockInfo; overload;
  end;

{ android.app.AlarmManager_OnAlarmListener - interface }

  [JavaClassSignature('android/app/AlarmManager$OnAlarmListener')]
  JAlarmManager_OnAlarmListener = interface(IJavaObject)
    ['{2700D014-8525-4A08-BC56-D5F5D23B4ADE}']
    procedure onAlarm;
  end;

  [JavaClassSignature('android/app/AlarmManager$OnAlarmListener')]
  TJAlarmManager_OnAlarmListener = class(TJObject, JAlarmManager_OnAlarmListener)
  private
    { methods }
    procedure onAlarm;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JAlarmManager_OnAlarmListener; overload;
    class function Wrap(const AObject: IJNIObject): JAlarmManager_OnAlarmListener; overload;
  end;

{ android.app.PendingIntent }

  [JavaClassSignature('android/app/PendingIntent')]
  JPendingIntent = interface(JObject)
    ['{9BD4B070-0F22-4FAB-BB21-FA0EB1340374}']
    procedure cancel;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean;
    function getCreatorPackage: JString;
    function getCreatorUid: Integer;
    function getCreatorUserHandle: JUserHandle;
    function getIntentSender: JIntentSender;
    function getTargetPackage: JString; deprecated 'Deprecated in 17';
    function hashCode: Integer;
    procedure send(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent); overload;
    procedure send(const AArg0: Integer); overload;
    procedure send; overload;
    function toString: JString;
  end;

  [JavaClassSignature('android/app/PendingIntent')]
  TJPendingIntent = class(TJObject, JPendingIntent)
  private
    { methods }
    procedure cancel;
    function describeContents: Integer;
    function equals(const AArg0: JObject): Boolean; reintroduce;
    function getCreatorPackage: JString;
    function getCreatorUid: Integer;
    function getCreatorUserHandle: JUserHandle;
    function getIntentSender: JIntentSender;
    function getTargetPackage: JString; deprecated 'Deprecated in 17';
    function hashCode: Integer;
    procedure send(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent); overload;
    procedure send(const AArg0: Integer); overload;
    procedure send; overload;
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPendingIntent; overload;
    class function Wrap(const AObject: IJNIObject): JPendingIntent; overload;
    { constants }
    class function FLAG_CANCEL_CURRENT: Integer;
    class function FLAG_IMMUTABLE: Integer;
    class function FLAG_NO_CREATE: Integer;
    class function FLAG_ONE_SHOT: Integer;
    class function FLAG_UPDATE_CURRENT: Integer;
    { methods }
    class function getActivities(const AArg0: JContext; const AArg1: Integer; const AArg2: IJavaArray<JIntent>; const AArg3: Integer; const AArg4: JBundle): JPendingIntent; overload;
    class function getActivities(const AArg0: JContext; const AArg1: Integer; const AArg2: IJavaArray<JIntent>; const AArg3: Integer): JPendingIntent; overload;
    class function getActivity(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer): JPendingIntent; overload;
    class function getActivity(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: JBundle): JPendingIntent; overload;
    class function getBroadcast(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer): JPendingIntent;
    class function getForegroundService(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer): JPendingIntent; // Introduced in 26';
    class function getService(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer): JPendingIntent;
  end;

{ android.support.v4.content.ContextCompat }

  [JavaClassSignature('android/support/v4/content/ContextCompat')]
  JContextCompat = interface(JObject)
    ['{8EFDF2A6-A8CF-4BC6-AC66-2D762F95D2B4}']
  end;

  [JavaClassSignature('android/support/v4/content/ContextCompat')]
  TJContextCompat = class(TJObject, JContextCompat)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JContextCompat; overload;
    class function Wrap(const AObject: IJNIObject): JContextCompat; overload;
    { methods }
    class function checkSelfPermission(const AArg0: JContext; const AArg1: JString): Integer;
    class function createDeviceProtectedStorageContext(const AArg0: JContext): JContext;
    class function getCodeCacheDir(const AArg0: JContext): JFile;
    class function getColor(const AArg0: JContext; const AArg1: Integer): Integer;
    class function getColorStateList(const AArg0: JContext; const AArg1: Integer): JColorStateList;
    class function getDataDir(const AArg0: JContext): JFile;
    class function getDrawable(const AArg0: JContext; const AArg1: Integer): JDrawable;
    class function getExternalCacheDirs(const AArg0: JContext): IJavaArray<JFile>;
    class function getExternalFilesDirs(const AArg0: JContext; const AArg1: JString): IJavaArray<JFile>;
    class function getNoBackupFilesDir(const AArg0: JContext): JFile;
    class function getObbDirs(const AArg0: JContext): IJavaArray<JFile>;
    class function isDeviceProtectedStorage(const AArg0: JContext): Boolean;
    class function startActivities(const AArg0: JContext; const AArg1: IJavaArray<JIntent>; const AArg2: JBundle): Boolean; overload;
    class function startActivities(const AArg0: JContext; const AArg1: IJavaArray<JIntent>): Boolean; overload;
    class procedure startActivity(const AArg0: JContext; const AArg1: JIntent; const AArg2: JBundle);
    class procedure startForegroundService(const AArg0: JContext; const AArg1: JIntent);
  end;

{ android.support.v4.app.ActivityCompat }

  [JavaClassSignature('android/support/v4/app/ActivityCompat')]
  JActivityCompat = interface(JContextCompat)
    ['{B19FFE61-CA95-47D5-AA85-2C37C1B8A066}']
  end;

  [JavaClassSignature('android/support/v4/app/ActivityCompat')]
  TJActivityCompat = class(TJContextCompat, JActivityCompat)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JActivityCompat; overload;
    class function Wrap(const AObject: IJNIObject): JActivityCompat; overload;
    { methods }
    class procedure finishAffinity(const AArg0: JActivity);
    class procedure finishAfterTransition(const AArg0: JActivity);
    class function getPermissionCompatDelegate: JActivityCompat_PermissionCompatDelegate;
    class function getReferrer(const AArg0: JActivity): JUri;
    class function invalidateOptionsMenu(const AArg0: JActivity): Boolean;
    class procedure postponeEnterTransition(const AArg0: JActivity);
    class procedure requestPermissions(const AArg0: JActivity; const AArg1: IJavaArray<JString>; const AArg2: Integer);
    class function requireViewById(const AArg0: JActivity; const AArg1: Integer): JView;
    class procedure setPermissionCompatDelegate(const AArg0: JActivityCompat_PermissionCompatDelegate);
    class function shouldShowRequestPermissionRationale(const AArg0: JActivity; const AArg1: JString): Boolean;
    class procedure startActivityForResult(const AArg0: JActivity; const AArg1: JIntent; const AArg2: Integer; const AArg3: JBundle);
    class procedure startIntentSenderForResult(const AArg0: JActivity; const AArg1: JIntentSender; const AArg2: Integer; const AArg3: JIntent; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: JBundle);
    class procedure startPostponedEnterTransition(const AArg0: JActivity);
  end;

{ android.support.v4.content.PermissionChecker }

  [JavaClassSignature('android/support/v4/content/PermissionChecker')]
  JPermissionChecker = interface(JObject)
    ['{70FE8E6B-E185-4B12-B6CA-8EDD0DEB2646}']
  end;

  [JavaClassSignature('android/support/v4/content/PermissionChecker')]
  TJPermissionChecker = class(TJObject, JPermissionChecker)
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JPermissionChecker; overload;
    class function Wrap(const AObject: IJNIObject): JPermissionChecker; overload;
    { constants }
    class function PERMISSION_DENIED: Integer;
    class function PERMISSION_DENIED_APP_OP: Integer;
    class function PERMISSION_GRANTED: Integer;
    { methods }
    class function checkCallingOrSelfPermission(const AArg0: JContext; const AArg1: JString): Integer;
    class function checkCallingPermission(const AArg0: JContext; const AArg1: JString; const AArg2: JString): Integer;
    class function checkPermission(const AArg0: JContext; const AArg1: JString; const AArg2: Integer; const AArg3: Integer; const AArg4: JString): Integer;
    class function checkSelfPermission(const AArg0: JContext; const AArg1: JString): Integer;
  end;

{ android.support.v4.app.ActivityCompat_OnRequestPermissionsResultCallback - interface }

  [JavaClassSignature('android/support/v4/app/ActivityCompat$OnRequestPermissionsResultCallback')]
  JActivityCompat_OnRequestPermissionsResultCallback = interface(IJavaObject)
    ['{F0364498-C8FB-4494-996C-65C6C5249820}']
    procedure onRequestPermissionsResult(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: IJavaArray<Integer>);
  end;

  [JavaClassSignature('android/support/v4/app/ActivityCompat$OnRequestPermissionsResultCallback')]
  TJActivityCompat_OnRequestPermissionsResultCallback = class(TJObject, JActivityCompat_OnRequestPermissionsResultCallback)
  private
    { methods }
    procedure onRequestPermissionsResult(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: IJavaArray<Integer>);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JActivityCompat_OnRequestPermissionsResultCallback; overload;
    class function Wrap(const AObject: IJNIObject): JActivityCompat_OnRequestPermissionsResultCallback; overload;
  end;

{ android.support.v4.app.ActivityCompat_PermissionCompatDelegate - interface }

  [JavaClassSignature('android/support/v4/app/ActivityCompat$PermissionCompatDelegate')]
  JActivityCompat_PermissionCompatDelegate = interface(IJavaObject)
    ['{16171EAA-A86F-49A3-8BD4-299221B0BD80}']
    function onActivityResult(const AArg0: JActivity; const AArg1: Integer; const AArg2: Integer; const AArg3: JIntent): Boolean;
    function requestPermissions(const AArg0: JActivity; const AArg1: IJavaArray<JString>; const AArg2: Integer): Boolean;
  end;

  [JavaClassSignature('android/support/v4/app/ActivityCompat$PermissionCompatDelegate')]
  TJActivityCompat_PermissionCompatDelegate = class(TJObject, JActivityCompat_PermissionCompatDelegate)
  private
    { methods }
    function onActivityResult(const AArg0: JActivity; const AArg1: Integer; const AArg2: Integer; const AArg3: JIntent): Boolean;
    function requestPermissions(const AArg0: JActivity; const AArg1: IJavaArray<JString>; const AArg2: Integer): Boolean;
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JActivityCompat_PermissionCompatDelegate; overload;
    class function Wrap(const AObject: IJNIObject): JActivityCompat_PermissionCompatDelegate; overload;
  end;

{ android.text.ClipboardManager }

  [JavaClassSignature('android/text/ClipboardManager')]
  JClipboardManager = interface(JObject)
    ['{BE820CAC-9D51-493A-B8FF-DF826353F7E0}']
    function getText: JCharSequence; deprecated 'Deprecated in 29';
    function hasText: Boolean; deprecated 'Deprecated in 29';
    procedure setText(const AArg0: JCharSequence); deprecated 'Deprecated in 29';
  end;

  [JavaClassSignature('android/text/ClipboardManager')]
  TJClipboardManager = class(TJObject, JClipboardManager)
  private
    { methods }
    function getText: JCharSequence; deprecated 'Deprecated in 29';
    function hasText: Boolean; deprecated 'Deprecated in 29';
    procedure setText(const AArg0: JCharSequence); deprecated 'Deprecated in 29';
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JClipboardManager; overload;
    class function Wrap(const AObject: IJNIObject): JClipboardManager; overload;
    { constructors }
    class function Create: JClipboardManager; overload;
  end;

{ android.content.ClipboardManager }

  [JavaClassSignature('android/content/ClipboardManager')]
  Jcontent_ClipboardManager = interface(JClipboardManager)
    ['{771B647C-56C1-4346-AEA1-34F590380320}']
    procedure addPrimaryClipChangedListener(const AArg0: JClipboardManager_OnPrimaryClipChangedListener);
    procedure clearPrimaryClip; // Introduced in 28';
    function getPrimaryClip: JClipData;
    function getPrimaryClipDescription: JClipDescription;
    function getText: JCharSequence;
    function hasPrimaryClip: Boolean;
    function hasText: Boolean;
    procedure removePrimaryClipChangedListener(const AArg0: JClipboardManager_OnPrimaryClipChangedListener);
    procedure setPrimaryClip(const AArg0: JClipData);
    procedure setText(const AArg0: JCharSequence);
  end;

  [JavaClassSignature('android/content/ClipboardManager')]
  TJcontent_ClipboardManager = class(TJClipboardManager, Jcontent_ClipboardManager)
  private
    { methods }
    procedure addPrimaryClipChangedListener(const AArg0: JClipboardManager_OnPrimaryClipChangedListener);
    procedure clearPrimaryClip; // Introduced in 28';
    function getPrimaryClip: JClipData;
    function getPrimaryClipDescription: JClipDescription;
    function getText: JCharSequence;
    function hasPrimaryClip: Boolean;
    function hasText: Boolean;
    procedure removePrimaryClipChangedListener(const AArg0: JClipboardManager_OnPrimaryClipChangedListener);
    procedure setPrimaryClip(const AArg0: JClipData);
    procedure setText(const AArg0: JCharSequence);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): Jcontent_ClipboardManager; overload;
    class function Wrap(const AObject: IJNIObject): Jcontent_ClipboardManager; overload;
  end;

{ android.hardware.display.DisplayManager }

  [JavaClassSignature('android/hardware/display/DisplayManager')]
  JDisplayManager = interface(JObject)
    ['{F63B0F8B-0A28-4202-A178-9ABD37522E3D}']
    function createVirtualDisplay(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JSurface; const AArg5: Integer; const AArg6: JVirtualDisplay_Callback; const AArg7: JHandler): JVirtualDisplay; overload;
    function createVirtualDisplay(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JSurface; const AArg5: Integer): JVirtualDisplay; overload;
    function getDisplay(const AArg0: Integer): JDisplay;
    function getDisplays(const AArg0: JString): IJavaArray<JDisplay>; overload;
    function getDisplays: IJavaArray<JDisplay>; overload;
    procedure registerDisplayListener(const AArg0: JDisplayManager_DisplayListener; const AArg1: JHandler);
    procedure unregisterDisplayListener(const AArg0: JDisplayManager_DisplayListener);
  end;

  [JavaClassSignature('android/hardware/display/DisplayManager')]
  TJDisplayManager = class(TJObject, JDisplayManager)
  private
    { methods }
    function createVirtualDisplay(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JSurface; const AArg5: Integer; const AArg6: JVirtualDisplay_Callback; const AArg7: JHandler): JVirtualDisplay; overload;
    function createVirtualDisplay(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JSurface; const AArg5: Integer): JVirtualDisplay; overload;
    function getDisplay(const AArg0: Integer): JDisplay;
    function getDisplays(const AArg0: JString): IJavaArray<JDisplay>; overload;
    function getDisplays: IJavaArray<JDisplay>; overload;
    procedure registerDisplayListener(const AArg0: JDisplayManager_DisplayListener; const AArg1: JHandler);
    procedure unregisterDisplayListener(const AArg0: JDisplayManager_DisplayListener);
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
    class procedure LoadFields; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDisplayManager; overload;
    class function Wrap(const AObject: IJNIObject): JDisplayManager; overload;
    { constants }
    class function DISPLAY_CATEGORY_PRESENTATION: JString;
    class function VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR: Integer;
    class function VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY: Integer;
    class function VIRTUAL_DISPLAY_FLAG_PRESENTATION: Integer;
    class function VIRTUAL_DISPLAY_FLAG_PUBLIC: Integer;
    class function VIRTUAL_DISPLAY_FLAG_SECURE: Integer;
  end;

{ android.hardware.display.DisplayManager_DisplayListener - interface }

  [JavaClassSignature('android/hardware/display/DisplayManager$DisplayListener')]
  JDisplayManager_DisplayListener = interface(IJavaObject)
    ['{8737482E-C7D5-437B-AAE0-6D9A41B3D5CD}']
    procedure onDisplayAdded(const AArg0: Integer);
    procedure onDisplayChanged(const AArg0: Integer);
    procedure onDisplayRemoved(const AArg0: Integer);
  end;

  [JavaClassSignature('android/hardware/display/DisplayManager$DisplayListener')]
  TJDisplayManager_DisplayListener = class(TJObject, JDisplayManager_DisplayListener)
  private
    { methods }
    procedure onDisplayAdded(const AArg0: Integer);
    procedure onDisplayChanged(const AArg0: Integer);
    procedure onDisplayRemoved(const AArg0: Integer);
  protected
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JDisplayManager_DisplayListener; overload;
    class function Wrap(const AObject: IJNIObject): JDisplayManager_DisplayListener; overload;
  end;

{ android.hardware.display.VirtualDisplay }

  [JavaClassSignature('android/hardware/display/VirtualDisplay')]
  JVirtualDisplay = interface(JObject)
    ['{2AD1FF53-D839-4FE6-B1F6-41B744C067F6}']
    function getDisplay: JDisplay;
    function getSurface: JSurface;
    procedure release;
    procedure resize(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
    procedure setSurface(const AArg0: JSurface);
    function toString: JString;
  end;

  [JavaClassSignature('android/hardware/display/VirtualDisplay')]
  TJVirtualDisplay = class(TJObject, JVirtualDisplay)
  private
    { methods }
    function getDisplay: JDisplay;
    function getSurface: JSurface;
    procedure release;
    procedure resize(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
    procedure setSurface(const AArg0: JSurface);
    function toString: JString; reintroduce;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JVirtualDisplay; overload;
    class function Wrap(const AObject: IJNIObject): JVirtualDisplay; overload;
  end;

{ android.hardware.display.VirtualDisplay_Callback }

  [JavaClassSignature('android/hardware/display/VirtualDisplay$Callback')]
  JVirtualDisplay_Callback = interface(JObject)
    ['{DE4F7589-6566-4A36-A56E-F72081B43B83}']
    procedure onPaused;
    procedure onResumed;
    procedure onStopped;
  end;

  [JavaClassSignature('android/hardware/display/VirtualDisplay$Callback')]
  TJVirtualDisplay_Callback = class(TJObject, JVirtualDisplay_Callback)
  private
    { methods }
    procedure onPaused;
    procedure onResumed;
    procedure onStopped;
  protected
    class procedure LoadConstructors; override;
    class procedure LoadMethods; override;
  public
    { wrapping }
    class function Wrap(const AObjectID: JNIObject): JVirtualDisplay_Callback; overload;
    class function Wrap(const AObject: IJNIObject): JVirtualDisplay_Callback; overload;
    { constructors }
    class function Create: JVirtualDisplay_Callback; overload;
  end;

implementation

{ TJBaseBundle }

class procedure TJBaseBundle.LoadConstructors;
begin
end;

class procedure TJBaseBundle.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clear', '()V');
  AddMethod('containsKey', '(Ljava/lang/String;)Z');
  AddMethod('get', '(Ljava/lang/String;)Ljava/lang/Object;');
  AddMethod('getBoolean', '(Ljava/lang/String;Z)Z');
  AddMethod('getBoolean', '(Ljava/lang/String;)Z');
  AddMethod('getBooleanArray', '(Ljava/lang/String;)[Z');
  AddMethod('getDouble', '(Ljava/lang/String;D)D');
  AddMethod('getDouble', '(Ljava/lang/String;)D');
  AddMethod('getDoubleArray', '(Ljava/lang/String;)[D');
  AddMethod('getInt', '(Ljava/lang/String;)I');
  AddMethod('getInt', '(Ljava/lang/String;I)I');
  AddMethod('getIntArray', '(Ljava/lang/String;)[I');
  AddMethod('getLong', '(Ljava/lang/String;)J');
  AddMethod('getLong', '(Ljava/lang/String;J)J');
  AddMethod('getLongArray', '(Ljava/lang/String;)[J');
  AddMethod('getString', '(Ljava/lang/String;)Ljava/lang/String;');
  AddMethod('getString', '(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;');
  AddMethod('getStringArray', '(Ljava/lang/String;)[Ljava/lang/String;');
  AddMethod('isEmpty', '()Z');
  AddMethod('keySet', '()Ljava/util/Set;');
  AddMethod('putAll', '(Landroid/os/PersistableBundle;)V');
  AddMethod('putBoolean', '(Ljava/lang/String;Z)V');
  AddMethod('putBooleanArray', '(Ljava/lang/String;[Z)V');
  AddMethod('putDouble', '(Ljava/lang/String;D)V');
  AddMethod('putDoubleArray', '(Ljava/lang/String;[D)V');
  AddMethod('putInt', '(Ljava/lang/String;I)V');
  AddMethod('putIntArray', '(Ljava/lang/String;[I)V');
  AddMethod('putLong', '(Ljava/lang/String;J)V');
  AddMethod('putLongArray', '(Ljava/lang/String;[J)V');
  AddMethod('putString', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('putStringArray', '(Ljava/lang/String;[Ljava/lang/String;)V');
  AddMethod('remove', '(Ljava/lang/String;)V');
  AddMethod('size', '()I');
end;

class function TJBaseBundle.Wrap(const AObjectID: JNIObject): JBaseBundle;
begin
  Result := Wrap<TJBaseBundle, JBaseBundle>(AObjectId);
end;

class function TJBaseBundle.Wrap(const AObject: IJNIObject): JBaseBundle;
begin
  Result := Wrap<TJBaseBundle, JBaseBundle>(AObject);
end;

procedure TJBaseBundle.clear;
begin
  JavaType.CallVoidMethod(ObjectID, 'clear', '()V', []);
end;

function TJBaseBundle.containsKey(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'containsKey', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJBaseBundle.get(const AArg0: JString): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('get', '(Ljava/lang/String;)Ljava/lang/Object;', [AArg0]);
end;

function TJBaseBundle.getBoolean(const AArg0: JString; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getBoolean', '(Ljava/lang/String;Z)Z', [AArg0, AArg1]);
end;

function TJBaseBundle.getBoolean(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getBoolean', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJBaseBundle.getBooleanArray(const AArg0: JString): IJavaArray<Boolean>;
begin
  Result := CallArrayMethod<Boolean>('getBooleanArray', '(Ljava/lang/String;)[Z', [AArg0]);
end;

function TJBaseBundle.getDouble(const AArg0: JString; const AArg1: Double): Double;
begin
  Result := JavaType.CallDoubleMethod(ObjectID, 'getDouble', '(Ljava/lang/String;D)D', [AArg0, WrapDouble(AArg1)]);
end;

function TJBaseBundle.getDouble(const AArg0: JString): Double;
begin
  Result := JavaType.CallDoubleMethod(ObjectID, 'getDouble', '(Ljava/lang/String;)D', [AArg0]);
end;

function TJBaseBundle.getDoubleArray(const AArg0: JString): IJavaArray<Double>;
begin
  Result := CallArrayMethod<Double>('getDoubleArray', '(Ljava/lang/String;)[D', [AArg0]);
end;

function TJBaseBundle.getInt(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getInt', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJBaseBundle.getInt(const AArg0: JString; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getInt', '(Ljava/lang/String;I)I', [AArg0, AArg1]);
end;

function TJBaseBundle.getIntArray(const AArg0: JString): IJavaArray<Integer>;
begin
  Result := CallArrayMethod<Integer>('getIntArray', '(Ljava/lang/String;)[I', [AArg0]);
end;

function TJBaseBundle.getLong(const AArg0: JString): Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getLong', '(Ljava/lang/String;)J', [AArg0]);
end;

function TJBaseBundle.getLong(const AArg0: JString; const AArg1: Int64): Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getLong', '(Ljava/lang/String;J)J', [AArg0, AArg1]);
end;

function TJBaseBundle.getLongArray(const AArg0: JString): IJavaArray<Int64>;
begin
  Result := CallArrayMethod<Int64>('getLongArray', '(Ljava/lang/String;)[J', [AArg0]);
end;

function TJBaseBundle.getString(const AArg0: JString): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(Ljava/lang/String;)Ljava/lang/String;', [AArg0]);
end;

function TJBaseBundle.getString(const AArg0: JString; const AArg1: JString): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;', [AArg0, AArg1]);
end;

function TJBaseBundle.getStringArray(const AArg0: JString): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getStringArray', '(Ljava/lang/String;)[Ljava/lang/String;', [AArg0]);
end;

function TJBaseBundle.isEmpty: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEmpty', '()Z', []);
end;

function TJBaseBundle.keySet: JSet;
begin
  Result := CallObjectMethod<TJSet, JSet>('keySet', '()Ljava/util/Set;', []);
end;

procedure TJBaseBundle.putAll(const AArg0: JPersistableBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'putAll', '(Landroid/os/PersistableBundle;)V', [AArg0]);
end;

procedure TJBaseBundle.putBoolean(const AArg0: JString; const AArg1: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'putBoolean', '(Ljava/lang/String;Z)V', [AArg0, AArg1]);
end;

procedure TJBaseBundle.putBooleanArray(const AArg0: JString; const AArg1: IJavaArray<Boolean>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putBooleanArray', '(Ljava/lang/String;[Z)V', [AArg0, AArg1]);
end;

procedure TJBaseBundle.putDouble(const AArg0: JString; const AArg1: Double);
begin
  JavaType.CallVoidMethod(ObjectID, 'putDouble', '(Ljava/lang/String;D)V', [AArg0, WrapDouble(AArg1)]);
end;

procedure TJBaseBundle.putDoubleArray(const AArg0: JString; const AArg1: IJavaArray<Double>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putDoubleArray', '(Ljava/lang/String;[D)V', [AArg0, AArg1]);
end;

procedure TJBaseBundle.putInt(const AArg0: JString; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'putInt', '(Ljava/lang/String;I)V', [AArg0, AArg1]);
end;

procedure TJBaseBundle.putIntArray(const AArg0: JString; const AArg1: IJavaArray<Integer>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putIntArray', '(Ljava/lang/String;[I)V', [AArg0, AArg1]);
end;

procedure TJBaseBundle.putLong(const AArg0: JString; const AArg1: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'putLong', '(Ljava/lang/String;J)V', [AArg0, AArg1]);
end;

procedure TJBaseBundle.putLongArray(const AArg0: JString; const AArg1: IJavaArray<Int64>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putLongArray', '(Ljava/lang/String;[J)V', [AArg0, AArg1]);
end;

procedure TJBaseBundle.putString(const AArg0: JString; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'putString', '(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJBaseBundle.putStringArray(const AArg0: JString; const AArg1: IJavaArray<JString>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putStringArray', '(Ljava/lang/String;[Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJBaseBundle.remove(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'remove', '(Ljava/lang/String;)V', [AArg0]);
end;

function TJBaseBundle.size: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'size', '()I', []);
end;

{ TJBundle }

class procedure TJBundle.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(I)V');
  AddMethod('<init>', '(Landroid/os/Bundle;)V');
  AddMethod('<init>', '(Landroid/os/PersistableBundle;)V');
end;

class procedure TJBundle.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clear', '()V');
  AddMethod('clone', '()Ljava/lang/Object;');
  AddMethod('deepCopy', '()Landroid/os/Bundle;');
  AddMethod('describeContents', '()I');
  AddMethod('getBinder', '(Ljava/lang/String;)Landroid/os/IBinder;');
  AddMethod('getBundle', '(Ljava/lang/String;)Landroid/os/Bundle;');
  AddMethod('getByte', '(Ljava/lang/String;B)Ljava/lang/Byte;');
  AddMethod('getByte', '(Ljava/lang/String;)B');
  AddMethod('getByteArray', '(Ljava/lang/String;)[B');
  AddMethod('getChar', '(Ljava/lang/String;C)C');
  AddMethod('getChar', '(Ljava/lang/String;)C');
  AddMethod('getCharArray', '(Ljava/lang/String;)[C');
  AddMethod('getCharSequence', '(Ljava/lang/String;)Ljava/lang/CharSequence;');
  AddMethod('getCharSequence', '(Ljava/lang/String;Ljava/lang/CharSequence;)Ljava/lang/CharSequence;');
  AddMethod('getCharSequenceArray', '(Ljava/lang/String;)[Ljava/lang/CharSequence;');
  AddMethod('getCharSequenceArrayList', '(Ljava/lang/String;)Ljava/util/ArrayList;');
  AddMethod('getFloat', '(Ljava/lang/String;)F');
  AddMethod('getFloat', '(Ljava/lang/String;F)F');
  AddMethod('getFloatArray', '(Ljava/lang/String;)[F');
  AddMethod('getIntegerArrayList', '(Ljava/lang/String;)Ljava/util/ArrayList;');
  AddMethod('getParcelable', '(Ljava/lang/String;)Landroid/os/Parcelable;');
  AddMethod('getParcelableArray', '(Ljava/lang/String;)[Landroid/os/Parcelable;');
  AddMethod('getParcelableArrayList', '(Ljava/lang/String;)Ljava/util/ArrayList;');
  AddMethod('getShort', '(Ljava/lang/String;)S');
  AddMethod('getShort', '(Ljava/lang/String;S)S');
  AddMethod('getShortArray', '(Ljava/lang/String;)[S');
  AddMethod('getSize', '(Ljava/lang/String;)Landroid/util/Size;');
  AddMethod('getSparseParcelableArray', '(Ljava/lang/String;)Landroid/util/SparseArray;');
  AddMethod('getStringArrayList', '(Ljava/lang/String;)Ljava/util/ArrayList;');
  AddMethod('hasFileDescriptors', '()Z');
  AddMethod('putAll', '(Landroid/os/Bundle;)V');
  AddMethod('putBinder', '(Ljava/lang/String;Landroid/os/IBinder;)V');
  AddMethod('putBundle', '(Ljava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('putByte', '(Ljava/lang/String;B)V');
  AddMethod('putByteArray', '(Ljava/lang/String;[B)V');
  AddMethod('putChar', '(Ljava/lang/String;C)V');
  AddMethod('putCharArray', '(Ljava/lang/String;[C)V');
  AddMethod('putCharSequence', '(Ljava/lang/String;Ljava/lang/CharSequence;)V');
  AddMethod('putCharSequenceArray', '(Ljava/lang/String;[Ljava/lang/CharSequence;)V');
  AddMethod('putCharSequenceArrayList', '(Ljava/lang/String;Ljava/util/ArrayList;)V');
  AddMethod('putFloat', '(Ljava/lang/String;F)V');
  AddMethod('putFloatArray', '(Ljava/lang/String;[F)V');
  AddMethod('putIntegerArrayList', '(Ljava/lang/String;Ljava/util/ArrayList;)V');
  AddMethod('putParcelable', '(Ljava/lang/String;Landroid/os/Parcelable;)V');
  AddMethod('putParcelableArray', '(Ljava/lang/String;[Landroid/os/Parcelable;)V');
  AddMethod('putParcelableArrayList', '(Ljava/lang/String;Ljava/util/ArrayList;)V');
  AddMethod('putShort', '(Ljava/lang/String;S)V');
  AddMethod('putShortArray', '(Ljava/lang/String;[S)V');
  AddMethod('putSize', '(Ljava/lang/String;Landroid/util/Size;)V');
  AddMethod('putSparseParcelableArray', '(Ljava/lang/String;Landroid/util/SparseArray;)V');
  AddMethod('putStringArrayList', '(Ljava/lang/String;Ljava/util/ArrayList;)V');
  AddMethod('remove', '(Ljava/lang/String;)V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJBundle.LoadFields;
begin
  inherited;
  AddStaticField('EMPTY', 'Landroid/os/Bundle;');
end;

class function TJBundle.Wrap(const AObjectID: JNIObject): JBundle;
begin
  Result := Wrap<TJBundle, JBundle>(AObjectId);
end;

class function TJBundle.Wrap(const AObject: IJNIObject): JBundle;
begin
  Result := Wrap<TJBundle, JBundle>(AObject);
end;

class function TJBundle.Create: JBundle;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJBundle.Create(const AArg0: Integer): JBundle;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

class function TJBundle.Create(const AArg0: JBundle): JBundle;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/os/Bundle;)V', [AArg0]);
  Result := O;
end;

class function TJBundle.Create(const AArg0: JPersistableBundle): JBundle;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/os/PersistableBundle;)V', [AArg0]);
  Result := O;
end;

class function TJBundle.EMPTY: JBundle;
begin
  Result := GetStaticObjectField<TJBundle, JBundle>('EMPTY');
end;

procedure TJBundle.clear;
begin
  JavaType.CallVoidMethod(ObjectID, 'clear', '()V', []);
end;

function TJBundle.clone: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('clone', '()Ljava/lang/Object;', []);
end;

function TJBundle.deepCopy: JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('deepCopy', '()Landroid/os/Bundle;', []);
end;

function TJBundle.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJBundle.getBinder(const AArg0: JString): JIBinder;
begin
  Result := CallObjectMethod<TJIBinder, JIBinder>('getBinder', '(Ljava/lang/String;)Landroid/os/IBinder;', [AArg0]);
end;

function TJBundle.getBundle(const AArg0: JString): JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getBundle', '(Ljava/lang/String;)Landroid/os/Bundle;', [AArg0]);
end;

function TJBundle.getByte(const AArg0: JString; const AArg1: Byte): JByte;
begin
  Result := CallObjectMethod<TJByte, JByte>('getByte', '(Ljava/lang/String;B)Ljava/lang/Byte;', [AArg0, AArg1]);
end;

function TJBundle.getByte(const AArg0: JString): Byte;
begin
  Result := JavaType.CallByteMethod(ObjectID, 'getByte', '(Ljava/lang/String;)B', [AArg0]);
end;

function TJBundle.getByteArray(const AArg0: JString): IJavaArray<Byte>;
begin
  Result := CallArrayMethod<Byte>('getByteArray', '(Ljava/lang/String;)[B', [AArg0]);
end;

function TJBundle.getChar(const AArg0: JString; const AArg1: Char): Char;
begin
  Result := JavaType.CallCharMethod(ObjectID, 'getChar', '(Ljava/lang/String;C)C', [AArg0, AArg1]);
end;

function TJBundle.getChar(const AArg0: JString): Char;
begin
  Result := JavaType.CallCharMethod(ObjectID, 'getChar', '(Ljava/lang/String;)C', [AArg0]);
end;

function TJBundle.getCharArray(const AArg0: JString): IJavaArray<Char>;
begin
  Result := CallArrayMethod<Char>('getCharArray', '(Ljava/lang/String;)[C', [AArg0]);
end;

function TJBundle.getCharSequence(const AArg0: JString): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getCharSequence', '(Ljava/lang/String;)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJBundle.getCharSequence(const AArg0: JString; const AArg1: JCharSequence): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getCharSequence', '(Ljava/lang/String;Ljava/lang/CharSequence;)Ljava/lang/CharSequence;', [AArg0, AArg1]);
end;

function TJBundle.getCharSequenceArray(const AArg0: JString): IJavaArray<JCharSequence>;
begin
  Result := CallArrayMethod<JCharSequence>('getCharSequenceArray', '(Ljava/lang/String;)[Ljava/lang/CharSequence;', [AArg0]);
end;

function TJBundle.getCharSequenceArrayList(const AArg0: JString): JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getCharSequenceArrayList', '(Ljava/lang/String;)Ljava/util/ArrayList;', [AArg0]);
end;

function TJBundle.getFloat(const AArg0: JString): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFloat', '(Ljava/lang/String;)F', [AArg0]);
end;

function TJBundle.getFloat(const AArg0: JString; const AArg1: Single): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFloat', '(Ljava/lang/String;F)F', [AArg0, AArg1]);
end;

function TJBundle.getFloatArray(const AArg0: JString): IJavaArray<Single>;
begin
  Result := CallArrayMethod<Single>('getFloatArray', '(Ljava/lang/String;)[F', [AArg0]);
end;

function TJBundle.getIntegerArrayList(const AArg0: JString): JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getIntegerArrayList', '(Ljava/lang/String;)Ljava/util/ArrayList;', [AArg0]);
end;

function TJBundle.getParcelable(const AArg0: JString): JParcelable;
begin
  Result := CallObjectMethod<TJParcelable, JParcelable>('getParcelable', '(Ljava/lang/String;)Landroid/os/Parcelable;', [AArg0]);
end;

function TJBundle.getParcelableArray(const AArg0: JString): IJavaArray<JParcelable>;
begin
  Result := CallArrayMethod<JParcelable>('getParcelableArray', '(Ljava/lang/String;)[Landroid/os/Parcelable;', [AArg0]);
end;

function TJBundle.getParcelableArrayList(const AArg0: JString): JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getParcelableArrayList', '(Ljava/lang/String;)Ljava/util/ArrayList;', [AArg0]);
end;

function TJBundle.getShort(const AArg0: JString): ShortInt;
begin
  Result := JavaType.CallShortMethod(ObjectID, 'getShort', '(Ljava/lang/String;)S', [AArg0]);
end;

function TJBundle.getShort(const AArg0: JString; const AArg1: ShortInt): ShortInt;
begin
  Result := JavaType.CallShortMethod(ObjectID, 'getShort', '(Ljava/lang/String;S)S', [AArg0, AArg1]);
end;

function TJBundle.getShortArray(const AArg0: JString): IJavaArray<ShortInt>;
begin
  Result := CallArrayMethod<ShortInt>('getShortArray', '(Ljava/lang/String;)[S', [AArg0]);
end;

function TJBundle.getSize(const AArg0: JString): JSize;
begin
  Result := CallObjectMethod<TJSize, JSize>('getSize', '(Ljava/lang/String;)Landroid/util/Size;', [AArg0]);
end;

function TJBundle.getSparseParcelableArray(const AArg0: JString): JSparseArray;
begin
  Result := CallObjectMethod<TJSparseArray, JSparseArray>('getSparseParcelableArray', '(Ljava/lang/String;)Landroid/util/SparseArray;', [AArg0]);
end;

function TJBundle.getStringArrayList(const AArg0: JString): JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getStringArrayList', '(Ljava/lang/String;)Ljava/util/ArrayList;', [AArg0]);
end;

function TJBundle.hasFileDescriptors: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasFileDescriptors', '()Z', []);
end;

procedure TJBundle.putAll(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'putAll', '(Landroid/os/Bundle;)V', [AArg0]);
end;

procedure TJBundle.putBinder(const AArg0: JString; const AArg1: JIBinder);
begin
  JavaType.CallVoidMethod(ObjectID, 'putBinder', '(Ljava/lang/String;Landroid/os/IBinder;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putBundle(const AArg0: JString; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'putBundle', '(Ljava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putByte(const AArg0: JString; const AArg1: Byte);
begin
  JavaType.CallVoidMethod(ObjectID, 'putByte', '(Ljava/lang/String;B)V', [AArg0, AArg1]);
end;

procedure TJBundle.putByteArray(const AArg0: JString; const AArg1: IJavaArray<Byte>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putByteArray', '(Ljava/lang/String;[B)V', [AArg0, AArg1]);
end;

procedure TJBundle.putChar(const AArg0: JString; const AArg1: Char);
begin
  JavaType.CallVoidMethod(ObjectID, 'putChar', '(Ljava/lang/String;C)V', [AArg0, AArg1]);
end;

procedure TJBundle.putCharArray(const AArg0: JString; const AArg1: IJavaArray<Char>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putCharArray', '(Ljava/lang/String;[C)V', [AArg0, AArg1]);
end;

procedure TJBundle.putCharSequence(const AArg0: JString; const AArg1: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'putCharSequence', '(Ljava/lang/String;Ljava/lang/CharSequence;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putCharSequenceArray(const AArg0: JString; const AArg1: IJavaArray<JCharSequence>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putCharSequenceArray', '(Ljava/lang/String;[Ljava/lang/CharSequence;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putCharSequenceArrayList(const AArg0: JString; const AArg1: JArrayList);
begin
  JavaType.CallVoidMethod(ObjectID, 'putCharSequenceArrayList', '(Ljava/lang/String;Ljava/util/ArrayList;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putFloat(const AArg0: JString; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'putFloat', '(Ljava/lang/String;F)V', [AArg0, AArg1]);
end;

procedure TJBundle.putFloatArray(const AArg0: JString; const AArg1: IJavaArray<Single>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putFloatArray', '(Ljava/lang/String;[F)V', [AArg0, AArg1]);
end;

procedure TJBundle.putIntegerArrayList(const AArg0: JString; const AArg1: JArrayList);
begin
  JavaType.CallVoidMethod(ObjectID, 'putIntegerArrayList', '(Ljava/lang/String;Ljava/util/ArrayList;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putParcelable(const AArg0: JString; const AArg1: JParcelable);
begin
  JavaType.CallVoidMethod(ObjectID, 'putParcelable', '(Ljava/lang/String;Landroid/os/Parcelable;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putParcelableArray(const AArg0: JString; const AArg1: IJavaArray<JParcelable>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putParcelableArray', '(Ljava/lang/String;[Landroid/os/Parcelable;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putParcelableArrayList(const AArg0: JString; const AArg1: JArrayList);
begin
  JavaType.CallVoidMethod(ObjectID, 'putParcelableArrayList', '(Ljava/lang/String;Ljava/util/ArrayList;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putShort(const AArg0: JString; const AArg1: ShortInt);
begin
  JavaType.CallVoidMethod(ObjectID, 'putShort', '(Ljava/lang/String;S)V', [AArg0, AArg1]);
end;

procedure TJBundle.putShortArray(const AArg0: JString; const AArg1: IJavaArray<ShortInt>);
begin
  JavaType.CallVoidMethod(ObjectID, 'putShortArray', '(Ljava/lang/String;[S)V', [AArg0, AArg1]);
end;

procedure TJBundle.putSize(const AArg0: JString; const AArg1: JSize);
begin
  JavaType.CallVoidMethod(ObjectID, 'putSize', '(Ljava/lang/String;Landroid/util/Size;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putSparseParcelableArray(const AArg0: JString; const AArg1: JSparseArray);
begin
  JavaType.CallVoidMethod(ObjectID, 'putSparseParcelableArray', '(Ljava/lang/String;Landroid/util/SparseArray;)V', [AArg0, AArg1]);
end;

procedure TJBundle.putStringArrayList(const AArg0: JString; const AArg1: JArrayList);
begin
  JavaType.CallVoidMethod(ObjectID, 'putStringArrayList', '(Ljava/lang/String;Ljava/util/ArrayList;)V', [AArg0, AArg1]);
end;

procedure TJBundle.remove(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'remove', '(Ljava/lang/String;)V', [AArg0]);
end;

function TJBundle.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJPersistableBundle }

class procedure TJPersistableBundle.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(I)V');
  AddMethod('<init>', '(Landroid/os/PersistableBundle;)V');
end;

class procedure TJPersistableBundle.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clone', '()Ljava/lang/Object;');
  AddMethod('deepCopy', '()Landroid/os/PersistableBundle;');
  AddMethod('describeContents', '()I');
  AddMethod('getPersistableBundle', '(Ljava/lang/String;)Landroid/os/PersistableBundle;');
  AddMethod('putPersistableBundle', '(Ljava/lang/String;Landroid/os/PersistableBundle;)V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJPersistableBundle.LoadFields;
begin
  inherited;
  AddStaticField('EMPTY', 'Landroid/os/PersistableBundle;');
end;

class function TJPersistableBundle.Wrap(const AObjectID: JNIObject): JPersistableBundle;
begin
  Result := Wrap<TJPersistableBundle, JPersistableBundle>(AObjectId);
end;

class function TJPersistableBundle.Wrap(const AObject: IJNIObject): JPersistableBundle;
begin
  Result := Wrap<TJPersistableBundle, JPersistableBundle>(AObject);
end;

class function TJPersistableBundle.Create: JPersistableBundle;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJPersistableBundle.Create(const AArg0: Integer): JPersistableBundle;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

class function TJPersistableBundle.Create(const AArg0: JPersistableBundle): JPersistableBundle;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/os/PersistableBundle;)V', [AArg0]);
  Result := O;
end;

class function TJPersistableBundle.EMPTY: JPersistableBundle;
begin
  Result := GetStaticObjectField<TJPersistableBundle, JPersistableBundle>('EMPTY');
end;

function TJPersistableBundle.clone: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('clone', '()Ljava/lang/Object;', []);
end;

function TJPersistableBundle.deepCopy: JPersistableBundle;
begin
  Result := CallObjectMethod<TJPersistableBundle, JPersistableBundle>('deepCopy', '()Landroid/os/PersistableBundle;', []);
end;

function TJPersistableBundle.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJPersistableBundle.getPersistableBundle(const AArg0: JString): JPersistableBundle;
begin
  Result := CallObjectMethod<TJPersistableBundle, JPersistableBundle>('getPersistableBundle', '(Ljava/lang/String;)Landroid/os/PersistableBundle;', [AArg0]);
end;

procedure TJPersistableBundle.putPersistableBundle(const AArg0: JString; const AArg1: JPersistableBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'putPersistableBundle', '(Ljava/lang/String;Landroid/os/PersistableBundle;)V', [AArg0, AArg1]);
end;

function TJPersistableBundle.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJBuild }

class procedure TJBuild.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJBuild.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('getRadioVersion', '()Ljava/lang/String;');
  AddStaticMethod('getSerial', '()Ljava/lang/String;');
end;

class procedure TJBuild.LoadFields;
begin
  inherited;
  AddStaticField('BOARD', 'Ljava/lang/String;');
  AddStaticField('BOOTLOADER', 'Ljava/lang/String;');
  AddStaticField('BRAND', 'Ljava/lang/String;');
  AddStaticField('CPU_ABI', 'Ljava/lang/String;');
  AddStaticField('CPU_ABI2', 'Ljava/lang/String;');
  AddStaticField('DEVICE', 'Ljava/lang/String;');
  AddStaticField('DISPLAY', 'Ljava/lang/String;');
  AddStaticField('FINGERPRINT', 'Ljava/lang/String;');
  AddStaticField('HARDWARE', 'Ljava/lang/String;');
  AddStaticField('HOST', 'Ljava/lang/String;');
  AddStaticField('ID', 'Ljava/lang/String;');
  AddStaticField('MANUFACTURER', 'Ljava/lang/String;');
  AddStaticField('MODEL', 'Ljava/lang/String;');
  AddStaticField('PRODUCT', 'Ljava/lang/String;');
  AddStaticField('RADIO', 'Ljava/lang/String;');
  AddStaticField('SERIAL', 'Ljava/lang/String;');
  AddStaticField('SUPPORTED_32_BIT_ABIS', '[Ljava/lang/String;');
  AddStaticField('SUPPORTED_64_BIT_ABIS', '[Ljava/lang/String;');
  AddStaticField('SUPPORTED_ABIS', '[Ljava/lang/String;');
  AddStaticField('TAGS', 'Ljava/lang/String;');
  AddStaticField('TIME', 'J');
  AddStaticField('TYPE', 'Ljava/lang/String;');
  AddStaticField('UNKNOWN', 'Ljava/lang/String;');
  AddStaticField('USER', 'Ljava/lang/String;');
end;

class function TJBuild.Wrap(const AObjectID: JNIObject): JBuild;
begin
  Result := Wrap<TJBuild, JBuild>(AObjectId);
end;

class function TJBuild.Wrap(const AObject: IJNIObject): JBuild;
begin
  Result := Wrap<TJBuild, JBuild>(AObject);
end;

class function TJBuild.Create: JBuild;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJBuild.BOARD: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('BOARD');
end;

class function TJBuild.BOOTLOADER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('BOOTLOADER');
end;

class function TJBuild.BRAND: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('BRAND');
end;

class function TJBuild.CPU_ABI: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CPU_ABI');
end;

class function TJBuild.CPU_ABI2: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CPU_ABI2');
end;

class function TJBuild.DEVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('DEVICE');
end;

class function TJBuild.DISPLAY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('DISPLAY');
end;

class function TJBuild.FINGERPRINT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FINGERPRINT');
end;

class function TJBuild.HARDWARE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('HARDWARE');
end;

class function TJBuild.HOST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('HOST');
end;

class function TJBuild.ID: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ID');
end;

class function TJBuild.MANUFACTURER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MANUFACTURER');
end;

class function TJBuild.MODEL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MODEL');
end;

class function TJBuild.PRODUCT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('PRODUCT');
end;

class function TJBuild.RADIO: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('RADIO');
end;

class function TJBuild.SERIAL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SERIAL');
end;

class function TJBuild.SUPPORTED_32_BIT_ABIS: IJavaArray<JString>;
begin
  Result := GetStaticArrayField<JString>('SUPPORTED_32_BIT_ABIS');
end;

class function TJBuild.SUPPORTED_64_BIT_ABIS: IJavaArray<JString>;
begin
  Result := GetStaticArrayField<JString>('SUPPORTED_64_BIT_ABIS');
end;

class function TJBuild.SUPPORTED_ABIS: IJavaArray<JString>;
begin
  Result := GetStaticArrayField<JString>('SUPPORTED_ABIS');
end;

class function TJBuild.TAGS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('TAGS');
end;

class function TJBuild.TIME: Int64;
begin
  Result := StaticJavaType[Self].GetStaticLongField('TIME');
end;

class function TJBuild.&TYPE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('TYPE');
end;

class function TJBuild.UNKNOWN: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('UNKNOWN');
end;

class function TJBuild.USER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('USER');
end;

class function TJBuild.getRadioVersion: JString;
begin
  Result := CallStaticObjectMethod<TJString, JString>('getRadioVersion', '()Ljava/lang/String;', []);
end;

class function TJBuild.getSerial: JString;
begin
  Result := CallStaticObjectMethod<TJString, JString>('getSerial', '()Ljava/lang/String;', []);
end;

{ TJBuild_VERSION }

class procedure TJBuild_VERSION.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJBuild_VERSION.LoadMethods;
begin
  inherited;
end;

class procedure TJBuild_VERSION.LoadFields;
begin
  inherited;
  AddStaticField('BASE_OS', 'Ljava/lang/String;');
  AddStaticField('CODENAME', 'Ljava/lang/String;');
  AddStaticField('INCREMENTAL', 'Ljava/lang/String;');
  AddStaticField('PREVIEW_SDK_INT', 'I');
  AddStaticField('RELEASE', 'Ljava/lang/String;');
  AddStaticField('SDK', 'Ljava/lang/String;');
  AddStaticField('SDK_INT', 'I');
  AddStaticField('SECURITY_PATCH', 'Ljava/lang/String;');
end;

class function TJBuild_VERSION.Wrap(const AObjectID: JNIObject): JBuild_VERSION;
begin
  Result := Wrap<TJBuild_VERSION, JBuild_VERSION>(AObjectId);
end;

class function TJBuild_VERSION.Wrap(const AObject: IJNIObject): JBuild_VERSION;
begin
  Result := Wrap<TJBuild_VERSION, JBuild_VERSION>(AObject);
end;

class function TJBuild_VERSION.Create: JBuild_VERSION;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJBuild_VERSION.BASE_OS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('BASE_OS');
end;

class function TJBuild_VERSION.CODENAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CODENAME');
end;

class function TJBuild_VERSION.INCREMENTAL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('INCREMENTAL');
end;

class function TJBuild_VERSION.PREVIEW_SDK_INT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PREVIEW_SDK_INT');
end;

class function TJBuild_VERSION.RELEASE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('RELEASE');
end;

class function TJBuild_VERSION.SDK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SDK');
end;

class function TJBuild_VERSION.SDK_INT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SDK_INT');
end;

class function TJBuild_VERSION.SECURITY_PATCH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SECURITY_PATCH');
end;

{ TJBuild_VERSION_CODES }

class procedure TJBuild_VERSION_CODES.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJBuild_VERSION_CODES.LoadMethods;
begin
  inherited;
end;

class procedure TJBuild_VERSION_CODES.LoadFields;
begin
  inherited;
  AddStaticField('BASE', 'I');
  AddStaticField('BASE_1_1', 'I');
  AddStaticField('CUPCAKE', 'I');
  AddStaticField('CUR_DEVELOPMENT', 'I');
  AddStaticField('DONUT', 'I');
  AddStaticField('ECLAIR', 'I');
  AddStaticField('ECLAIR_0_1', 'I');
  AddStaticField('ECLAIR_MR1', 'I');
  AddStaticField('FROYO', 'I');
  AddStaticField('GINGERBREAD', 'I');
  AddStaticField('GINGERBREAD_MR1', 'I');
  AddStaticField('HONEYCOMB', 'I');
  AddStaticField('HONEYCOMB_MR1', 'I');
  AddStaticField('HONEYCOMB_MR2', 'I');
  AddStaticField('ICE_CREAM_SANDWICH', 'I');
  AddStaticField('ICE_CREAM_SANDWICH_MR1', 'I');
  AddStaticField('JELLY_BEAN', 'I');
  AddStaticField('JELLY_BEAN_MR1', 'I');
  AddStaticField('JELLY_BEAN_MR2', 'I');
  AddStaticField('KITKAT', 'I');
  AddStaticField('KITKAT_WATCH', 'I');
  AddStaticField('LOLLIPOP', 'I');
  AddStaticField('LOLLIPOP_MR1', 'I');
  AddStaticField('M', 'I');
  AddStaticField('N', 'I');
  AddStaticField('N_MR1', 'I');
  AddStaticField('O', 'I');
  AddStaticField('O_MR1', 'I');
  AddStaticField('P', 'I');
end;

class function TJBuild_VERSION_CODES.Wrap(const AObjectID: JNIObject): JBuild_VERSION_CODES;
begin
  Result := Wrap<TJBuild_VERSION_CODES, JBuild_VERSION_CODES>(AObjectId);
end;

class function TJBuild_VERSION_CODES.Wrap(const AObject: IJNIObject): JBuild_VERSION_CODES;
begin
  Result := Wrap<TJBuild_VERSION_CODES, JBuild_VERSION_CODES>(AObject);
end;

class function TJBuild_VERSION_CODES.Create: JBuild_VERSION_CODES;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJBuild_VERSION_CODES.BASE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BASE');
end;

class function TJBuild_VERSION_CODES.BASE_1_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BASE_1_1');
end;

class function TJBuild_VERSION_CODES.CUPCAKE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CUPCAKE');
end;

class function TJBuild_VERSION_CODES.CUR_DEVELOPMENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CUR_DEVELOPMENT');
end;

class function TJBuild_VERSION_CODES.DONUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DONUT');
end;

class function TJBuild_VERSION_CODES.ECLAIR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ECLAIR');
end;

class function TJBuild_VERSION_CODES.ECLAIR_0_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ECLAIR_0_1');
end;

class function TJBuild_VERSION_CODES.ECLAIR_MR1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ECLAIR_MR1');
end;

class function TJBuild_VERSION_CODES.FROYO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FROYO');
end;

class function TJBuild_VERSION_CODES.GINGERBREAD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GINGERBREAD');
end;

class function TJBuild_VERSION_CODES.GINGERBREAD_MR1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GINGERBREAD_MR1');
end;

class function TJBuild_VERSION_CODES.HONEYCOMB: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HONEYCOMB');
end;

class function TJBuild_VERSION_CODES.HONEYCOMB_MR1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HONEYCOMB_MR1');
end;

class function TJBuild_VERSION_CODES.HONEYCOMB_MR2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HONEYCOMB_MR2');
end;

class function TJBuild_VERSION_CODES.ICE_CREAM_SANDWICH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ICE_CREAM_SANDWICH');
end;

class function TJBuild_VERSION_CODES.ICE_CREAM_SANDWICH_MR1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ICE_CREAM_SANDWICH_MR1');
end;

class function TJBuild_VERSION_CODES.JELLY_BEAN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('JELLY_BEAN');
end;

class function TJBuild_VERSION_CODES.JELLY_BEAN_MR1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('JELLY_BEAN_MR1');
end;

class function TJBuild_VERSION_CODES.JELLY_BEAN_MR2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('JELLY_BEAN_MR2');
end;

class function TJBuild_VERSION_CODES.KITKAT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KITKAT');
end;

class function TJBuild_VERSION_CODES.KITKAT_WATCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KITKAT_WATCH');
end;

class function TJBuild_VERSION_CODES.LOLLIPOP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LOLLIPOP');
end;

class function TJBuild_VERSION_CODES.LOLLIPOP_MR1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LOLLIPOP_MR1');
end;

class function TJBuild_VERSION_CODES.M: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('M');
end;

class function TJBuild_VERSION_CODES.N: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('N');
end;

class function TJBuild_VERSION_CODES.N_MR1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('N_MR1');
end;

class function TJBuild_VERSION_CODES.O: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('O');
end;

class function TJBuild_VERSION_CODES.O_MR1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('O_MR1');
end;

class function TJBuild_VERSION_CODES.P: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('P');
end;

{ TJCancellationSignal }

class procedure TJCancellationSignal.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJCancellationSignal.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('cancel', '()V');
  AddMethod('isCanceled', '()Z');
  AddMethod('setOnCancelListener', '(Landroid/os/CancellationSignal$OnCancelListener;)V');
  AddMethod('throwIfCanceled', '()V');
end;

class function TJCancellationSignal.Wrap(const AObjectID: JNIObject): JCancellationSignal;
begin
  Result := Wrap<TJCancellationSignal, JCancellationSignal>(AObjectId);
end;

class function TJCancellationSignal.Wrap(const AObject: IJNIObject): JCancellationSignal;
begin
  Result := Wrap<TJCancellationSignal, JCancellationSignal>(AObject);
end;

class function TJCancellationSignal.Create: JCancellationSignal;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJCancellationSignal.cancel;
begin
  JavaType.CallVoidMethod(ObjectID, 'cancel', '()V', []);
end;

function TJCancellationSignal.isCanceled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isCanceled', '()Z', []);
end;

procedure TJCancellationSignal.setOnCancelListener(const AArg0: JCancellationSignal_OnCancelListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOnCancelListener', '(Landroid/os/CancellationSignal$OnCancelListener;)V', [AArg0]);
end;

procedure TJCancellationSignal.throwIfCanceled;
begin
  JavaType.CallVoidMethod(ObjectID, 'throwIfCanceled', '()V', []);
end;

{ TJCancellationSignal_OnCancelListener }

class procedure TJCancellationSignal_OnCancelListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onCancel', '()V');
end;

class function TJCancellationSignal_OnCancelListener.Wrap(const AObjectID: JNIObject): JCancellationSignal_OnCancelListener;
begin
  Result := Wrap<TJCancellationSignal_OnCancelListener, JCancellationSignal_OnCancelListener>(AObjectId);
end;

class function TJCancellationSignal_OnCancelListener.Wrap(const AObject: IJNIObject): JCancellationSignal_OnCancelListener;
begin
  Result := Wrap<TJCancellationSignal_OnCancelListener, JCancellationSignal_OnCancelListener>(AObject);
end;

procedure TJCancellationSignal_OnCancelListener.onCancel;
begin
  JavaType.CallVoidMethod(ObjectID, 'onCancel', '()V', []);
end;

{ TJHandler }

class procedure TJHandler.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/os/Looper;)V');
end;

class procedure TJHandler.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('createAsync', '(Landroid/os/Looper;)Landroid/os/Handler;');
  AddMethod('getLooper', '()Landroid/os/Looper;');
  AddMethod('hasMessages', '(ILjava/lang/Object;)Z');
  AddMethod('hasMessages', '(I)Z');
  AddMethod('post', '(Ljava/lang/Runnable;)Z');
  AddMethod('postAtFrontOfQueue', '(Ljava/lang/Runnable;)Z');
  AddMethod('postAtTime', '(Ljava/lang/Runnable;J)Z');
  AddMethod('postAtTime', '(Ljava/lang/Runnable;Ljava/lang/Object;J)Z');
  AddMethod('postDelayed', '(Ljava/lang/Runnable;Ljava/lang/Object;J)Z');
  AddMethod('postDelayed', '(Ljava/lang/Runnable;J)Z');
  AddMethod('removeCallbacks', '(Ljava/lang/Runnable;)V');
  AddMethod('removeCallbacks', '(Ljava/lang/Runnable;Ljava/lang/Object;)V');
  AddMethod('removeCallbacksAndMessages', '(Ljava/lang/Object;)V');
  AddMethod('removeMessages', '(ILjava/lang/Object;)V');
  AddMethod('removeMessages', '(I)V');
  AddMethod('sendEmptyMessage', '(I)Z');
  AddMethod('sendEmptyMessageAtTime', '(IJ)Z');
  AddMethod('sendEmptyMessageDelayed', '(IJ)Z');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJHandler.Wrap(const AObjectID: JNIObject): JHandler;
begin
  Result := Wrap<TJHandler, JHandler>(AObjectId);
end;

class function TJHandler.Wrap(const AObject: IJNIObject): JHandler;
begin
  Result := Wrap<TJHandler, JHandler>(AObject);
end;

class function TJHandler.Create: JHandler;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJHandler.Create(const AArg0: JLooper): JHandler;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/os/Looper;)V', [AArg0]);
  Result := O;
end;

class function TJHandler.createAsync(const AArg0: JLooper): JHandler;
begin
  Result := CallStaticObjectMethod<TJHandler, JHandler>('createAsync', '(Landroid/os/Looper;)Landroid/os/Handler;', [AArg0]);
end;

function TJHandler.getLooper: JLooper;
begin
  Result := CallObjectMethod<TJLooper, JLooper>('getLooper', '()Landroid/os/Looper;', []);
end;

function TJHandler.hasMessages(const AArg0: Integer; const AArg1: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasMessages', '(ILjava/lang/Object;)Z', [AArg0, AArg1]);
end;

function TJHandler.hasMessages(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasMessages', '(I)Z', [AArg0]);
end;

function TJHandler.post(const AArg0: JRunnable): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'post', '(Ljava/lang/Runnable;)Z', [AArg0]);
end;

function TJHandler.postAtFrontOfQueue(const AArg0: JRunnable): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postAtFrontOfQueue', '(Ljava/lang/Runnable;)Z', [AArg0]);
end;

function TJHandler.postAtTime(const AArg0: JRunnable; const AArg1: Int64): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postAtTime', '(Ljava/lang/Runnable;J)Z', [AArg0, AArg1]);
end;

function TJHandler.postAtTime(const AArg0: JRunnable; const AArg1: JObject; const AArg2: Int64): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postAtTime', '(Ljava/lang/Runnable;Ljava/lang/Object;J)Z', [AArg0, AArg1, AArg2]);
end;

function TJHandler.postDelayed(const AArg0: JRunnable; const AArg1: JObject; const AArg2: Int64): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postDelayed', '(Ljava/lang/Runnable;Ljava/lang/Object;J)Z', [AArg0, AArg1, AArg2]);
end;

function TJHandler.postDelayed(const AArg0: JRunnable; const AArg1: Int64): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postDelayed', '(Ljava/lang/Runnable;J)Z', [AArg0, AArg1]);
end;

procedure TJHandler.removeCallbacks(const AArg0: JRunnable);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeCallbacks', '(Ljava/lang/Runnable;)V', [AArg0]);
end;

procedure TJHandler.removeCallbacks(const AArg0: JRunnable; const AArg1: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeCallbacks', '(Ljava/lang/Runnable;Ljava/lang/Object;)V', [AArg0, AArg1]);
end;

procedure TJHandler.removeCallbacksAndMessages(const AArg0: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeCallbacksAndMessages', '(Ljava/lang/Object;)V', [AArg0]);
end;

procedure TJHandler.removeMessages(const AArg0: Integer; const AArg1: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeMessages', '(ILjava/lang/Object;)V', [AArg0, AArg1]);
end;

procedure TJHandler.removeMessages(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeMessages', '(I)V', [AArg0]);
end;

function TJHandler.sendEmptyMessage(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'sendEmptyMessage', '(I)Z', [AArg0]);
end;

function TJHandler.sendEmptyMessageAtTime(const AArg0: Integer; const AArg1: Int64): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'sendEmptyMessageAtTime', '(IJ)Z', [AArg0, AArg1]);
end;

function TJHandler.sendEmptyMessageDelayed(const AArg0: Integer; const AArg1: Int64): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'sendEmptyMessageDelayed', '(IJ)Z', [AArg0, AArg1]);
end;

function TJHandler.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJHandlerThread }

class procedure TJHandlerThread.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/String;)V');
  AddMethod('<init>', '(Ljava/lang/String;I)V');
end;

class procedure TJHandlerThread.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getLooper', '()Landroid/os/Looper;');
  AddMethod('getThreadId', '()I');
  AddMethod('quit', '()Z');
  AddMethod('quitSafely', '()Z');
  AddMethod('run', '()V');
end;

class function TJHandlerThread.Wrap(const AObjectID: JNIObject): JHandlerThread;
begin
  Result := Wrap<TJHandlerThread, JHandlerThread>(AObjectId);
end;

class function TJHandlerThread.Wrap(const AObject: IJNIObject): JHandlerThread;
begin
  Result := Wrap<TJHandlerThread, JHandlerThread>(AObject);
end;

class function TJHandlerThread.Create(const AArg0: JString): JHandlerThread;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

class function TJHandlerThread.Create(const AArg0: JString; const AArg1: Integer): JHandlerThread;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;I)V', [AArg0, AArg1]);
  Result := O;
end;

function TJHandlerThread.getLooper: JLooper;
begin
  Result := CallObjectMethod<TJLooper, JLooper>('getLooper', '()Landroid/os/Looper;', []);
end;

function TJHandlerThread.getThreadId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getThreadId', '()I', []);
end;

function TJHandlerThread.quit: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'quit', '()Z', []);
end;

function TJHandlerThread.quitSafely: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'quitSafely', '()Z', []);
end;

procedure TJHandlerThread.run;
begin
  JavaType.CallVoidMethod(ObjectID, 'run', '()V', []);
end;

{ TJIBinder }

class procedure TJIBinder.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('dump', '(Ljava/io/FileDescriptor;[Ljava/lang/String;)V');
  AddMethod('dumpAsync', '(Ljava/io/FileDescriptor;[Ljava/lang/String;)V');
  AddMethod('getInterfaceDescriptor', '()Ljava/lang/String;');
  AddMethod('isBinderAlive', '()Z');
  AddMethod('pingBinder', '()Z');
end;

class procedure TJIBinder.LoadFields;
begin
  inherited;
  AddStaticField('DUMP_TRANSACTION', 'I');
  AddStaticField('FIRST_CALL_TRANSACTION', 'I');
  AddStaticField('FLAG_ONEWAY', 'I');
  AddStaticField('INTERFACE_TRANSACTION', 'I');
  AddStaticField('LAST_CALL_TRANSACTION', 'I');
  AddStaticField('LIKE_TRANSACTION', 'I');
  AddStaticField('PING_TRANSACTION', 'I');
  AddStaticField('TWEET_TRANSACTION', 'I');
end;

class function TJIBinder.Wrap(const AObjectID: JNIObject): JIBinder;
begin
  Result := Wrap<TJIBinder, JIBinder>(AObjectId);
end;

class function TJIBinder.Wrap(const AObject: IJNIObject): JIBinder;
begin
  Result := Wrap<TJIBinder, JIBinder>(AObject);
end;

class function TJIBinder.DUMP_TRANSACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DUMP_TRANSACTION');
end;

class function TJIBinder.FIRST_CALL_TRANSACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIRST_CALL_TRANSACTION');
end;

class function TJIBinder.FLAG_ONEWAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ONEWAY');
end;

class function TJIBinder.INTERFACE_TRANSACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INTERFACE_TRANSACTION');
end;

class function TJIBinder.LAST_CALL_TRANSACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAST_CALL_TRANSACTION');
end;

class function TJIBinder.LIKE_TRANSACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LIKE_TRANSACTION');
end;

class function TJIBinder.PING_TRANSACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PING_TRANSACTION');
end;

class function TJIBinder.TWEET_TRANSACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TWEET_TRANSACTION');
end;

procedure TJIBinder.dump(const AArg0: JFileDescriptor; const AArg1: IJavaArray<JString>);
begin
  JavaType.CallVoidMethod(ObjectID, 'dump', '(Ljava/io/FileDescriptor;[Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJIBinder.dumpAsync(const AArg0: JFileDescriptor; const AArg1: IJavaArray<JString>);
begin
  JavaType.CallVoidMethod(ObjectID, 'dumpAsync', '(Ljava/io/FileDescriptor;[Ljava/lang/String;)V', [AArg0, AArg1]);
end;

function TJIBinder.getInterfaceDescriptor: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getInterfaceDescriptor', '()Ljava/lang/String;', []);
end;

function TJIBinder.isBinderAlive: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isBinderAlive', '()Z', []);
end;

function TJIBinder.pingBinder: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'pingBinder', '()Z', []);
end;

{ TJLooper }

class procedure TJLooper.LoadConstructors;
begin
end;

class procedure TJLooper.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('getMainLooper', '()Landroid/os/Looper;');
  AddMethod('getQueue', '()Landroid/os/MessageQueue;');
  AddMethod('getThread', '()Ljava/lang/Thread;');
  AddMethod('isCurrentThread', '()Z');
  AddStaticMethod('loop', '()V');
  AddStaticMethod('myLooper', '()Landroid/os/Looper;');
  AddStaticMethod('myQueue', '()Landroid/os/MessageQueue;');
  AddStaticMethod('prepare', '()V');
  AddStaticMethod('prepareMainLooper', '()V');
  AddMethod('quit', '()V');
  AddMethod('quitSafely', '()V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJLooper.Wrap(const AObjectID: JNIObject): JLooper;
begin
  Result := Wrap<TJLooper, JLooper>(AObjectId);
end;

class function TJLooper.Wrap(const AObject: IJNIObject): JLooper;
begin
  Result := Wrap<TJLooper, JLooper>(AObject);
end;

class function TJLooper.getMainLooper: JLooper;
begin
  Result := CallStaticObjectMethod<TJLooper, JLooper>('getMainLooper', '()Landroid/os/Looper;', []);
end;

function TJLooper.getQueue: JMessageQueue;
begin
  Result := CallObjectMethod<TJMessageQueue, JMessageQueue>('getQueue', '()Landroid/os/MessageQueue;', []);
end;

function TJLooper.getThread: JThread;
begin
  Result := CallObjectMethod<TJThread, JThread>('getThread', '()Ljava/lang/Thread;', []);
end;

function TJLooper.isCurrentThread: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isCurrentThread', '()Z', []);
end;

class procedure TJLooper.loop;
begin
  StaticJavaType[Self].CallStaticVoidMethod('loop', '()V', []);
end;

class function TJLooper.myLooper: JLooper;
begin
  Result := CallStaticObjectMethod<TJLooper, JLooper>('myLooper', '()Landroid/os/Looper;', []);
end;

class function TJLooper.myQueue: JMessageQueue;
begin
  Result := CallStaticObjectMethod<TJMessageQueue, JMessageQueue>('myQueue', '()Landroid/os/MessageQueue;', []);
end;

class procedure TJLooper.prepare;
begin
  StaticJavaType[Self].CallStaticVoidMethod('prepare', '()V', []);
end;

class procedure TJLooper.prepareMainLooper;
begin
  StaticJavaType[Self].CallStaticVoidMethod('prepareMainLooper', '()V', []);
end;

procedure TJLooper.quit;
begin
  JavaType.CallVoidMethod(ObjectID, 'quit', '()V', []);
end;

procedure TJLooper.quitSafely;
begin
  JavaType.CallVoidMethod(ObjectID, 'quitSafely', '()V', []);
end;

function TJLooper.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJMessageQueue }

class procedure TJMessageQueue.LoadConstructors;
begin
end;

class procedure TJMessageQueue.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addIdleHandler', '(Landroid/os/MessageQueue$IdleHandler;)V');
  AddMethod('addOnFileDescriptorEventListener', '(Ljava/io/FileDescriptor;ILandroid/os/MessageQueue$OnFileDescriptorEventListener;)V');
  AddMethod('isIdle', '()Z');
  AddMethod('removeIdleHandler', '(Landroid/os/MessageQueue$IdleHandler;)V');
  AddMethod('removeOnFileDescriptorEventListener', '(Ljava/io/FileDescriptor;)V');
end;

class function TJMessageQueue.Wrap(const AObjectID: JNIObject): JMessageQueue;
begin
  Result := Wrap<TJMessageQueue, JMessageQueue>(AObjectId);
end;

class function TJMessageQueue.Wrap(const AObject: IJNIObject): JMessageQueue;
begin
  Result := Wrap<TJMessageQueue, JMessageQueue>(AObject);
end;

procedure TJMessageQueue.addIdleHandler(const AArg0: JMessageQueue_IdleHandler);
begin
  JavaType.CallVoidMethod(ObjectID, 'addIdleHandler', '(Landroid/os/MessageQueue$IdleHandler;)V', [AArg0]);
end;

procedure TJMessageQueue.addOnFileDescriptorEventListener(const AArg0: JFileDescriptor; const AArg1: Integer; const AArg2: JMessageQueue_OnFileDescriptorEventListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'addOnFileDescriptorEventListener', '(Ljava/io/FileDescriptor;ILandroid/os/MessageQueue$OnFileDescriptorEventListener;)V', [AArg0, AArg1, AArg2]);
end;

function TJMessageQueue.isIdle: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isIdle', '()Z', []);
end;

procedure TJMessageQueue.removeIdleHandler(const AArg0: JMessageQueue_IdleHandler);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeIdleHandler', '(Landroid/os/MessageQueue$IdleHandler;)V', [AArg0]);
end;

procedure TJMessageQueue.removeOnFileDescriptorEventListener(const AArg0: JFileDescriptor);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeOnFileDescriptorEventListener', '(Ljava/io/FileDescriptor;)V', [AArg0]);
end;

{ TJMessageQueue_IdleHandler }

class procedure TJMessageQueue_IdleHandler.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('queueIdle', '()Z');
end;

class function TJMessageQueue_IdleHandler.Wrap(const AObjectID: JNIObject): JMessageQueue_IdleHandler;
begin
  Result := Wrap<TJMessageQueue_IdleHandler, JMessageQueue_IdleHandler>(AObjectId);
end;

class function TJMessageQueue_IdleHandler.Wrap(const AObject: IJNIObject): JMessageQueue_IdleHandler;
begin
  Result := Wrap<TJMessageQueue_IdleHandler, JMessageQueue_IdleHandler>(AObject);
end;

function TJMessageQueue_IdleHandler.queueIdle: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'queueIdle', '()Z', []);
end;

{ TJMessageQueue_OnFileDescriptorEventListener }

class procedure TJMessageQueue_OnFileDescriptorEventListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onFileDescriptorEvents', '(Ljava/io/FileDescriptor;I)I');
end;

class procedure TJMessageQueue_OnFileDescriptorEventListener.LoadFields;
begin
  inherited;
  AddStaticField('EVENT_ERROR', 'I');
  AddStaticField('EVENT_INPUT', 'I');
  AddStaticField('EVENT_OUTPUT', 'I');
end;

class function TJMessageQueue_OnFileDescriptorEventListener.Wrap(const AObjectID: JNIObject): JMessageQueue_OnFileDescriptorEventListener;
begin
  Result := Wrap<TJMessageQueue_OnFileDescriptorEventListener, JMessageQueue_OnFileDescriptorEventListener>(AObjectId);
end;

class function TJMessageQueue_OnFileDescriptorEventListener.Wrap(const AObject: IJNIObject): JMessageQueue_OnFileDescriptorEventListener;
begin
  Result := Wrap<TJMessageQueue_OnFileDescriptorEventListener, JMessageQueue_OnFileDescriptorEventListener>(AObject);
end;

class function TJMessageQueue_OnFileDescriptorEventListener.EVENT_ERROR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EVENT_ERROR');
end;

class function TJMessageQueue_OnFileDescriptorEventListener.EVENT_INPUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EVENT_INPUT');
end;

class function TJMessageQueue_OnFileDescriptorEventListener.EVENT_OUTPUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EVENT_OUTPUT');
end;

function TJMessageQueue_OnFileDescriptorEventListener.onFileDescriptorEvents(const AArg0: JFileDescriptor; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'onFileDescriptorEvents', '(Ljava/io/FileDescriptor;I)I', [AArg0, AArg1]);
end;

{ TJParcelFileDescriptor }

class procedure TJParcelFileDescriptor.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/os/ParcelFileDescriptor;)V');
end;

class procedure TJParcelFileDescriptor.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('adoptFd', '(I)Landroid/os/ParcelFileDescriptor;');
  AddMethod('canDetectErrors', '()Z');
  AddMethod('checkError', '()V');
  AddMethod('close', '()V');
  AddMethod('closeWithError', '(Ljava/lang/String;)V');
  AddStaticMethod('createPipe', '()[Landroid/os/ParcelFileDescriptor;');
  AddStaticMethod('createReliablePipe', '()[Landroid/os/ParcelFileDescriptor;');
  AddStaticMethod('createReliableSocketPair', '()[Landroid/os/ParcelFileDescriptor;');
  AddStaticMethod('createSocketPair', '()[Landroid/os/ParcelFileDescriptor;');
  AddMethod('describeContents', '()I');
  AddMethod('detachFd', '()I');
  AddStaticMethod('dup', '(Ljava/io/FileDescriptor;)Landroid/os/ParcelFileDescriptor;');
  AddMethod('dup', '()Landroid/os/ParcelFileDescriptor;');
  AddStaticMethod('fromFd', '(I)Landroid/os/ParcelFileDescriptor;');
  AddMethod('getFd', '()I');
  AddMethod('getFileDescriptor', '()Ljava/io/FileDescriptor;');
  AddMethod('getStatSize', '()J');
  AddStaticMethod('open', '(Ljava/io/File;I)Landroid/os/ParcelFileDescriptor;');
  AddStaticMethod('parseMode', '(Ljava/lang/String;)I');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJParcelFileDescriptor.LoadFields;
begin
  inherited;
  AddStaticField('MODE_APPEND', 'I');
  AddStaticField('MODE_CREATE', 'I');
  AddStaticField('MODE_READ_ONLY', 'I');
  AddStaticField('MODE_READ_WRITE', 'I');
  AddStaticField('MODE_TRUNCATE', 'I');
  AddStaticField('MODE_WORLD_READABLE', 'I');
  AddStaticField('MODE_WORLD_WRITEABLE', 'I');
  AddStaticField('MODE_WRITE_ONLY', 'I');
end;

class function TJParcelFileDescriptor.Wrap(const AObjectID: JNIObject): JParcelFileDescriptor;
begin
  Result := Wrap<TJParcelFileDescriptor, JParcelFileDescriptor>(AObjectId);
end;

class function TJParcelFileDescriptor.Wrap(const AObject: IJNIObject): JParcelFileDescriptor;
begin
  Result := Wrap<TJParcelFileDescriptor, JParcelFileDescriptor>(AObject);
end;

class function TJParcelFileDescriptor.Create(const AArg0: JParcelFileDescriptor): JParcelFileDescriptor;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/os/ParcelFileDescriptor;)V', [AArg0]);
  Result := O;
end;

class function TJParcelFileDescriptor.MODE_APPEND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_APPEND');
end;

class function TJParcelFileDescriptor.MODE_CREATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_CREATE');
end;

class function TJParcelFileDescriptor.MODE_READ_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_READ_ONLY');
end;

class function TJParcelFileDescriptor.MODE_READ_WRITE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_READ_WRITE');
end;

class function TJParcelFileDescriptor.MODE_TRUNCATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_TRUNCATE');
end;

class function TJParcelFileDescriptor.MODE_WORLD_READABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_WORLD_READABLE');
end;

class function TJParcelFileDescriptor.MODE_WORLD_WRITEABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_WORLD_WRITEABLE');
end;

class function TJParcelFileDescriptor.MODE_WRITE_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_WRITE_ONLY');
end;

class function TJParcelFileDescriptor.adoptFd(const AArg0: Integer): JParcelFileDescriptor;
begin
  Result := CallStaticObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('adoptFd', '(I)Landroid/os/ParcelFileDescriptor;', [AArg0]);
end;

function TJParcelFileDescriptor.canDetectErrors: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canDetectErrors', '()Z', []);
end;

procedure TJParcelFileDescriptor.checkError;
begin
  JavaType.CallVoidMethod(ObjectID, 'checkError', '()V', []);
end;

procedure TJParcelFileDescriptor.close;
begin
  JavaType.CallVoidMethod(ObjectID, 'close', '()V', []);
end;

procedure TJParcelFileDescriptor.closeWithError(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'closeWithError', '(Ljava/lang/String;)V', [AArg0]);
end;

class function TJParcelFileDescriptor.createPipe: IJavaArray<JParcelFileDescriptor>;
begin
  Result := CallStaticArrayMethod<JParcelFileDescriptor>('createPipe', '()[Landroid/os/ParcelFileDescriptor;', []);
end;

class function TJParcelFileDescriptor.createReliablePipe: IJavaArray<JParcelFileDescriptor>;
begin
  Result := CallStaticArrayMethod<JParcelFileDescriptor>('createReliablePipe', '()[Landroid/os/ParcelFileDescriptor;', []);
end;

class function TJParcelFileDescriptor.createReliableSocketPair: IJavaArray<JParcelFileDescriptor>;
begin
  Result := CallStaticArrayMethod<JParcelFileDescriptor>('createReliableSocketPair', '()[Landroid/os/ParcelFileDescriptor;', []);
end;

class function TJParcelFileDescriptor.createSocketPair: IJavaArray<JParcelFileDescriptor>;
begin
  Result := CallStaticArrayMethod<JParcelFileDescriptor>('createSocketPair', '()[Landroid/os/ParcelFileDescriptor;', []);
end;

function TJParcelFileDescriptor.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJParcelFileDescriptor.detachFd: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'detachFd', '()I', []);
end;

class function TJParcelFileDescriptor.dup(const AArg0: JFileDescriptor): JParcelFileDescriptor;
begin
  Result := CallStaticObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('dup', '(Ljava/io/FileDescriptor;)Landroid/os/ParcelFileDescriptor;', [AArg0]);
end;

function TJParcelFileDescriptor.dup: JParcelFileDescriptor;
begin
  Result := CallObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('dup', '()Landroid/os/ParcelFileDescriptor;', []);
end;

class function TJParcelFileDescriptor.fromFd(const AArg0: Integer): JParcelFileDescriptor;
begin
  Result := CallStaticObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('fromFd', '(I)Landroid/os/ParcelFileDescriptor;', [AArg0]);
end;

function TJParcelFileDescriptor.getFd: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getFd', '()I', []);
end;

function TJParcelFileDescriptor.getFileDescriptor: JFileDescriptor;
begin
  Result := CallObjectMethod<TJFileDescriptor, JFileDescriptor>('getFileDescriptor', '()Ljava/io/FileDescriptor;', []);
end;

function TJParcelFileDescriptor.getStatSize: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getStatSize', '()J', []);
end;

class function TJParcelFileDescriptor.open(const AArg0: JFile; const AArg1: Integer): JParcelFileDescriptor;
begin
  Result := CallStaticObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('open', '(Ljava/io/File;I)Landroid/os/ParcelFileDescriptor;', [AArg0, AArg1]);
end;

class function TJParcelFileDescriptor.parseMode(const AArg0: JString): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('parseMode', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJParcelFileDescriptor.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJPatternMatcher }

class procedure TJPatternMatcher.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/String;I)V');
end;

class procedure TJPatternMatcher.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('getPath', '()Ljava/lang/String;');
  AddMethod('getType', '()I');
  AddMethod('match', '(Ljava/lang/String;)Z');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJPatternMatcher.LoadFields;
begin
  inherited;
  AddStaticField('PATTERN_ADVANCED_GLOB', 'I');
  AddStaticField('PATTERN_LITERAL', 'I');
  AddStaticField('PATTERN_PREFIX', 'I');
  AddStaticField('PATTERN_SIMPLE_GLOB', 'I');
end;

class function TJPatternMatcher.Wrap(const AObjectID: JNIObject): JPatternMatcher;
begin
  Result := Wrap<TJPatternMatcher, JPatternMatcher>(AObjectId);
end;

class function TJPatternMatcher.Wrap(const AObject: IJNIObject): JPatternMatcher;
begin
  Result := Wrap<TJPatternMatcher, JPatternMatcher>(AObject);
end;

class function TJPatternMatcher.Create(const AArg0: JString; const AArg1: Integer): JPatternMatcher;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;I)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJPatternMatcher.PATTERN_ADVANCED_GLOB: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PATTERN_ADVANCED_GLOB');
end;

class function TJPatternMatcher.PATTERN_LITERAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PATTERN_LITERAL');
end;

class function TJPatternMatcher.PATTERN_PREFIX: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PATTERN_PREFIX');
end;

class function TJPatternMatcher.PATTERN_SIMPLE_GLOB: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PATTERN_SIMPLE_GLOB');
end;

function TJPatternMatcher.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJPatternMatcher.getPath: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPath', '()Ljava/lang/String;', []);
end;

function TJPatternMatcher.getType: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getType', '()I', []);
end;

function TJPatternMatcher.match(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'match', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJPatternMatcher.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJPathPermission }

class procedure TJPathPermission.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V');
end;

class procedure TJPathPermission.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getReadPermission', '()Ljava/lang/String;');
  AddMethod('getWritePermission', '()Ljava/lang/String;');
end;

class function TJPathPermission.Wrap(const AObjectID: JNIObject): JPathPermission;
begin
  Result := Wrap<TJPathPermission, JPathPermission>(AObjectId);
end;

class function TJPathPermission.Wrap(const AObject: IJNIObject): JPathPermission;
begin
  Result := Wrap<TJPathPermission, JPathPermission>(AObject);
end;

class function TJPathPermission.Create(const AArg0: JString; const AArg1: Integer; const AArg2: JString; const AArg3: JString): JPathPermission;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

function TJPathPermission.getReadPermission: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getReadPermission', '()Ljava/lang/String;', []);
end;

function TJPathPermission.getWritePermission: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getWritePermission', '()Ljava/lang/String;', []);
end;

{ TJUserHandle }

class procedure TJUserHandle.LoadConstructors;
begin
end;

class procedure TJUserHandle.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddStaticMethod('getUserHandleForUid', '(I)Landroid/os/UserHandle;');
  AddMethod('hashCode', '()I');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJUserHandle.Wrap(const AObjectID: JNIObject): JUserHandle;
begin
  Result := Wrap<TJUserHandle, JUserHandle>(AObjectId);
end;

class function TJUserHandle.Wrap(const AObject: IJNIObject): JUserHandle;
begin
  Result := Wrap<TJUserHandle, JUserHandle>(AObject);
end;

function TJUserHandle.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJUserHandle.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

class function TJUserHandle.getUserHandleForUid(const AArg0: Integer): JUserHandle;
begin
  Result := CallStaticObjectMethod<TJUserHandle, JUserHandle>('getUserHandleForUid', '(I)Landroid/os/UserHandle;', [AArg0]);
end;

function TJUserHandle.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJUserHandle.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJBroadcastReceiver }

class procedure TJBroadcastReceiver.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJBroadcastReceiver.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('abortBroadcast', '()V');
  AddMethod('clearAbortBroadcast', '()V');
  AddMethod('getAbortBroadcast', '()Z');
  AddMethod('getDebugUnregister', '()Z');
  AddMethod('getResultCode', '()I');
  AddMethod('getResultData', '()Ljava/lang/String;');
  AddMethod('getResultExtras', '(Z)Landroid/os/Bundle;');
  AddMethod('goAsync', '()Landroid/content/BroadcastReceiver$PendingResult;');
  AddMethod('isInitialStickyBroadcast', '()Z');
  AddMethod('isOrderedBroadcast', '()Z');
  AddMethod('onReceive', '(Landroid/content/Context;Landroid/content/Intent;)V');
  AddMethod('peekService', '(Landroid/content/Context;Landroid/content/Intent;)Landroid/os/IBinder;');
  AddMethod('setDebugUnregister', '(Z)V');
  AddMethod('setOrderedHint', '(Z)V');
  AddMethod('setResult', '(ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('setResultCode', '(I)V');
  AddMethod('setResultData', '(Ljava/lang/String;)V');
  AddMethod('setResultExtras', '(Landroid/os/Bundle;)V');
end;

class function TJBroadcastReceiver.Wrap(const AObjectID: JNIObject): JBroadcastReceiver;
begin
  Result := Wrap<TJBroadcastReceiver, JBroadcastReceiver>(AObjectId);
end;

class function TJBroadcastReceiver.Wrap(const AObject: IJNIObject): JBroadcastReceiver;
begin
  Result := Wrap<TJBroadcastReceiver, JBroadcastReceiver>(AObject);
end;

class function TJBroadcastReceiver.Create: JBroadcastReceiver;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJBroadcastReceiver.abortBroadcast;
begin
  JavaType.CallVoidMethod(ObjectID, 'abortBroadcast', '()V', []);
end;

procedure TJBroadcastReceiver.clearAbortBroadcast;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearAbortBroadcast', '()V', []);
end;

function TJBroadcastReceiver.getAbortBroadcast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getAbortBroadcast', '()Z', []);
end;

function TJBroadcastReceiver.getDebugUnregister: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getDebugUnregister', '()Z', []);
end;

function TJBroadcastReceiver.getResultCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getResultCode', '()I', []);
end;

function TJBroadcastReceiver.getResultData: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getResultData', '()Ljava/lang/String;', []);
end;

function TJBroadcastReceiver.getResultExtras(const AArg0: Boolean): JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getResultExtras', '(Z)Landroid/os/Bundle;', [AArg0]);
end;

function TJBroadcastReceiver.goAsync: JBroadcastReceiver_PendingResult;
begin
  Result := CallObjectMethod<TJBroadcastReceiver_PendingResult, JBroadcastReceiver_PendingResult>('goAsync', '()Landroid/content/BroadcastReceiver$PendingResult;', []);
end;

function TJBroadcastReceiver.isInitialStickyBroadcast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInitialStickyBroadcast', '()Z', []);
end;

function TJBroadcastReceiver.isOrderedBroadcast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isOrderedBroadcast', '()Z', []);
end;

procedure TJBroadcastReceiver.onReceive(const AArg0: JContext; const AArg1: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'onReceive', '(Landroid/content/Context;Landroid/content/Intent;)V', [AArg0, AArg1]);
end;

function TJBroadcastReceiver.peekService(const AArg0: JContext; const AArg1: JIntent): JIBinder;
begin
  Result := CallObjectMethod<TJIBinder, JIBinder>('peekService', '(Landroid/content/Context;Landroid/content/Intent;)Landroid/os/IBinder;', [AArg0, AArg1]);
end;

procedure TJBroadcastReceiver.setDebugUnregister(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDebugUnregister', '(Z)V', [AArg0]);
end;

procedure TJBroadcastReceiver.setOrderedHint(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOrderedHint', '(Z)V', [AArg0]);
end;

procedure TJBroadcastReceiver.setResult(const AArg0: Integer; const AArg1: JString; const AArg2: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResult', '(ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJBroadcastReceiver.setResultCode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResultCode', '(I)V', [AArg0]);
end;

procedure TJBroadcastReceiver.setResultData(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResultData', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJBroadcastReceiver.setResultExtras(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResultExtras', '(Landroid/os/Bundle;)V', [AArg0]);
end;

{ TJBroadcastReceiver_PendingResult }

class procedure TJBroadcastReceiver_PendingResult.LoadConstructors;
begin
end;

class procedure TJBroadcastReceiver_PendingResult.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('abortBroadcast', '()V');
  AddMethod('clearAbortBroadcast', '()V');
  AddMethod('finish', '()V');
  AddMethod('getAbortBroadcast', '()Z');
  AddMethod('getResultCode', '()I');
  AddMethod('getResultData', '()Ljava/lang/String;');
  AddMethod('getResultExtras', '(Z)Landroid/os/Bundle;');
  AddMethod('setResult', '(ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('setResultCode', '(I)V');
  AddMethod('setResultData', '(Ljava/lang/String;)V');
  AddMethod('setResultExtras', '(Landroid/os/Bundle;)V');
end;

class function TJBroadcastReceiver_PendingResult.Wrap(const AObjectID: JNIObject): JBroadcastReceiver_PendingResult;
begin
  Result := Wrap<TJBroadcastReceiver_PendingResult, JBroadcastReceiver_PendingResult>(AObjectId);
end;

class function TJBroadcastReceiver_PendingResult.Wrap(const AObject: IJNIObject): JBroadcastReceiver_PendingResult;
begin
  Result := Wrap<TJBroadcastReceiver_PendingResult, JBroadcastReceiver_PendingResult>(AObject);
end;

procedure TJBroadcastReceiver_PendingResult.abortBroadcast;
begin
  JavaType.CallVoidMethod(ObjectID, 'abortBroadcast', '()V', []);
end;

procedure TJBroadcastReceiver_PendingResult.clearAbortBroadcast;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearAbortBroadcast', '()V', []);
end;

procedure TJBroadcastReceiver_PendingResult.finish;
begin
  JavaType.CallVoidMethod(ObjectID, 'finish', '()V', []);
end;

function TJBroadcastReceiver_PendingResult.getAbortBroadcast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getAbortBroadcast', '()Z', []);
end;

function TJBroadcastReceiver_PendingResult.getResultCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getResultCode', '()I', []);
end;

function TJBroadcastReceiver_PendingResult.getResultData: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getResultData', '()Ljava/lang/String;', []);
end;

function TJBroadcastReceiver_PendingResult.getResultExtras(const AArg0: Boolean): JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getResultExtras', '(Z)Landroid/os/Bundle;', [AArg0]);
end;

procedure TJBroadcastReceiver_PendingResult.setResult(const AArg0: Integer; const AArg1: JString; const AArg2: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResult', '(ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJBroadcastReceiver_PendingResult.setResultCode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResultCode', '(I)V', [AArg0]);
end;

procedure TJBroadcastReceiver_PendingResult.setResultData(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResultData', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJBroadcastReceiver_PendingResult.setResultExtras(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResultExtras', '(Landroid/os/Bundle;)V', [AArg0]);
end;

{ TJClipData }

class procedure TJClipData.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/CharSequence;[Ljava/lang/String;Landroid/content/ClipData$Item;)V');
  AddMethod('<init>', '(Landroid/content/ClipDescription;Landroid/content/ClipData$Item;)V');
  AddMethod('<init>', '(Landroid/content/ClipData;)V');
end;

class procedure TJClipData.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addItem', '(Landroid/content/ContentResolver;Landroid/content/ClipData$Item;)V');
  AddMethod('addItem', '(Landroid/content/ClipData$Item;)V');
  AddMethod('describeContents', '()I');
  AddMethod('getDescription', '()Landroid/content/ClipDescription;');
  AddMethod('getItemAt', '(I)Landroid/content/ClipData$Item;');
  AddMethod('getItemCount', '()I');
  AddStaticMethod('newHtmlText', '(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/String;)Landroid/content/ClipData;');
  AddStaticMethod('newIntent', '(Ljava/lang/CharSequence;Landroid/content/Intent;)Landroid/content/ClipData;');
  AddStaticMethod('newPlainText', '(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Landroid/content/ClipData;');
  AddStaticMethod('newRawUri', '(Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;');
  AddStaticMethod('newUri', '(Landroid/content/ContentResolver;Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJClipData.Wrap(const AObjectID: JNIObject): JClipData;
begin
  Result := Wrap<TJClipData, JClipData>(AObjectId);
end;

class function TJClipData.Wrap(const AObject: IJNIObject): JClipData;
begin
  Result := Wrap<TJClipData, JClipData>(AObject);
end;

class function TJClipData.Create(const AArg0: JCharSequence; const AArg1: IJavaArray<JString>; const AArg2: JClipData_Item): JClipData;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/CharSequence;[Ljava/lang/String;Landroid/content/ClipData$Item;)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJClipData.Create(const AArg0: JClipDescription; const AArg1: JClipData_Item): JClipData;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/ClipDescription;Landroid/content/ClipData$Item;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJClipData.Create(const AArg0: JClipData): JClipData;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/ClipData;)V', [AArg0]);
  Result := O;
end;

procedure TJClipData.addItem(const AArg0: JContentResolver; const AArg1: JClipData_Item);
begin
  JavaType.CallVoidMethod(ObjectID, 'addItem', '(Landroid/content/ContentResolver;Landroid/content/ClipData$Item;)V', [AArg0, AArg1]);
end;

procedure TJClipData.addItem(const AArg0: JClipData_Item);
begin
  JavaType.CallVoidMethod(ObjectID, 'addItem', '(Landroid/content/ClipData$Item;)V', [AArg0]);
end;

function TJClipData.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJClipData.getDescription: JClipDescription;
begin
  Result := CallObjectMethod<TJClipDescription, JClipDescription>('getDescription', '()Landroid/content/ClipDescription;', []);
end;

function TJClipData.getItemAt(const AArg0: Integer): JClipData_Item;
begin
  Result := CallObjectMethod<TJClipData_Item, JClipData_Item>('getItemAt', '(I)Landroid/content/ClipData$Item;', [AArg0]);
end;

function TJClipData.getItemCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getItemCount', '()I', []);
end;

class function TJClipData.newHtmlText(const AArg0: JCharSequence; const AArg1: JCharSequence; const AArg2: JString): JClipData;
begin
  Result := CallStaticObjectMethod<TJClipData, JClipData>('newHtmlText', '(Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/String;)Landroid/content/ClipData;', [AArg0, AArg1, AArg2]);
end;

class function TJClipData.newIntent(const AArg0: JCharSequence; const AArg1: JIntent): JClipData;
begin
  Result := CallStaticObjectMethod<TJClipData, JClipData>('newIntent', '(Ljava/lang/CharSequence;Landroid/content/Intent;)Landroid/content/ClipData;', [AArg0, AArg1]);
end;

class function TJClipData.newPlainText(const AArg0: JCharSequence; const AArg1: JCharSequence): JClipData;
begin
  Result := CallStaticObjectMethod<TJClipData, JClipData>('newPlainText', '(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Landroid/content/ClipData;', [AArg0, AArg1]);
end;

class function TJClipData.newRawUri(const AArg0: JCharSequence; const AArg1: JUri): JClipData;
begin
  Result := CallStaticObjectMethod<TJClipData, JClipData>('newRawUri', '(Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;', [AArg0, AArg1]);
end;

class function TJClipData.newUri(const AArg0: JContentResolver; const AArg1: JCharSequence; const AArg2: JUri): JClipData;
begin
  Result := CallStaticObjectMethod<TJClipData, JClipData>('newUri', '(Landroid/content/ContentResolver;Ljava/lang/CharSequence;Landroid/net/Uri;)Landroid/content/ClipData;', [AArg0, AArg1, AArg2]);
end;

function TJClipData.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJClipData_Item }

class procedure TJClipData_Item.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/CharSequence;)V');
  AddMethod('<init>', '(Ljava/lang/CharSequence;Ljava/lang/String;)V');
  AddMethod('<init>', '(Landroid/content/Intent;)V');
  AddMethod('<init>', '(Landroid/net/Uri;)V');
  AddMethod('<init>', '(Ljava/lang/CharSequence;Landroid/content/Intent;Landroid/net/Uri;)V');
  AddMethod('<init>', '(Ljava/lang/CharSequence;Ljava/lang/String;Landroid/content/Intent;Landroid/net/Uri;)V');
end;

class procedure TJClipData_Item.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('coerceToHtmlText', '(Landroid/content/Context;)Ljava/lang/String;');
  AddMethod('coerceToStyledText', '(Landroid/content/Context;)Ljava/lang/CharSequence;');
  AddMethod('coerceToText', '(Landroid/content/Context;)Ljava/lang/CharSequence;');
  AddMethod('getHtmlText', '()Ljava/lang/String;');
  AddMethod('getIntent', '()Landroid/content/Intent;');
  AddMethod('getText', '()Ljava/lang/CharSequence;');
  AddMethod('getUri', '()Landroid/net/Uri;');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJClipData_Item.Wrap(const AObjectID: JNIObject): JClipData_Item;
begin
  Result := Wrap<TJClipData_Item, JClipData_Item>(AObjectId);
end;

class function TJClipData_Item.Wrap(const AObject: IJNIObject): JClipData_Item;
begin
  Result := Wrap<TJClipData_Item, JClipData_Item>(AObject);
end;

class function TJClipData_Item.Create(const AArg0: JCharSequence): JClipData_Item;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/CharSequence;)V', [AArg0]);
  Result := O;
end;

class function TJClipData_Item.Create(const AArg0: JCharSequence; const AArg1: JString): JClipData_Item;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/CharSequence;Ljava/lang/String;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJClipData_Item.Create(const AArg0: JIntent): JClipData_Item;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Intent;)V', [AArg0]);
  Result := O;
end;

class function TJClipData_Item.Create(const AArg0: JUri): JClipData_Item;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/net/Uri;)V', [AArg0]);
  Result := O;
end;

class function TJClipData_Item.Create(const AArg0: JCharSequence; const AArg1: JIntent; const AArg2: JUri): JClipData_Item;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/CharSequence;Landroid/content/Intent;Landroid/net/Uri;)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJClipData_Item.Create(const AArg0: JCharSequence; const AArg1: JString; const AArg2: JIntent; const AArg3: JUri): JClipData_Item;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/CharSequence;Ljava/lang/String;Landroid/content/Intent;Landroid/net/Uri;)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

function TJClipData_Item.coerceToHtmlText(const AArg0: JContext): JString;
begin
  Result := CallObjectMethod<TJString, JString>('coerceToHtmlText', '(Landroid/content/Context;)Ljava/lang/String;', [AArg0]);
end;

function TJClipData_Item.coerceToStyledText(const AArg0: JContext): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('coerceToStyledText', '(Landroid/content/Context;)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJClipData_Item.coerceToText(const AArg0: JContext): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('coerceToText', '(Landroid/content/Context;)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJClipData_Item.getHtmlText: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getHtmlText', '()Ljava/lang/String;', []);
end;

function TJClipData_Item.getIntent: JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('getIntent', '()Landroid/content/Intent;', []);
end;

function TJClipData_Item.getText: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getText', '()Ljava/lang/CharSequence;', []);
end;

function TJClipData_Item.getUri: JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('getUri', '()Landroid/net/Uri;', []);
end;

function TJClipData_Item.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJClipDescription }

class procedure TJClipDescription.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/CharSequence;[Ljava/lang/String;)V');
  AddMethod('<init>', '(Landroid/content/ClipDescription;)V');
end;

class procedure TJClipDescription.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('compareMimeTypes', '(Ljava/lang/String;Ljava/lang/String;)Z');
  AddMethod('describeContents', '()I');
  AddMethod('filterMimeTypes', '(Ljava/lang/String;)[Ljava/lang/String;');
  AddMethod('getExtras', '()Landroid/os/PersistableBundle;');
  AddMethod('getLabel', '()Ljava/lang/CharSequence;');
  AddMethod('getMimeType', '(I)Ljava/lang/String;');
  AddMethod('getMimeTypeCount', '()I');
  AddMethod('getTimestamp', '()J');
  AddMethod('hasMimeType', '(Ljava/lang/String;)Z');
  AddMethod('setExtras', '(Landroid/os/PersistableBundle;)V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJClipDescription.LoadFields;
begin
  inherited;
  AddStaticField('MIMETYPE_TEXT_HTML', 'Ljava/lang/String;');
  AddStaticField('MIMETYPE_TEXT_INTENT', 'Ljava/lang/String;');
  AddStaticField('MIMETYPE_TEXT_PLAIN', 'Ljava/lang/String;');
  AddStaticField('MIMETYPE_TEXT_URILIST', 'Ljava/lang/String;');
end;

class function TJClipDescription.Wrap(const AObjectID: JNIObject): JClipDescription;
begin
  Result := Wrap<TJClipDescription, JClipDescription>(AObjectId);
end;

class function TJClipDescription.Wrap(const AObject: IJNIObject): JClipDescription;
begin
  Result := Wrap<TJClipDescription, JClipDescription>(AObject);
end;

class function TJClipDescription.Create(const AArg0: JCharSequence; const AArg1: IJavaArray<JString>): JClipDescription;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/CharSequence;[Ljava/lang/String;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJClipDescription.Create(const AArg0: JClipDescription): JClipDescription;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/ClipDescription;)V', [AArg0]);
  Result := O;
end;

class function TJClipDescription.MIMETYPE_TEXT_HTML: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MIMETYPE_TEXT_HTML');
end;

class function TJClipDescription.MIMETYPE_TEXT_INTENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MIMETYPE_TEXT_INTENT');
end;

class function TJClipDescription.MIMETYPE_TEXT_PLAIN: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MIMETYPE_TEXT_PLAIN');
end;

class function TJClipDescription.MIMETYPE_TEXT_URILIST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MIMETYPE_TEXT_URILIST');
end;

class function TJClipDescription.compareMimeTypes(const AArg0: JString; const AArg1: JString): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('compareMimeTypes', '(Ljava/lang/String;Ljava/lang/String;)Z', [AArg0, AArg1]);
end;

function TJClipDescription.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJClipDescription.filterMimeTypes(const AArg0: JString): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('filterMimeTypes', '(Ljava/lang/String;)[Ljava/lang/String;', [AArg0]);
end;

function TJClipDescription.getExtras: JPersistableBundle;
begin
  Result := CallObjectMethod<TJPersistableBundle, JPersistableBundle>('getExtras', '()Landroid/os/PersistableBundle;', []);
end;

function TJClipDescription.getLabel: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getLabel', '()Ljava/lang/CharSequence;', []);
end;

function TJClipDescription.getMimeType(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getMimeType', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJClipDescription.getMimeTypeCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMimeTypeCount', '()I', []);
end;

function TJClipDescription.getTimestamp: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getTimestamp', '()J', []);
end;

function TJClipDescription.hasMimeType(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasMimeType', '(Ljava/lang/String;)Z', [AArg0]);
end;

procedure TJClipDescription.setExtras(const AArg0: JPersistableBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'setExtras', '(Landroid/os/PersistableBundle;)V', [AArg0]);
end;

function TJClipDescription.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJClipboardManager_OnPrimaryClipChangedListener }

class procedure TJClipboardManager_OnPrimaryClipChangedListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onPrimaryClipChanged', '()V');
end;

class function TJClipboardManager_OnPrimaryClipChangedListener.Wrap(const AObjectID: JNIObject): JClipboardManager_OnPrimaryClipChangedListener;
begin
  Result := Wrap<TJClipboardManager_OnPrimaryClipChangedListener, JClipboardManager_OnPrimaryClipChangedListener>(AObjectId);
end;

class function TJClipboardManager_OnPrimaryClipChangedListener.Wrap(const AObject: IJNIObject): JClipboardManager_OnPrimaryClipChangedListener;
begin
  Result := Wrap<TJClipboardManager_OnPrimaryClipChangedListener, JClipboardManager_OnPrimaryClipChangedListener>(AObject);
end;

procedure TJClipboardManager_OnPrimaryClipChangedListener.onPrimaryClipChanged;
begin
  JavaType.CallVoidMethod(ObjectID, 'onPrimaryClipChanged', '()V', []);
end;

{ TJComponentName }

class procedure TJComponentName.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('<init>', '(Landroid/content/Context;Ljava/lang/String;)V');
  AddMethod('<init>', '(Landroid/content/Context;Ljava/lang/Class;)V');
end;

class procedure TJComponentName.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clone', '()Landroid/content/ComponentName;');
  AddMethod('compareTo', '(Landroid/content/ComponentName;)I');
  AddMethod('compareTo', '(Ljava/lang/Object;)I');
  AddStaticMethod('createRelative', '(Landroid/content/Context;Ljava/lang/String;)Landroid/content/ComponentName;');
  AddStaticMethod('createRelative', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/ComponentName;');
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('flattenToShortString', '()Ljava/lang/String;');
  AddMethod('flattenToString', '()Ljava/lang/String;');
  AddMethod('getClassName', '()Ljava/lang/String;');
  AddMethod('getPackageName', '()Ljava/lang/String;');
  AddMethod('getShortClassName', '()Ljava/lang/String;');
  AddMethod('hashCode', '()I');
  AddMethod('toShortString', '()Ljava/lang/String;');
  AddMethod('toString', '()Ljava/lang/String;');
  AddStaticMethod('unflattenFromString', '(Ljava/lang/String;)Landroid/content/ComponentName;');
end;

class function TJComponentName.Wrap(const AObjectID: JNIObject): JComponentName;
begin
  Result := Wrap<TJComponentName, JComponentName>(AObjectId);
end;

class function TJComponentName.Wrap(const AObject: IJNIObject): JComponentName;
begin
  Result := Wrap<TJComponentName, JComponentName>(AObject);
end;

class function TJComponentName.Create(const AArg0: JString; const AArg1: JString): JComponentName;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJComponentName.Create(const AArg0: JContext; const AArg1: JString): JComponentName;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Ljava/lang/String;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJComponentName.Create(const AArg0: JContext; const AArg1: JClass): JComponentName;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Ljava/lang/Class;)V', [AArg0, AArg1]);
  Result := O;
end;

function TJComponentName.clone: JComponentName;
begin
  Result := CallObjectMethod<TJComponentName, JComponentName>('clone', '()Landroid/content/ComponentName;', []);
end;

function TJComponentName.compareTo(const AArg0: JComponentName): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'compareTo', '(Landroid/content/ComponentName;)I', [AArg0]);
end;

function TJComponentName.compareTo(const AArg0: JObject): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'compareTo', '(Ljava/lang/Object;)I', [AArg0]);
end;

class function TJComponentName.createRelative(const AArg0: JContext; const AArg1: JString): JComponentName;
begin
  Result := CallStaticObjectMethod<TJComponentName, JComponentName>('createRelative', '(Landroid/content/Context;Ljava/lang/String;)Landroid/content/ComponentName;', [AArg0, AArg1]);
end;

class function TJComponentName.createRelative(const AArg0: JString; const AArg1: JString): JComponentName;
begin
  Result := CallStaticObjectMethod<TJComponentName, JComponentName>('createRelative', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/ComponentName;', [AArg0, AArg1]);
end;

function TJComponentName.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJComponentName.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJComponentName.flattenToShortString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('flattenToShortString', '()Ljava/lang/String;', []);
end;

function TJComponentName.flattenToString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('flattenToString', '()Ljava/lang/String;', []);
end;

function TJComponentName.getClassName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getClassName', '()Ljava/lang/String;', []);
end;

function TJComponentName.getPackageName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPackageName', '()Ljava/lang/String;', []);
end;

function TJComponentName.getShortClassName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getShortClassName', '()Ljava/lang/String;', []);
end;

function TJComponentName.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJComponentName.toShortString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toShortString', '()Ljava/lang/String;', []);
end;

function TJComponentName.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

class function TJComponentName.unflattenFromString(const AArg0: JString): JComponentName;
begin
  Result := CallStaticObjectMethod<TJComponentName, JComponentName>('unflattenFromString', '(Ljava/lang/String;)Landroid/content/ComponentName;', [AArg0]);
end;

{ TJContentProvider }

class procedure TJContentProvider.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJContentProvider.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyBatch', '(Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;');
  AddMethod('bulkInsert', '(Landroid/net/Uri;[Landroid/content/ContentValues;)I');
  AddMethod('call', '(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;');
  AddMethod('canonicalize', '(Landroid/net/Uri;)Landroid/net/Uri;');
  AddMethod('delete', '(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I');
  AddMethod('getCallingPackage', '()Ljava/lang/String;');
  AddMethod('getContext', '()Landroid/content/Context;');
  AddMethod('getPathPermissions', '()[Landroid/content/pm/PathPermission;');
  AddMethod('getReadPermission', '()Ljava/lang/String;');
  AddMethod('getStreamTypes', '(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;');
  AddMethod('getType', '(Landroid/net/Uri;)Ljava/lang/String;');
  AddMethod('getWritePermission', '()Ljava/lang/String;');
  AddMethod('insert', '(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;');
  AddMethod('onConfigurationChanged', '(Landroid/content/res/Configuration;)V');
  AddMethod('onCreate', '()Z');
  AddMethod('onLowMemory', '()V');
  AddMethod('onTrimMemory', '(I)V');
  AddMethod('openAssetFile', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('openAssetFile', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('openFile', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;');
  AddMethod('openFile', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;');
  AddMethod('openTypedAssetFile', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('openTypedAssetFile', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('query', '(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;');
  AddMethod('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;');
  AddMethod('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;');
  AddMethod('refresh', '(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z');
  AddMethod('shutdown', '()V');
  AddMethod('uncanonicalize', '(Landroid/net/Uri;)Landroid/net/Uri;');
  AddMethod('update', '(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I');
end;

class function TJContentProvider.Wrap(const AObjectID: JNIObject): JContentProvider;
begin
  Result := Wrap<TJContentProvider, JContentProvider>(AObjectId);
end;

class function TJContentProvider.Wrap(const AObject: IJNIObject): JContentProvider;
begin
  Result := Wrap<TJContentProvider, JContentProvider>(AObject);
end;

class function TJContentProvider.Create: JContentProvider;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJContentProvider.applyBatch(const AArg0: JArrayList): IJavaArray<JContentProviderResult>;
begin
  Result := CallArrayMethod<TJContentProviderResult, JContentProviderResult>('applyBatch', '(Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;', [AArg0]);
end;

function TJContentProvider.bulkInsert(const AArg0: JUri; const AArg1: IJavaArray<JContentValues>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'bulkInsert', '(Landroid/net/Uri;[Landroid/content/ContentValues;)I', [AArg0, AArg1]);
end;

function TJContentProvider.call(const AArg0: JString; const AArg1: JString; const AArg2: JBundle): JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('call', '(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;', [AArg0, AArg1, AArg2]);
end;

function TJContentProvider.canonicalize(const AArg0: JUri): JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('canonicalize', '(Landroid/net/Uri;)Landroid/net/Uri;', [AArg0]);
end;

function TJContentProvider.delete(const AArg0: JUri; const AArg1: JString; const AArg2: IJavaArray<JString>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'delete', '(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I', [AArg0, AArg1, AArg2]);
end;

function TJContentProvider.getCallingPackage: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getCallingPackage', '()Ljava/lang/String;', []);
end;

function TJContentProvider.getContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('getContext', '()Landroid/content/Context;', []);
end;

function TJContentProvider.getPathPermissions: IJavaArray<JPathPermission>;
begin
  Result := CallArrayMethod<TJPathPermission, JPathPermission>('getPathPermissions', '()[Landroid/content/pm/PathPermission;', []);
end;

function TJContentProvider.getReadPermission: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getReadPermission', '()Ljava/lang/String;', []);
end;

function TJContentProvider.getStreamTypes(const AArg0: JUri; const AArg1: JString): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getStreamTypes', '(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;', [AArg0, AArg1]);
end;

function TJContentProvider.getType(const AArg0: JUri): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getType', '(Landroid/net/Uri;)Ljava/lang/String;', [AArg0]);
end;

function TJContentProvider.getWritePermission: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getWritePermission', '()Ljava/lang/String;', []);
end;

function TJContentProvider.insert(const AArg0: JUri; const AArg1: JContentValues): JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('insert', '(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;', [AArg0, AArg1]);
end;

procedure TJContentProvider.onConfigurationChanged(const AArg0: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'onConfigurationChanged', '(Landroid/content/res/Configuration;)V', [AArg0]);
end;

function TJContentProvider.onCreate: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onCreate', '()Z', []);
end;

procedure TJContentProvider.onLowMemory;
begin
  JavaType.CallVoidMethod(ObjectID, 'onLowMemory', '()V', []);
end;

procedure TJContentProvider.onTrimMemory(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onTrimMemory', '(I)V', [AArg0]);
end;

function TJContentProvider.openAssetFile(const AArg0: JUri; const AArg1: JString): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openAssetFile', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;', [AArg0, AArg1]);
end;

function TJContentProvider.openAssetFile(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openAssetFile', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;', [AArg0, AArg1, AArg2]);
end;

function TJContentProvider.openFile(const AArg0: JUri; const AArg1: JString): JParcelFileDescriptor;
begin
  Result := CallObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('openFile', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;', [AArg0, AArg1]);
end;

function TJContentProvider.openFile(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JParcelFileDescriptor;
begin
  Result := CallObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('openFile', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;', [AArg0, AArg1, AArg2]);
end;

function TJContentProvider.openTypedAssetFile(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle; const AArg3: JCancellationSignal): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openTypedAssetFile', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJContentProvider.openTypedAssetFile(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openTypedAssetFile', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;', [AArg0, AArg1, AArg2]);
end;

function TJContentProvider.query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JBundle; const AArg3: JCancellationSignal): JCursor;
begin
  Result := CallObjectMethod<TJCursor, JCursor>('query', '(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJContentProvider.query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString; const AArg5: JCancellationSignal): JCursor;
begin
  Result := CallObjectMethod<TJCursor, JCursor>('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJContentProvider.query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor;
begin
  Result := CallObjectMethod<TJCursor, JCursor>('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJContentProvider.refresh(const AArg0: JUri; const AArg1: JBundle; const AArg2: JCancellationSignal): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'refresh', '(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJContentProvider.shutdown;
begin
  JavaType.CallVoidMethod(ObjectID, 'shutdown', '()V', []);
end;

function TJContentProvider.uncanonicalize(const AArg0: JUri): JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('uncanonicalize', '(Landroid/net/Uri;)Landroid/net/Uri;', [AArg0]);
end;

function TJContentProvider.update(const AArg0: JUri; const AArg1: JContentValues; const AArg2: JString; const AArg3: IJavaArray<JString>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'update', '(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I', [AArg0, AArg1, AArg2, AArg3]);
end;

{ TJFileProvider }

class procedure TJFileProvider.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJFileProvider.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('delete', '(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I');
  AddMethod('getType', '(Landroid/net/Uri;)Ljava/lang/String;');
  AddStaticMethod('getUriForFile', '(Landroid/content/Context;Ljava/lang/String;Ljava/io/File;)Landroid/net/Uri;');
  AddMethod('insert', '(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;');
  AddMethod('onCreate', '()Z');
  AddMethod('openFile', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;');
  AddMethod('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;');
  AddMethod('update', '(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I');
end;

class function TJFileProvider.Wrap(const AObjectID: JNIObject): JFileProvider;
begin
  Result := Wrap<TJFileProvider, JFileProvider>(AObjectId);
end;

class function TJFileProvider.Wrap(const AObject: IJNIObject): JFileProvider;
begin
  Result := Wrap<TJFileProvider, JFileProvider>(AObject);
end;

class function TJFileProvider.Create: JFileProvider;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJFileProvider.delete(const AArg0: JUri; const AArg1: JString; const AArg2: IJavaArray<JString>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'delete', '(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I', [AArg0, AArg1, AArg2]);
end;

function TJFileProvider.getType(const AArg0: JUri): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getType', '(Landroid/net/Uri;)Ljava/lang/String;', [AArg0]);
end;

class function TJFileProvider.getUriForFile(const AArg0: JContext; const AArg1: JString; const AArg2: JFile): JUri;
begin
  Result := CallStaticObjectMethod<TJUri, JUri>('getUriForFile', '(Landroid/content/Context;Ljava/lang/String;Ljava/io/File;)Landroid/net/Uri;', [AArg0, AArg1, AArg2]);
end;

function TJFileProvider.insert(const AArg0: JUri; const AArg1: JContentValues): JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('insert', '(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;', [AArg0, AArg1]);
end;

function TJFileProvider.onCreate: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onCreate', '()Z', []);
end;

function TJFileProvider.openFile(const AArg0: JUri; const AArg1: JString): JParcelFileDescriptor;
begin
  Result := CallObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('openFile', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;', [AArg0, AArg1]);
end;

function TJFileProvider.query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor;
begin
  Result := CallObjectMethod<TJCursor, JCursor>('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJFileProvider.update(const AArg0: JUri; const AArg1: JContentValues; const AArg2: JString; const AArg3: IJavaArray<JString>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'update', '(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I', [AArg0, AArg1, AArg2, AArg3]);
end;

{ TJContentProviderResult }

class procedure TJContentProviderResult.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/net/Uri;)V');
  AddMethod('<init>', '(I)V');
end;

class procedure TJContentProviderResult.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJContentProviderResult.LoadFields;
begin
  inherited;
  AddField('count', 'Ljava/lang/Integer;');
  AddField('uri', 'Landroid/net/Uri;');
end;

class function TJContentProviderResult.Wrap(const AObjectID: JNIObject): JContentProviderResult;
begin
  Result := Wrap<TJContentProviderResult, JContentProviderResult>(AObjectId);
end;

class function TJContentProviderResult.Wrap(const AObject: IJNIObject): JContentProviderResult;
begin
  Result := Wrap<TJContentProviderResult, JContentProviderResult>(AObject);
end;

class function TJContentProviderResult.Create(const AArg0: JUri): JContentProviderResult;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/net/Uri;)V', [AArg0]);
  Result := O;
end;

class function TJContentProviderResult.Create(const AArg0: Integer): JContentProviderResult;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

function TJContentProviderResult.count: JInteger;
begin
  Result := GetObjectField<TJInteger, JInteger>('count');
end;

function TJContentProviderResult.uri: JUri;
begin
  Result := GetObjectField<TJUri, JUri>('uri');
end;

function TJContentProviderResult.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJContentProviderResult.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJContentResolver }

class procedure TJContentResolver.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;)V');
end;

class procedure TJContentResolver.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyBatch', '(Ljava/lang/String;Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;');
  AddMethod('bulkInsert', '(Landroid/net/Uri;[Landroid/content/ContentValues;)I');
  AddMethod('call', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;');
  AddMethod('cancelSync', '(Landroid/net/Uri;)V');
  AddMethod('canonicalize', '(Landroid/net/Uri;)Landroid/net/Uri;');
  AddMethod('delete', '(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I');
  AddStaticMethod('getCurrentSyncs', '()Ljava/util/List;');
  AddStaticMethod('getMasterSyncAutomatically', '()Z');
  AddMethod('getOutgoingPersistedUriPermissions', '()Ljava/util/List;');
  AddMethod('getPersistedUriPermissions', '()Ljava/util/List;');
  AddMethod('getStreamTypes', '(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;');
  AddMethod('getType', '(Landroid/net/Uri;)Ljava/lang/String;');
  AddMethod('insert', '(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;');
  AddMethod('notifyChange', '(Landroid/net/Uri;Landroid/database/ContentObserver;Z)V');
  AddMethod('notifyChange', '(Landroid/net/Uri;Landroid/database/ContentObserver;I)V');
  AddMethod('notifyChange', '(Landroid/net/Uri;Landroid/database/ContentObserver;)V');
  AddMethod('openAssetFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('openAssetFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('openFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;');
  AddMethod('openFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;');
  AddMethod('openInputStream', '(Landroid/net/Uri;)Ljava/io/InputStream;');
  AddMethod('openOutputStream', '(Landroid/net/Uri;Ljava/lang/String;)Ljava/io/OutputStream;');
  AddMethod('openOutputStream', '(Landroid/net/Uri;)Ljava/io/OutputStream;');
  AddMethod('openTypedAssetFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('openTypedAssetFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('query', '(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;');
  AddMethod('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;');
  AddMethod('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;');
  AddMethod('refresh', '(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z');
  AddMethod('registerContentObserver', '(Landroid/net/Uri;ZLandroid/database/ContentObserver;)V');
  AddMethod('releasePersistableUriPermission', '(Landroid/net/Uri;I)V');
  AddStaticMethod('removeStatusChangeListener', '(Ljava/lang/Object;)V');
  AddStaticMethod('setMasterSyncAutomatically', '(Z)V');
  AddMethod('startSync', '(Landroid/net/Uri;Landroid/os/Bundle;)V');
  AddMethod('takePersistableUriPermission', '(Landroid/net/Uri;I)V');
  AddMethod('uncanonicalize', '(Landroid/net/Uri;)Landroid/net/Uri;');
  AddMethod('unregisterContentObserver', '(Landroid/database/ContentObserver;)V');
  AddMethod('update', '(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I');
  AddStaticMethod('validateSyncExtrasBundle', '(Landroid/os/Bundle;)V');
end;

class procedure TJContentResolver.LoadFields;
begin
  inherited;
  AddStaticField('ANY_CURSOR_ITEM_TYPE', 'Ljava/lang/String;');
  AddStaticField('CURSOR_DIR_BASE_TYPE', 'Ljava/lang/String;');
  AddStaticField('CURSOR_ITEM_BASE_TYPE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_HONORED_ARGS', 'Ljava/lang/String;');
  AddStaticField('EXTRA_REFRESH_SUPPORTED', 'Ljava/lang/String;');
  AddStaticField('EXTRA_SIZE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_TOTAL_COUNT', 'Ljava/lang/String;');
  AddStaticField('NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS', 'I');
  AddStaticField('NOTIFY_SYNC_TO_NETWORK', 'I');
  AddStaticField('QUERY_ARG_LIMIT', 'Ljava/lang/String;');
  AddStaticField('QUERY_ARG_OFFSET', 'Ljava/lang/String;');
  AddStaticField('QUERY_ARG_SORT_COLLATION', 'Ljava/lang/String;');
  AddStaticField('QUERY_ARG_SORT_COLUMNS', 'Ljava/lang/String;');
  AddStaticField('QUERY_ARG_SORT_DIRECTION', 'Ljava/lang/String;');
  AddStaticField('QUERY_ARG_SQL_SELECTION', 'Ljava/lang/String;');
  AddStaticField('QUERY_ARG_SQL_SELECTION_ARGS', 'Ljava/lang/String;');
  AddStaticField('QUERY_ARG_SQL_SORT_ORDER', 'Ljava/lang/String;');
  AddStaticField('QUERY_SORT_DIRECTION_ASCENDING', 'I');
  AddStaticField('QUERY_SORT_DIRECTION_DESCENDING', 'I');
  AddStaticField('SCHEME_ANDROID_RESOURCE', 'Ljava/lang/String;');
  AddStaticField('SCHEME_CONTENT', 'Ljava/lang/String;');
  AddStaticField('SCHEME_FILE', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_ACCOUNT', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_DO_NOT_RETRY', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_EXPEDITED', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_FORCE', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_IGNORE_BACKOFF', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_IGNORE_SETTINGS', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_INITIALIZE', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_MANUAL', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_REQUIRE_CHARGING', 'Ljava/lang/String;');
  AddStaticField('SYNC_EXTRAS_UPLOAD', 'Ljava/lang/String;');
  AddStaticField('SYNC_OBSERVER_TYPE_ACTIVE', 'I');
  AddStaticField('SYNC_OBSERVER_TYPE_PENDING', 'I');
  AddStaticField('SYNC_OBSERVER_TYPE_SETTINGS', 'I');
end;

class function TJContentResolver.Wrap(const AObjectID: JNIObject): JContentResolver;
begin
  Result := Wrap<TJContentResolver, JContentResolver>(AObjectId);
end;

class function TJContentResolver.Wrap(const AObject: IJNIObject): JContentResolver;
begin
  Result := Wrap<TJContentResolver, JContentResolver>(AObject);
end;

class function TJContentResolver.Create(const AArg0: JContext): JContentResolver;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;)V', [AArg0]);
  Result := O;
end;

class function TJContentResolver.ANY_CURSOR_ITEM_TYPE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ANY_CURSOR_ITEM_TYPE');
end;

class function TJContentResolver.CURSOR_DIR_BASE_TYPE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CURSOR_DIR_BASE_TYPE');
end;

class function TJContentResolver.CURSOR_ITEM_BASE_TYPE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CURSOR_ITEM_BASE_TYPE');
end;

class function TJContentResolver.EXTRA_HONORED_ARGS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_HONORED_ARGS');
end;

class function TJContentResolver.EXTRA_REFRESH_SUPPORTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_REFRESH_SUPPORTED');
end;

class function TJContentResolver.EXTRA_SIZE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_SIZE');
end;

class function TJContentResolver.EXTRA_TOTAL_COUNT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_TOTAL_COUNT');
end;

class function TJContentResolver.NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NOTIFY_SKIP_NOTIFY_FOR_DESCENDANTS');
end;

class function TJContentResolver.NOTIFY_SYNC_TO_NETWORK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NOTIFY_SYNC_TO_NETWORK');
end;

class function TJContentResolver.QUERY_ARG_LIMIT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('QUERY_ARG_LIMIT');
end;

class function TJContentResolver.QUERY_ARG_OFFSET: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('QUERY_ARG_OFFSET');
end;

class function TJContentResolver.QUERY_ARG_SORT_COLLATION: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('QUERY_ARG_SORT_COLLATION');
end;

class function TJContentResolver.QUERY_ARG_SORT_COLUMNS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('QUERY_ARG_SORT_COLUMNS');
end;

class function TJContentResolver.QUERY_ARG_SORT_DIRECTION: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('QUERY_ARG_SORT_DIRECTION');
end;

class function TJContentResolver.QUERY_ARG_SQL_SELECTION: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('QUERY_ARG_SQL_SELECTION');
end;

class function TJContentResolver.QUERY_ARG_SQL_SELECTION_ARGS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('QUERY_ARG_SQL_SELECTION_ARGS');
end;

class function TJContentResolver.QUERY_ARG_SQL_SORT_ORDER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('QUERY_ARG_SQL_SORT_ORDER');
end;

class function TJContentResolver.QUERY_SORT_DIRECTION_ASCENDING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('QUERY_SORT_DIRECTION_ASCENDING');
end;

class function TJContentResolver.QUERY_SORT_DIRECTION_DESCENDING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('QUERY_SORT_DIRECTION_DESCENDING');
end;

class function TJContentResolver.SCHEME_ANDROID_RESOURCE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SCHEME_ANDROID_RESOURCE');
end;

class function TJContentResolver.SCHEME_CONTENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SCHEME_CONTENT');
end;

class function TJContentResolver.SCHEME_FILE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SCHEME_FILE');
end;

class function TJContentResolver.SYNC_EXTRAS_ACCOUNT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_ACCOUNT');
end;

class function TJContentResolver.SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_DISCARD_LOCAL_DELETIONS');
end;

class function TJContentResolver.SYNC_EXTRAS_DO_NOT_RETRY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_DO_NOT_RETRY');
end;

class function TJContentResolver.SYNC_EXTRAS_EXPEDITED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_EXPEDITED');
end;

class function TJContentResolver.SYNC_EXTRAS_FORCE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_FORCE');
end;

class function TJContentResolver.SYNC_EXTRAS_IGNORE_BACKOFF: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_IGNORE_BACKOFF');
end;

class function TJContentResolver.SYNC_EXTRAS_IGNORE_SETTINGS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_IGNORE_SETTINGS');
end;

class function TJContentResolver.SYNC_EXTRAS_INITIALIZE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_INITIALIZE');
end;

class function TJContentResolver.SYNC_EXTRAS_MANUAL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_MANUAL');
end;

class function TJContentResolver.SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_OVERRIDE_TOO_MANY_DELETIONS');
end;

class function TJContentResolver.SYNC_EXTRAS_REQUIRE_CHARGING: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_REQUIRE_CHARGING');
end;

class function TJContentResolver.SYNC_EXTRAS_UPLOAD: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYNC_EXTRAS_UPLOAD');
end;

class function TJContentResolver.SYNC_OBSERVER_TYPE_ACTIVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYNC_OBSERVER_TYPE_ACTIVE');
end;

class function TJContentResolver.SYNC_OBSERVER_TYPE_PENDING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYNC_OBSERVER_TYPE_PENDING');
end;

class function TJContentResolver.SYNC_OBSERVER_TYPE_SETTINGS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYNC_OBSERVER_TYPE_SETTINGS');
end;

function TJContentResolver.applyBatch(const AArg0: JString; const AArg1: JArrayList): IJavaArray<JContentProviderResult>;
begin
  Result := CallArrayMethod<TJContentProviderResult, JContentProviderResult>('applyBatch', '(Ljava/lang/String;Ljava/util/ArrayList;)[Landroid/content/ContentProviderResult;', [AArg0, AArg1]);
end;

function TJContentResolver.bulkInsert(const AArg0: JUri; const AArg1: IJavaArray<JContentValues>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'bulkInsert', '(Landroid/net/Uri;[Landroid/content/ContentValues;)I', [AArg0, AArg1]);
end;

function TJContentResolver.call(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: JBundle): JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('call', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Landroid/os/Bundle;', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJContentResolver.cancelSync(const AArg0: JUri);
begin
  JavaType.CallVoidMethod(ObjectID, 'cancelSync', '(Landroid/net/Uri;)V', [AArg0]);
end;

function TJContentResolver.canonicalize(const AArg0: JUri): JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('canonicalize', '(Landroid/net/Uri;)Landroid/net/Uri;', [AArg0]);
end;

function TJContentResolver.delete(const AArg0: JUri; const AArg1: JString; const AArg2: IJavaArray<JString>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'delete', '(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I', [AArg0, AArg1, AArg2]);
end;

class function TJContentResolver.getCurrentSyncs: JList;
begin
  Result := CallStaticObjectMethod<TJList, JList>('getCurrentSyncs', '()Ljava/util/List;', []);
end;

class function TJContentResolver.getMasterSyncAutomatically: Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('getMasterSyncAutomatically', '()Z', []);
end;

function TJContentResolver.getOutgoingPersistedUriPermissions: JList;
begin
  Result := CallObjectMethod<TJList, JList>('getOutgoingPersistedUriPermissions', '()Ljava/util/List;', []);
end;

function TJContentResolver.getPersistedUriPermissions: JList;
begin
  Result := CallObjectMethod<TJList, JList>('getPersistedUriPermissions', '()Ljava/util/List;', []);
end;

function TJContentResolver.getStreamTypes(const AArg0: JUri; const AArg1: JString): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getStreamTypes', '(Landroid/net/Uri;Ljava/lang/String;)[Ljava/lang/String;', [AArg0, AArg1]);
end;

function TJContentResolver.getType(const AArg0: JUri): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getType', '(Landroid/net/Uri;)Ljava/lang/String;', [AArg0]);
end;

function TJContentResolver.insert(const AArg0: JUri; const AArg1: JContentValues): JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('insert', '(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;', [AArg0, AArg1]);
end;

procedure TJContentResolver.notifyChange(const AArg0: JUri; const AArg1: JContentObserver; const AArg2: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'notifyChange', '(Landroid/net/Uri;Landroid/database/ContentObserver;Z)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContentResolver.notifyChange(const AArg0: JUri; const AArg1: JContentObserver; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'notifyChange', '(Landroid/net/Uri;Landroid/database/ContentObserver;I)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContentResolver.notifyChange(const AArg0: JUri; const AArg1: JContentObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'notifyChange', '(Landroid/net/Uri;Landroid/database/ContentObserver;)V', [AArg0, AArg1]);
end;

function TJContentResolver.openAssetFileDescriptor(const AArg0: JUri; const AArg1: JString): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openAssetFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;', [AArg0, AArg1]);
end;

function TJContentResolver.openAssetFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openAssetFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;', [AArg0, AArg1, AArg2]);
end;

function TJContentResolver.openFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JCancellationSignal): JParcelFileDescriptor;
begin
  Result := CallObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('openFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;', [AArg0, AArg1, AArg2]);
end;

function TJContentResolver.openFileDescriptor(const AArg0: JUri; const AArg1: JString): JParcelFileDescriptor;
begin
  Result := CallObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('openFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/os/ParcelFileDescriptor;', [AArg0, AArg1]);
end;

function TJContentResolver.openInputStream(const AArg0: JUri): JInputStream;
begin
  Result := CallObjectMethod<TJInputStream, JInputStream>('openInputStream', '(Landroid/net/Uri;)Ljava/io/InputStream;', [AArg0]);
end;

function TJContentResolver.openOutputStream(const AArg0: JUri; const AArg1: JString): JOutputStream;
begin
  Result := CallObjectMethod<TJOutputStream, JOutputStream>('openOutputStream', '(Landroid/net/Uri;Ljava/lang/String;)Ljava/io/OutputStream;', [AArg0, AArg1]);
end;

function TJContentResolver.openOutputStream(const AArg0: JUri): JOutputStream;
begin
  Result := CallObjectMethod<TJOutputStream, JOutputStream>('openOutputStream', '(Landroid/net/Uri;)Ljava/io/OutputStream;', [AArg0]);
end;

function TJContentResolver.openTypedAssetFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle; const AArg3: JCancellationSignal): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openTypedAssetFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJContentResolver.openTypedAssetFileDescriptor(const AArg0: JUri; const AArg1: JString; const AArg2: JBundle): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openTypedAssetFileDescriptor', '(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/res/AssetFileDescriptor;', [AArg0, AArg1, AArg2]);
end;

function TJContentResolver.query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JBundle; const AArg3: JCancellationSignal): JCursor;
begin
  Result := CallObjectMethod<TJCursor, JCursor>('query', '(Landroid/net/Uri;[Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/database/Cursor;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJContentResolver.query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString; const AArg5: JCancellationSignal): JCursor;
begin
  Result := CallObjectMethod<TJCursor, JCursor>('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJContentResolver.query(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor;
begin
  Result := CallObjectMethod<TJCursor, JCursor>('query', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJContentResolver.refresh(const AArg0: JUri; const AArg1: JBundle; const AArg2: JCancellationSignal): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'refresh', '(Landroid/net/Uri;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJContentResolver.registerContentObserver(const AArg0: JUri; const AArg1: Boolean; const AArg2: JContentObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerContentObserver', '(Landroid/net/Uri;ZLandroid/database/ContentObserver;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContentResolver.releasePersistableUriPermission(const AArg0: JUri; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'releasePersistableUriPermission', '(Landroid/net/Uri;I)V', [AArg0, AArg1]);
end;

class procedure TJContentResolver.removeStatusChangeListener(const AArg0: JObject);
begin
  StaticJavaType[Self].CallStaticVoidMethod('removeStatusChangeListener', '(Ljava/lang/Object;)V', [AArg0]);
end;

class procedure TJContentResolver.setMasterSyncAutomatically(const AArg0: Boolean);
begin
  StaticJavaType[Self].CallStaticVoidMethod('setMasterSyncAutomatically', '(Z)V', [AArg0]);
end;

procedure TJContentResolver.startSync(const AArg0: JUri; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startSync', '(Landroid/net/Uri;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJContentResolver.takePersistableUriPermission(const AArg0: JUri; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'takePersistableUriPermission', '(Landroid/net/Uri;I)V', [AArg0, AArg1]);
end;

function TJContentResolver.uncanonicalize(const AArg0: JUri): JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('uncanonicalize', '(Landroid/net/Uri;)Landroid/net/Uri;', [AArg0]);
end;

procedure TJContentResolver.unregisterContentObserver(const AArg0: JContentObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterContentObserver', '(Landroid/database/ContentObserver;)V', [AArg0]);
end;

function TJContentResolver.update(const AArg0: JUri; const AArg1: JContentValues; const AArg2: JString; const AArg3: IJavaArray<JString>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'update', '(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I', [AArg0, AArg1, AArg2, AArg3]);
end;

class procedure TJContentResolver.validateSyncExtrasBundle(const AArg0: JBundle);
begin
  StaticJavaType[Self].CallStaticVoidMethod('validateSyncExtrasBundle', '(Landroid/os/Bundle;)V', [AArg0]);
end;

{ TJContentUris }

class procedure TJContentUris.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJContentUris.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('parseId', '(Landroid/net/Uri;)J');
  AddStaticMethod('withAppendedId', '(Landroid/net/Uri;J)Landroid/net/Uri;');
end;

class function TJContentUris.Wrap(const AObjectID: JNIObject): JContentUris;
begin
  Result := Wrap<TJContentUris, JContentUris>(AObjectId);
end;

class function TJContentUris.Wrap(const AObject: IJNIObject): JContentUris;
begin
  Result := Wrap<TJContentUris, JContentUris>(AObject);
end;

class function TJContentUris.Create: JContentUris;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJContentUris.parseId(const AArg0: JUri): Int64;
begin
  Result := StaticJavaType[Self].CallStaticLongMethod('parseId', '(Landroid/net/Uri;)J', [AArg0]);
end;

class function TJContentUris.withAppendedId(const AArg0: JUri; const AArg1: Int64): JUri;
begin
  Result := CallStaticObjectMethod<TJUri, JUri>('withAppendedId', '(Landroid/net/Uri;J)Landroid/net/Uri;', [AArg0, AArg1]);
end;

{ TJContentValues }

class procedure TJContentValues.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(I)V');
  AddMethod('<init>', '(Landroid/content/ContentValues;)V');
end;

class procedure TJContentValues.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clear', '()V');
  AddMethod('containsKey', '(Ljava/lang/String;)Z');
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('get', '(Ljava/lang/String;)Ljava/lang/Object;');
  AddMethod('getAsBoolean', '(Ljava/lang/String;)Ljava/lang/Boolean;');
  AddMethod('getAsByte', '(Ljava/lang/String;)Ljava/lang/Byte;');
  AddMethod('getAsByteArray', '(Ljava/lang/String;)[B');
  AddMethod('getAsDouble', '(Ljava/lang/String;)Ljava/lang/Double;');
  AddMethod('getAsFloat', '(Ljava/lang/String;)Ljava/lang/Float;');
  AddMethod('getAsInteger', '(Ljava/lang/String;)Ljava/lang/Integer;');
  AddMethod('getAsLong', '(Ljava/lang/String;)Ljava/lang/Long;');
  AddMethod('getAsString', '(Ljava/lang/String;)Ljava/lang/String;');
  AddMethod('hashCode', '()I');
  AddMethod('keySet', '()Ljava/util/Set;');
  AddMethod('put', '(Ljava/lang/String;Ljava/lang/Long;)V');
  AddMethod('put', '(Ljava/lang/String;Ljava/lang/Integer;)V');
  AddMethod('put', '(Ljava/lang/String;Ljava/lang/Byte;)V');
  AddMethod('put', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('put', '(Ljava/lang/String;Ljava/lang/Float;)V');
  AddMethod('put', '(Ljava/lang/String;[B)V');
  AddMethod('put', '(Ljava/lang/String;Ljava/lang/Boolean;)V');
  AddMethod('put', '(Ljava/lang/String;Ljava/lang/Double;)V');
  AddMethod('putAll', '(Landroid/content/ContentValues;)V');
  AddMethod('putNull', '(Ljava/lang/String;)V');
  AddMethod('remove', '(Ljava/lang/String;)V');
  AddMethod('size', '()I');
  AddMethod('toString', '()Ljava/lang/String;');
  AddMethod('valueSet', '()Ljava/util/Set;');
end;

class procedure TJContentValues.LoadFields;
begin
  inherited;
  AddStaticField('TAG', 'Ljava/lang/String;');
end;

class function TJContentValues.Wrap(const AObjectID: JNIObject): JContentValues;
begin
  Result := Wrap<TJContentValues, JContentValues>(AObjectId);
end;

class function TJContentValues.Wrap(const AObject: IJNIObject): JContentValues;
begin
  Result := Wrap<TJContentValues, JContentValues>(AObject);
end;

class function TJContentValues.Create: JContentValues;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJContentValues.Create(const AArg0: Integer): JContentValues;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

class function TJContentValues.Create(const AArg0: JContentValues): JContentValues;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/ContentValues;)V', [AArg0]);
  Result := O;
end;

class function TJContentValues.TAG: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('TAG');
end;

procedure TJContentValues.clear;
begin
  JavaType.CallVoidMethod(ObjectID, 'clear', '()V', []);
end;

function TJContentValues.containsKey(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'containsKey', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJContentValues.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJContentValues.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJContentValues.get(const AArg0: JString): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('get', '(Ljava/lang/String;)Ljava/lang/Object;', [AArg0]);
end;

function TJContentValues.getAsBoolean(const AArg0: JString): JBoolean;
begin
  Result := CallObjectMethod<TJBoolean, JBoolean>('getAsBoolean', '(Ljava/lang/String;)Ljava/lang/Boolean;', [AArg0]);
end;

function TJContentValues.getAsByte(const AArg0: JString): JByte;
begin
  Result := CallObjectMethod<TJByte, JByte>('getAsByte', '(Ljava/lang/String;)Ljava/lang/Byte;', [AArg0]);
end;

function TJContentValues.getAsByteArray(const AArg0: JString): IJavaArray<Byte>;
begin
  Result := CallArrayMethod<Byte>('getAsByteArray', '(Ljava/lang/String;)[B', [AArg0]);
end;

function TJContentValues.getAsDouble(const AArg0: JString): JDouble;
begin
  Result := CallObjectMethod<TJDouble, JDouble>('getAsDouble', '(Ljava/lang/String;)Ljava/lang/Double;', [AArg0]);
end;

function TJContentValues.getAsFloat(const AArg0: JString): JFloat;
begin
  Result := CallObjectMethod<TJFloat, JFloat>('getAsFloat', '(Ljava/lang/String;)Ljava/lang/Float;', [AArg0]);
end;

function TJContentValues.getAsInteger(const AArg0: JString): JInteger;
begin
  Result := CallObjectMethod<TJInteger, JInteger>('getAsInteger', '(Ljava/lang/String;)Ljava/lang/Integer;', [AArg0]);
end;

function TJContentValues.getAsLong(const AArg0: JString): JLong;
begin
  Result := CallObjectMethod<TJLong, JLong>('getAsLong', '(Ljava/lang/String;)Ljava/lang/Long;', [AArg0]);
end;

function TJContentValues.getAsString(const AArg0: JString): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getAsString', '(Ljava/lang/String;)Ljava/lang/String;', [AArg0]);
end;

function TJContentValues.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJContentValues.keySet: JSet;
begin
  Result := CallObjectMethod<TJSet, JSet>('keySet', '()Ljava/util/Set;', []);
end;

procedure TJContentValues.put(const AArg0: JString; const AArg1: JLong);
begin
  JavaType.CallVoidMethod(ObjectID, 'put', '(Ljava/lang/String;Ljava/lang/Long;)V', [AArg0, AArg1]);
end;

procedure TJContentValues.put(const AArg0: JString; const AArg1: JInteger);
begin
  JavaType.CallVoidMethod(ObjectID, 'put', '(Ljava/lang/String;Ljava/lang/Integer;)V', [AArg0, AArg1]);
end;

procedure TJContentValues.put(const AArg0: JString; const AArg1: JByte);
begin
  JavaType.CallVoidMethod(ObjectID, 'put', '(Ljava/lang/String;Ljava/lang/Byte;)V', [AArg0, AArg1]);
end;

procedure TJContentValues.put(const AArg0: JString; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'put', '(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJContentValues.put(const AArg0: JString; const AArg1: JFloat);
begin
  JavaType.CallVoidMethod(ObjectID, 'put', '(Ljava/lang/String;Ljava/lang/Float;)V', [AArg0, AArg1]);
end;

procedure TJContentValues.put(const AArg0: JString; const AArg1: IJavaArray<Byte>);
begin
  JavaType.CallVoidMethod(ObjectID, 'put', '(Ljava/lang/String;[B)V', [AArg0, AArg1]);
end;

procedure TJContentValues.put(const AArg0: JString; const AArg1: JBoolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'put', '(Ljava/lang/String;Ljava/lang/Boolean;)V', [AArg0, AArg1]);
end;

procedure TJContentValues.put(const AArg0: JString; const AArg1: JDouble);
begin
  JavaType.CallVoidMethod(ObjectID, 'put', '(Ljava/lang/String;Ljava/lang/Double;)V', [AArg0, AArg1]);
end;

procedure TJContentValues.putAll(const AArg0: JContentValues);
begin
  JavaType.CallVoidMethod(ObjectID, 'putAll', '(Landroid/content/ContentValues;)V', [AArg0]);
end;

procedure TJContentValues.putNull(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'putNull', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJContentValues.remove(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'remove', '(Ljava/lang/String;)V', [AArg0]);
end;

function TJContentValues.size: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'size', '()I', []);
end;

function TJContentValues.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

function TJContentValues.valueSet: JSet;
begin
  Result := CallObjectMethod<TJSet, JSet>('valueSet', '()Ljava/util/Set;', []);
end;

{ TJContext }

class procedure TJContext.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJContext.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('checkCallingOrSelfPermission', '(Ljava/lang/String;)I');
  AddMethod('checkCallingOrSelfUriPermission', '(Landroid/net/Uri;I)I');
  AddMethod('checkCallingPermission', '(Ljava/lang/String;)I');
  AddMethod('checkCallingUriPermission', '(Landroid/net/Uri;I)I');
  AddMethod('checkPermission', '(Ljava/lang/String;II)I');
  AddMethod('checkSelfPermission', '(Ljava/lang/String;)I');
  AddMethod('checkUriPermission', '(Landroid/net/Uri;III)I');
  AddMethod('checkUriPermission', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I');
  AddMethod('clearWallpaper', '()V');
  AddMethod('createConfigurationContext', '(Landroid/content/res/Configuration;)Landroid/content/Context;');
  AddMethod('createContextForSplit', '(Ljava/lang/String;)Landroid/content/Context;');
  AddMethod('createDeviceProtectedStorageContext', '()Landroid/content/Context;');
  AddMethod('createDisplayContext', '(Landroid/view/Display;)Landroid/content/Context;');
  AddMethod('createPackageContext', '(Ljava/lang/String;I)Landroid/content/Context;');
  AddMethod('databaseList', '()[Ljava/lang/String;');
  AddMethod('deleteDatabase', '(Ljava/lang/String;)Z');
  AddMethod('deleteFile', '(Ljava/lang/String;)Z');
  AddMethod('deleteSharedPreferences', '(Ljava/lang/String;)Z');
  AddMethod('enforceCallingOrSelfPermission', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('enforceCallingOrSelfUriPermission', '(Landroid/net/Uri;ILjava/lang/String;)V');
  AddMethod('enforceCallingPermission', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('enforceCallingUriPermission', '(Landroid/net/Uri;ILjava/lang/String;)V');
  AddMethod('enforcePermission', '(Ljava/lang/String;IILjava/lang/String;)V');
  AddMethod('enforceUriPermission', '(Landroid/net/Uri;IIILjava/lang/String;)V');
  AddMethod('enforceUriPermission', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V');
  AddMethod('fileList', '()[Ljava/lang/String;');
  AddMethod('getApplicationContext', '()Landroid/content/Context;');
  AddMethod('getApplicationInfo', '()Landroid/content/pm/ApplicationInfo;');
  AddMethod('getAssets', '()Landroid/content/res/AssetManager;');
  AddMethod('getCacheDir', '()Ljava/io/File;');
  AddMethod('getCodeCacheDir', '()Ljava/io/File;');
  AddMethod('getColor', '(I)I');
  AddMethod('getColorStateList', '(I)Landroid/content/res/ColorStateList;');
  AddMethod('getContentResolver', '()Landroid/content/ContentResolver;');
  AddMethod('getDataDir', '()Ljava/io/File;');
  AddMethod('getDatabasePath', '(Ljava/lang/String;)Ljava/io/File;');
  AddMethod('getDir', '(Ljava/lang/String;I)Ljava/io/File;');
  AddMethod('getDrawable', '(I)Landroid/graphics/drawable/Drawable;');
  AddMethod('getExternalCacheDir', '()Ljava/io/File;');
  AddMethod('getExternalCacheDirs', '()[Ljava/io/File;');
  AddMethod('getExternalFilesDir', '(Ljava/lang/String;)Ljava/io/File;');
  AddMethod('getExternalFilesDirs', '(Ljava/lang/String;)[Ljava/io/File;');
  AddMethod('getExternalMediaDirs', '()[Ljava/io/File;');
  AddMethod('getFileStreamPath', '(Ljava/lang/String;)Ljava/io/File;');
  AddMethod('getFilesDir', '()Ljava/io/File;');
  AddMethod('getMainLooper', '()Landroid/os/Looper;');
  AddMethod('getNoBackupFilesDir', '()Ljava/io/File;');
  AddMethod('getObbDir', '()Ljava/io/File;');
  AddMethod('getObbDirs', '()[Ljava/io/File;');
  AddMethod('getPackageCodePath', '()Ljava/lang/String;');
  AddMethod('getPackageManager', '()Landroid/content/pm/PackageManager;');
  AddMethod('getPackageName', '()Ljava/lang/String;');
  AddMethod('getPackageResourcePath', '()Ljava/lang/String;');
  AddMethod('getResources', '()Landroid/content/res/Resources;');
  AddMethod('getSharedPreferences', '(Ljava/lang/String;I)Landroid/content/SharedPreferences;');
  AddMethod('getString', '(I)Ljava/lang/String;');
  AddMethod('getString', '(I[Ljava/lang/Object;)Ljava/lang/String;');
  AddMethod('getSystemService', '(Ljava/lang/Class;)Ljava/lang/Object;');
  AddMethod('getSystemService', '(Ljava/lang/String;)Ljava/lang/Object;');
  AddMethod('getSystemServiceName', '(Ljava/lang/Class;)Ljava/lang/String;');
  AddMethod('getText', '(I)Ljava/lang/CharSequence;');
  AddMethod('getTheme', '()Landroid/content/res/Resources$Theme;');
  AddMethod('getWallpaper', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('getWallpaperDesiredMinimumHeight', '()I');
  AddMethod('getWallpaperDesiredMinimumWidth', '()I');
  AddMethod('grantUriPermission', '(Ljava/lang/String;Landroid/net/Uri;I)V');
  AddMethod('isDeviceProtectedStorage', '()Z');
  AddMethod('isRestricted', '()Z');
  AddMethod('moveDatabaseFrom', '(Landroid/content/Context;Ljava/lang/String;)Z');
  AddMethod('moveSharedPreferencesFrom', '(Landroid/content/Context;Ljava/lang/String;)Z');
  AddMethod('openFileInput', '(Ljava/lang/String;)Ljava/io/FileInputStream;');
  AddMethod('openFileOutput', '(Ljava/lang/String;I)Ljava/io/FileOutputStream;');
  AddMethod('peekWallpaper', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;');
  AddMethod('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;');
  AddMethod('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;');
  AddMethod('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;');
  AddMethod('removeStickyBroadcast', '(Landroid/content/Intent;)V');
  AddMethod('removeStickyBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V');
  AddMethod('revokeUriPermission', '(Landroid/net/Uri;I)V');
  AddMethod('revokeUriPermission', '(Ljava/lang/String;Landroid/net/Uri;I)V');
  AddMethod('sendBroadcast', '(Landroid/content/Intent;Ljava/lang/String;)V');
  AddMethod('sendBroadcast', '(Landroid/content/Intent;)V');
  AddMethod('sendBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V');
  AddMethod('sendBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V');
  AddMethod('sendOrderedBroadcast', '(Landroid/content/Intent;Ljava/lang/String;)V');
  AddMethod('sendOrderedBroadcast', '(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('sendOrderedBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('sendStickyBroadcast', '(Landroid/content/Intent;)V');
  AddMethod('sendStickyBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V');
  AddMethod('sendStickyOrderedBroadcast', '(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('sendStickyOrderedBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('setTheme', '(I)V');
  AddMethod('setWallpaper', '(Ljava/io/InputStream;)V');
  AddMethod('setWallpaper', '(Landroid/graphics/Bitmap;)V');
  AddMethod('startActivities', '([Landroid/content/Intent;)V');
  AddMethod('startActivities', '([Landroid/content/Intent;Landroid/os/Bundle;)V');
  AddMethod('startActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)V');
  AddMethod('startActivity', '(Landroid/content/Intent;)V');
  AddMethod('startForegroundService', '(Landroid/content/Intent;)Landroid/content/ComponentName;');
  AddMethod('startInstrumentation', '(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z');
  AddMethod('startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V');
  AddMethod('startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;III)V');
  AddMethod('startService', '(Landroid/content/Intent;)Landroid/content/ComponentName;');
  AddMethod('stopService', '(Landroid/content/Intent;)Z');
  AddMethod('unregisterReceiver', '(Landroid/content/BroadcastReceiver;)V');
end;

class procedure TJContext.LoadFields;
begin
  inherited;
  AddStaticField('ACCESSIBILITY_SERVICE', 'Ljava/lang/String;');
  AddStaticField('ACCOUNT_SERVICE', 'Ljava/lang/String;');
  AddStaticField('ACTIVITY_SERVICE', 'Ljava/lang/String;');
  AddStaticField('ALARM_SERVICE', 'Ljava/lang/String;');
  AddStaticField('APPWIDGET_SERVICE', 'Ljava/lang/String;');
  AddStaticField('APP_OPS_SERVICE', 'Ljava/lang/String;');
  AddStaticField('AUDIO_SERVICE', 'Ljava/lang/String;');
  AddStaticField('BATTERY_SERVICE', 'Ljava/lang/String;');
  AddStaticField('BIND_ABOVE_CLIENT', 'I');
  AddStaticField('BIND_ADJUST_WITH_ACTIVITY', 'I');
  AddStaticField('BIND_ALLOW_OOM_MANAGEMENT', 'I');
  AddStaticField('BIND_AUTO_CREATE', 'I');
  AddStaticField('BIND_DEBUG_UNBIND', 'I');
  AddStaticField('BIND_EXTERNAL_SERVICE', 'I');
  AddStaticField('BIND_IMPORTANT', 'I');
  AddStaticField('BIND_NOT_FOREGROUND', 'I');
  AddStaticField('BIND_WAIVE_PRIORITY', 'I');
  AddStaticField('BLUETOOTH_SERVICE', 'Ljava/lang/String;');
  AddStaticField('CAMERA_SERVICE', 'Ljava/lang/String;');
  AddStaticField('CAPTIONING_SERVICE', 'Ljava/lang/String;');
  AddStaticField('CARRIER_CONFIG_SERVICE', 'Ljava/lang/String;');
  AddStaticField('CLIPBOARD_SERVICE', 'Ljava/lang/String;');
  AddStaticField('COMPANION_DEVICE_SERVICE', 'Ljava/lang/String;');
  AddStaticField('CONNECTIVITY_SERVICE', 'Ljava/lang/String;');
  AddStaticField('CONSUMER_IR_SERVICE', 'Ljava/lang/String;');
  AddStaticField('CONTEXT_IGNORE_SECURITY', 'I');
  AddStaticField('CONTEXT_INCLUDE_CODE', 'I');
  AddStaticField('CONTEXT_RESTRICTED', 'I');
  AddStaticField('CROSS_PROFILE_APPS_SERVICE', 'Ljava/lang/String;');
  AddStaticField('DEVICE_POLICY_SERVICE', 'Ljava/lang/String;');
  AddStaticField('DISPLAY_SERVICE', 'Ljava/lang/String;');
  AddStaticField('DOWNLOAD_SERVICE', 'Ljava/lang/String;');
  AddStaticField('DROPBOX_SERVICE', 'Ljava/lang/String;');
  AddStaticField('EUICC_SERVICE', 'Ljava/lang/String;');
  AddStaticField('FINGERPRINT_SERVICE', 'Ljava/lang/String;');
  AddStaticField('HARDWARE_PROPERTIES_SERVICE', 'Ljava/lang/String;');
  AddStaticField('INPUT_METHOD_SERVICE', 'Ljava/lang/String;');
  AddStaticField('INPUT_SERVICE', 'Ljava/lang/String;');
  AddStaticField('IPSEC_SERVICE', 'Ljava/lang/String;');
  AddStaticField('JOB_SCHEDULER_SERVICE', 'Ljava/lang/String;');
  AddStaticField('KEYGUARD_SERVICE', 'Ljava/lang/String;');
  AddStaticField('LAUNCHER_APPS_SERVICE', 'Ljava/lang/String;');
  AddStaticField('LAYOUT_INFLATER_SERVICE', 'Ljava/lang/String;');
  AddStaticField('LOCATION_SERVICE', 'Ljava/lang/String;');
  AddStaticField('MEDIA_PROJECTION_SERVICE', 'Ljava/lang/String;');
  AddStaticField('MEDIA_ROUTER_SERVICE', 'Ljava/lang/String;');
  AddStaticField('MEDIA_SESSION_SERVICE', 'Ljava/lang/String;');
  AddStaticField('MIDI_SERVICE', 'Ljava/lang/String;');
  AddStaticField('MODE_APPEND', 'I');
  AddStaticField('MODE_ENABLE_WRITE_AHEAD_LOGGING', 'I');
  AddStaticField('MODE_MULTI_PROCESS', 'I');
  AddStaticField('MODE_NO_LOCALIZED_COLLATORS', 'I');
  AddStaticField('MODE_PRIVATE', 'I');
  AddStaticField('MODE_WORLD_READABLE', 'I');
  AddStaticField('MODE_WORLD_WRITEABLE', 'I');
  AddStaticField('NETWORK_STATS_SERVICE', 'Ljava/lang/String;');
  AddStaticField('NFC_SERVICE', 'Ljava/lang/String;');
  AddStaticField('NOTIFICATION_SERVICE', 'Ljava/lang/String;');
  AddStaticField('NSD_SERVICE', 'Ljava/lang/String;');
  AddStaticField('POWER_SERVICE', 'Ljava/lang/String;');
  AddStaticField('PRINT_SERVICE', 'Ljava/lang/String;');
  AddStaticField('RECEIVER_VISIBLE_TO_INSTANT_APPS', 'I');
  AddStaticField('RESTRICTIONS_SERVICE', 'Ljava/lang/String;');
  AddStaticField('SEARCH_SERVICE', 'Ljava/lang/String;');
  AddStaticField('SENSOR_SERVICE', 'Ljava/lang/String;');
  AddStaticField('SHORTCUT_SERVICE', 'Ljava/lang/String;');
  AddStaticField('STORAGE_SERVICE', 'Ljava/lang/String;');
  AddStaticField('STORAGE_STATS_SERVICE', 'Ljava/lang/String;');
  AddStaticField('SYSTEM_HEALTH_SERVICE', 'Ljava/lang/String;');
  AddStaticField('TELECOM_SERVICE', 'Ljava/lang/String;');
  AddStaticField('TELEPHONY_SERVICE', 'Ljava/lang/String;');
  AddStaticField('TELEPHONY_SUBSCRIPTION_SERVICE', 'Ljava/lang/String;');
  AddStaticField('TEXT_CLASSIFICATION_SERVICE', 'Ljava/lang/String;');
  AddStaticField('TEXT_SERVICES_MANAGER_SERVICE', 'Ljava/lang/String;');
  AddStaticField('TV_INPUT_SERVICE', 'Ljava/lang/String;');
  AddStaticField('UI_MODE_SERVICE', 'Ljava/lang/String;');
  AddStaticField('USAGE_STATS_SERVICE', 'Ljava/lang/String;');
  AddStaticField('USB_SERVICE', 'Ljava/lang/String;');
  AddStaticField('USER_SERVICE', 'Ljava/lang/String;');
  AddStaticField('VIBRATOR_SERVICE', 'Ljava/lang/String;');
  AddStaticField('WALLPAPER_SERVICE', 'Ljava/lang/String;');
  AddStaticField('WIFI_AWARE_SERVICE', 'Ljava/lang/String;');
  AddStaticField('WIFI_P2P_SERVICE', 'Ljava/lang/String;');
  AddStaticField('WIFI_RTT_RANGING_SERVICE', 'Ljava/lang/String;');
  AddStaticField('WIFI_SERVICE', 'Ljava/lang/String;');
  AddStaticField('WINDOW_SERVICE', 'Ljava/lang/String;');
end;

class function TJContext.Wrap(const AObjectID: JNIObject): JContext;
begin
  Result := Wrap<TJContext, JContext>(AObjectId);
end;

class function TJContext.Wrap(const AObject: IJNIObject): JContext;
begin
  Result := Wrap<TJContext, JContext>(AObject);
end;

class function TJContext.Create: JContext;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJContext.ACCESSIBILITY_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACCESSIBILITY_SERVICE');
end;

class function TJContext.ACCOUNT_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACCOUNT_SERVICE');
end;

class function TJContext.ACTIVITY_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTIVITY_SERVICE');
end;

class function TJContext.ALARM_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ALARM_SERVICE');
end;

class function TJContext.APPWIDGET_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('APPWIDGET_SERVICE');
end;

class function TJContext.APP_OPS_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('APP_OPS_SERVICE');
end;

class function TJContext.AUDIO_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUDIO_SERVICE');
end;

class function TJContext.BATTERY_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('BATTERY_SERVICE');
end;

class function TJContext.BIND_ABOVE_CLIENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BIND_ABOVE_CLIENT');
end;

class function TJContext.BIND_ADJUST_WITH_ACTIVITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BIND_ADJUST_WITH_ACTIVITY');
end;

class function TJContext.BIND_ALLOW_OOM_MANAGEMENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BIND_ALLOW_OOM_MANAGEMENT');
end;

class function TJContext.BIND_AUTO_CREATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BIND_AUTO_CREATE');
end;

class function TJContext.BIND_DEBUG_UNBIND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BIND_DEBUG_UNBIND');
end;

class function TJContext.BIND_EXTERNAL_SERVICE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BIND_EXTERNAL_SERVICE');
end;

class function TJContext.BIND_IMPORTANT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BIND_IMPORTANT');
end;

class function TJContext.BIND_NOT_FOREGROUND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BIND_NOT_FOREGROUND');
end;

class function TJContext.BIND_WAIVE_PRIORITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BIND_WAIVE_PRIORITY');
end;

class function TJContext.BLUETOOTH_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('BLUETOOTH_SERVICE');
end;

class function TJContext.CAMERA_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CAMERA_SERVICE');
end;

class function TJContext.CAPTIONING_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CAPTIONING_SERVICE');
end;

class function TJContext.CARRIER_CONFIG_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CARRIER_CONFIG_SERVICE');
end;

class function TJContext.CLIPBOARD_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CLIPBOARD_SERVICE');
end;

class function TJContext.COMPANION_DEVICE_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('COMPANION_DEVICE_SERVICE');
end;

class function TJContext.CONNECTIVITY_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CONNECTIVITY_SERVICE');
end;

class function TJContext.CONSUMER_IR_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CONSUMER_IR_SERVICE');
end;

class function TJContext.CONTEXT_IGNORE_SECURITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONTEXT_IGNORE_SECURITY');
end;

class function TJContext.CONTEXT_INCLUDE_CODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONTEXT_INCLUDE_CODE');
end;

class function TJContext.CONTEXT_RESTRICTED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONTEXT_RESTRICTED');
end;

class function TJContext.CROSS_PROFILE_APPS_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CROSS_PROFILE_APPS_SERVICE');
end;

class function TJContext.DEVICE_POLICY_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('DEVICE_POLICY_SERVICE');
end;

class function TJContext.DISPLAY_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('DISPLAY_SERVICE');
end;

class function TJContext.DOWNLOAD_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('DOWNLOAD_SERVICE');
end;

class function TJContext.DROPBOX_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('DROPBOX_SERVICE');
end;

class function TJContext.EUICC_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EUICC_SERVICE');
end;

class function TJContext.FINGERPRINT_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FINGERPRINT_SERVICE');
end;

class function TJContext.HARDWARE_PROPERTIES_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('HARDWARE_PROPERTIES_SERVICE');
end;

class function TJContext.INPUT_METHOD_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('INPUT_METHOD_SERVICE');
end;

class function TJContext.INPUT_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('INPUT_SERVICE');
end;

class function TJContext.IPSEC_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('IPSEC_SERVICE');
end;

class function TJContext.JOB_SCHEDULER_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('JOB_SCHEDULER_SERVICE');
end;

class function TJContext.KEYGUARD_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('KEYGUARD_SERVICE');
end;

class function TJContext.LAUNCHER_APPS_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('LAUNCHER_APPS_SERVICE');
end;

class function TJContext.LAYOUT_INFLATER_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('LAYOUT_INFLATER_SERVICE');
end;

class function TJContext.LOCATION_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('LOCATION_SERVICE');
end;

class function TJContext.MEDIA_PROJECTION_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MEDIA_PROJECTION_SERVICE');
end;

class function TJContext.MEDIA_ROUTER_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MEDIA_ROUTER_SERVICE');
end;

class function TJContext.MEDIA_SESSION_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MEDIA_SESSION_SERVICE');
end;

class function TJContext.MIDI_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('MIDI_SERVICE');
end;

class function TJContext.MODE_APPEND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_APPEND');
end;

class function TJContext.MODE_ENABLE_WRITE_AHEAD_LOGGING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_ENABLE_WRITE_AHEAD_LOGGING');
end;

class function TJContext.MODE_MULTI_PROCESS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_MULTI_PROCESS');
end;

class function TJContext.MODE_NO_LOCALIZED_COLLATORS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_NO_LOCALIZED_COLLATORS');
end;

class function TJContext.MODE_PRIVATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_PRIVATE');
end;

class function TJContext.MODE_WORLD_READABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_WORLD_READABLE');
end;

class function TJContext.MODE_WORLD_WRITEABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MODE_WORLD_WRITEABLE');
end;

class function TJContext.NETWORK_STATS_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('NETWORK_STATS_SERVICE');
end;

class function TJContext.NFC_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('NFC_SERVICE');
end;

class function TJContext.NOTIFICATION_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('NOTIFICATION_SERVICE');
end;

class function TJContext.NSD_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('NSD_SERVICE');
end;

class function TJContext.POWER_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('POWER_SERVICE');
end;

class function TJContext.PRINT_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('PRINT_SERVICE');
end;

class function TJContext.RECEIVER_VISIBLE_TO_INSTANT_APPS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RECEIVER_VISIBLE_TO_INSTANT_APPS');
end;

class function TJContext.RESTRICTIONS_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('RESTRICTIONS_SERVICE');
end;

class function TJContext.SEARCH_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SEARCH_SERVICE');
end;

class function TJContext.SENSOR_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SENSOR_SERVICE');
end;

class function TJContext.SHORTCUT_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SHORTCUT_SERVICE');
end;

class function TJContext.STORAGE_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('STORAGE_SERVICE');
end;

class function TJContext.STORAGE_STATS_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('STORAGE_STATS_SERVICE');
end;

class function TJContext.SYSTEM_HEALTH_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('SYSTEM_HEALTH_SERVICE');
end;

class function TJContext.TELECOM_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('TELECOM_SERVICE');
end;

class function TJContext.TELEPHONY_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('TELEPHONY_SERVICE');
end;

class function TJContext.TELEPHONY_SUBSCRIPTION_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('TELEPHONY_SUBSCRIPTION_SERVICE');
end;

class function TJContext.TEXT_CLASSIFICATION_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('TEXT_CLASSIFICATION_SERVICE');
end;

class function TJContext.TEXT_SERVICES_MANAGER_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('TEXT_SERVICES_MANAGER_SERVICE');
end;

class function TJContext.TV_INPUT_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('TV_INPUT_SERVICE');
end;

class function TJContext.UI_MODE_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('UI_MODE_SERVICE');
end;

class function TJContext.USAGE_STATS_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('USAGE_STATS_SERVICE');
end;

class function TJContext.USB_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('USB_SERVICE');
end;

class function TJContext.USER_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('USER_SERVICE');
end;

class function TJContext.VIBRATOR_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('VIBRATOR_SERVICE');
end;

class function TJContext.WALLPAPER_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('WALLPAPER_SERVICE');
end;

class function TJContext.WIFI_AWARE_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('WIFI_AWARE_SERVICE');
end;

class function TJContext.WIFI_P2P_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('WIFI_P2P_SERVICE');
end;

class function TJContext.WIFI_RTT_RANGING_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('WIFI_RTT_RANGING_SERVICE');
end;

class function TJContext.WIFI_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('WIFI_SERVICE');
end;

class function TJContext.WINDOW_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('WINDOW_SERVICE');
end;

function TJContext.checkCallingOrSelfPermission(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkCallingOrSelfPermission', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJContext.checkCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkCallingOrSelfUriPermission', '(Landroid/net/Uri;I)I', [AArg0, AArg1]);
end;

function TJContext.checkCallingPermission(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkCallingPermission', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJContext.checkCallingUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkCallingUriPermission', '(Landroid/net/Uri;I)I', [AArg0, AArg1]);
end;

function TJContext.checkPermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkPermission', '(Ljava/lang/String;II)I', [AArg0, AArg1, AArg2]);
end;

function TJContext.checkSelfPermission(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkSelfPermission', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJContext.checkUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkUriPermission', '(Landroid/net/Uri;III)I', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJContext.checkUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkUriPermission', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJContext.clearWallpaper;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearWallpaper', '()V', []);
end;

function TJContext.createConfigurationContext(const AArg0: JConfiguration): JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createConfigurationContext', '(Landroid/content/res/Configuration;)Landroid/content/Context;', [AArg0]);
end;

function TJContext.createContextForSplit(const AArg0: JString): JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createContextForSplit', '(Ljava/lang/String;)Landroid/content/Context;', [AArg0]);
end;

function TJContext.createDeviceProtectedStorageContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createDeviceProtectedStorageContext', '()Landroid/content/Context;', []);
end;

function TJContext.createDisplayContext(const AArg0: JDisplay): JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createDisplayContext', '(Landroid/view/Display;)Landroid/content/Context;', [AArg0]);
end;

function TJContext.createPackageContext(const AArg0: JString; const AArg1: Integer): JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createPackageContext', '(Ljava/lang/String;I)Landroid/content/Context;', [AArg0, AArg1]);
end;

function TJContext.databaseList: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('databaseList', '()[Ljava/lang/String;', []);
end;

function TJContext.deleteDatabase(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'deleteDatabase', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJContext.deleteFile(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'deleteFile', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJContext.deleteSharedPreferences(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'deleteSharedPreferences', '(Ljava/lang/String;)Z', [AArg0]);
end;

procedure TJContext.enforceCallingOrSelfPermission(const AArg0: JString; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceCallingOrSelfPermission', '(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJContext.enforceCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceCallingOrSelfUriPermission', '(Landroid/net/Uri;ILjava/lang/String;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContext.enforceCallingPermission(const AArg0: JString; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceCallingPermission', '(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJContext.enforceCallingUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceCallingUriPermission', '(Landroid/net/Uri;ILjava/lang/String;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContext.enforcePermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforcePermission', '(Ljava/lang/String;IILjava/lang/String;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJContext.enforceUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceUriPermission', '(Landroid/net/Uri;IIILjava/lang/String;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJContext.enforceUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceUriPermission', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

function TJContext.fileList: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('fileList', '()[Ljava/lang/String;', []);
end;

function TJContext.getApplicationContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('getApplicationContext', '()Landroid/content/Context;', []);
end;

function TJContext.getApplicationInfo: JApplicationInfo;
begin
  Result := CallObjectMethod<TJApplicationInfo, JApplicationInfo>('getApplicationInfo', '()Landroid/content/pm/ApplicationInfo;', []);
end;

function TJContext.getAssets: JAssetManager;
begin
  Result := CallObjectMethod<TJAssetManager, JAssetManager>('getAssets', '()Landroid/content/res/AssetManager;', []);
end;

function TJContext.getCacheDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getCacheDir', '()Ljava/io/File;', []);
end;

function TJContext.getCodeCacheDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getCodeCacheDir', '()Ljava/io/File;', []);
end;

function TJContext.getColor(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColor', '(I)I', [AArg0]);
end;

function TJContext.getColorStateList(const AArg0: Integer): JColorStateList;
begin
  Result := CallObjectMethod<TJColorStateList, JColorStateList>('getColorStateList', '(I)Landroid/content/res/ColorStateList;', [AArg0]);
end;

function TJContext.getContentResolver: JContentResolver;
begin
  Result := CallObjectMethod<TJContentResolver, JContentResolver>('getContentResolver', '()Landroid/content/ContentResolver;', []);
end;

function TJContext.getDataDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getDataDir', '()Ljava/io/File;', []);
end;

function TJContext.getDatabasePath(const AArg0: JString): JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getDatabasePath', '(Ljava/lang/String;)Ljava/io/File;', [AArg0]);
end;

function TJContext.getDir(const AArg0: JString; const AArg1: Integer): JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getDir', '(Ljava/lang/String;I)Ljava/io/File;', [AArg0, AArg1]);
end;

function TJContext.getDrawable(const AArg0: Integer): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDrawable', '(I)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJContext.getExternalCacheDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getExternalCacheDir', '()Ljava/io/File;', []);
end;

function TJContext.getExternalCacheDirs: IJavaArray<JFile>;
begin
  Result := CallArrayMethod<TJFile, JFile>('getExternalCacheDirs', '()[Ljava/io/File;', []);
end;

function TJContext.getExternalFilesDir(const AArg0: JString): JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getExternalFilesDir', '(Ljava/lang/String;)Ljava/io/File;', [AArg0]);
end;

function TJContext.getExternalFilesDirs(const AArg0: JString): IJavaArray<JFile>;
begin
  Result := CallArrayMethod<TJFile, JFile>('getExternalFilesDirs', '(Ljava/lang/String;)[Ljava/io/File;', [AArg0]);
end;

function TJContext.getExternalMediaDirs: IJavaArray<JFile>;
begin
  Result := CallArrayMethod<TJFile, JFile>('getExternalMediaDirs', '()[Ljava/io/File;', []);
end;

function TJContext.getFileStreamPath(const AArg0: JString): JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getFileStreamPath', '(Ljava/lang/String;)Ljava/io/File;', [AArg0]);
end;

function TJContext.getFilesDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getFilesDir', '()Ljava/io/File;', []);
end;

function TJContext.getMainLooper: JLooper;
begin
  Result := CallObjectMethod<TJLooper, JLooper>('getMainLooper', '()Landroid/os/Looper;', []);
end;

function TJContext.getNoBackupFilesDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getNoBackupFilesDir', '()Ljava/io/File;', []);
end;

function TJContext.getObbDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getObbDir', '()Ljava/io/File;', []);
end;

function TJContext.getObbDirs: IJavaArray<JFile>;
begin
  Result := CallArrayMethod<TJFile, JFile>('getObbDirs', '()[Ljava/io/File;', []);
end;

function TJContext.getPackageCodePath: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPackageCodePath', '()Ljava/lang/String;', []);
end;

function TJContext.getPackageManager: JPackageManager;
begin
  Result := CallObjectMethod<TJPackageManager, JPackageManager>('getPackageManager', '()Landroid/content/pm/PackageManager;', []);
end;

function TJContext.getPackageName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPackageName', '()Ljava/lang/String;', []);
end;

function TJContext.getPackageResourcePath: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPackageResourcePath', '()Ljava/lang/String;', []);
end;

function TJContext.getResources: JResources;
begin
  Result := CallObjectMethod<TJResources, JResources>('getResources', '()Landroid/content/res/Resources;', []);
end;

function TJContext.getSharedPreferences(const AArg0: JString; const AArg1: Integer): JSharedPreferences;
begin
  Result := CallObjectMethod<TJSharedPreferences, JSharedPreferences>('getSharedPreferences', '(Ljava/lang/String;I)Landroid/content/SharedPreferences;', [AArg0, AArg1]);
end;

function TJContext.getString(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJContext.getString(const AArg0: Integer; const AArg1: IJavaArray<JObject>): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(I[Ljava/lang/Object;)Ljava/lang/String;', [AArg0, AArg1]);
end;

function TJContext.getSystemService(const AArg0: JClass): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getSystemService', '(Ljava/lang/Class;)Ljava/lang/Object;', [AArg0]);
end;

function TJContext.getSystemService(const AArg0: JString): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getSystemService', '(Ljava/lang/String;)Ljava/lang/Object;', [AArg0]);
end;

function TJContext.getSystemServiceName(const AArg0: JClass): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getSystemServiceName', '(Ljava/lang/Class;)Ljava/lang/String;', [AArg0]);
end;

function TJContext.getText(const AArg0: Integer): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getText', '(I)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJContext.getTheme: JResources_Theme;
begin
  Result := CallObjectMethod<TJResources_Theme, JResources_Theme>('getTheme', '()Landroid/content/res/Resources$Theme;', []);
end;

function TJContext.getWallpaper: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getWallpaper', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJContext.getWallpaperDesiredMinimumHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWallpaperDesiredMinimumHeight', '()I', []);
end;

function TJContext.getWallpaperDesiredMinimumWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWallpaperDesiredMinimumWidth', '()I', []);
end;

procedure TJContext.grantUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'grantUriPermission', '(Ljava/lang/String;Landroid/net/Uri;I)V', [AArg0, AArg1, AArg2]);
end;

function TJContext.isDeviceProtectedStorage: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isDeviceProtectedStorage', '()Z', []);
end;

function TJContext.isRestricted: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isRestricted', '()Z', []);
end;

function TJContext.moveDatabaseFrom(const AArg0: JContext; const AArg1: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveDatabaseFrom', '(Landroid/content/Context;Ljava/lang/String;)Z', [AArg0, AArg1]);
end;

function TJContext.moveSharedPreferencesFrom(const AArg0: JContext; const AArg1: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveSharedPreferencesFrom', '(Landroid/content/Context;Ljava/lang/String;)Z', [AArg0, AArg1]);
end;

function TJContext.openFileInput(const AArg0: JString): JFileInputStream;
begin
  Result := CallObjectMethod<TJFileInputStream, JFileInputStream>('openFileInput', '(Ljava/lang/String;)Ljava/io/FileInputStream;', [AArg0]);
end;

function TJContext.openFileOutput(const AArg0: JString; const AArg1: Integer): JFileOutputStream;
begin
  Result := CallObjectMethod<TJFileOutputStream, JFileOutputStream>('openFileOutput', '(Ljava/lang/String;I)Ljava/io/FileOutputStream;', [AArg0, AArg1]);
end;

function TJContext.peekWallpaper: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('peekWallpaper', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJContext.registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJContext.registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: Integer): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;', [AArg0, AArg1, AArg2]);
end;

function TJContext.registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler; const AArg4: Integer): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJContext.registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJContext.removeStickyBroadcast(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeStickyBroadcast', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJContext.removeStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeStickyBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V', [AArg0, AArg1]);
end;

procedure TJContext.revokeUriPermission(const AArg0: JUri; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'revokeUriPermission', '(Landroid/net/Uri;I)V', [AArg0, AArg1]);
end;

procedure TJContext.revokeUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'revokeUriPermission', '(Ljava/lang/String;Landroid/net/Uri;I)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContext.sendBroadcast(const AArg0: JIntent; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendBroadcast', '(Landroid/content/Intent;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJContext.sendBroadcast(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendBroadcast', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJContext.sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContext.sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V', [AArg0, AArg1]);
end;

procedure TJContext.sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendOrderedBroadcast', '(Landroid/content/Intent;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJContext.sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendOrderedBroadcast', '(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJContext.sendOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString; const AArg3: JBroadcastReceiver; const AArg4: JHandler; const AArg5: Integer; const AArg6: JString; const AArg7: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendOrderedBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
end;

procedure TJContext.sendStickyBroadcast(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendStickyBroadcast', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJContext.sendStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendStickyBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V', [AArg0, AArg1]);
end;

procedure TJContext.sendStickyOrderedBroadcast(const AArg0: JIntent; const AArg1: JBroadcastReceiver; const AArg2: JHandler; const AArg3: Integer; const AArg4: JString; const AArg5: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendStickyOrderedBroadcast', '(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJContext.sendStickyOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendStickyOrderedBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJContext.setTheme(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTheme', '(I)V', [AArg0]);
end;

procedure TJContext.setWallpaper(const AArg0: JInputStream);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWallpaper', '(Ljava/io/InputStream;)V', [AArg0]);
end;

procedure TJContext.setWallpaper(const AArg0: JBitmap);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWallpaper', '(Landroid/graphics/Bitmap;)V', [AArg0]);
end;

procedure TJContext.startActivities(const AArg0: IJavaArray<JIntent>);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivities', '([Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJContext.startActivities(const AArg0: IJavaArray<JIntent>; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivities', '([Landroid/content/Intent;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJContext.startActivity(const AArg0: JIntent; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJContext.startActivity(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivity', '(Landroid/content/Intent;)V', [AArg0]);
end;

function TJContext.startForegroundService(const AArg0: JIntent): JComponentName;
begin
  Result := CallObjectMethod<TJComponentName, JComponentName>('startForegroundService', '(Landroid/content/Intent;)Landroid/content/ComponentName;', [AArg0]);
end;

function TJContext.startInstrumentation(const AArg0: JComponentName; const AArg1: JString; const AArg2: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'startInstrumentation', '(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJContext.startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJContext.startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;III)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJContext.startService(const AArg0: JIntent): JComponentName;
begin
  Result := CallObjectMethod<TJComponentName, JComponentName>('startService', '(Landroid/content/Intent;)Landroid/content/ComponentName;', [AArg0]);
end;

function TJContext.stopService(const AArg0: JIntent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'stopService', '(Landroid/content/Intent;)Z', [AArg0]);
end;

procedure TJContext.unregisterReceiver(const AArg0: JBroadcastReceiver);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterReceiver', '(Landroid/content/BroadcastReceiver;)V', [AArg0]);
end;

{ TJContextWrapper }

class procedure TJContextWrapper.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;)V');
end;

class procedure TJContextWrapper.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('checkCallingOrSelfPermission', '(Ljava/lang/String;)I');
  AddMethod('checkCallingOrSelfUriPermission', '(Landroid/net/Uri;I)I');
  AddMethod('checkCallingPermission', '(Ljava/lang/String;)I');
  AddMethod('checkCallingUriPermission', '(Landroid/net/Uri;I)I');
  AddMethod('checkPermission', '(Ljava/lang/String;II)I');
  AddMethod('checkSelfPermission', '(Ljava/lang/String;)I');
  AddMethod('checkUriPermission', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I');
  AddMethod('checkUriPermission', '(Landroid/net/Uri;III)I');
  AddMethod('clearWallpaper', '()V');
  AddMethod('createConfigurationContext', '(Landroid/content/res/Configuration;)Landroid/content/Context;');
  AddMethod('createContextForSplit', '(Ljava/lang/String;)Landroid/content/Context;');
  AddMethod('createDeviceProtectedStorageContext', '()Landroid/content/Context;');
  AddMethod('createDisplayContext', '(Landroid/view/Display;)Landroid/content/Context;');
  AddMethod('createPackageContext', '(Ljava/lang/String;I)Landroid/content/Context;');
  AddMethod('databaseList', '()[Ljava/lang/String;');
  AddMethod('deleteDatabase', '(Ljava/lang/String;)Z');
  AddMethod('deleteFile', '(Ljava/lang/String;)Z');
  AddMethod('deleteSharedPreferences', '(Ljava/lang/String;)Z');
  AddMethod('enforceCallingOrSelfPermission', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('enforceCallingOrSelfUriPermission', '(Landroid/net/Uri;ILjava/lang/String;)V');
  AddMethod('enforceCallingPermission', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('enforceCallingUriPermission', '(Landroid/net/Uri;ILjava/lang/String;)V');
  AddMethod('enforcePermission', '(Ljava/lang/String;IILjava/lang/String;)V');
  AddMethod('enforceUriPermission', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V');
  AddMethod('enforceUriPermission', '(Landroid/net/Uri;IIILjava/lang/String;)V');
  AddMethod('fileList', '()[Ljava/lang/String;');
  AddMethod('getApplicationContext', '()Landroid/content/Context;');
  AddMethod('getApplicationInfo', '()Landroid/content/pm/ApplicationInfo;');
  AddMethod('getAssets', '()Landroid/content/res/AssetManager;');
  AddMethod('getBaseContext', '()Landroid/content/Context;');
  AddMethod('getCacheDir', '()Ljava/io/File;');
  AddMethod('getCodeCacheDir', '()Ljava/io/File;');
  AddMethod('getContentResolver', '()Landroid/content/ContentResolver;');
  AddMethod('getDataDir', '()Ljava/io/File;');
  AddMethod('getDatabasePath', '(Ljava/lang/String;)Ljava/io/File;');
  AddMethod('getDir', '(Ljava/lang/String;I)Ljava/io/File;');
  AddMethod('getExternalCacheDir', '()Ljava/io/File;');
  AddMethod('getExternalCacheDirs', '()[Ljava/io/File;');
  AddMethod('getExternalFilesDir', '(Ljava/lang/String;)Ljava/io/File;');
  AddMethod('getExternalFilesDirs', '(Ljava/lang/String;)[Ljava/io/File;');
  AddMethod('getExternalMediaDirs', '()[Ljava/io/File;');
  AddMethod('getFileStreamPath', '(Ljava/lang/String;)Ljava/io/File;');
  AddMethod('getFilesDir', '()Ljava/io/File;');
  AddMethod('getMainLooper', '()Landroid/os/Looper;');
  AddMethod('getNoBackupFilesDir', '()Ljava/io/File;');
  AddMethod('getObbDir', '()Ljava/io/File;');
  AddMethod('getObbDirs', '()[Ljava/io/File;');
  AddMethod('getPackageCodePath', '()Ljava/lang/String;');
  AddMethod('getPackageManager', '()Landroid/content/pm/PackageManager;');
  AddMethod('getPackageName', '()Ljava/lang/String;');
  AddMethod('getPackageResourcePath', '()Ljava/lang/String;');
  AddMethod('getResources', '()Landroid/content/res/Resources;');
  AddMethod('getSharedPreferences', '(Ljava/lang/String;I)Landroid/content/SharedPreferences;');
  AddMethod('getSystemService', '(Ljava/lang/String;)Ljava/lang/Object;');
  AddMethod('getSystemServiceName', '(Ljava/lang/Class;)Ljava/lang/String;');
  AddMethod('getTheme', '()Landroid/content/res/Resources$Theme;');
  AddMethod('getWallpaper', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('getWallpaperDesiredMinimumHeight', '()I');
  AddMethod('getWallpaperDesiredMinimumWidth', '()I');
  AddMethod('grantUriPermission', '(Ljava/lang/String;Landroid/net/Uri;I)V');
  AddMethod('isDeviceProtectedStorage', '()Z');
  AddMethod('isRestricted', '()Z');
  AddMethod('moveDatabaseFrom', '(Landroid/content/Context;Ljava/lang/String;)Z');
  AddMethod('moveSharedPreferencesFrom', '(Landroid/content/Context;Ljava/lang/String;)Z');
  AddMethod('openFileInput', '(Ljava/lang/String;)Ljava/io/FileInputStream;');
  AddMethod('openFileOutput', '(Ljava/lang/String;I)Ljava/io/FileOutputStream;');
  AddMethod('peekWallpaper', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;');
  AddMethod('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;');
  AddMethod('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;');
  AddMethod('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;');
  AddMethod('removeStickyBroadcast', '(Landroid/content/Intent;)V');
  AddMethod('removeStickyBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V');
  AddMethod('revokeUriPermission', '(Ljava/lang/String;Landroid/net/Uri;I)V');
  AddMethod('revokeUriPermission', '(Landroid/net/Uri;I)V');
  AddMethod('sendBroadcast', '(Landroid/content/Intent;Ljava/lang/String;)V');
  AddMethod('sendBroadcast', '(Landroid/content/Intent;)V');
  AddMethod('sendBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V');
  AddMethod('sendBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V');
  AddMethod('sendOrderedBroadcast', '(Landroid/content/Intent;Ljava/lang/String;)V');
  AddMethod('sendOrderedBroadcast', '(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('sendOrderedBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('sendStickyBroadcast', '(Landroid/content/Intent;)V');
  AddMethod('sendStickyBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V');
  AddMethod('sendStickyOrderedBroadcast', '(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('sendStickyOrderedBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('setTheme', '(I)V');
  AddMethod('setWallpaper', '(Ljava/io/InputStream;)V');
  AddMethod('setWallpaper', '(Landroid/graphics/Bitmap;)V');
  AddMethod('startActivities', '([Landroid/content/Intent;Landroid/os/Bundle;)V');
  AddMethod('startActivities', '([Landroid/content/Intent;)V');
  AddMethod('startActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)V');
  AddMethod('startActivity', '(Landroid/content/Intent;)V');
  AddMethod('startForegroundService', '(Landroid/content/Intent;)Landroid/content/ComponentName;');
  AddMethod('startInstrumentation', '(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z');
  AddMethod('startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;III)V');
  AddMethod('startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V');
  AddMethod('startService', '(Landroid/content/Intent;)Landroid/content/ComponentName;');
  AddMethod('stopService', '(Landroid/content/Intent;)Z');
  AddMethod('unregisterReceiver', '(Landroid/content/BroadcastReceiver;)V');
end;

class function TJContextWrapper.Wrap(const AObjectID: JNIObject): JContextWrapper;
begin
  Result := Wrap<TJContextWrapper, JContextWrapper>(AObjectId);
end;

class function TJContextWrapper.Wrap(const AObject: IJNIObject): JContextWrapper;
begin
  Result := Wrap<TJContextWrapper, JContextWrapper>(AObject);
end;

class function TJContextWrapper.Create(const AArg0: JContext): JContextWrapper;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;)V', [AArg0]);
  Result := O;
end;

function TJContextWrapper.checkCallingOrSelfPermission(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkCallingOrSelfPermission', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJContextWrapper.checkCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkCallingOrSelfUriPermission', '(Landroid/net/Uri;I)I', [AArg0, AArg1]);
end;

function TJContextWrapper.checkCallingPermission(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkCallingPermission', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJContextWrapper.checkCallingUriPermission(const AArg0: JUri; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkCallingUriPermission', '(Landroid/net/Uri;I)I', [AArg0, AArg1]);
end;

function TJContextWrapper.checkPermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkPermission', '(Ljava/lang/String;II)I', [AArg0, AArg1, AArg2]);
end;

function TJContextWrapper.checkSelfPermission(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkSelfPermission', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJContextWrapper.checkUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkUriPermission', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJContextWrapper.checkUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkUriPermission', '(Landroid/net/Uri;III)I', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJContextWrapper.clearWallpaper;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearWallpaper', '()V', []);
end;

function TJContextWrapper.createConfigurationContext(const AArg0: JConfiguration): JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createConfigurationContext', '(Landroid/content/res/Configuration;)Landroid/content/Context;', [AArg0]);
end;

function TJContextWrapper.createContextForSplit(const AArg0: JString): JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createContextForSplit', '(Ljava/lang/String;)Landroid/content/Context;', [AArg0]);
end;

function TJContextWrapper.createDeviceProtectedStorageContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createDeviceProtectedStorageContext', '()Landroid/content/Context;', []);
end;

function TJContextWrapper.createDisplayContext(const AArg0: JDisplay): JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createDisplayContext', '(Landroid/view/Display;)Landroid/content/Context;', [AArg0]);
end;

function TJContextWrapper.createPackageContext(const AArg0: JString; const AArg1: Integer): JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('createPackageContext', '(Ljava/lang/String;I)Landroid/content/Context;', [AArg0, AArg1]);
end;

function TJContextWrapper.databaseList: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('databaseList', '()[Ljava/lang/String;', []);
end;

function TJContextWrapper.deleteDatabase(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'deleteDatabase', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJContextWrapper.deleteFile(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'deleteFile', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJContextWrapper.deleteSharedPreferences(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'deleteSharedPreferences', '(Ljava/lang/String;)Z', [AArg0]);
end;

procedure TJContextWrapper.enforceCallingOrSelfPermission(const AArg0: JString; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceCallingOrSelfPermission', '(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.enforceCallingOrSelfUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceCallingOrSelfUriPermission', '(Landroid/net/Uri;ILjava/lang/String;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContextWrapper.enforceCallingPermission(const AArg0: JString; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceCallingPermission', '(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.enforceCallingUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceCallingUriPermission', '(Landroid/net/Uri;ILjava/lang/String;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContextWrapper.enforcePermission(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforcePermission', '(Ljava/lang/String;IILjava/lang/String;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJContextWrapper.enforceUriPermission(const AArg0: JUri; const AArg1: JString; const AArg2: JString; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceUriPermission', '(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJContextWrapper.enforceUriPermission(const AArg0: JUri; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'enforceUriPermission', '(Landroid/net/Uri;IIILjava/lang/String;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJContextWrapper.fileList: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('fileList', '()[Ljava/lang/String;', []);
end;

function TJContextWrapper.getApplicationContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('getApplicationContext', '()Landroid/content/Context;', []);
end;

function TJContextWrapper.getApplicationInfo: JApplicationInfo;
begin
  Result := CallObjectMethod<TJApplicationInfo, JApplicationInfo>('getApplicationInfo', '()Landroid/content/pm/ApplicationInfo;', []);
end;

function TJContextWrapper.getAssets: JAssetManager;
begin
  Result := CallObjectMethod<TJAssetManager, JAssetManager>('getAssets', '()Landroid/content/res/AssetManager;', []);
end;

function TJContextWrapper.getBaseContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('getBaseContext', '()Landroid/content/Context;', []);
end;

function TJContextWrapper.getCacheDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getCacheDir', '()Ljava/io/File;', []);
end;

function TJContextWrapper.getCodeCacheDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getCodeCacheDir', '()Ljava/io/File;', []);
end;

function TJContextWrapper.getContentResolver: JContentResolver;
begin
  Result := CallObjectMethod<TJContentResolver, JContentResolver>('getContentResolver', '()Landroid/content/ContentResolver;', []);
end;

function TJContextWrapper.getDataDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getDataDir', '()Ljava/io/File;', []);
end;

function TJContextWrapper.getDatabasePath(const AArg0: JString): JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getDatabasePath', '(Ljava/lang/String;)Ljava/io/File;', [AArg0]);
end;

function TJContextWrapper.getDir(const AArg0: JString; const AArg1: Integer): JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getDir', '(Ljava/lang/String;I)Ljava/io/File;', [AArg0, AArg1]);
end;

function TJContextWrapper.getExternalCacheDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getExternalCacheDir', '()Ljava/io/File;', []);
end;

function TJContextWrapper.getExternalCacheDirs: IJavaArray<JFile>;
begin
  Result := CallArrayMethod<TJFile, JFile>('getExternalCacheDirs', '()[Ljava/io/File;', []);
end;

function TJContextWrapper.getExternalFilesDir(const AArg0: JString): JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getExternalFilesDir', '(Ljava/lang/String;)Ljava/io/File;', [AArg0]);
end;

function TJContextWrapper.getExternalFilesDirs(const AArg0: JString): IJavaArray<JFile>;
begin
  Result := CallArrayMethod<TJFile, JFile>('getExternalFilesDirs', '(Ljava/lang/String;)[Ljava/io/File;', [AArg0]);
end;

function TJContextWrapper.getExternalMediaDirs: IJavaArray<JFile>;
begin
  Result := CallArrayMethod<TJFile, JFile>('getExternalMediaDirs', '()[Ljava/io/File;', []);
end;

function TJContextWrapper.getFileStreamPath(const AArg0: JString): JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getFileStreamPath', '(Ljava/lang/String;)Ljava/io/File;', [AArg0]);
end;

function TJContextWrapper.getFilesDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getFilesDir', '()Ljava/io/File;', []);
end;

function TJContextWrapper.getMainLooper: JLooper;
begin
  Result := CallObjectMethod<TJLooper, JLooper>('getMainLooper', '()Landroid/os/Looper;', []);
end;

function TJContextWrapper.getNoBackupFilesDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getNoBackupFilesDir', '()Ljava/io/File;', []);
end;

function TJContextWrapper.getObbDir: JFile;
begin
  Result := CallObjectMethod<TJFile, JFile>('getObbDir', '()Ljava/io/File;', []);
end;

function TJContextWrapper.getObbDirs: IJavaArray<JFile>;
begin
  Result := CallArrayMethod<TJFile, JFile>('getObbDirs', '()[Ljava/io/File;', []);
end;

function TJContextWrapper.getPackageCodePath: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPackageCodePath', '()Ljava/lang/String;', []);
end;

function TJContextWrapper.getPackageManager: JPackageManager;
begin
  Result := CallObjectMethod<TJPackageManager, JPackageManager>('getPackageManager', '()Landroid/content/pm/PackageManager;', []);
end;

function TJContextWrapper.getPackageName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPackageName', '()Ljava/lang/String;', []);
end;

function TJContextWrapper.getPackageResourcePath: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPackageResourcePath', '()Ljava/lang/String;', []);
end;

function TJContextWrapper.getResources: JResources;
begin
  Result := CallObjectMethod<TJResources, JResources>('getResources', '()Landroid/content/res/Resources;', []);
end;

function TJContextWrapper.getSharedPreferences(const AArg0: JString; const AArg1: Integer): JSharedPreferences;
begin
  Result := CallObjectMethod<TJSharedPreferences, JSharedPreferences>('getSharedPreferences', '(Ljava/lang/String;I)Landroid/content/SharedPreferences;', [AArg0, AArg1]);
end;

function TJContextWrapper.getSystemService(const AArg0: JString): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getSystemService', '(Ljava/lang/String;)Ljava/lang/Object;', [AArg0]);
end;

function TJContextWrapper.getSystemServiceName(const AArg0: JClass): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getSystemServiceName', '(Ljava/lang/Class;)Ljava/lang/String;', [AArg0]);
end;

function TJContextWrapper.getTheme: JResources_Theme;
begin
  Result := CallObjectMethod<TJResources_Theme, JResources_Theme>('getTheme', '()Landroid/content/res/Resources$Theme;', []);
end;

function TJContextWrapper.getWallpaper: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getWallpaper', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJContextWrapper.getWallpaperDesiredMinimumHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWallpaperDesiredMinimumHeight', '()I', []);
end;

function TJContextWrapper.getWallpaperDesiredMinimumWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWallpaperDesiredMinimumWidth', '()I', []);
end;

procedure TJContextWrapper.grantUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'grantUriPermission', '(Ljava/lang/String;Landroid/net/Uri;I)V', [AArg0, AArg1, AArg2]);
end;

function TJContextWrapper.isDeviceProtectedStorage: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isDeviceProtectedStorage', '()Z', []);
end;

function TJContextWrapper.isRestricted: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isRestricted', '()Z', []);
end;

function TJContextWrapper.moveDatabaseFrom(const AArg0: JContext; const AArg1: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveDatabaseFrom', '(Landroid/content/Context;Ljava/lang/String;)Z', [AArg0, AArg1]);
end;

function TJContextWrapper.moveSharedPreferencesFrom(const AArg0: JContext; const AArg1: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveSharedPreferencesFrom', '(Landroid/content/Context;Ljava/lang/String;)Z', [AArg0, AArg1]);
end;

function TJContextWrapper.openFileInput(const AArg0: JString): JFileInputStream;
begin
  Result := CallObjectMethod<TJFileInputStream, JFileInputStream>('openFileInput', '(Ljava/lang/String;)Ljava/io/FileInputStream;', [AArg0]);
end;

function TJContextWrapper.openFileOutput(const AArg0: JString; const AArg1: Integer): JFileOutputStream;
begin
  Result := CallObjectMethod<TJFileOutputStream, JFileOutputStream>('openFileOutput', '(Ljava/lang/String;I)Ljava/io/FileOutputStream;', [AArg0, AArg1]);
end;

function TJContextWrapper.peekWallpaper: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('peekWallpaper', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJContextWrapper.registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJContextWrapper.registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: Integer): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;', [AArg0, AArg1, AArg2]);
end;

function TJContextWrapper.registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler; const AArg4: Integer): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJContextWrapper.registerReceiver(const AArg0: JBroadcastReceiver; const AArg1: JIntentFilter; const AArg2: JString; const AArg3: JHandler): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('registerReceiver', '(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJContextWrapper.removeStickyBroadcast(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeStickyBroadcast', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJContextWrapper.removeStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeStickyBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.revokeUriPermission(const AArg0: JString; const AArg1: JUri; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'revokeUriPermission', '(Ljava/lang/String;Landroid/net/Uri;I)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContextWrapper.revokeUriPermission(const AArg0: JUri; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'revokeUriPermission', '(Landroid/net/Uri;I)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.sendBroadcast(const AArg0: JIntent; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendBroadcast', '(Landroid/content/Intent;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.sendBroadcast(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendBroadcast', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJContextWrapper.sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.sendBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJContextWrapper.sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendOrderedBroadcast', '(Landroid/content/Intent;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.sendOrderedBroadcast(const AArg0: JIntent; const AArg1: JString; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendOrderedBroadcast', '(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJContextWrapper.sendOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JString; const AArg3: JBroadcastReceiver; const AArg4: JHandler; const AArg5: Integer; const AArg6: JString; const AArg7: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendOrderedBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
end;

procedure TJContextWrapper.sendStickyBroadcast(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendStickyBroadcast', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJContextWrapper.sendStickyBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendStickyBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.sendStickyOrderedBroadcast(const AArg0: JIntent; const AArg1: JBroadcastReceiver; const AArg2: JHandler; const AArg3: Integer; const AArg4: JString; const AArg5: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendStickyOrderedBroadcast', '(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJContextWrapper.sendStickyOrderedBroadcastAsUser(const AArg0: JIntent; const AArg1: JUserHandle; const AArg2: JBroadcastReceiver; const AArg3: JHandler; const AArg4: Integer; const AArg5: JString; const AArg6: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendStickyOrderedBroadcastAsUser', '(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJContextWrapper.setTheme(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTheme', '(I)V', [AArg0]);
end;

procedure TJContextWrapper.setWallpaper(const AArg0: JInputStream);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWallpaper', '(Ljava/io/InputStream;)V', [AArg0]);
end;

procedure TJContextWrapper.setWallpaper(const AArg0: JBitmap);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWallpaper', '(Landroid/graphics/Bitmap;)V', [AArg0]);
end;

procedure TJContextWrapper.startActivities(const AArg0: IJavaArray<JIntent>; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivities', '([Landroid/content/Intent;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.startActivities(const AArg0: IJavaArray<JIntent>);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivities', '([Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJContextWrapper.startActivity(const AArg0: JIntent; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJContextWrapper.startActivity(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivity', '(Landroid/content/Intent;)V', [AArg0]);
end;

function TJContextWrapper.startForegroundService(const AArg0: JIntent): JComponentName;
begin
  Result := CallObjectMethod<TJComponentName, JComponentName>('startForegroundService', '(Landroid/content/Intent;)Landroid/content/ComponentName;', [AArg0]);
end;

function TJContextWrapper.startInstrumentation(const AArg0: JComponentName; const AArg1: JString; const AArg2: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'startInstrumentation', '(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJContextWrapper.startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;III)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJContextWrapper.startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJContextWrapper.startService(const AArg0: JIntent): JComponentName;
begin
  Result := CallObjectMethod<TJComponentName, JComponentName>('startService', '(Landroid/content/Intent;)Landroid/content/ComponentName;', [AArg0]);
end;

function TJContextWrapper.stopService(const AArg0: JIntent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'stopService', '(Landroid/content/Intent;)Z', [AArg0]);
end;

procedure TJContextWrapper.unregisterReceiver(const AArg0: JBroadcastReceiver);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterReceiver', '(Landroid/content/BroadcastReceiver;)V', [AArg0]);
end;

{ TJContextThemeWrapper }

class procedure TJContextThemeWrapper.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/content/Context;I)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/content/res/Resources$Theme;)V');
end;

class procedure TJContextThemeWrapper.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyOverrideConfiguration', '(Landroid/content/res/Configuration;)V');
  AddMethod('getAssets', '()Landroid/content/res/AssetManager;');
  AddMethod('getResources', '()Landroid/content/res/Resources;');
  AddMethod('getSystemService', '(Ljava/lang/String;)Ljava/lang/Object;');
  AddMethod('getTheme', '()Landroid/content/res/Resources$Theme;');
  AddMethod('setTheme', '(I)V');
end;

class function TJContextThemeWrapper.Wrap(const AObjectID: JNIObject): JContextThemeWrapper;
begin
  Result := Wrap<TJContextThemeWrapper, JContextThemeWrapper>(AObjectId);
end;

class function TJContextThemeWrapper.Wrap(const AObject: IJNIObject): JContextThemeWrapper;
begin
  Result := Wrap<TJContextThemeWrapper, JContextThemeWrapper>(AObject);
end;

class function TJContextThemeWrapper.Create: JContextThemeWrapper;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJContextThemeWrapper.Create(const AArg0: JContext; const AArg1: Integer): JContextThemeWrapper;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;I)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJContextThemeWrapper.Create(const AArg0: JContext; const AArg1: JResources_Theme): JContextThemeWrapper;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/content/res/Resources$Theme;)V', [AArg0, AArg1]);
  Result := O;
end;

procedure TJContextThemeWrapper.applyOverrideConfiguration(const AArg0: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyOverrideConfiguration', '(Landroid/content/res/Configuration;)V', [AArg0]);
end;

function TJContextThemeWrapper.getAssets: JAssetManager;
begin
  Result := CallObjectMethod<TJAssetManager, JAssetManager>('getAssets', '()Landroid/content/res/AssetManager;', []);
end;

function TJContextThemeWrapper.getResources: JResources;
begin
  Result := CallObjectMethod<TJResources, JResources>('getResources', '()Landroid/content/res/Resources;', []);
end;

function TJContextThemeWrapper.getSystemService(const AArg0: JString): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getSystemService', '(Ljava/lang/String;)Ljava/lang/Object;', [AArg0]);
end;

function TJContextThemeWrapper.getTheme: JResources_Theme;
begin
  Result := CallObjectMethod<TJResources_Theme, JResources_Theme>('getTheme', '()Landroid/content/res/Resources$Theme;', []);
end;

procedure TJContextThemeWrapper.setTheme(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTheme', '(I)V', [AArg0]);
end;

{ TJActivity }

class procedure TJActivity.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJActivity.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addContentView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V');
  AddMethod('closeContextMenu', '()V');
  AddMethod('closeOptionsMenu', '()V');
  AddMethod('createPendingResult', '(ILandroid/content/Intent;I)Landroid/app/PendingIntent;');
  AddMethod('dismissDialog', '(I)V');
  AddMethod('dismissKeyboardShortcutsHelper', '()V');
  AddMethod('dispatchGenericMotionEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('dispatchKeyEvent', '(Landroid/view/KeyEvent;)Z');
  AddMethod('dispatchKeyShortcutEvent', '(Landroid/view/KeyEvent;)Z');
  AddMethod('dispatchTouchEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('dispatchTrackballEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('enterPictureInPictureMode', '()V');
  AddMethod('findViewById', '(I)Landroid/view/View;');
  AddMethod('finish', '()V');
  AddMethod('finishActivity', '(I)V');
  AddMethod('finishActivityFromChild', '(Landroid/app/Activity;I)V');
  AddMethod('finishAffinity', '()V');
  AddMethod('finishAfterTransition', '()V');
  AddMethod('finishAndRemoveTask', '()V');
  AddMethod('finishFromChild', '(Landroid/app/Activity;)V');
  AddMethod('getCallingActivity', '()Landroid/content/ComponentName;');
  AddMethod('getCallingPackage', '()Ljava/lang/String;');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getComponentName', '()Landroid/content/ComponentName;');
  AddMethod('getCurrentFocus', '()Landroid/view/View;');
  AddMethod('getFragmentManager', '()Landroid/app/FragmentManager;');
  AddMethod('getIntent', '()Landroid/content/Intent;');
  AddMethod('getLastNonConfigurationInstance', '()Ljava/lang/Object;');
  AddMethod('getLayoutInflater', '()Landroid/view/LayoutInflater;');
  AddMethod('getLocalClassName', '()Ljava/lang/String;');
  AddMethod('getMaxNumPictureInPictureActions', '()I');
  AddMethod('getParent', '()Landroid/app/Activity;');
  AddMethod('getParentActivityIntent', '()Landroid/content/Intent;');
  AddMethod('getPreferences', '(I)Landroid/content/SharedPreferences;');
  AddMethod('getReferrer', '()Landroid/net/Uri;');
  AddMethod('getRequestedOrientation', '()I');
  AddMethod('getSystemService', '(Ljava/lang/String;)Ljava/lang/Object;');
  AddMethod('getTaskId', '()I');
  AddMethod('getTitle', '()Ljava/lang/CharSequence;');
  AddMethod('getTitleColor', '()I');
  AddMethod('getVolumeControlStream', '()I');
  AddMethod('getWindow', '()Landroid/view/Window;');
  AddMethod('getWindowManager', '()Landroid/view/WindowManager;');
  AddMethod('hasWindowFocus', '()Z');
  AddMethod('invalidateOptionsMenu', '()V');
  AddMethod('isActivityTransitionRunning', '()Z');
  AddMethod('isChangingConfigurations', '()Z');
  AddMethod('isChild', '()Z');
  AddMethod('isDestroyed', '()Z');
  AddMethod('isFinishing', '()Z');
  AddMethod('isImmersive', '()Z');
  AddMethod('isInMultiWindowMode', '()Z');
  AddMethod('isInPictureInPictureMode', '()Z');
  AddMethod('isLocalVoiceInteractionSupported', '()Z');
  AddMethod('isTaskRoot', '()Z');
  AddMethod('isVoiceInteraction', '()Z');
  AddMethod('isVoiceInteractionRoot', '()Z');
  AddMethod('managedQuery', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;');
  AddMethod('moveTaskToBack', '(Z)Z');
  AddMethod('navigateUpTo', '(Landroid/content/Intent;)Z');
  AddMethod('navigateUpToFromChild', '(Landroid/app/Activity;Landroid/content/Intent;)Z');
  AddMethod('onActivityReenter', '(ILandroid/content/Intent;)V');
  AddMethod('onAttachFragment', '(Landroid/app/Fragment;)V');
  AddMethod('onAttachedToWindow', '()V');
  AddMethod('onBackPressed', '()V');
  AddMethod('onConfigurationChanged', '(Landroid/content/res/Configuration;)V');
  AddMethod('onContentChanged', '()V');
  AddMethod('onContextItemSelected', '(Landroid/view/MenuItem;)Z');
  AddMethod('onContextMenuClosed', '(Landroid/view/Menu;)V');
  AddMethod('onCreate', '(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V');
  AddMethod('onCreateDescription', '()Ljava/lang/CharSequence;');
  AddMethod('onCreateOptionsMenu', '(Landroid/view/Menu;)Z');
  AddMethod('onCreatePanelMenu', '(ILandroid/view/Menu;)Z');
  AddMethod('onCreatePanelView', '(I)Landroid/view/View;');
  AddMethod('onCreateThumbnail', '(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z');
  AddMethod('onCreateView', '(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;');
  AddMethod('onCreateView', '(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;');
  AddMethod('onDetachedFromWindow', '()V');
  AddMethod('onEnterAnimationComplete', '()V');
  AddMethod('onGenericMotionEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onKeyDown', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('onKeyLongPress', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('onKeyMultiple', '(IILandroid/view/KeyEvent;)Z');
  AddMethod('onKeyShortcut', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('onKeyUp', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('onLocalVoiceInteractionStarted', '()V');
  AddMethod('onLocalVoiceInteractionStopped', '()V');
  AddMethod('onLowMemory', '()V');
  AddMethod('onMenuItemSelected', '(ILandroid/view/MenuItem;)Z');
  AddMethod('onMenuOpened', '(ILandroid/view/Menu;)Z');
  AddMethod('onMultiWindowModeChanged', '(ZLandroid/content/res/Configuration;)V');
  AddMethod('onMultiWindowModeChanged', '(Z)V');
  AddMethod('onNavigateUp', '()Z');
  AddMethod('onNavigateUpFromChild', '(Landroid/app/Activity;)Z');
  AddMethod('onOptionsItemSelected', '(Landroid/view/MenuItem;)Z');
  AddMethod('onOptionsMenuClosed', '(Landroid/view/Menu;)V');
  AddMethod('onPanelClosed', '(ILandroid/view/Menu;)V');
  AddMethod('onPictureInPictureModeChanged', '(Z)V');
  AddMethod('onPictureInPictureModeChanged', '(ZLandroid/content/res/Configuration;)V');
  AddMethod('onPostCreate', '(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V');
  AddMethod('onPrepareOptionsMenu', '(Landroid/view/Menu;)Z');
  AddMethod('onPreparePanel', '(ILandroid/view/View;Landroid/view/Menu;)Z');
  AddMethod('onProvideAssistData', '(Landroid/os/Bundle;)V');
  AddMethod('onProvideKeyboardShortcuts', '(Ljava/util/List;Landroid/view/Menu;I)V');
  AddMethod('onProvideReferrer', '()Landroid/net/Uri;');
  AddMethod('onRequestPermissionsResult', '(I[Ljava/lang/String;[I)V');
  AddMethod('onRestoreInstanceState', '(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V');
  AddMethod('onRetainNonConfigurationInstance', '()Ljava/lang/Object;');
  AddMethod('onSaveInstanceState', '(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V');
  AddMethod('onSearchRequested', '()Z');
  AddMethod('onStateNotSaved', '()V');
  AddMethod('onTouchEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onTrackballEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onTrimMemory', '(I)V');
  AddMethod('onUserInteraction', '()V');
  AddMethod('onVisibleBehindCanceled', '()V');
  AddMethod('onWindowAttributesChanged', '(Landroid/view/WindowManager$LayoutParams;)V');
  AddMethod('onWindowFocusChanged', '(Z)V');
  AddMethod('openContextMenu', '(Landroid/view/View;)V');
  AddMethod('openOptionsMenu', '()V');
  AddMethod('overridePendingTransition', '(II)V');
  AddMethod('postponeEnterTransition', '()V');
  AddMethod('recreate', '()V');
  AddMethod('registerForContextMenu', '(Landroid/view/View;)V');
  AddMethod('releaseInstance', '()Z');
  AddMethod('removeDialog', '(I)V');
  AddMethod('reportFullyDrawn', '()V');
  AddMethod('requestDragAndDropPermissions', '(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;');
  AddMethod('requestPermissions', '([Ljava/lang/String;I)V');
  AddMethod('requestShowKeyboardShortcuts', '()V');
  AddMethod('requestVisibleBehind', '(Z)Z');
  AddMethod('requestWindowFeature', '(I)Z');
  AddMethod('requireViewById', '(I)Landroid/view/View;');
  AddMethod('runOnUiThread', '(Ljava/lang/Runnable;)V');
  AddMethod('setActionBar', '(Landroid/widget/Toolbar;)V');
  AddMethod('setContentView', '(I)V');
  AddMethod('setContentView', '(Landroid/view/View;)V');
  AddMethod('setContentView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V');
  AddMethod('setDefaultKeyMode', '(I)V');
  AddMethod('setFeatureDrawable', '(ILandroid/graphics/drawable/Drawable;)V');
  AddMethod('setFeatureDrawableAlpha', '(II)V');
  AddMethod('setFeatureDrawableResource', '(II)V');
  AddMethod('setFeatureDrawableUri', '(ILandroid/net/Uri;)V');
  AddMethod('setFinishOnTouchOutside', '(Z)V');
  AddMethod('setImmersive', '(Z)V');
  AddMethod('setIntent', '(Landroid/content/Intent;)V');
  AddMethod('setProgress', '(I)V');
  AddMethod('setProgressBarIndeterminate', '(Z)V');
  AddMethod('setProgressBarIndeterminateVisibility', '(Z)V');
  AddMethod('setProgressBarVisibility', '(Z)V');
  AddMethod('setRequestedOrientation', '(I)V');
  AddMethod('setResult', '(I)V');
  AddMethod('setResult', '(ILandroid/content/Intent;)V');
  AddMethod('setSecondaryProgress', '(I)V');
  AddMethod('setShowWhenLocked', '(Z)V');
  AddMethod('setTaskDescription', '(Landroid/app/ActivityManager$TaskDescription;)V');
  AddMethod('setTheme', '(I)V');
  AddMethod('setTitle', '(Ljava/lang/CharSequence;)V');
  AddMethod('setTitle', '(I)V');
  AddMethod('setTitleColor', '(I)V');
  AddMethod('setTurnScreenOn', '(Z)V');
  AddMethod('setVisible', '(Z)V');
  AddMethod('setVolumeControlStream', '(I)V');
  AddMethod('setVrModeEnabled', '(ZLandroid/content/ComponentName;)V');
  AddMethod('shouldShowRequestPermissionRationale', '(Ljava/lang/String;)Z');
  AddMethod('shouldUpRecreateTask', '(Landroid/content/Intent;)Z');
  AddMethod('showAssist', '(Landroid/os/Bundle;)Z');
  AddMethod('showDialog', '(ILandroid/os/Bundle;)Z');
  AddMethod('showDialog', '(I)V');
  AddMethod('showLockTaskEscapeMessage', '()V');
  AddMethod('startActivities', '([Landroid/content/Intent;Landroid/os/Bundle;)V');
  AddMethod('startActivities', '([Landroid/content/Intent;)V');
  AddMethod('startActivity', '(Landroid/content/Intent;)V');
  AddMethod('startActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)V');
  AddMethod('startActivityForResult', '(Landroid/content/Intent;I)V');
  AddMethod('startActivityForResult', '(Landroid/content/Intent;ILandroid/os/Bundle;)V');
  AddMethod('startActivityFromChild', '(Landroid/app/Activity;Landroid/content/Intent;I)V');
  AddMethod('startActivityFromChild', '(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V');
  AddMethod('startActivityFromFragment', '(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V');
  AddMethod('startActivityFromFragment', '(Landroid/app/Fragment;Landroid/content/Intent;I)V');
  AddMethod('startActivityIfNeeded', '(Landroid/content/Intent;ILandroid/os/Bundle;)Z');
  AddMethod('startActivityIfNeeded', '(Landroid/content/Intent;I)Z');
  AddMethod('startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;III)V');
  AddMethod('startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V');
  AddMethod('startIntentSenderForResult', '(Landroid/content/IntentSender;ILandroid/content/Intent;III)V');
  AddMethod('startIntentSenderForResult', '(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V');
  AddMethod('startIntentSenderFromChild', '(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V');
  AddMethod('startIntentSenderFromChild', '(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V');
  AddMethod('startLocalVoiceInteraction', '(Landroid/os/Bundle;)V');
  AddMethod('startLockTask', '()V');
  AddMethod('startManagingCursor', '(Landroid/database/Cursor;)V');
  AddMethod('startNextMatchingActivity', '(Landroid/content/Intent;)Z');
  AddMethod('startNextMatchingActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)Z');
  AddMethod('startPostponedEnterTransition', '()V');
  AddMethod('startSearch', '(Ljava/lang/String;ZLandroid/os/Bundle;Z)V');
  AddMethod('stopLocalVoiceInteraction', '()V');
  AddMethod('stopLockTask', '()V');
  AddMethod('stopManagingCursor', '(Landroid/database/Cursor;)V');
  AddMethod('takeKeyEvents', '(Z)V');
  AddMethod('triggerSearch', '(Ljava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('unregisterForContextMenu', '(Landroid/view/View;)V');
end;

class procedure TJActivity.LoadFields;
begin
  inherited;
  AddStaticField('DEFAULT_KEYS_DIALER', 'I');
  AddStaticField('DEFAULT_KEYS_DISABLE', 'I');
  AddStaticField('DEFAULT_KEYS_SEARCH_GLOBAL', 'I');
  AddStaticField('DEFAULT_KEYS_SEARCH_LOCAL', 'I');
  AddStaticField('DEFAULT_KEYS_SHORTCUT', 'I');
  AddStaticField('RESULT_CANCELED', 'I');
  AddStaticField('RESULT_FIRST_USER', 'I');
  AddStaticField('RESULT_OK', 'I');
end;

class function TJActivity.Wrap(const AObjectID: JNIObject): JActivity;
begin
  Result := Wrap<TJActivity, JActivity>(AObjectId);
end;

class function TJActivity.Wrap(const AObject: IJNIObject): JActivity;
begin
  Result := Wrap<TJActivity, JActivity>(AObject);
end;

class function TJActivity.Create: JActivity;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJActivity.DEFAULT_KEYS_DIALER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DEFAULT_KEYS_DIALER');
end;

class function TJActivity.DEFAULT_KEYS_DISABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DEFAULT_KEYS_DISABLE');
end;

class function TJActivity.DEFAULT_KEYS_SEARCH_GLOBAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DEFAULT_KEYS_SEARCH_GLOBAL');
end;

class function TJActivity.DEFAULT_KEYS_SEARCH_LOCAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DEFAULT_KEYS_SEARCH_LOCAL');
end;

class function TJActivity.DEFAULT_KEYS_SHORTCUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DEFAULT_KEYS_SHORTCUT');
end;

class function TJActivity.RESULT_CANCELED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RESULT_CANCELED');
end;

class function TJActivity.RESULT_FIRST_USER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RESULT_FIRST_USER');
end;

class function TJActivity.RESULT_OK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RESULT_OK');
end;

procedure TJActivity.addContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'addContentView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V', [AArg0, AArg1]);
end;

procedure TJActivity.closeContextMenu;
begin
  JavaType.CallVoidMethod(ObjectID, 'closeContextMenu', '()V', []);
end;

procedure TJActivity.closeOptionsMenu;
begin
  JavaType.CallVoidMethod(ObjectID, 'closeOptionsMenu', '()V', []);
end;

function TJActivity.createPendingResult(const AArg0: Integer; const AArg1: JIntent; const AArg2: Integer): JPendingIntent;
begin
  Result := CallObjectMethod<TJPendingIntent, JPendingIntent>('createPendingResult', '(ILandroid/content/Intent;I)Landroid/app/PendingIntent;', [AArg0, AArg1, AArg2]);
end;

procedure TJActivity.dismissDialog(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'dismissDialog', '(I)V', [AArg0]);
end;

procedure TJActivity.dismissKeyboardShortcutsHelper;
begin
  JavaType.CallVoidMethod(ObjectID, 'dismissKeyboardShortcutsHelper', '()V', []);
end;

function TJActivity.dispatchGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchGenericMotionEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJActivity.dispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchKeyEvent', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

function TJActivity.dispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchKeyShortcutEvent', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

function TJActivity.dispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchTouchEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJActivity.dispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchTrackballEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJActivity.enterPictureInPictureMode;
begin
  JavaType.CallVoidMethod(ObjectID, 'enterPictureInPictureMode', '()V', []);
end;

function TJActivity.findViewById(const AArg0: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('findViewById', '(I)Landroid/view/View;', [AArg0]);
end;

procedure TJActivity.finish;
begin
  JavaType.CallVoidMethod(ObjectID, 'finish', '()V', []);
end;

procedure TJActivity.finishActivity(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'finishActivity', '(I)V', [AArg0]);
end;

procedure TJActivity.finishActivityFromChild(const AArg0: JActivity; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'finishActivityFromChild', '(Landroid/app/Activity;I)V', [AArg0, AArg1]);
end;

procedure TJActivity.finishAffinity;
begin
  JavaType.CallVoidMethod(ObjectID, 'finishAffinity', '()V', []);
end;

procedure TJActivity.finishAfterTransition;
begin
  JavaType.CallVoidMethod(ObjectID, 'finishAfterTransition', '()V', []);
end;

procedure TJActivity.finishAndRemoveTask;
begin
  JavaType.CallVoidMethod(ObjectID, 'finishAndRemoveTask', '()V', []);
end;

procedure TJActivity.finishFromChild(const AArg0: JActivity);
begin
  JavaType.CallVoidMethod(ObjectID, 'finishFromChild', '(Landroid/app/Activity;)V', [AArg0]);
end;

function TJActivity.getCallingActivity: JComponentName;
begin
  Result := CallObjectMethod<TJComponentName, JComponentName>('getCallingActivity', '()Landroid/content/ComponentName;', []);
end;

function TJActivity.getCallingPackage: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getCallingPackage', '()Ljava/lang/String;', []);
end;

function TJActivity.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJActivity.getComponentName: JComponentName;
begin
  Result := CallObjectMethod<TJComponentName, JComponentName>('getComponentName', '()Landroid/content/ComponentName;', []);
end;

function TJActivity.getCurrentFocus: JView;
begin
  Result := CallObjectMethod<TJView, JView>('getCurrentFocus', '()Landroid/view/View;', []);
end;

function TJActivity.getFragmentManager: JFragmentManager;
begin
  Result := CallObjectMethod<TJFragmentManager, JFragmentManager>('getFragmentManager', '()Landroid/app/FragmentManager;', []);
end;

function TJActivity.getIntent: JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('getIntent', '()Landroid/content/Intent;', []);
end;

function TJActivity.getLastNonConfigurationInstance: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getLastNonConfigurationInstance', '()Ljava/lang/Object;', []);
end;

function TJActivity.getLayoutInflater: JLayoutInflater;
begin
  Result := CallObjectMethod<TJLayoutInflater, JLayoutInflater>('getLayoutInflater', '()Landroid/view/LayoutInflater;', []);
end;

function TJActivity.getLocalClassName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getLocalClassName', '()Ljava/lang/String;', []);
end;

function TJActivity.getMaxNumPictureInPictureActions: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMaxNumPictureInPictureActions', '()I', []);
end;

function TJActivity.getParent: JActivity;
begin
  Result := CallObjectMethod<TJActivity, JActivity>('getParent', '()Landroid/app/Activity;', []);
end;

function TJActivity.getParentActivityIntent: JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('getParentActivityIntent', '()Landroid/content/Intent;', []);
end;

function TJActivity.getPreferences(const AArg0: Integer): JSharedPreferences;
begin
  Result := CallObjectMethod<TJSharedPreferences, JSharedPreferences>('getPreferences', '(I)Landroid/content/SharedPreferences;', [AArg0]);
end;

function TJActivity.getReferrer: JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('getReferrer', '()Landroid/net/Uri;', []);
end;

function TJActivity.getRequestedOrientation: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getRequestedOrientation', '()I', []);
end;

function TJActivity.getSystemService(const AArg0: JString): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getSystemService', '(Ljava/lang/String;)Ljava/lang/Object;', [AArg0]);
end;

function TJActivity.getTaskId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTaskId', '()I', []);
end;

function TJActivity.getTitle: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getTitle', '()Ljava/lang/CharSequence;', []);
end;

function TJActivity.getTitleColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTitleColor', '()I', []);
end;

function TJActivity.getVolumeControlStream: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getVolumeControlStream', '()I', []);
end;

function TJActivity.getWindow: JWindow;
begin
  Result := CallObjectMethod<TJWindow, JWindow>('getWindow', '()Landroid/view/Window;', []);
end;

function TJActivity.getWindowManager: JWindowManager;
begin
  Result := CallObjectMethod<TJWindowManager, JWindowManager>('getWindowManager', '()Landroid/view/WindowManager;', []);
end;

function TJActivity.hasWindowFocus: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasWindowFocus', '()Z', []);
end;

procedure TJActivity.invalidateOptionsMenu;
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateOptionsMenu', '()V', []);
end;

function TJActivity.isActivityTransitionRunning: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isActivityTransitionRunning', '()Z', []);
end;

function TJActivity.isChangingConfigurations: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isChangingConfigurations', '()Z', []);
end;

function TJActivity.isChild: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isChild', '()Z', []);
end;

function TJActivity.isDestroyed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isDestroyed', '()Z', []);
end;

function TJActivity.isFinishing: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFinishing', '()Z', []);
end;

function TJActivity.isImmersive: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isImmersive', '()Z', []);
end;

function TJActivity.isInMultiWindowMode: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInMultiWindowMode', '()Z', []);
end;

function TJActivity.isInPictureInPictureMode: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInPictureInPictureMode', '()Z', []);
end;

function TJActivity.isLocalVoiceInteractionSupported: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLocalVoiceInteractionSupported', '()Z', []);
end;

function TJActivity.isTaskRoot: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isTaskRoot', '()Z', []);
end;

function TJActivity.isVoiceInteraction: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVoiceInteraction', '()Z', []);
end;

function TJActivity.isVoiceInteractionRoot: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVoiceInteractionRoot', '()Z', []);
end;

function TJActivity.managedQuery(const AArg0: JUri; const AArg1: IJavaArray<JString>; const AArg2: JString; const AArg3: IJavaArray<JString>; const AArg4: JString): JCursor;
begin
  Result := CallObjectMethod<TJCursor, JCursor>('managedQuery', '(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJActivity.moveTaskToBack(const AArg0: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveTaskToBack', '(Z)Z', [AArg0]);
end;

function TJActivity.navigateUpTo(const AArg0: JIntent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'navigateUpTo', '(Landroid/content/Intent;)Z', [AArg0]);
end;

function TJActivity.navigateUpToFromChild(const AArg0: JActivity; const AArg1: JIntent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'navigateUpToFromChild', '(Landroid/app/Activity;Landroid/content/Intent;)Z', [AArg0, AArg1]);
end;

procedure TJActivity.onActivityReenter(const AArg0: Integer; const AArg1: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'onActivityReenter', '(ILandroid/content/Intent;)V', [AArg0, AArg1]);
end;

procedure TJActivity.onAttachFragment(const AArg0: JFragment);
begin
  JavaType.CallVoidMethod(ObjectID, 'onAttachFragment', '(Landroid/app/Fragment;)V', [AArg0]);
end;

procedure TJActivity.onAttachedToWindow;
begin
  JavaType.CallVoidMethod(ObjectID, 'onAttachedToWindow', '()V', []);
end;

procedure TJActivity.onBackPressed;
begin
  JavaType.CallVoidMethod(ObjectID, 'onBackPressed', '()V', []);
end;

procedure TJActivity.onConfigurationChanged(const AArg0: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'onConfigurationChanged', '(Landroid/content/res/Configuration;)V', [AArg0]);
end;

procedure TJActivity.onContentChanged;
begin
  JavaType.CallVoidMethod(ObjectID, 'onContentChanged', '()V', []);
end;

function TJActivity.onContextItemSelected(const AArg0: JMenuItem): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onContextItemSelected', '(Landroid/view/MenuItem;)Z', [AArg0]);
end;

procedure TJActivity.onContextMenuClosed(const AArg0: JMenu);
begin
  JavaType.CallVoidMethod(ObjectID, 'onContextMenuClosed', '(Landroid/view/Menu;)V', [AArg0]);
end;

procedure TJActivity.onCreate(const AArg0: JBundle; const AArg1: JPersistableBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onCreate', '(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V', [AArg0, AArg1]);
end;

function TJActivity.onCreateDescription: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('onCreateDescription', '()Ljava/lang/CharSequence;', []);
end;

function TJActivity.onCreateOptionsMenu(const AArg0: JMenu): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onCreateOptionsMenu', '(Landroid/view/Menu;)Z', [AArg0]);
end;

function TJActivity.onCreatePanelMenu(const AArg0: Integer; const AArg1: JMenu): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onCreatePanelMenu', '(ILandroid/view/Menu;)Z', [AArg0, AArg1]);
end;

function TJActivity.onCreatePanelView(const AArg0: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('onCreatePanelView', '(I)Landroid/view/View;', [AArg0]);
end;

function TJActivity.onCreateThumbnail(const AArg0: JBitmap; const AArg1: JCanvas): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onCreateThumbnail', '(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z', [AArg0, AArg1]);
end;

function TJActivity.onCreateView(const AArg0: JString; const AArg1: JContext; const AArg2: JAttributeSet): JView;
begin
  Result := CallObjectMethod<TJView, JView>('onCreateView', '(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;', [AArg0, AArg1, AArg2]);
end;

function TJActivity.onCreateView(const AArg0: JView; const AArg1: JString; const AArg2: JContext; const AArg3: JAttributeSet): JView;
begin
  Result := CallObjectMethod<TJView, JView>('onCreateView', '(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJActivity.onDetachedFromWindow;
begin
  JavaType.CallVoidMethod(ObjectID, 'onDetachedFromWindow', '()V', []);
end;

procedure TJActivity.onEnterAnimationComplete;
begin
  JavaType.CallVoidMethod(ObjectID, 'onEnterAnimationComplete', '()V', []);
end;

function TJActivity.onGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onGenericMotionEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJActivity.onKeyDown(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyDown', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

function TJActivity.onKeyLongPress(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyLongPress', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

function TJActivity.onKeyMultiple(const AArg0: Integer; const AArg1: Integer; const AArg2: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyMultiple', '(IILandroid/view/KeyEvent;)Z', [AArg0, AArg1, AArg2]);
end;

function TJActivity.onKeyShortcut(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyShortcut', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

function TJActivity.onKeyUp(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyUp', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

procedure TJActivity.onLocalVoiceInteractionStarted;
begin
  JavaType.CallVoidMethod(ObjectID, 'onLocalVoiceInteractionStarted', '()V', []);
end;

procedure TJActivity.onLocalVoiceInteractionStopped;
begin
  JavaType.CallVoidMethod(ObjectID, 'onLocalVoiceInteractionStopped', '()V', []);
end;

procedure TJActivity.onLowMemory;
begin
  JavaType.CallVoidMethod(ObjectID, 'onLowMemory', '()V', []);
end;

function TJActivity.onMenuItemSelected(const AArg0: Integer; const AArg1: JMenuItem): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onMenuItemSelected', '(ILandroid/view/MenuItem;)Z', [AArg0, AArg1]);
end;

function TJActivity.onMenuOpened(const AArg0: Integer; const AArg1: JMenu): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onMenuOpened', '(ILandroid/view/Menu;)Z', [AArg0, AArg1]);
end;

procedure TJActivity.onMultiWindowModeChanged(const AArg0: Boolean; const AArg1: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'onMultiWindowModeChanged', '(ZLandroid/content/res/Configuration;)V', [AArg0, AArg1]);
end;

procedure TJActivity.onMultiWindowModeChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onMultiWindowModeChanged', '(Z)V', [AArg0]);
end;

function TJActivity.onNavigateUp: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onNavigateUp', '()Z', []);
end;

function TJActivity.onNavigateUpFromChild(const AArg0: JActivity): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onNavigateUpFromChild', '(Landroid/app/Activity;)Z', [AArg0]);
end;

function TJActivity.onOptionsItemSelected(const AArg0: JMenuItem): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onOptionsItemSelected', '(Landroid/view/MenuItem;)Z', [AArg0]);
end;

procedure TJActivity.onOptionsMenuClosed(const AArg0: JMenu);
begin
  JavaType.CallVoidMethod(ObjectID, 'onOptionsMenuClosed', '(Landroid/view/Menu;)V', [AArg0]);
end;

procedure TJActivity.onPanelClosed(const AArg0: Integer; const AArg1: JMenu);
begin
  JavaType.CallVoidMethod(ObjectID, 'onPanelClosed', '(ILandroid/view/Menu;)V', [AArg0, AArg1]);
end;

procedure TJActivity.onPictureInPictureModeChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onPictureInPictureModeChanged', '(Z)V', [AArg0]);
end;

procedure TJActivity.onPictureInPictureModeChanged(const AArg0: Boolean; const AArg1: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'onPictureInPictureModeChanged', '(ZLandroid/content/res/Configuration;)V', [AArg0, AArg1]);
end;

procedure TJActivity.onPostCreate(const AArg0: JBundle; const AArg1: JPersistableBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onPostCreate', '(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V', [AArg0, AArg1]);
end;

function TJActivity.onPrepareOptionsMenu(const AArg0: JMenu): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onPrepareOptionsMenu', '(Landroid/view/Menu;)Z', [AArg0]);
end;

function TJActivity.onPreparePanel(const AArg0: Integer; const AArg1: JView; const AArg2: JMenu): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onPreparePanel', '(ILandroid/view/View;Landroid/view/Menu;)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJActivity.onProvideAssistData(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onProvideAssistData', '(Landroid/os/Bundle;)V', [AArg0]);
end;

procedure TJActivity.onProvideKeyboardShortcuts(const AArg0: JList; const AArg1: JMenu; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onProvideKeyboardShortcuts', '(Ljava/util/List;Landroid/view/Menu;I)V', [AArg0, AArg1, AArg2]);
end;

function TJActivity.onProvideReferrer: JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('onProvideReferrer', '()Landroid/net/Uri;', []);
end;

procedure TJActivity.onRequestPermissionsResult(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: IJavaArray<Integer>);
begin
  JavaType.CallVoidMethod(ObjectID, 'onRequestPermissionsResult', '(I[Ljava/lang/String;[I)V', [AArg0, AArg1, AArg2]);
end;

procedure TJActivity.onRestoreInstanceState(const AArg0: JBundle; const AArg1: JPersistableBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onRestoreInstanceState', '(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V', [AArg0, AArg1]);
end;

function TJActivity.onRetainNonConfigurationInstance: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('onRetainNonConfigurationInstance', '()Ljava/lang/Object;', []);
end;

procedure TJActivity.onSaveInstanceState(const AArg0: JBundle; const AArg1: JPersistableBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onSaveInstanceState', '(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V', [AArg0, AArg1]);
end;

function TJActivity.onSearchRequested: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onSearchRequested', '()Z', []);
end;

procedure TJActivity.onStateNotSaved;
begin
  JavaType.CallVoidMethod(ObjectID, 'onStateNotSaved', '()V', []);
end;

function TJActivity.onTouchEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onTouchEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJActivity.onTrackballEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onTrackballEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJActivity.onTrimMemory(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onTrimMemory', '(I)V', [AArg0]);
end;

procedure TJActivity.onUserInteraction;
begin
  JavaType.CallVoidMethod(ObjectID, 'onUserInteraction', '()V', []);
end;

procedure TJActivity.onVisibleBehindCanceled;
begin
  JavaType.CallVoidMethod(ObjectID, 'onVisibleBehindCanceled', '()V', []);
end;

procedure TJActivity.onWindowAttributesChanged(const AArg0: JWindowManager_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'onWindowAttributesChanged', '(Landroid/view/WindowManager$LayoutParams;)V', [AArg0]);
end;

procedure TJActivity.onWindowFocusChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onWindowFocusChanged', '(Z)V', [AArg0]);
end;

procedure TJActivity.openContextMenu(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'openContextMenu', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJActivity.openOptionsMenu;
begin
  JavaType.CallVoidMethod(ObjectID, 'openOptionsMenu', '()V', []);
end;

procedure TJActivity.overridePendingTransition(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'overridePendingTransition', '(II)V', [AArg0, AArg1]);
end;

procedure TJActivity.postponeEnterTransition;
begin
  JavaType.CallVoidMethod(ObjectID, 'postponeEnterTransition', '()V', []);
end;

procedure TJActivity.recreate;
begin
  JavaType.CallVoidMethod(ObjectID, 'recreate', '()V', []);
end;

procedure TJActivity.registerForContextMenu(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerForContextMenu', '(Landroid/view/View;)V', [AArg0]);
end;

function TJActivity.releaseInstance: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'releaseInstance', '()Z', []);
end;

procedure TJActivity.removeDialog(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeDialog', '(I)V', [AArg0]);
end;

procedure TJActivity.reportFullyDrawn;
begin
  JavaType.CallVoidMethod(ObjectID, 'reportFullyDrawn', '()V', []);
end;

function TJActivity.requestDragAndDropPermissions(const AArg0: JDragEvent): JDragAndDropPermissions;
begin
  Result := CallObjectMethod<TJDragAndDropPermissions, JDragAndDropPermissions>('requestDragAndDropPermissions', '(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;', [AArg0]);
end;

procedure TJActivity.requestPermissions(const AArg0: IJavaArray<JString>; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'requestPermissions', '([Ljava/lang/String;I)V', [AArg0, AArg1]);
end;

procedure TJActivity.requestShowKeyboardShortcuts;
begin
  JavaType.CallVoidMethod(ObjectID, 'requestShowKeyboardShortcuts', '()V', []);
end;

function TJActivity.requestVisibleBehind(const AArg0: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestVisibleBehind', '(Z)Z', [AArg0]);
end;

function TJActivity.requestWindowFeature(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestWindowFeature', '(I)Z', [AArg0]);
end;

function TJActivity.requireViewById(const AArg0: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('requireViewById', '(I)Landroid/view/View;', [AArg0]);
end;

procedure TJActivity.runOnUiThread(const AArg0: JRunnable);
begin
  JavaType.CallVoidMethod(ObjectID, 'runOnUiThread', '(Ljava/lang/Runnable;)V', [AArg0]);
end;

procedure TJActivity.setActionBar(const AArg0: JObject {JToolbar});
begin
  JavaType.CallVoidMethod(ObjectID, 'setActionBar', '(Landroid/widget/Toolbar;)V', [AArg0]);
end;

procedure TJActivity.setContentView(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContentView', '(I)V', [AArg0]);
end;

procedure TJActivity.setContentView(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContentView', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJActivity.setContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContentView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V', [AArg0, AArg1]);
end;

procedure TJActivity.setDefaultKeyMode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDefaultKeyMode', '(I)V', [AArg0]);
end;

procedure TJActivity.setFeatureDrawable(const AArg0: Integer; const AArg1: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFeatureDrawable', '(ILandroid/graphics/drawable/Drawable;)V', [AArg0, AArg1]);
end;

procedure TJActivity.setFeatureDrawableAlpha(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFeatureDrawableAlpha', '(II)V', [AArg0, AArg1]);
end;

procedure TJActivity.setFeatureDrawableResource(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFeatureDrawableResource', '(II)V', [AArg0, AArg1]);
end;

procedure TJActivity.setFeatureDrawableUri(const AArg0: Integer; const AArg1: JUri);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFeatureDrawableUri', '(ILandroid/net/Uri;)V', [AArg0, AArg1]);
end;

procedure TJActivity.setFinishOnTouchOutside(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFinishOnTouchOutside', '(Z)V', [AArg0]);
end;

procedure TJActivity.setImmersive(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setImmersive', '(Z)V', [AArg0]);
end;

procedure TJActivity.setIntent(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setIntent', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJActivity.setProgress(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setProgress', '(I)V', [AArg0]);
end;

procedure TJActivity.setProgressBarIndeterminate(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setProgressBarIndeterminate', '(Z)V', [AArg0]);
end;

procedure TJActivity.setProgressBarIndeterminateVisibility(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setProgressBarIndeterminateVisibility', '(Z)V', [AArg0]);
end;

procedure TJActivity.setProgressBarVisibility(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setProgressBarVisibility', '(Z)V', [AArg0]);
end;

procedure TJActivity.setRequestedOrientation(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRequestedOrientation', '(I)V', [AArg0]);
end;

procedure TJActivity.setResult(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResult', '(I)V', [AArg0]);
end;

procedure TJActivity.setResult(const AArg0: Integer; const AArg1: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResult', '(ILandroid/content/Intent;)V', [AArg0, AArg1]);
end;

procedure TJActivity.setSecondaryProgress(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSecondaryProgress', '(I)V', [AArg0]);
end;

procedure TJActivity.setShowWhenLocked(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setShowWhenLocked', '(Z)V', [AArg0]);
end;

procedure TJActivity.setTaskDescription(const AArg0: JActivityManager_TaskDescription);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTaskDescription', '(Landroid/app/ActivityManager$TaskDescription;)V', [AArg0]);
end;

procedure TJActivity.setTheme(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTheme', '(I)V', [AArg0]);
end;

procedure TJActivity.setTitle(const AArg0: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTitle', '(Ljava/lang/CharSequence;)V', [AArg0]);
end;

procedure TJActivity.setTitle(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTitle', '(I)V', [AArg0]);
end;

procedure TJActivity.setTitleColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTitleColor', '(I)V', [AArg0]);
end;

procedure TJActivity.setTurnScreenOn(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTurnScreenOn', '(Z)V', [AArg0]);
end;

procedure TJActivity.setVisible(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setVisible', '(Z)V', [AArg0]);
end;

procedure TJActivity.setVolumeControlStream(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setVolumeControlStream', '(I)V', [AArg0]);
end;

procedure TJActivity.setVrModeEnabled(const AArg0: Boolean; const AArg1: JComponentName);
begin
  JavaType.CallVoidMethod(ObjectID, 'setVrModeEnabled', '(ZLandroid/content/ComponentName;)V', [AArg0, AArg1]);
end;

function TJActivity.shouldShowRequestPermissionRationale(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'shouldShowRequestPermissionRationale', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJActivity.shouldUpRecreateTask(const AArg0: JIntent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'shouldUpRecreateTask', '(Landroid/content/Intent;)Z', [AArg0]);
end;

function TJActivity.showAssist(const AArg0: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'showAssist', '(Landroid/os/Bundle;)Z', [AArg0]);
end;

function TJActivity.showDialog(const AArg0: Integer; const AArg1: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'showDialog', '(ILandroid/os/Bundle;)Z', [AArg0, AArg1]);
end;

procedure TJActivity.showDialog(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'showDialog', '(I)V', [AArg0]);
end;

procedure TJActivity.showLockTaskEscapeMessage;
begin
  JavaType.CallVoidMethod(ObjectID, 'showLockTaskEscapeMessage', '()V', []);
end;

procedure TJActivity.startActivities(const AArg0: IJavaArray<JIntent>; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivities', '([Landroid/content/Intent;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJActivity.startActivities(const AArg0: IJavaArray<JIntent>);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivities', '([Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJActivity.startActivity(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivity', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJActivity.startActivity(const AArg0: JIntent; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJActivity.startActivityForResult(const AArg0: JIntent; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivityForResult', '(Landroid/content/Intent;I)V', [AArg0, AArg1]);
end;

procedure TJActivity.startActivityForResult(const AArg0: JIntent; const AArg1: Integer; const AArg2: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivityForResult', '(Landroid/content/Intent;ILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJActivity.startActivityFromChild(const AArg0: JActivity; const AArg1: JIntent; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivityFromChild', '(Landroid/app/Activity;Landroid/content/Intent;I)V', [AArg0, AArg1, AArg2]);
end;

procedure TJActivity.startActivityFromChild(const AArg0: JActivity; const AArg1: JIntent; const AArg2: Integer; const AArg3: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivityFromChild', '(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJActivity.startActivityFromFragment(const AArg0: JFragment; const AArg1: JIntent; const AArg2: Integer; const AArg3: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivityFromFragment', '(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJActivity.startActivityFromFragment(const AArg0: JFragment; const AArg1: JIntent; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivityFromFragment', '(Landroid/app/Fragment;Landroid/content/Intent;I)V', [AArg0, AArg1, AArg2]);
end;

function TJActivity.startActivityIfNeeded(const AArg0: JIntent; const AArg1: Integer; const AArg2: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'startActivityIfNeeded', '(Landroid/content/Intent;ILandroid/os/Bundle;)Z', [AArg0, AArg1, AArg2]);
end;

function TJActivity.startActivityIfNeeded(const AArg0: JIntent; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'startActivityIfNeeded', '(Landroid/content/Intent;I)Z', [AArg0, AArg1]);
end;

procedure TJActivity.startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;III)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJActivity.startIntentSender(const AArg0: JIntentSender; const AArg1: JIntent; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSender', '(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJActivity.startIntentSenderForResult(const AArg0: JIntentSender; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSenderForResult', '(Landroid/content/IntentSender;ILandroid/content/Intent;III)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJActivity.startIntentSenderForResult(const AArg0: JIntentSender; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSenderForResult', '(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJActivity.startIntentSenderFromChild(const AArg0: JActivity; const AArg1: JIntentSender; const AArg2: Integer; const AArg3: JIntent; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSenderFromChild', '(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJActivity.startIntentSenderFromChild(const AArg0: JActivity; const AArg1: JIntentSender; const AArg2: Integer; const AArg3: JIntent; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSenderFromChild', '(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
end;

procedure TJActivity.startLocalVoiceInteraction(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startLocalVoiceInteraction', '(Landroid/os/Bundle;)V', [AArg0]);
end;

procedure TJActivity.startLockTask;
begin
  JavaType.CallVoidMethod(ObjectID, 'startLockTask', '()V', []);
end;

procedure TJActivity.startManagingCursor(const AArg0: JCursor);
begin
  JavaType.CallVoidMethod(ObjectID, 'startManagingCursor', '(Landroid/database/Cursor;)V', [AArg0]);
end;

function TJActivity.startNextMatchingActivity(const AArg0: JIntent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'startNextMatchingActivity', '(Landroid/content/Intent;)Z', [AArg0]);
end;

function TJActivity.startNextMatchingActivity(const AArg0: JIntent; const AArg1: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'startNextMatchingActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)Z', [AArg0, AArg1]);
end;

procedure TJActivity.startPostponedEnterTransition;
begin
  JavaType.CallVoidMethod(ObjectID, 'startPostponedEnterTransition', '()V', []);
end;

procedure TJActivity.startSearch(const AArg0: JString; const AArg1: Boolean; const AArg2: JBundle; const AArg3: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'startSearch', '(Ljava/lang/String;ZLandroid/os/Bundle;Z)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJActivity.stopLocalVoiceInteraction;
begin
  JavaType.CallVoidMethod(ObjectID, 'stopLocalVoiceInteraction', '()V', []);
end;

procedure TJActivity.stopLockTask;
begin
  JavaType.CallVoidMethod(ObjectID, 'stopLockTask', '()V', []);
end;

procedure TJActivity.stopManagingCursor(const AArg0: JCursor);
begin
  JavaType.CallVoidMethod(ObjectID, 'stopManagingCursor', '(Landroid/database/Cursor;)V', [AArg0]);
end;

procedure TJActivity.takeKeyEvents(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'takeKeyEvents', '(Z)V', [AArg0]);
end;

procedure TJActivity.triggerSearch(const AArg0: JString; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'triggerSearch', '(Ljava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJActivity.unregisterForContextMenu(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterForContextMenu', '(Landroid/view/View;)V', [AArg0]);
end;

{ TJService }

class procedure TJService.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJService.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onBind', '(Landroid/content/Intent;)Landroid/os/IBinder;');
  AddMethod('onConfigurationChanged', '(Landroid/content/res/Configuration;)V');
  AddMethod('onCreate', '()V');
  AddMethod('onDestroy', '()V');
  AddMethod('onLowMemory', '()V');
  AddMethod('onRebind', '(Landroid/content/Intent;)V');
  AddMethod('onStart', '(Landroid/content/Intent;I)V');
  AddMethod('onStartCommand', '(Landroid/content/Intent;II)I');
  AddMethod('onTaskRemoved', '(Landroid/content/Intent;)V');
  AddMethod('onTrimMemory', '(I)V');
  AddMethod('onUnbind', '(Landroid/content/Intent;)Z');
  AddMethod('startForeground', '(ILandroid/app/Notification;)V');
  AddMethod('stopForeground', '(I)V');
  AddMethod('stopForeground', '(Z)V');
  AddMethod('stopSelf', '(I)V');
  AddMethod('stopSelf', '()V');
  AddMethod('stopSelfResult', '(I)Z');
end;

class procedure TJService.LoadFields;
begin
  inherited;
  AddStaticField('START_CONTINUATION_MASK', 'I');
  AddStaticField('START_FLAG_REDELIVERY', 'I');
  AddStaticField('START_FLAG_RETRY', 'I');
  AddStaticField('START_NOT_STICKY', 'I');
  AddStaticField('START_REDELIVER_INTENT', 'I');
  AddStaticField('START_STICKY', 'I');
  AddStaticField('START_STICKY_COMPATIBILITY', 'I');
  AddStaticField('STOP_FOREGROUND_DETACH', 'I');
  AddStaticField('STOP_FOREGROUND_REMOVE', 'I');
end;

class function TJService.Wrap(const AObjectID: JNIObject): JService;
begin
  Result := Wrap<TJService, JService>(AObjectId);
end;

class function TJService.Wrap(const AObject: IJNIObject): JService;
begin
  Result := Wrap<TJService, JService>(AObject);
end;

class function TJService.Create: JService;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJService.START_CONTINUATION_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('START_CONTINUATION_MASK');
end;

class function TJService.START_FLAG_REDELIVERY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('START_FLAG_REDELIVERY');
end;

class function TJService.START_FLAG_RETRY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('START_FLAG_RETRY');
end;

class function TJService.START_NOT_STICKY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('START_NOT_STICKY');
end;

class function TJService.START_REDELIVER_INTENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('START_REDELIVER_INTENT');
end;

class function TJService.START_STICKY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('START_STICKY');
end;

class function TJService.START_STICKY_COMPATIBILITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('START_STICKY_COMPATIBILITY');
end;

class function TJService.STOP_FOREGROUND_DETACH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STOP_FOREGROUND_DETACH');
end;

class function TJService.STOP_FOREGROUND_REMOVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STOP_FOREGROUND_REMOVE');
end;

function TJService.onBind(const AArg0: JIntent): JIBinder;
begin
  Result := CallObjectMethod<TJIBinder, JIBinder>('onBind', '(Landroid/content/Intent;)Landroid/os/IBinder;', [AArg0]);
end;

procedure TJService.onConfigurationChanged(const AArg0: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'onConfigurationChanged', '(Landroid/content/res/Configuration;)V', [AArg0]);
end;

procedure TJService.onCreate;
begin
  JavaType.CallVoidMethod(ObjectID, 'onCreate', '()V', []);
end;

procedure TJService.onDestroy;
begin
  JavaType.CallVoidMethod(ObjectID, 'onDestroy', '()V', []);
end;

procedure TJService.onLowMemory;
begin
  JavaType.CallVoidMethod(ObjectID, 'onLowMemory', '()V', []);
end;

procedure TJService.onRebind(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'onRebind', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJService.onStart(const AArg0: JIntent; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onStart', '(Landroid/content/Intent;I)V', [AArg0, AArg1]);
end;

function TJService.onStartCommand(const AArg0: JIntent; const AArg1: Integer; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'onStartCommand', '(Landroid/content/Intent;II)I', [AArg0, AArg1, AArg2]);
end;

procedure TJService.onTaskRemoved(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'onTaskRemoved', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJService.onTrimMemory(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onTrimMemory', '(I)V', [AArg0]);
end;

function TJService.onUnbind(const AArg0: JIntent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onUnbind', '(Landroid/content/Intent;)Z', [AArg0]);
end;

procedure TJService.startForeground(const AArg0: Integer; const AArg1: JObject {JNotification});
begin
  JavaType.CallVoidMethod(ObjectID, 'startForeground', '(ILandroid/app/Notification;)V', [AArg0, AArg1]);
end;

procedure TJService.stopForeground(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'stopForeground', '(I)V', [AArg0]);
end;

procedure TJService.stopForeground(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'stopForeground', '(Z)V', [AArg0]);
end;

procedure TJService.stopSelf(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'stopSelf', '(I)V', [AArg0]);
end;

procedure TJService.stopSelf;
begin
  JavaType.CallVoidMethod(ObjectID, 'stopSelf', '()V', []);
end;

function TJService.stopSelfResult(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'stopSelfResult', '(I)Z', [AArg0]);
end;

{ TJIntentService }

class procedure TJIntentService.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/String;)V');
end;

class procedure TJIntentService.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onBind', '(Landroid/content/Intent;)Landroid/os/IBinder;');
  AddMethod('onCreate', '()V');
  AddMethod('onDestroy', '()V');
  AddMethod('onStart', '(Landroid/content/Intent;I)V');
  AddMethod('onStartCommand', '(Landroid/content/Intent;II)I');
  AddMethod('setIntentRedelivery', '(Z)V');
end;

class function TJIntentService.Wrap(const AObjectID: JNIObject): JIntentService;
begin
  Result := Wrap<TJIntentService, JIntentService>(AObjectId);
end;

class function TJIntentService.Wrap(const AObject: IJNIObject): JIntentService;
begin
  Result := Wrap<TJIntentService, JIntentService>(AObject);
end;

class function TJIntentService.Create(const AArg0: JString): JIntentService;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

function TJIntentService.onBind(const AArg0: JIntent): JIBinder;
begin
  Result := CallObjectMethod<TJIBinder, JIBinder>('onBind', '(Landroid/content/Intent;)Landroid/os/IBinder;', [AArg0]);
end;

procedure TJIntentService.onCreate;
begin
  JavaType.CallVoidMethod(ObjectID, 'onCreate', '()V', []);
end;

procedure TJIntentService.onDestroy;
begin
  JavaType.CallVoidMethod(ObjectID, 'onDestroy', '()V', []);
end;

procedure TJIntentService.onStart(const AArg0: JIntent; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onStart', '(Landroid/content/Intent;I)V', [AArg0, AArg1]);
end;

function TJIntentService.onStartCommand(const AArg0: JIntent; const AArg1: Integer; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'onStartCommand', '(Landroid/content/Intent;II)I', [AArg0, AArg1, AArg2]);
end;

procedure TJIntentService.setIntentRedelivery(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setIntentRedelivery', '(Z)V', [AArg0]);
end;

{ TJIntent }

class procedure TJIntent.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/content/Intent;)V');
  AddMethod('<init>', '(Ljava/lang/String;)V');
  AddMethod('<init>', '(Ljava/lang/String;Landroid/net/Uri;)V');
  AddMethod('<init>', '(Landroid/content/Context;Ljava/lang/Class;)V');
  AddMethod('<init>', '(Ljava/lang/String;Landroid/net/Uri;Landroid/content/Context;Ljava/lang/Class;)V');
end;

class procedure TJIntent.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addCategory', '(Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('addFlags', '(I)Landroid/content/Intent;');
  AddMethod('clone', '()Ljava/lang/Object;');
  AddMethod('cloneFilter', '()Landroid/content/Intent;');
  AddStaticMethod('createChooser', '(Landroid/content/Intent;Ljava/lang/CharSequence;)Landroid/content/Intent;');
  AddStaticMethod('createChooser', '(Landroid/content/Intent;Ljava/lang/CharSequence;Landroid/content/IntentSender;)Landroid/content/Intent;');
  AddMethod('describeContents', '()I');
  AddMethod('fillIn', '(Landroid/content/Intent;I)I');
  AddMethod('filterEquals', '(Landroid/content/Intent;)Z');
  AddMethod('filterHashCode', '()I');
  AddMethod('getAction', '()Ljava/lang/String;');
  AddMethod('getBooleanArrayExtra', '(Ljava/lang/String;)[Z');
  AddMethod('getBooleanExtra', '(Ljava/lang/String;Z)Z');
  AddMethod('getBundleExtra', '(Ljava/lang/String;)Landroid/os/Bundle;');
  AddMethod('getByteArrayExtra', '(Ljava/lang/String;)[B');
  AddMethod('getByteExtra', '(Ljava/lang/String;B)B');
  AddMethod('getCategories', '()Ljava/util/Set;');
  AddMethod('getCharArrayExtra', '(Ljava/lang/String;)[C');
  AddMethod('getCharExtra', '(Ljava/lang/String;C)C');
  AddMethod('getCharSequenceArrayExtra', '(Ljava/lang/String;)[Ljava/lang/CharSequence;');
  AddMethod('getCharSequenceArrayListExtra', '(Ljava/lang/String;)Ljava/util/ArrayList;');
  AddMethod('getCharSequenceExtra', '(Ljava/lang/String;)Ljava/lang/CharSequence;');
  AddMethod('getClipData', '()Landroid/content/ClipData;');
  AddMethod('getComponent', '()Landroid/content/ComponentName;');
  AddMethod('getData', '()Landroid/net/Uri;');
  AddMethod('getDataString', '()Ljava/lang/String;');
  AddMethod('getDoubleArrayExtra', '(Ljava/lang/String;)[D');
  AddMethod('getDoubleExtra', '(Ljava/lang/String;D)D');
  AddMethod('getExtras', '()Landroid/os/Bundle;');
  AddMethod('getFlags', '()I');
  AddMethod('getFloatArrayExtra', '(Ljava/lang/String;)[F');
  AddMethod('getFloatExtra', '(Ljava/lang/String;F)F');
  AddMethod('getIntArrayExtra', '(Ljava/lang/String;)[I');
  AddMethod('getIntExtra', '(Ljava/lang/String;I)I');
  AddMethod('getIntegerArrayListExtra', '(Ljava/lang/String;)Ljava/util/ArrayList;');
  AddStaticMethod('getIntent', '(Ljava/lang/String;)Landroid/content/Intent;');
  AddStaticMethod('getIntentOld', '(Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('getLongArrayExtra', '(Ljava/lang/String;)[J');
  AddMethod('getLongExtra', '(Ljava/lang/String;J)J');
  AddMethod('getPackage', '()Ljava/lang/String;');
  AddMethod('getParcelableArrayExtra', '(Ljava/lang/String;)[Landroid/os/Parcelable;');
  AddMethod('getParcelableArrayListExtra', '(Ljava/lang/String;)Ljava/util/ArrayList;');
  AddMethod('getParcelableExtra', '(Ljava/lang/String;)Landroid/os/Parcelable;');
  AddMethod('getScheme', '()Ljava/lang/String;');
  AddMethod('getSelector', '()Landroid/content/Intent;');
  AddMethod('getShortArrayExtra', '(Ljava/lang/String;)[S');
  AddMethod('getShortExtra', '(Ljava/lang/String;S)S');
  AddMethod('getSourceBounds', '()Landroid/graphics/Rect;');
  AddMethod('getStringArrayExtra', '(Ljava/lang/String;)[Ljava/lang/String;');
  AddMethod('getStringArrayListExtra', '(Ljava/lang/String;)Ljava/util/ArrayList;');
  AddMethod('getStringExtra', '(Ljava/lang/String;)Ljava/lang/String;');
  AddMethod('getType', '()Ljava/lang/String;');
  AddMethod('hasCategory', '(Ljava/lang/String;)Z');
  AddMethod('hasExtra', '(Ljava/lang/String;)Z');
  AddMethod('hasFileDescriptors', '()Z');
  AddStaticMethod('makeMainActivity', '(Landroid/content/ComponentName;)Landroid/content/Intent;');
  AddStaticMethod('makeMainSelectorActivity', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;');
  AddStaticMethod('makeRestartActivityTask', '(Landroid/content/ComponentName;)Landroid/content/Intent;');
  AddStaticMethod('normalizeMimeType', '(Ljava/lang/String;)Ljava/lang/String;');
  AddStaticMethod('parseUri', '(Ljava/lang/String;I)Landroid/content/Intent;');
  AddMethod('putCharSequenceArrayListExtra', '(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[Z)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[B)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;Ljava/lang/CharSequence;)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[D)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[Ljava/lang/CharSequence;)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[F)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[S)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[C)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[I)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;[J)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;B)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;Z)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;C)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;S)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;D)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;F)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;J)Landroid/content/Intent;');
  AddMethod('putExtra', '(Ljava/lang/String;I)Landroid/content/Intent;');
  AddMethod('putExtras', '(Landroid/content/Intent;)Landroid/content/Intent;');
  AddMethod('putExtras', '(Landroid/os/Bundle;)Landroid/content/Intent;');
  AddMethod('putIntegerArrayListExtra', '(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;');
  AddMethod('putParcelableArrayListExtra', '(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;');
  AddMethod('putStringArrayListExtra', '(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;');
  AddMethod('removeCategory', '(Ljava/lang/String;)V');
  AddMethod('removeExtra', '(Ljava/lang/String;)V');
  AddMethod('removeFlags', '(I)V');
  AddMethod('replaceExtras', '(Landroid/content/Intent;)Landroid/content/Intent;');
  AddMethod('replaceExtras', '(Landroid/os/Bundle;)Landroid/content/Intent;');
  AddMethod('resolveActivity', '(Landroid/content/pm/PackageManager;)Landroid/content/ComponentName;');
  AddMethod('resolveActivityInfo', '(Landroid/content/pm/PackageManager;I)Landroid/content/pm/ActivityInfo;');
  AddMethod('resolveType', '(Landroid/content/Context;)Ljava/lang/String;');
  AddMethod('resolveType', '(Landroid/content/ContentResolver;)Ljava/lang/String;');
  AddMethod('resolveTypeIfNeeded', '(Landroid/content/ContentResolver;)Ljava/lang/String;');
  AddMethod('setAction', '(Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('setClass', '(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;');
  AddMethod('setClassName', '(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('setClassName', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('setClipData', '(Landroid/content/ClipData;)V');
  AddMethod('setComponent', '(Landroid/content/ComponentName;)Landroid/content/Intent;');
  AddMethod('setData', '(Landroid/net/Uri;)Landroid/content/Intent;');
  AddMethod('setDataAndNormalize', '(Landroid/net/Uri;)Landroid/content/Intent;');
  AddMethod('setDataAndType', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('setDataAndTypeAndNormalize', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('setFlags', '(I)Landroid/content/Intent;');
  AddMethod('setPackage', '(Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('setSelector', '(Landroid/content/Intent;)V');
  AddMethod('setSourceBounds', '(Landroid/graphics/Rect;)V');
  AddMethod('setType', '(Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('setTypeAndNormalize', '(Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('toString', '()Ljava/lang/String;');
  AddMethod('toURI', '()Ljava/lang/String;');
  AddMethod('toUri', '(I)Ljava/lang/String;');
end;

class procedure TJIntent.LoadFields;
begin
  inherited;
  AddStaticField('ACTION_AIRPLANE_MODE_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_ALL_APPS', 'Ljava/lang/String;');
  AddStaticField('ACTION_ANSWER', 'Ljava/lang/String;');
  AddStaticField('ACTION_APPLICATION_PREFERENCES', 'Ljava/lang/String;');
  AddStaticField('ACTION_APPLICATION_RESTRICTIONS_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_APP_ERROR', 'Ljava/lang/String;');
  AddStaticField('ACTION_ASSIST', 'Ljava/lang/String;');
  AddStaticField('ACTION_ATTACH_DATA', 'Ljava/lang/String;');
  AddStaticField('ACTION_BATTERY_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_BATTERY_LOW', 'Ljava/lang/String;');
  AddStaticField('ACTION_BATTERY_OKAY', 'Ljava/lang/String;');
  AddStaticField('ACTION_BOOT_COMPLETED', 'Ljava/lang/String;');
  AddStaticField('ACTION_BUG_REPORT', 'Ljava/lang/String;');
  AddStaticField('ACTION_CALL', 'Ljava/lang/String;');
  AddStaticField('ACTION_CALL_BUTTON', 'Ljava/lang/String;');
  AddStaticField('ACTION_CAMERA_BUTTON', 'Ljava/lang/String;');
  AddStaticField('ACTION_CARRIER_SETUP', 'Ljava/lang/String;');
  AddStaticField('ACTION_CHOOSER', 'Ljava/lang/String;');
  AddStaticField('ACTION_CLOSE_SYSTEM_DIALOGS', 'Ljava/lang/String;');
  AddStaticField('ACTION_CONFIGURATION_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_CREATE_DOCUMENT', 'Ljava/lang/String;');
  AddStaticField('ACTION_CREATE_SHORTCUT', 'Ljava/lang/String;');
  AddStaticField('ACTION_DATE_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_DEFAULT', 'Ljava/lang/String;');
  AddStaticField('ACTION_DELETE', 'Ljava/lang/String;');
  AddStaticField('ACTION_DEVICE_STORAGE_LOW', 'Ljava/lang/String;');
  AddStaticField('ACTION_DEVICE_STORAGE_OK', 'Ljava/lang/String;');
  AddStaticField('ACTION_DIAL', 'Ljava/lang/String;');
  AddStaticField('ACTION_DOCK_EVENT', 'Ljava/lang/String;');
  AddStaticField('ACTION_DREAMING_STARTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_DREAMING_STOPPED', 'Ljava/lang/String;');
  AddStaticField('ACTION_EDIT', 'Ljava/lang/String;');
  AddStaticField('ACTION_EXTERNAL_APPLICATIONS_AVAILABLE', 'Ljava/lang/String;');
  AddStaticField('ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE', 'Ljava/lang/String;');
  AddStaticField('ACTION_FACTORY_TEST', 'Ljava/lang/String;');
  AddStaticField('ACTION_GET_CONTENT', 'Ljava/lang/String;');
  AddStaticField('ACTION_GET_RESTRICTION_ENTRIES', 'Ljava/lang/String;');
  AddStaticField('ACTION_GTALK_SERVICE_CONNECTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_GTALK_SERVICE_DISCONNECTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_HEADSET_PLUG', 'Ljava/lang/String;');
  AddStaticField('ACTION_INPUT_METHOD_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_INSERT', 'Ljava/lang/String;');
  AddStaticField('ACTION_INSERT_OR_EDIT', 'Ljava/lang/String;');
  AddStaticField('ACTION_INSTALL_FAILURE', 'Ljava/lang/String;');
  AddStaticField('ACTION_INSTALL_PACKAGE', 'Ljava/lang/String;');
  AddStaticField('ACTION_LOCALE_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_LOCKED_BOOT_COMPLETED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MAIN', 'Ljava/lang/String;');
  AddStaticField('ACTION_MANAGED_PROFILE_ADDED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MANAGED_PROFILE_AVAILABLE', 'Ljava/lang/String;');
  AddStaticField('ACTION_MANAGED_PROFILE_REMOVED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MANAGED_PROFILE_UNAVAILABLE', 'Ljava/lang/String;');
  AddStaticField('ACTION_MANAGED_PROFILE_UNLOCKED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MANAGE_NETWORK_USAGE', 'Ljava/lang/String;');
  AddStaticField('ACTION_MANAGE_PACKAGE_STORAGE', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_BAD_REMOVAL', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_BUTTON', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_CHECKING', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_EJECT', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_MOUNTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_NOFS', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_REMOVED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_SCANNER_FINISHED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_SCANNER_SCAN_FILE', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_SCANNER_STARTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_SHARED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_UNMOUNTABLE', 'Ljava/lang/String;');
  AddStaticField('ACTION_MEDIA_UNMOUNTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MY_PACKAGE_REPLACED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MY_PACKAGE_SUSPENDED', 'Ljava/lang/String;');
  AddStaticField('ACTION_MY_PACKAGE_UNSUSPENDED', 'Ljava/lang/String;');
  AddStaticField('ACTION_NEW_OUTGOING_CALL', 'Ljava/lang/String;');
  AddStaticField('ACTION_OPEN_DOCUMENT', 'Ljava/lang/String;');
  AddStaticField('ACTION_OPEN_DOCUMENT_TREE', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGES_SUSPENDED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGES_UNSUSPENDED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_ADDED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_DATA_CLEARED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_FIRST_LAUNCH', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_FULLY_REMOVED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_INSTALL', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_NEEDS_VERIFICATION', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_REMOVED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_REPLACED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_RESTARTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PACKAGE_VERIFIED', 'Ljava/lang/String;');
  AddStaticField('ACTION_PASTE', 'Ljava/lang/String;');
  AddStaticField('ACTION_PICK', 'Ljava/lang/String;');
  AddStaticField('ACTION_PICK_ACTIVITY', 'Ljava/lang/String;');
  AddStaticField('ACTION_POWER_CONNECTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_POWER_DISCONNECTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_POWER_USAGE_SUMMARY', 'Ljava/lang/String;');
  AddStaticField('ACTION_PROCESS_TEXT', 'Ljava/lang/String;');
  AddStaticField('ACTION_PROVIDER_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_QUICK_CLOCK', 'Ljava/lang/String;');
  AddStaticField('ACTION_QUICK_VIEW', 'Ljava/lang/String;');
  AddStaticField('ACTION_REBOOT', 'Ljava/lang/String;');
  AddStaticField('ACTION_RUN', 'Ljava/lang/String;');
  AddStaticField('ACTION_SCREEN_OFF', 'Ljava/lang/String;');
  AddStaticField('ACTION_SCREEN_ON', 'Ljava/lang/String;');
  AddStaticField('ACTION_SEARCH', 'Ljava/lang/String;');
  AddStaticField('ACTION_SEARCH_LONG_PRESS', 'Ljava/lang/String;');
  AddStaticField('ACTION_SEND', 'Ljava/lang/String;');
  AddStaticField('ACTION_SENDTO', 'Ljava/lang/String;');
  AddStaticField('ACTION_SEND_MULTIPLE', 'Ljava/lang/String;');
  AddStaticField('ACTION_SET_WALLPAPER', 'Ljava/lang/String;');
  AddStaticField('ACTION_SHOW_APP_INFO', 'Ljava/lang/String;');
  AddStaticField('ACTION_SHUTDOWN', 'Ljava/lang/String;');
  AddStaticField('ACTION_SYNC', 'Ljava/lang/String;');
  AddStaticField('ACTION_SYSTEM_TUTORIAL', 'Ljava/lang/String;');
  AddStaticField('ACTION_TIMEZONE_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_TIME_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_TIME_TICK', 'Ljava/lang/String;');
  AddStaticField('ACTION_UID_REMOVED', 'Ljava/lang/String;');
  AddStaticField('ACTION_UMS_CONNECTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_UMS_DISCONNECTED', 'Ljava/lang/String;');
  AddStaticField('ACTION_UNINSTALL_PACKAGE', 'Ljava/lang/String;');
  AddStaticField('ACTION_USER_BACKGROUND', 'Ljava/lang/String;');
  AddStaticField('ACTION_USER_FOREGROUND', 'Ljava/lang/String;');
  AddStaticField('ACTION_USER_INITIALIZE', 'Ljava/lang/String;');
  AddStaticField('ACTION_USER_PRESENT', 'Ljava/lang/String;');
  AddStaticField('ACTION_USER_UNLOCKED', 'Ljava/lang/String;');
  AddStaticField('ACTION_VIEW', 'Ljava/lang/String;');
  AddStaticField('ACTION_VOICE_COMMAND', 'Ljava/lang/String;');
  AddStaticField('ACTION_WALLPAPER_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ACTION_WEB_SEARCH', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_ALTERNATIVE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_BROWSER', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_CALCULATOR', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_CALENDAR', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_CONTACTS', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_EMAIL', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_GALLERY', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_MAPS', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_MARKET', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_MESSAGING', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_APP_MUSIC', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_BROWSABLE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_CAR_DOCK', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_CAR_MODE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_DEFAULT', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_DESK_DOCK', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_DEVELOPMENT_PREFERENCE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_EMBED', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_HE_DESK_DOCK', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_HOME', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_INFO', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_LAUNCHER', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_LEANBACK_LAUNCHER', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_LE_DESK_DOCK', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_MONKEY', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_OPENABLE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_PREFERENCE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_SAMPLE_CODE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_SELECTED_ALTERNATIVE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_TAB', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_TEST', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_TYPED_OPENABLE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_UNIT_TEST', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_VOICE', 'Ljava/lang/String;');
  AddStaticField('CATEGORY_VR_HOME', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ALARM_COUNT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ALLOW_MULTIPLE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ALLOW_REPLACE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ALTERNATE_INTENTS', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ASSIST_CONTEXT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ASSIST_INPUT_DEVICE_ID', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ASSIST_INPUT_HINT_KEYBOARD', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ASSIST_PACKAGE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ASSIST_UID', 'Ljava/lang/String;');
  AddStaticField('EXTRA_BCC', 'Ljava/lang/String;');
  AddStaticField('EXTRA_BUG_REPORT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CC', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CHANGED_COMPONENT_NAME', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CHANGED_COMPONENT_NAME_LIST', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CHANGED_PACKAGE_LIST', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CHANGED_UID_LIST', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CHOOSER_TARGETS', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CHOSEN_COMPONENT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CHOSEN_COMPONENT_INTENT_SENDER', 'Ljava/lang/String;');
  AddStaticField('EXTRA_COMPONENT_NAME', 'Ljava/lang/String;');
  AddStaticField('EXTRA_CONTENT_ANNOTATIONS', 'Ljava/lang/String;');
  AddStaticField('EXTRA_DATA_REMOVED', 'Ljava/lang/String;');
  AddStaticField('EXTRA_DOCK_STATE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_DOCK_STATE_CAR', 'I');
  AddStaticField('EXTRA_DOCK_STATE_DESK', 'I');
  AddStaticField('EXTRA_DOCK_STATE_HE_DESK', 'I');
  AddStaticField('EXTRA_DOCK_STATE_LE_DESK', 'I');
  AddStaticField('EXTRA_DOCK_STATE_UNDOCKED', 'I');
  AddStaticField('EXTRA_DONT_KILL_APP', 'Ljava/lang/String;');
  AddStaticField('EXTRA_EMAIL', 'Ljava/lang/String;');
  AddStaticField('EXTRA_EXCLUDE_COMPONENTS', 'Ljava/lang/String;');
  AddStaticField('EXTRA_FROM_STORAGE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_HTML_TEXT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_INDEX', 'Ljava/lang/String;');
  AddStaticField('EXTRA_INITIAL_INTENTS', 'Ljava/lang/String;');
  AddStaticField('EXTRA_INSTALLER_PACKAGE_NAME', 'Ljava/lang/String;');
  AddStaticField('EXTRA_INTENT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_KEY_EVENT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_LOCAL_ONLY', 'Ljava/lang/String;');
  AddStaticField('EXTRA_MIME_TYPES', 'Ljava/lang/String;');
  AddStaticField('EXTRA_NOT_UNKNOWN_SOURCE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_ORIGINATING_URI', 'Ljava/lang/String;');
  AddStaticField('EXTRA_PACKAGE_NAME', 'Ljava/lang/String;');
  AddStaticField('EXTRA_PHONE_NUMBER', 'Ljava/lang/String;');
  AddStaticField('EXTRA_PROCESS_TEXT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_PROCESS_TEXT_READONLY', 'Ljava/lang/String;');
  AddStaticField('EXTRA_QUICK_VIEW_FEATURES', 'Ljava/lang/String;');
  AddStaticField('EXTRA_QUIET_MODE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_REFERRER', 'Ljava/lang/String;');
  AddStaticField('EXTRA_REFERRER_NAME', 'Ljava/lang/String;');
  AddStaticField('EXTRA_REMOTE_INTENT_TOKEN', 'Ljava/lang/String;');
  AddStaticField('EXTRA_REPLACEMENT_EXTRAS', 'Ljava/lang/String;');
  AddStaticField('EXTRA_REPLACING', 'Ljava/lang/String;');
  AddStaticField('EXTRA_RESTRICTIONS_BUNDLE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_RESTRICTIONS_INTENT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_RESTRICTIONS_LIST', 'Ljava/lang/String;');
  AddStaticField('EXTRA_RESULT_RECEIVER', 'Ljava/lang/String;');
  AddStaticField('EXTRA_RETURN_RESULT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_SHORTCUT_ICON', 'Ljava/lang/String;');
  AddStaticField('EXTRA_SHORTCUT_ICON_RESOURCE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_SHORTCUT_INTENT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_SHORTCUT_NAME', 'Ljava/lang/String;');
  AddStaticField('EXTRA_SHUTDOWN_USERSPACE_ONLY', 'Ljava/lang/String;');
  AddStaticField('EXTRA_SPLIT_NAME', 'Ljava/lang/String;');
  AddStaticField('EXTRA_STREAM', 'Ljava/lang/String;');
  AddStaticField('EXTRA_SUBJECT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_SUSPENDED_PACKAGE_EXTRAS', 'Ljava/lang/String;');
  AddStaticField('EXTRA_TEMPLATE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_TEXT', 'Ljava/lang/String;');
  AddStaticField('EXTRA_TITLE', 'Ljava/lang/String;');
  AddStaticField('EXTRA_UID', 'Ljava/lang/String;');
  AddStaticField('EXTRA_USER', 'Ljava/lang/String;');
  AddStaticField('FILL_IN_ACTION', 'I');
  AddStaticField('FILL_IN_CATEGORIES', 'I');
  AddStaticField('FILL_IN_CLIP_DATA', 'I');
  AddStaticField('FILL_IN_COMPONENT', 'I');
  AddStaticField('FILL_IN_DATA', 'I');
  AddStaticField('FILL_IN_PACKAGE', 'I');
  AddStaticField('FILL_IN_SELECTOR', 'I');
  AddStaticField('FILL_IN_SOURCE_BOUNDS', 'I');
  AddStaticField('FLAG_ACTIVITY_BROUGHT_TO_FRONT', 'I');
  AddStaticField('FLAG_ACTIVITY_CLEAR_TASK', 'I');
  AddStaticField('FLAG_ACTIVITY_CLEAR_TOP', 'I');
  AddStaticField('FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET', 'I');
  AddStaticField('FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS', 'I');
  AddStaticField('FLAG_ACTIVITY_FORWARD_RESULT', 'I');
  AddStaticField('FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY', 'I');
  AddStaticField('FLAG_ACTIVITY_LAUNCH_ADJACENT', 'I');
  AddStaticField('FLAG_ACTIVITY_MATCH_EXTERNAL', 'I');
  AddStaticField('FLAG_ACTIVITY_MULTIPLE_TASK', 'I');
  AddStaticField('FLAG_ACTIVITY_NEW_DOCUMENT', 'I');
  AddStaticField('FLAG_ACTIVITY_NEW_TASK', 'I');
  AddStaticField('FLAG_ACTIVITY_NO_ANIMATION', 'I');
  AddStaticField('FLAG_ACTIVITY_NO_HISTORY', 'I');
  AddStaticField('FLAG_ACTIVITY_NO_USER_ACTION', 'I');
  AddStaticField('FLAG_ACTIVITY_PREVIOUS_IS_TOP', 'I');
  AddStaticField('FLAG_ACTIVITY_REORDER_TO_FRONT', 'I');
  AddStaticField('FLAG_ACTIVITY_RESET_TASK_IF_NEEDED', 'I');
  AddStaticField('FLAG_ACTIVITY_RETAIN_IN_RECENTS', 'I');
  AddStaticField('FLAG_ACTIVITY_SINGLE_TOP', 'I');
  AddStaticField('FLAG_ACTIVITY_TASK_ON_HOME', 'I');
  AddStaticField('FLAG_DEBUG_LOG_RESOLUTION', 'I');
  AddStaticField('FLAG_EXCLUDE_STOPPED_PACKAGES', 'I');
  AddStaticField('FLAG_FROM_BACKGROUND', 'I');
  AddStaticField('FLAG_GRANT_PERSISTABLE_URI_PERMISSION', 'I');
  AddStaticField('FLAG_GRANT_PREFIX_URI_PERMISSION', 'I');
  AddStaticField('FLAG_GRANT_READ_URI_PERMISSION', 'I');
  AddStaticField('FLAG_GRANT_WRITE_URI_PERMISSION', 'I');
  AddStaticField('FLAG_INCLUDE_STOPPED_PACKAGES', 'I');
  AddStaticField('FLAG_RECEIVER_FOREGROUND', 'I');
  AddStaticField('FLAG_RECEIVER_NO_ABORT', 'I');
  AddStaticField('FLAG_RECEIVER_REGISTERED_ONLY', 'I');
  AddStaticField('FLAG_RECEIVER_REPLACE_PENDING', 'I');
  AddStaticField('FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS', 'I');
  AddStaticField('METADATA_DOCK_HOME', 'Ljava/lang/String;');
  AddStaticField('URI_ALLOW_UNSAFE', 'I');
  AddStaticField('URI_ANDROID_APP_SCHEME', 'I');
  AddStaticField('URI_INTENT_SCHEME', 'I');
end;

class function TJIntent.Wrap(const AObjectID: JNIObject): JIntent;
begin
  Result := Wrap<TJIntent, JIntent>(AObjectId);
end;

class function TJIntent.Wrap(const AObject: IJNIObject): JIntent;
begin
  Result := Wrap<TJIntent, JIntent>(AObject);
end;

class function TJIntent.Create: JIntent;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJIntent.Create(const AArg0: JIntent): JIntent;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Intent;)V', [AArg0]);
  Result := O;
end;

class function TJIntent.Create(const AArg0: JString): JIntent;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

class function TJIntent.Create(const AArg0: JString; const AArg1: JUri): JIntent;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;Landroid/net/Uri;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJIntent.Create(const AArg0: JContext; const AArg1: JClass): JIntent;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Ljava/lang/Class;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJIntent.Create(const AArg0: JString; const AArg1: JUri; const AArg2: JContext; const AArg3: JClass): JIntent;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;Landroid/net/Uri;Landroid/content/Context;Ljava/lang/Class;)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

class function TJIntent.ACTION_AIRPLANE_MODE_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_AIRPLANE_MODE_CHANGED');
end;

class function TJIntent.ACTION_ALL_APPS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_ALL_APPS');
end;

class function TJIntent.ACTION_ANSWER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_ANSWER');
end;

class function TJIntent.ACTION_APPLICATION_PREFERENCES: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_APPLICATION_PREFERENCES');
end;

class function TJIntent.ACTION_APPLICATION_RESTRICTIONS_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_APPLICATION_RESTRICTIONS_CHANGED');
end;

class function TJIntent.ACTION_APP_ERROR: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_APP_ERROR');
end;

class function TJIntent.ACTION_ASSIST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_ASSIST');
end;

class function TJIntent.ACTION_ATTACH_DATA: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_ATTACH_DATA');
end;

class function TJIntent.ACTION_BATTERY_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_BATTERY_CHANGED');
end;

class function TJIntent.ACTION_BATTERY_LOW: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_BATTERY_LOW');
end;

class function TJIntent.ACTION_BATTERY_OKAY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_BATTERY_OKAY');
end;

class function TJIntent.ACTION_BOOT_COMPLETED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_BOOT_COMPLETED');
end;

class function TJIntent.ACTION_BUG_REPORT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_BUG_REPORT');
end;

class function TJIntent.ACTION_CALL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_CALL');
end;

class function TJIntent.ACTION_CALL_BUTTON: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_CALL_BUTTON');
end;

class function TJIntent.ACTION_CAMERA_BUTTON: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_CAMERA_BUTTON');
end;

class function TJIntent.ACTION_CARRIER_SETUP: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_CARRIER_SETUP');
end;

class function TJIntent.ACTION_CHOOSER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_CHOOSER');
end;

class function TJIntent.ACTION_CLOSE_SYSTEM_DIALOGS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_CLOSE_SYSTEM_DIALOGS');
end;

class function TJIntent.ACTION_CONFIGURATION_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_CONFIGURATION_CHANGED');
end;

class function TJIntent.ACTION_CREATE_DOCUMENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_CREATE_DOCUMENT');
end;

class function TJIntent.ACTION_CREATE_SHORTCUT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_CREATE_SHORTCUT');
end;

class function TJIntent.ACTION_DATE_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_DATE_CHANGED');
end;

class function TJIntent.ACTION_DEFAULT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_DEFAULT');
end;

class function TJIntent.ACTION_DELETE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_DELETE');
end;

class function TJIntent.ACTION_DEVICE_STORAGE_LOW: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_DEVICE_STORAGE_LOW');
end;

class function TJIntent.ACTION_DEVICE_STORAGE_OK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_DEVICE_STORAGE_OK');
end;

class function TJIntent.ACTION_DIAL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_DIAL');
end;

class function TJIntent.ACTION_DOCK_EVENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_DOCK_EVENT');
end;

class function TJIntent.ACTION_DREAMING_STARTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_DREAMING_STARTED');
end;

class function TJIntent.ACTION_DREAMING_STOPPED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_DREAMING_STOPPED');
end;

class function TJIntent.ACTION_EDIT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_EDIT');
end;

class function TJIntent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_EXTERNAL_APPLICATIONS_AVAILABLE');
end;

class function TJIntent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE');
end;

class function TJIntent.ACTION_FACTORY_TEST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_FACTORY_TEST');
end;

class function TJIntent.ACTION_GET_CONTENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_GET_CONTENT');
end;

class function TJIntent.ACTION_GET_RESTRICTION_ENTRIES: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_GET_RESTRICTION_ENTRIES');
end;

class function TJIntent.ACTION_GTALK_SERVICE_CONNECTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_GTALK_SERVICE_CONNECTED');
end;

class function TJIntent.ACTION_GTALK_SERVICE_DISCONNECTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_GTALK_SERVICE_DISCONNECTED');
end;

class function TJIntent.ACTION_HEADSET_PLUG: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_HEADSET_PLUG');
end;

class function TJIntent.ACTION_INPUT_METHOD_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_INPUT_METHOD_CHANGED');
end;

class function TJIntent.ACTION_INSERT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_INSERT');
end;

class function TJIntent.ACTION_INSERT_OR_EDIT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_INSERT_OR_EDIT');
end;

class function TJIntent.ACTION_INSTALL_FAILURE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_INSTALL_FAILURE');
end;

class function TJIntent.ACTION_INSTALL_PACKAGE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_INSTALL_PACKAGE');
end;

class function TJIntent.ACTION_LOCALE_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_LOCALE_CHANGED');
end;

class function TJIntent.ACTION_LOCKED_BOOT_COMPLETED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_LOCKED_BOOT_COMPLETED');
end;

class function TJIntent.ACTION_MAIN: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MAIN');
end;

class function TJIntent.ACTION_MANAGED_PROFILE_ADDED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MANAGED_PROFILE_ADDED');
end;

class function TJIntent.ACTION_MANAGED_PROFILE_AVAILABLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MANAGED_PROFILE_AVAILABLE');
end;

class function TJIntent.ACTION_MANAGED_PROFILE_REMOVED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MANAGED_PROFILE_REMOVED');
end;

class function TJIntent.ACTION_MANAGED_PROFILE_UNAVAILABLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MANAGED_PROFILE_UNAVAILABLE');
end;

class function TJIntent.ACTION_MANAGED_PROFILE_UNLOCKED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MANAGED_PROFILE_UNLOCKED');
end;

class function TJIntent.ACTION_MANAGE_NETWORK_USAGE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MANAGE_NETWORK_USAGE');
end;

class function TJIntent.ACTION_MANAGE_PACKAGE_STORAGE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MANAGE_PACKAGE_STORAGE');
end;

class function TJIntent.ACTION_MEDIA_BAD_REMOVAL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_BAD_REMOVAL');
end;

class function TJIntent.ACTION_MEDIA_BUTTON: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_BUTTON');
end;

class function TJIntent.ACTION_MEDIA_CHECKING: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_CHECKING');
end;

class function TJIntent.ACTION_MEDIA_EJECT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_EJECT');
end;

class function TJIntent.ACTION_MEDIA_MOUNTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_MOUNTED');
end;

class function TJIntent.ACTION_MEDIA_NOFS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_NOFS');
end;

class function TJIntent.ACTION_MEDIA_REMOVED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_REMOVED');
end;

class function TJIntent.ACTION_MEDIA_SCANNER_FINISHED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_SCANNER_FINISHED');
end;

class function TJIntent.ACTION_MEDIA_SCANNER_SCAN_FILE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_SCANNER_SCAN_FILE');
end;

class function TJIntent.ACTION_MEDIA_SCANNER_STARTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_SCANNER_STARTED');
end;

class function TJIntent.ACTION_MEDIA_SHARED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_SHARED');
end;

class function TJIntent.ACTION_MEDIA_UNMOUNTABLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_UNMOUNTABLE');
end;

class function TJIntent.ACTION_MEDIA_UNMOUNTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MEDIA_UNMOUNTED');
end;

class function TJIntent.ACTION_MY_PACKAGE_REPLACED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MY_PACKAGE_REPLACED');
end;

class function TJIntent.ACTION_MY_PACKAGE_SUSPENDED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MY_PACKAGE_SUSPENDED');
end;

class function TJIntent.ACTION_MY_PACKAGE_UNSUSPENDED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_MY_PACKAGE_UNSUSPENDED');
end;

class function TJIntent.ACTION_NEW_OUTGOING_CALL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_NEW_OUTGOING_CALL');
end;

class function TJIntent.ACTION_OPEN_DOCUMENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_OPEN_DOCUMENT');
end;

class function TJIntent.ACTION_OPEN_DOCUMENT_TREE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_OPEN_DOCUMENT_TREE');
end;

class function TJIntent.ACTION_PACKAGES_SUSPENDED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGES_SUSPENDED');
end;

class function TJIntent.ACTION_PACKAGES_UNSUSPENDED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGES_UNSUSPENDED');
end;

class function TJIntent.ACTION_PACKAGE_ADDED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_ADDED');
end;

class function TJIntent.ACTION_PACKAGE_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_CHANGED');
end;

class function TJIntent.ACTION_PACKAGE_DATA_CLEARED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_DATA_CLEARED');
end;

class function TJIntent.ACTION_PACKAGE_FIRST_LAUNCH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_FIRST_LAUNCH');
end;

class function TJIntent.ACTION_PACKAGE_FULLY_REMOVED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_FULLY_REMOVED');
end;

class function TJIntent.ACTION_PACKAGE_INSTALL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_INSTALL');
end;

class function TJIntent.ACTION_PACKAGE_NEEDS_VERIFICATION: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_NEEDS_VERIFICATION');
end;

class function TJIntent.ACTION_PACKAGE_REMOVED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_REMOVED');
end;

class function TJIntent.ACTION_PACKAGE_REPLACED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_REPLACED');
end;

class function TJIntent.ACTION_PACKAGE_RESTARTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_RESTARTED');
end;

class function TJIntent.ACTION_PACKAGE_VERIFIED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PACKAGE_VERIFIED');
end;

class function TJIntent.ACTION_PASTE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PASTE');
end;

class function TJIntent.ACTION_PICK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PICK');
end;

class function TJIntent.ACTION_PICK_ACTIVITY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PICK_ACTIVITY');
end;

class function TJIntent.ACTION_POWER_CONNECTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_POWER_CONNECTED');
end;

class function TJIntent.ACTION_POWER_DISCONNECTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_POWER_DISCONNECTED');
end;

class function TJIntent.ACTION_POWER_USAGE_SUMMARY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_POWER_USAGE_SUMMARY');
end;

class function TJIntent.ACTION_PROCESS_TEXT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PROCESS_TEXT');
end;

class function TJIntent.ACTION_PROVIDER_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_PROVIDER_CHANGED');
end;

class function TJIntent.ACTION_QUICK_CLOCK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_QUICK_CLOCK');
end;

class function TJIntent.ACTION_QUICK_VIEW: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_QUICK_VIEW');
end;

class function TJIntent.ACTION_REBOOT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_REBOOT');
end;

class function TJIntent.ACTION_RUN: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_RUN');
end;

class function TJIntent.ACTION_SCREEN_OFF: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SCREEN_OFF');
end;

class function TJIntent.ACTION_SCREEN_ON: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SCREEN_ON');
end;

class function TJIntent.ACTION_SEARCH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SEARCH');
end;

class function TJIntent.ACTION_SEARCH_LONG_PRESS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SEARCH_LONG_PRESS');
end;

class function TJIntent.ACTION_SEND: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SEND');
end;

class function TJIntent.ACTION_SENDTO: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SENDTO');
end;

class function TJIntent.ACTION_SEND_MULTIPLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SEND_MULTIPLE');
end;

class function TJIntent.ACTION_SET_WALLPAPER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SET_WALLPAPER');
end;

class function TJIntent.ACTION_SHOW_APP_INFO: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SHOW_APP_INFO');
end;

class function TJIntent.ACTION_SHUTDOWN: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SHUTDOWN');
end;

class function TJIntent.ACTION_SYNC: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SYNC');
end;

class function TJIntent.ACTION_SYSTEM_TUTORIAL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_SYSTEM_TUTORIAL');
end;

class function TJIntent.ACTION_TIMEZONE_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_TIMEZONE_CHANGED');
end;

class function TJIntent.ACTION_TIME_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_TIME_CHANGED');
end;

class function TJIntent.ACTION_TIME_TICK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_TIME_TICK');
end;

class function TJIntent.ACTION_UID_REMOVED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_UID_REMOVED');
end;

class function TJIntent.ACTION_UMS_CONNECTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_UMS_CONNECTED');
end;

class function TJIntent.ACTION_UMS_DISCONNECTED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_UMS_DISCONNECTED');
end;

class function TJIntent.ACTION_UNINSTALL_PACKAGE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_UNINSTALL_PACKAGE');
end;

class function TJIntent.ACTION_USER_BACKGROUND: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_USER_BACKGROUND');
end;

class function TJIntent.ACTION_USER_FOREGROUND: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_USER_FOREGROUND');
end;

class function TJIntent.ACTION_USER_INITIALIZE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_USER_INITIALIZE');
end;

class function TJIntent.ACTION_USER_PRESENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_USER_PRESENT');
end;

class function TJIntent.ACTION_USER_UNLOCKED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_USER_UNLOCKED');
end;

class function TJIntent.ACTION_VIEW: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_VIEW');
end;

class function TJIntent.ACTION_VOICE_COMMAND: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_VOICE_COMMAND');
end;

class function TJIntent.ACTION_WALLPAPER_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_WALLPAPER_CHANGED');
end;

class function TJIntent.ACTION_WEB_SEARCH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_WEB_SEARCH');
end;

class function TJIntent.CATEGORY_ALTERNATIVE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_ALTERNATIVE');
end;

class function TJIntent.CATEGORY_APP_BROWSER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_BROWSER');
end;

class function TJIntent.CATEGORY_APP_CALCULATOR: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_CALCULATOR');
end;

class function TJIntent.CATEGORY_APP_CALENDAR: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_CALENDAR');
end;

class function TJIntent.CATEGORY_APP_CONTACTS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_CONTACTS');
end;

class function TJIntent.CATEGORY_APP_EMAIL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_EMAIL');
end;

class function TJIntent.CATEGORY_APP_GALLERY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_GALLERY');
end;

class function TJIntent.CATEGORY_APP_MAPS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_MAPS');
end;

class function TJIntent.CATEGORY_APP_MARKET: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_MARKET');
end;

class function TJIntent.CATEGORY_APP_MESSAGING: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_MESSAGING');
end;

class function TJIntent.CATEGORY_APP_MUSIC: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_APP_MUSIC');
end;

class function TJIntent.CATEGORY_BROWSABLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_BROWSABLE');
end;

class function TJIntent.CATEGORY_CAR_DOCK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_CAR_DOCK');
end;

class function TJIntent.CATEGORY_CAR_MODE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_CAR_MODE');
end;

class function TJIntent.CATEGORY_DEFAULT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_DEFAULT');
end;

class function TJIntent.CATEGORY_DESK_DOCK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_DESK_DOCK');
end;

class function TJIntent.CATEGORY_DEVELOPMENT_PREFERENCE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_DEVELOPMENT_PREFERENCE');
end;

class function TJIntent.CATEGORY_EMBED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_EMBED');
end;

class function TJIntent.CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST');
end;

class function TJIntent.CATEGORY_HE_DESK_DOCK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_HE_DESK_DOCK');
end;

class function TJIntent.CATEGORY_HOME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_HOME');
end;

class function TJIntent.CATEGORY_INFO: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_INFO');
end;

class function TJIntent.CATEGORY_LAUNCHER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_LAUNCHER');
end;

class function TJIntent.CATEGORY_LEANBACK_LAUNCHER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_LEANBACK_LAUNCHER');
end;

class function TJIntent.CATEGORY_LE_DESK_DOCK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_LE_DESK_DOCK');
end;

class function TJIntent.CATEGORY_MONKEY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_MONKEY');
end;

class function TJIntent.CATEGORY_OPENABLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_OPENABLE');
end;

class function TJIntent.CATEGORY_PREFERENCE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_PREFERENCE');
end;

class function TJIntent.CATEGORY_SAMPLE_CODE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_SAMPLE_CODE');
end;

class function TJIntent.CATEGORY_SELECTED_ALTERNATIVE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_SELECTED_ALTERNATIVE');
end;

class function TJIntent.CATEGORY_TAB: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_TAB');
end;

class function TJIntent.CATEGORY_TEST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_TEST');
end;

class function TJIntent.CATEGORY_TYPED_OPENABLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_TYPED_OPENABLE');
end;

class function TJIntent.CATEGORY_UNIT_TEST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_UNIT_TEST');
end;

class function TJIntent.CATEGORY_VOICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_VOICE');
end;

class function TJIntent.CATEGORY_VR_HOME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('CATEGORY_VR_HOME');
end;

class function TJIntent.EXTRA_ALARM_COUNT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ALARM_COUNT');
end;

class function TJIntent.EXTRA_ALLOW_MULTIPLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ALLOW_MULTIPLE');
end;

class function TJIntent.EXTRA_ALLOW_REPLACE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ALLOW_REPLACE');
end;

class function TJIntent.EXTRA_ALTERNATE_INTENTS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ALTERNATE_INTENTS');
end;

class function TJIntent.EXTRA_ASSIST_CONTEXT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ASSIST_CONTEXT');
end;

class function TJIntent.EXTRA_ASSIST_INPUT_DEVICE_ID: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ASSIST_INPUT_DEVICE_ID');
end;

class function TJIntent.EXTRA_ASSIST_INPUT_HINT_KEYBOARD: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ASSIST_INPUT_HINT_KEYBOARD');
end;

class function TJIntent.EXTRA_ASSIST_PACKAGE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ASSIST_PACKAGE');
end;

class function TJIntent.EXTRA_ASSIST_UID: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ASSIST_UID');
end;

class function TJIntent.EXTRA_BCC: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_BCC');
end;

class function TJIntent.EXTRA_BUG_REPORT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_BUG_REPORT');
end;

class function TJIntent.EXTRA_CC: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CC');
end;

class function TJIntent.EXTRA_CHANGED_COMPONENT_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CHANGED_COMPONENT_NAME');
end;

class function TJIntent.EXTRA_CHANGED_COMPONENT_NAME_LIST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CHANGED_COMPONENT_NAME_LIST');
end;

class function TJIntent.EXTRA_CHANGED_PACKAGE_LIST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CHANGED_PACKAGE_LIST');
end;

class function TJIntent.EXTRA_CHANGED_UID_LIST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CHANGED_UID_LIST');
end;

class function TJIntent.EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER');
end;

class function TJIntent.EXTRA_CHOOSER_TARGETS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CHOOSER_TARGETS');
end;

class function TJIntent.EXTRA_CHOSEN_COMPONENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CHOSEN_COMPONENT');
end;

class function TJIntent.EXTRA_CHOSEN_COMPONENT_INTENT_SENDER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CHOSEN_COMPONENT_INTENT_SENDER');
end;

class function TJIntent.EXTRA_COMPONENT_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_COMPONENT_NAME');
end;

class function TJIntent.EXTRA_CONTENT_ANNOTATIONS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_CONTENT_ANNOTATIONS');
end;

class function TJIntent.EXTRA_DATA_REMOVED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_DATA_REMOVED');
end;

class function TJIntent.EXTRA_DOCK_STATE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_DOCK_STATE');
end;

class function TJIntent.EXTRA_DOCK_STATE_CAR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EXTRA_DOCK_STATE_CAR');
end;

class function TJIntent.EXTRA_DOCK_STATE_DESK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EXTRA_DOCK_STATE_DESK');
end;

class function TJIntent.EXTRA_DOCK_STATE_HE_DESK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EXTRA_DOCK_STATE_HE_DESK');
end;

class function TJIntent.EXTRA_DOCK_STATE_LE_DESK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EXTRA_DOCK_STATE_LE_DESK');
end;

class function TJIntent.EXTRA_DOCK_STATE_UNDOCKED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EXTRA_DOCK_STATE_UNDOCKED');
end;

class function TJIntent.EXTRA_DONT_KILL_APP: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_DONT_KILL_APP');
end;

class function TJIntent.EXTRA_EMAIL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_EMAIL');
end;

class function TJIntent.EXTRA_EXCLUDE_COMPONENTS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_EXCLUDE_COMPONENTS');
end;

class function TJIntent.EXTRA_FROM_STORAGE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_FROM_STORAGE');
end;

class function TJIntent.EXTRA_HTML_TEXT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_HTML_TEXT');
end;

class function TJIntent.EXTRA_INDEX: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_INDEX');
end;

class function TJIntent.EXTRA_INITIAL_INTENTS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_INITIAL_INTENTS');
end;

class function TJIntent.EXTRA_INSTALLER_PACKAGE_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_INSTALLER_PACKAGE_NAME');
end;

class function TJIntent.EXTRA_INTENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_INTENT');
end;

class function TJIntent.EXTRA_KEY_EVENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_KEY_EVENT');
end;

class function TJIntent.EXTRA_LOCAL_ONLY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_LOCAL_ONLY');
end;

class function TJIntent.EXTRA_MIME_TYPES: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_MIME_TYPES');
end;

class function TJIntent.EXTRA_NOT_UNKNOWN_SOURCE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_NOT_UNKNOWN_SOURCE');
end;

class function TJIntent.EXTRA_ORIGINATING_URI: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_ORIGINATING_URI');
end;

class function TJIntent.EXTRA_PACKAGE_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_PACKAGE_NAME');
end;

class function TJIntent.EXTRA_PHONE_NUMBER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_PHONE_NUMBER');
end;

class function TJIntent.EXTRA_PROCESS_TEXT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_PROCESS_TEXT');
end;

class function TJIntent.EXTRA_PROCESS_TEXT_READONLY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_PROCESS_TEXT_READONLY');
end;

class function TJIntent.EXTRA_QUICK_VIEW_FEATURES: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_QUICK_VIEW_FEATURES');
end;

class function TJIntent.EXTRA_QUIET_MODE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_QUIET_MODE');
end;

class function TJIntent.EXTRA_REFERRER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_REFERRER');
end;

class function TJIntent.EXTRA_REFERRER_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_REFERRER_NAME');
end;

class function TJIntent.EXTRA_REMOTE_INTENT_TOKEN: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_REMOTE_INTENT_TOKEN');
end;

class function TJIntent.EXTRA_REPLACEMENT_EXTRAS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_REPLACEMENT_EXTRAS');
end;

class function TJIntent.EXTRA_REPLACING: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_REPLACING');
end;

class function TJIntent.EXTRA_RESTRICTIONS_BUNDLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_RESTRICTIONS_BUNDLE');
end;

class function TJIntent.EXTRA_RESTRICTIONS_INTENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_RESTRICTIONS_INTENT');
end;

class function TJIntent.EXTRA_RESTRICTIONS_LIST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_RESTRICTIONS_LIST');
end;

class function TJIntent.EXTRA_RESULT_RECEIVER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_RESULT_RECEIVER');
end;

class function TJIntent.EXTRA_RETURN_RESULT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_RETURN_RESULT');
end;

class function TJIntent.EXTRA_SHORTCUT_ICON: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_SHORTCUT_ICON');
end;

class function TJIntent.EXTRA_SHORTCUT_ICON_RESOURCE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_SHORTCUT_ICON_RESOURCE');
end;

class function TJIntent.EXTRA_SHORTCUT_INTENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_SHORTCUT_INTENT');
end;

class function TJIntent.EXTRA_SHORTCUT_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_SHORTCUT_NAME');
end;

class function TJIntent.EXTRA_SHUTDOWN_USERSPACE_ONLY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_SHUTDOWN_USERSPACE_ONLY');
end;

class function TJIntent.EXTRA_SPLIT_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_SPLIT_NAME');
end;

class function TJIntent.EXTRA_STREAM: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_STREAM');
end;

class function TJIntent.EXTRA_SUBJECT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_SUBJECT');
end;

class function TJIntent.EXTRA_SUSPENDED_PACKAGE_EXTRAS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_SUSPENDED_PACKAGE_EXTRAS');
end;

class function TJIntent.EXTRA_TEMPLATE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_TEMPLATE');
end;

class function TJIntent.EXTRA_TEXT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_TEXT');
end;

class function TJIntent.EXTRA_TITLE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_TITLE');
end;

class function TJIntent.EXTRA_UID: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_UID');
end;

class function TJIntent.EXTRA_USER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_USER');
end;

class function TJIntent.FILL_IN_ACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_IN_ACTION');
end;

class function TJIntent.FILL_IN_CATEGORIES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_IN_CATEGORIES');
end;

class function TJIntent.FILL_IN_CLIP_DATA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_IN_CLIP_DATA');
end;

class function TJIntent.FILL_IN_COMPONENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_IN_COMPONENT');
end;

class function TJIntent.FILL_IN_DATA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_IN_DATA');
end;

class function TJIntent.FILL_IN_PACKAGE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_IN_PACKAGE');
end;

class function TJIntent.FILL_IN_SELECTOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_IN_SELECTOR');
end;

class function TJIntent.FILL_IN_SOURCE_BOUNDS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_IN_SOURCE_BOUNDS');
end;

class function TJIntent.FLAG_ACTIVITY_BROUGHT_TO_FRONT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_BROUGHT_TO_FRONT');
end;

class function TJIntent.FLAG_ACTIVITY_CLEAR_TASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_CLEAR_TASK');
end;

class function TJIntent.FLAG_ACTIVITY_CLEAR_TOP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_CLEAR_TOP');
end;

class function TJIntent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET');
end;

class function TJIntent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS');
end;

class function TJIntent.FLAG_ACTIVITY_FORWARD_RESULT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_FORWARD_RESULT');
end;

class function TJIntent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY');
end;

class function TJIntent.FLAG_ACTIVITY_LAUNCH_ADJACENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_LAUNCH_ADJACENT');
end;

class function TJIntent.FLAG_ACTIVITY_MATCH_EXTERNAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_MATCH_EXTERNAL');
end;

class function TJIntent.FLAG_ACTIVITY_MULTIPLE_TASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_MULTIPLE_TASK');
end;

class function TJIntent.FLAG_ACTIVITY_NEW_DOCUMENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_NEW_DOCUMENT');
end;

class function TJIntent.FLAG_ACTIVITY_NEW_TASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_NEW_TASK');
end;

class function TJIntent.FLAG_ACTIVITY_NO_ANIMATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_NO_ANIMATION');
end;

class function TJIntent.FLAG_ACTIVITY_NO_HISTORY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_NO_HISTORY');
end;

class function TJIntent.FLAG_ACTIVITY_NO_USER_ACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_NO_USER_ACTION');
end;

class function TJIntent.FLAG_ACTIVITY_PREVIOUS_IS_TOP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_PREVIOUS_IS_TOP');
end;

class function TJIntent.FLAG_ACTIVITY_REORDER_TO_FRONT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_REORDER_TO_FRONT');
end;

class function TJIntent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_RESET_TASK_IF_NEEDED');
end;

class function TJIntent.FLAG_ACTIVITY_RETAIN_IN_RECENTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_RETAIN_IN_RECENTS');
end;

class function TJIntent.FLAG_ACTIVITY_SINGLE_TOP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_SINGLE_TOP');
end;

class function TJIntent.FLAG_ACTIVITY_TASK_ON_HOME: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ACTIVITY_TASK_ON_HOME');
end;

class function TJIntent.FLAG_DEBUG_LOG_RESOLUTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_DEBUG_LOG_RESOLUTION');
end;

class function TJIntent.FLAG_EXCLUDE_STOPPED_PACKAGES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_EXCLUDE_STOPPED_PACKAGES');
end;

class function TJIntent.FLAG_FROM_BACKGROUND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_FROM_BACKGROUND');
end;

class function TJIntent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_GRANT_PERSISTABLE_URI_PERMISSION');
end;

class function TJIntent.FLAG_GRANT_PREFIX_URI_PERMISSION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_GRANT_PREFIX_URI_PERMISSION');
end;

class function TJIntent.FLAG_GRANT_READ_URI_PERMISSION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_GRANT_READ_URI_PERMISSION');
end;

class function TJIntent.FLAG_GRANT_WRITE_URI_PERMISSION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_GRANT_WRITE_URI_PERMISSION');
end;

class function TJIntent.FLAG_INCLUDE_STOPPED_PACKAGES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_INCLUDE_STOPPED_PACKAGES');
end;

class function TJIntent.FLAG_RECEIVER_FOREGROUND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_RECEIVER_FOREGROUND');
end;

class function TJIntent.FLAG_RECEIVER_NO_ABORT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_RECEIVER_NO_ABORT');
end;

class function TJIntent.FLAG_RECEIVER_REGISTERED_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_RECEIVER_REGISTERED_ONLY');
end;

class function TJIntent.FLAG_RECEIVER_REPLACE_PENDING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_RECEIVER_REPLACE_PENDING');
end;

class function TJIntent.FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS');
end;

class function TJIntent.METADATA_DOCK_HOME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('METADATA_DOCK_HOME');
end;

class function TJIntent.URI_ALLOW_UNSAFE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('URI_ALLOW_UNSAFE');
end;

class function TJIntent.URI_ANDROID_APP_SCHEME: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('URI_ANDROID_APP_SCHEME');
end;

class function TJIntent.URI_INTENT_SCHEME: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('URI_INTENT_SCHEME');
end;

function TJIntent.addCategory(const AArg0: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('addCategory', '(Ljava/lang/String;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.addFlags(const AArg0: Integer): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('addFlags', '(I)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.clone: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('clone', '()Ljava/lang/Object;', []);
end;

function TJIntent.cloneFilter: JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('cloneFilter', '()Landroid/content/Intent;', []);
end;

class function TJIntent.createChooser(const AArg0: JIntent; const AArg1: JCharSequence): JIntent;
begin
  Result := CallStaticObjectMethod<TJIntent, JIntent>('createChooser', '(Landroid/content/Intent;Ljava/lang/CharSequence;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

class function TJIntent.createChooser(const AArg0: JIntent; const AArg1: JCharSequence; const AArg2: JIntentSender): JIntent;
begin
  Result := CallStaticObjectMethod<TJIntent, JIntent>('createChooser', '(Landroid/content/Intent;Ljava/lang/CharSequence;Landroid/content/IntentSender;)Landroid/content/Intent;', [AArg0, AArg1, AArg2]);
end;

function TJIntent.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJIntent.fillIn(const AArg0: JIntent; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'fillIn', '(Landroid/content/Intent;I)I', [AArg0, AArg1]);
end;

function TJIntent.filterEquals(const AArg0: JIntent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'filterEquals', '(Landroid/content/Intent;)Z', [AArg0]);
end;

function TJIntent.filterHashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'filterHashCode', '()I', []);
end;

function TJIntent.getAction: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getAction', '()Ljava/lang/String;', []);
end;

function TJIntent.getBooleanArrayExtra(const AArg0: JString): IJavaArray<Boolean>;
begin
  Result := CallArrayMethod<Boolean>('getBooleanArrayExtra', '(Ljava/lang/String;)[Z', [AArg0]);
end;

function TJIntent.getBooleanExtra(const AArg0: JString; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getBooleanExtra', '(Ljava/lang/String;Z)Z', [AArg0, AArg1]);
end;

function TJIntent.getBundleExtra(const AArg0: JString): JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getBundleExtra', '(Ljava/lang/String;)Landroid/os/Bundle;', [AArg0]);
end;

function TJIntent.getByteArrayExtra(const AArg0: JString): IJavaArray<Byte>;
begin
  Result := CallArrayMethod<Byte>('getByteArrayExtra', '(Ljava/lang/String;)[B', [AArg0]);
end;

function TJIntent.getByteExtra(const AArg0: JString; const AArg1: Byte): Byte;
begin
  Result := JavaType.CallByteMethod(ObjectID, 'getByteExtra', '(Ljava/lang/String;B)B', [AArg0, AArg1]);
end;

function TJIntent.getCategories: JSet;
begin
  Result := CallObjectMethod<TJSet, JSet>('getCategories', '()Ljava/util/Set;', []);
end;

function TJIntent.getCharArrayExtra(const AArg0: JString): IJavaArray<Char>;
begin
  Result := CallArrayMethod<Char>('getCharArrayExtra', '(Ljava/lang/String;)[C', [AArg0]);
end;

function TJIntent.getCharExtra(const AArg0: JString; const AArg1: Char): Char;
begin
  Result := JavaType.CallCharMethod(ObjectID, 'getCharExtra', '(Ljava/lang/String;C)C', [AArg0, AArg1]);
end;

function TJIntent.getCharSequenceArrayExtra(const AArg0: JString): IJavaArray<JCharSequence>;
begin
  Result := CallArrayMethod<JCharSequence>('getCharSequenceArrayExtra', '(Ljava/lang/String;)[Ljava/lang/CharSequence;', [AArg0]);
end;

function TJIntent.getCharSequenceArrayListExtra(const AArg0: JString): JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getCharSequenceArrayListExtra', '(Ljava/lang/String;)Ljava/util/ArrayList;', [AArg0]);
end;

function TJIntent.getCharSequenceExtra(const AArg0: JString): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getCharSequenceExtra', '(Ljava/lang/String;)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJIntent.getClipData: JClipData;
begin
  Result := CallObjectMethod<TJClipData, JClipData>('getClipData', '()Landroid/content/ClipData;', []);
end;

function TJIntent.getComponent: JComponentName;
begin
  Result := CallObjectMethod<TJComponentName, JComponentName>('getComponent', '()Landroid/content/ComponentName;', []);
end;

function TJIntent.getData: JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('getData', '()Landroid/net/Uri;', []);
end;

function TJIntent.getDataString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getDataString', '()Ljava/lang/String;', []);
end;

function TJIntent.getDoubleArrayExtra(const AArg0: JString): IJavaArray<Double>;
begin
  Result := CallArrayMethod<Double>('getDoubleArrayExtra', '(Ljava/lang/String;)[D', [AArg0]);
end;

function TJIntent.getDoubleExtra(const AArg0: JString; const AArg1: Double): Double;
begin
  Result := JavaType.CallDoubleMethod(ObjectID, 'getDoubleExtra', '(Ljava/lang/String;D)D', [AArg0, WrapDouble(AArg1)]);
end;

function TJIntent.getExtras: JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getExtras', '()Landroid/os/Bundle;', []);
end;

function TJIntent.getFlags: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getFlags', '()I', []);
end;

function TJIntent.getFloatArrayExtra(const AArg0: JString): IJavaArray<Single>;
begin
  Result := CallArrayMethod<Single>('getFloatArrayExtra', '(Ljava/lang/String;)[F', [AArg0]);
end;

function TJIntent.getFloatExtra(const AArg0: JString; const AArg1: Single): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFloatExtra', '(Ljava/lang/String;F)F', [AArg0, AArg1]);
end;

function TJIntent.getIntArrayExtra(const AArg0: JString): IJavaArray<Integer>;
begin
  Result := CallArrayMethod<Integer>('getIntArrayExtra', '(Ljava/lang/String;)[I', [AArg0]);
end;

function TJIntent.getIntExtra(const AArg0: JString; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntExtra', '(Ljava/lang/String;I)I', [AArg0, AArg1]);
end;

function TJIntent.getIntegerArrayListExtra(const AArg0: JString): JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getIntegerArrayListExtra', '(Ljava/lang/String;)Ljava/util/ArrayList;', [AArg0]);
end;

class function TJIntent.getIntent(const AArg0: JString): JIntent;
begin
  Result := CallStaticObjectMethod<TJIntent, JIntent>('getIntent', '(Ljava/lang/String;)Landroid/content/Intent;', [AArg0]);
end;

class function TJIntent.getIntentOld(const AArg0: JString): JIntent;
begin
  Result := CallStaticObjectMethod<TJIntent, JIntent>('getIntentOld', '(Ljava/lang/String;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.getLongArrayExtra(const AArg0: JString): IJavaArray<Int64>;
begin
  Result := CallArrayMethod<Int64>('getLongArrayExtra', '(Ljava/lang/String;)[J', [AArg0]);
end;

function TJIntent.getLongExtra(const AArg0: JString; const AArg1: Int64): Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getLongExtra', '(Ljava/lang/String;J)J', [AArg0, AArg1]);
end;

function TJIntent.getPackage: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPackage', '()Ljava/lang/String;', []);
end;

function TJIntent.getParcelableArrayExtra(const AArg0: JString): IJavaArray<JParcelable>;
begin
  Result := CallArrayMethod<JParcelable>('getParcelableArrayExtra', '(Ljava/lang/String;)[Landroid/os/Parcelable;', [AArg0]);
end;

function TJIntent.getParcelableArrayListExtra(const AArg0: JString): JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getParcelableArrayListExtra', '(Ljava/lang/String;)Ljava/util/ArrayList;', [AArg0]);
end;

function TJIntent.getParcelableExtra(const AArg0: JString): JParcelable;
begin
  Result := CallObjectMethod<TJParcelable, JParcelable>('getParcelableExtra', '(Ljava/lang/String;)Landroid/os/Parcelable;', [AArg0]);
end;

function TJIntent.getScheme: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getScheme', '()Ljava/lang/String;', []);
end;

function TJIntent.getSelector: JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('getSelector', '()Landroid/content/Intent;', []);
end;

function TJIntent.getShortArrayExtra(const AArg0: JString): IJavaArray<ShortInt>;
begin
  Result := CallArrayMethod<ShortInt>('getShortArrayExtra', '(Ljava/lang/String;)[S', [AArg0]);
end;

function TJIntent.getShortExtra(const AArg0: JString; const AArg1: ShortInt): ShortInt;
begin
  Result := JavaType.CallShortMethod(ObjectID, 'getShortExtra', '(Ljava/lang/String;S)S', [AArg0, AArg1]);
end;

function TJIntent.getSourceBounds: JRect;
begin
  Result := CallObjectMethod<TJRect, JRect>('getSourceBounds', '()Landroid/graphics/Rect;', []);
end;

function TJIntent.getStringArrayExtra(const AArg0: JString): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getStringArrayExtra', '(Ljava/lang/String;)[Ljava/lang/String;', [AArg0]);
end;

function TJIntent.getStringArrayListExtra(const AArg0: JString): JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getStringArrayListExtra', '(Ljava/lang/String;)Ljava/util/ArrayList;', [AArg0]);
end;

function TJIntent.getStringExtra(const AArg0: JString): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getStringExtra', '(Ljava/lang/String;)Ljava/lang/String;', [AArg0]);
end;

function TJIntent.getType: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getType', '()Ljava/lang/String;', []);
end;

function TJIntent.hasCategory(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasCategory', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJIntent.hasExtra(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasExtra', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJIntent.hasFileDescriptors: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasFileDescriptors', '()Z', []);
end;

class function TJIntent.makeMainActivity(const AArg0: JComponentName): JIntent;
begin
  Result := CallStaticObjectMethod<TJIntent, JIntent>('makeMainActivity', '(Landroid/content/ComponentName;)Landroid/content/Intent;', [AArg0]);
end;

class function TJIntent.makeMainSelectorActivity(const AArg0: JString; const AArg1: JString): JIntent;
begin
  Result := CallStaticObjectMethod<TJIntent, JIntent>('makeMainSelectorActivity', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

class function TJIntent.makeRestartActivityTask(const AArg0: JComponentName): JIntent;
begin
  Result := CallStaticObjectMethod<TJIntent, JIntent>('makeRestartActivityTask', '(Landroid/content/ComponentName;)Landroid/content/Intent;', [AArg0]);
end;

class function TJIntent.normalizeMimeType(const AArg0: JString): JString;
begin
  Result := CallStaticObjectMethod<TJString, JString>('normalizeMimeType', '(Ljava/lang/String;)Ljava/lang/String;', [AArg0]);
end;

class function TJIntent.parseUri(const AArg0: JString; const AArg1: Integer): JIntent;
begin
  Result := CallStaticObjectMethod<TJIntent, JIntent>('parseUri', '(Ljava/lang/String;I)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putCharSequenceArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putCharSequenceArrayListExtra', '(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<Boolean>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[Z)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<Byte>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[B)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<JParcelable>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: JCharSequence): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;Ljava/lang/CharSequence;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: JParcelable): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<Double>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[D)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<JString>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<JCharSequence>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[Ljava/lang/CharSequence;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: JBundle): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<Single>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[F)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<ShortInt>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[S)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<Char>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[C)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<Integer>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[I)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: IJavaArray<Int64>): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;[J)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: Byte): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;B)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: Boolean): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;Z)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: Char): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;C)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: ShortInt): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;S)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: Double): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;D)Landroid/content/Intent;', [AArg0, WrapDouble(AArg1)]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: Single): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;F)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: Int64): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;J)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtra(const AArg0: JString; const AArg1: Integer): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtra', '(Ljava/lang/String;I)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putExtras(const AArg0: JIntent): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtras', '(Landroid/content/Intent;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.putExtras(const AArg0: JBundle): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putExtras', '(Landroid/os/Bundle;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.putIntegerArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putIntegerArrayListExtra', '(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putParcelableArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putParcelableArrayListExtra', '(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.putStringArrayListExtra(const AArg0: JString; const AArg1: JArrayList): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('putStringArrayListExtra', '(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

procedure TJIntent.removeCategory(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeCategory', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJIntent.removeExtra(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeExtra', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJIntent.removeFlags(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeFlags', '(I)V', [AArg0]);
end;

function TJIntent.replaceExtras(const AArg0: JIntent): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('replaceExtras', '(Landroid/content/Intent;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.replaceExtras(const AArg0: JBundle): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('replaceExtras', '(Landroid/os/Bundle;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.resolveActivity(const AArg0: JPackageManager): JComponentName;
begin
  Result := CallObjectMethod<TJComponentName, JComponentName>('resolveActivity', '(Landroid/content/pm/PackageManager;)Landroid/content/ComponentName;', [AArg0]);
end;

function TJIntent.resolveActivityInfo(const AArg0: JPackageManager; const AArg1: Integer): JActivityInfo;
begin
  Result := CallObjectMethod<TJActivityInfo, JActivityInfo>('resolveActivityInfo', '(Landroid/content/pm/PackageManager;I)Landroid/content/pm/ActivityInfo;', [AArg0, AArg1]);
end;

function TJIntent.resolveType(const AArg0: JContext): JString;
begin
  Result := CallObjectMethod<TJString, JString>('resolveType', '(Landroid/content/Context;)Ljava/lang/String;', [AArg0]);
end;

function TJIntent.resolveType(const AArg0: JContentResolver): JString;
begin
  Result := CallObjectMethod<TJString, JString>('resolveType', '(Landroid/content/ContentResolver;)Ljava/lang/String;', [AArg0]);
end;

function TJIntent.resolveTypeIfNeeded(const AArg0: JContentResolver): JString;
begin
  Result := CallObjectMethod<TJString, JString>('resolveTypeIfNeeded', '(Landroid/content/ContentResolver;)Ljava/lang/String;', [AArg0]);
end;

function TJIntent.setAction(const AArg0: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setAction', '(Ljava/lang/String;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.setClass(const AArg0: JContext; const AArg1: JClass): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setClass', '(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.setClassName(const AArg0: JContext; const AArg1: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setClassName', '(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.setClassName(const AArg0: JString; const AArg1: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setClassName', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

procedure TJIntent.setClipData(const AArg0: JClipData);
begin
  JavaType.CallVoidMethod(ObjectID, 'setClipData', '(Landroid/content/ClipData;)V', [AArg0]);
end;

function TJIntent.setComponent(const AArg0: JComponentName): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setComponent', '(Landroid/content/ComponentName;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.setData(const AArg0: JUri): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setData', '(Landroid/net/Uri;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.setDataAndNormalize(const AArg0: JUri): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setDataAndNormalize', '(Landroid/net/Uri;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.setDataAndType(const AArg0: JUri; const AArg1: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setDataAndType', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.setDataAndTypeAndNormalize(const AArg0: JUri; const AArg1: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setDataAndTypeAndNormalize', '(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;', [AArg0, AArg1]);
end;

function TJIntent.setFlags(const AArg0: Integer): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setFlags', '(I)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.setPackage(const AArg0: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setPackage', '(Ljava/lang/String;)Landroid/content/Intent;', [AArg0]);
end;

procedure TJIntent.setSelector(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSelector', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJIntent.setSourceBounds(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSourceBounds', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJIntent.setType(const AArg0: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setType', '(Ljava/lang/String;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.setTypeAndNormalize(const AArg0: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('setTypeAndNormalize', '(Ljava/lang/String;)Landroid/content/Intent;', [AArg0]);
end;

function TJIntent.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

function TJIntent.toURI: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toURI', '()Ljava/lang/String;', []);
end;

function TJIntent.toUri(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('toUri', '(I)Ljava/lang/String;', [AArg0]);
end;

{ TJIntentFilter }

class procedure TJIntentFilter.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Ljava/lang/String;)V');
  AddMethod('<init>', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('<init>', '(Landroid/content/IntentFilter;)V');
end;

class procedure TJIntentFilter.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('actionsIterator', '()Ljava/util/Iterator;');
  AddMethod('addAction', '(Ljava/lang/String;)V');
  AddMethod('addCategory', '(Ljava/lang/String;)V');
  AddMethod('addDataAuthority', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('addDataPath', '(Ljava/lang/String;I)V');
  AddMethod('addDataScheme', '(Ljava/lang/String;)V');
  AddMethod('addDataSchemeSpecificPart', '(Ljava/lang/String;I)V');
  AddMethod('addDataType', '(Ljava/lang/String;)V');
  AddMethod('authoritiesIterator', '()Ljava/util/Iterator;');
  AddMethod('categoriesIterator', '()Ljava/util/Iterator;');
  AddMethod('countActions', '()I');
  AddMethod('countCategories', '()I');
  AddMethod('countDataAuthorities', '()I');
  AddMethod('countDataPaths', '()I');
  AddMethod('countDataSchemeSpecificParts', '()I');
  AddMethod('countDataSchemes', '()I');
  AddMethod('countDataTypes', '()I');
  AddStaticMethod('create', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/IntentFilter;');
  AddMethod('describeContents', '()I');
  AddMethod('getAction', '(I)Ljava/lang/String;');
  AddMethod('getCategory', '(I)Ljava/lang/String;');
  AddMethod('getDataAuthority', '(I)Landroid/content/IntentFilter$AuthorityEntry;');
  AddMethod('getDataPath', '(I)Landroid/os/PatternMatcher;');
  AddMethod('getDataScheme', '(I)Ljava/lang/String;');
  AddMethod('getDataSchemeSpecificPart', '(I)Landroid/os/PatternMatcher;');
  AddMethod('getDataType', '(I)Ljava/lang/String;');
  AddMethod('getPriority', '()I');
  AddMethod('hasAction', '(Ljava/lang/String;)Z');
  AddMethod('hasCategory', '(Ljava/lang/String;)Z');
  AddMethod('hasDataAuthority', '(Landroid/net/Uri;)Z');
  AddMethod('hasDataPath', '(Ljava/lang/String;)Z');
  AddMethod('hasDataScheme', '(Ljava/lang/String;)Z');
  AddMethod('hasDataSchemeSpecificPart', '(Ljava/lang/String;)Z');
  AddMethod('hasDataType', '(Ljava/lang/String;)Z');
  AddMethod('match', '(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/util/Set;Ljava/lang/String;)I');
  AddMethod('match', '(Landroid/content/ContentResolver;Landroid/content/Intent;ZLjava/lang/String;)I');
  AddMethod('matchAction', '(Ljava/lang/String;)Z');
  AddMethod('matchCategories', '(Ljava/util/Set;)Ljava/lang/String;');
  AddMethod('matchData', '(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)I');
  AddMethod('matchDataAuthority', '(Landroid/net/Uri;)I');
  AddMethod('pathsIterator', '()Ljava/util/Iterator;');
  AddMethod('schemeSpecificPartsIterator', '()Ljava/util/Iterator;');
  AddMethod('schemesIterator', '()Ljava/util/Iterator;');
  AddMethod('setPriority', '(I)V');
  AddMethod('typesIterator', '()Ljava/util/Iterator;');
end;

class procedure TJIntentFilter.LoadFields;
begin
  inherited;
  AddStaticField('MATCH_ADJUSTMENT_MASK', 'I');
  AddStaticField('MATCH_ADJUSTMENT_NORMAL', 'I');
  AddStaticField('MATCH_CATEGORY_EMPTY', 'I');
  AddStaticField('MATCH_CATEGORY_HOST', 'I');
  AddStaticField('MATCH_CATEGORY_MASK', 'I');
  AddStaticField('MATCH_CATEGORY_PATH', 'I');
  AddStaticField('MATCH_CATEGORY_PORT', 'I');
  AddStaticField('MATCH_CATEGORY_SCHEME', 'I');
  AddStaticField('MATCH_CATEGORY_SCHEME_SPECIFIC_PART', 'I');
  AddStaticField('MATCH_CATEGORY_TYPE', 'I');
  AddStaticField('NO_MATCH_ACTION', 'I');
  AddStaticField('NO_MATCH_CATEGORY', 'I');
  AddStaticField('NO_MATCH_DATA', 'I');
  AddStaticField('NO_MATCH_TYPE', 'I');
  AddStaticField('SYSTEM_HIGH_PRIORITY', 'I');
  AddStaticField('SYSTEM_LOW_PRIORITY', 'I');
end;

class function TJIntentFilter.Wrap(const AObjectID: JNIObject): JIntentFilter;
begin
  Result := Wrap<TJIntentFilter, JIntentFilter>(AObjectId);
end;

class function TJIntentFilter.Wrap(const AObject: IJNIObject): JIntentFilter;
begin
  Result := Wrap<TJIntentFilter, JIntentFilter>(AObject);
end;

class function TJIntentFilter.Create: JIntentFilter;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJIntentFilter.Create(const AArg0: JString): JIntentFilter;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

class function TJIntentFilter.Create_(const AArg0: JString; const AArg1: JString): JIntentFilter;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJIntentFilter.Create(const AArg0: JIntentFilter): JIntentFilter;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/IntentFilter;)V', [AArg0]);
  Result := O;
end;

class function TJIntentFilter.MATCH_ADJUSTMENT_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_ADJUSTMENT_MASK');
end;

class function TJIntentFilter.MATCH_ADJUSTMENT_NORMAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_ADJUSTMENT_NORMAL');
end;

class function TJIntentFilter.MATCH_CATEGORY_EMPTY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_CATEGORY_EMPTY');
end;

class function TJIntentFilter.MATCH_CATEGORY_HOST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_CATEGORY_HOST');
end;

class function TJIntentFilter.MATCH_CATEGORY_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_CATEGORY_MASK');
end;

class function TJIntentFilter.MATCH_CATEGORY_PATH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_CATEGORY_PATH');
end;

class function TJIntentFilter.MATCH_CATEGORY_PORT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_CATEGORY_PORT');
end;

class function TJIntentFilter.MATCH_CATEGORY_SCHEME: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_CATEGORY_SCHEME');
end;

class function TJIntentFilter.MATCH_CATEGORY_SCHEME_SPECIFIC_PART: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_CATEGORY_SCHEME_SPECIFIC_PART');
end;

class function TJIntentFilter.MATCH_CATEGORY_TYPE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_CATEGORY_TYPE');
end;

class function TJIntentFilter.NO_MATCH_ACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NO_MATCH_ACTION');
end;

class function TJIntentFilter.NO_MATCH_CATEGORY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NO_MATCH_CATEGORY');
end;

class function TJIntentFilter.NO_MATCH_DATA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NO_MATCH_DATA');
end;

class function TJIntentFilter.NO_MATCH_TYPE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NO_MATCH_TYPE');
end;

class function TJIntentFilter.SYSTEM_HIGH_PRIORITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_HIGH_PRIORITY');
end;

class function TJIntentFilter.SYSTEM_LOW_PRIORITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_LOW_PRIORITY');
end;

function TJIntentFilter.actionsIterator: JIterator;
begin
  Result := CallObjectMethod<TJIterator, JIterator>('actionsIterator', '()Ljava/util/Iterator;', []);
end;

procedure TJIntentFilter.addAction(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'addAction', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJIntentFilter.addCategory(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'addCategory', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJIntentFilter.addDataAuthority(const AArg0: JString; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'addDataAuthority', '(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJIntentFilter.addDataPath(const AArg0: JString; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addDataPath', '(Ljava/lang/String;I)V', [AArg0, AArg1]);
end;

procedure TJIntentFilter.addDataScheme(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'addDataScheme', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJIntentFilter.addDataSchemeSpecificPart(const AArg0: JString; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addDataSchemeSpecificPart', '(Ljava/lang/String;I)V', [AArg0, AArg1]);
end;

procedure TJIntentFilter.addDataType(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'addDataType', '(Ljava/lang/String;)V', [AArg0]);
end;

function TJIntentFilter.authoritiesIterator: JIterator;
begin
  Result := CallObjectMethod<TJIterator, JIterator>('authoritiesIterator', '()Ljava/util/Iterator;', []);
end;

function TJIntentFilter.categoriesIterator: JIterator;
begin
  Result := CallObjectMethod<TJIterator, JIterator>('categoriesIterator', '()Ljava/util/Iterator;', []);
end;

function TJIntentFilter.countActions: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'countActions', '()I', []);
end;

function TJIntentFilter.countCategories: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'countCategories', '()I', []);
end;

function TJIntentFilter.countDataAuthorities: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'countDataAuthorities', '()I', []);
end;

function TJIntentFilter.countDataPaths: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'countDataPaths', '()I', []);
end;

function TJIntentFilter.countDataSchemeSpecificParts: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'countDataSchemeSpecificParts', '()I', []);
end;

function TJIntentFilter.countDataSchemes: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'countDataSchemes', '()I', []);
end;

function TJIntentFilter.countDataTypes: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'countDataTypes', '()I', []);
end;

class function TJIntentFilter.create(const AArg0: JString; const AArg1: JString): JIntentFilter;
begin
  Result := CallStaticObjectMethod<TJIntentFilter, JIntentFilter>('create', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/IntentFilter;', [AArg0, AArg1]);
end;

function TJIntentFilter.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJIntentFilter.getAction(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getAction', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJIntentFilter.getCategory(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getCategory', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJIntentFilter.getDataAuthority(const AArg0: Integer): JIntentFilter_AuthorityEntry;
begin
  Result := CallObjectMethod<TJIntentFilter_AuthorityEntry, JIntentFilter_AuthorityEntry>('getDataAuthority', '(I)Landroid/content/IntentFilter$AuthorityEntry;', [AArg0]);
end;

function TJIntentFilter.getDataPath(const AArg0: Integer): JPatternMatcher;
begin
  Result := CallObjectMethod<TJPatternMatcher, JPatternMatcher>('getDataPath', '(I)Landroid/os/PatternMatcher;', [AArg0]);
end;

function TJIntentFilter.getDataScheme(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getDataScheme', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJIntentFilter.getDataSchemeSpecificPart(const AArg0: Integer): JPatternMatcher;
begin
  Result := CallObjectMethod<TJPatternMatcher, JPatternMatcher>('getDataSchemeSpecificPart', '(I)Landroid/os/PatternMatcher;', [AArg0]);
end;

function TJIntentFilter.getDataType(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getDataType', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJIntentFilter.getPriority: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPriority', '()I', []);
end;

function TJIntentFilter.hasAction(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasAction', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJIntentFilter.hasCategory(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasCategory', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJIntentFilter.hasDataAuthority(const AArg0: JUri): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasDataAuthority', '(Landroid/net/Uri;)Z', [AArg0]);
end;

function TJIntentFilter.hasDataPath(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasDataPath', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJIntentFilter.hasDataScheme(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasDataScheme', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJIntentFilter.hasDataSchemeSpecificPart(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasDataSchemeSpecificPart', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJIntentFilter.hasDataType(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasDataType', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJIntentFilter.match(const AArg0: JString; const AArg1: JString; const AArg2: JString; const AArg3: JUri; const AArg4: JSet; const AArg5: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'match', '(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;Ljava/util/Set;Ljava/lang/String;)I', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJIntentFilter.match(const AArg0: JContentResolver; const AArg1: JIntent; const AArg2: Boolean; const AArg3: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'match', '(Landroid/content/ContentResolver;Landroid/content/Intent;ZLjava/lang/String;)I', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJIntentFilter.matchAction(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'matchAction', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJIntentFilter.matchCategories(const AArg0: JSet): JString;
begin
  Result := CallObjectMethod<TJString, JString>('matchCategories', '(Ljava/util/Set;)Ljava/lang/String;', [AArg0]);
end;

function TJIntentFilter.matchData(const AArg0: JString; const AArg1: JString; const AArg2: JUri): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'matchData', '(Ljava/lang/String;Ljava/lang/String;Landroid/net/Uri;)I', [AArg0, AArg1, AArg2]);
end;

function TJIntentFilter.matchDataAuthority(const AArg0: JUri): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'matchDataAuthority', '(Landroid/net/Uri;)I', [AArg0]);
end;

function TJIntentFilter.pathsIterator: JIterator;
begin
  Result := CallObjectMethod<TJIterator, JIterator>('pathsIterator', '()Ljava/util/Iterator;', []);
end;

function TJIntentFilter.schemeSpecificPartsIterator: JIterator;
begin
  Result := CallObjectMethod<TJIterator, JIterator>('schemeSpecificPartsIterator', '()Ljava/util/Iterator;', []);
end;

function TJIntentFilter.schemesIterator: JIterator;
begin
  Result := CallObjectMethod<TJIterator, JIterator>('schemesIterator', '()Ljava/util/Iterator;', []);
end;

procedure TJIntentFilter.setPriority(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPriority', '(I)V', [AArg0]);
end;

function TJIntentFilter.typesIterator: JIterator;
begin
  Result := CallObjectMethod<TJIterator, JIterator>('typesIterator', '()Ljava/util/Iterator;', []);
end;

{ TJIntentFilter_AuthorityEntry }

class procedure TJIntentFilter_AuthorityEntry.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/String;Ljava/lang/String;)V');
end;

class procedure TJIntentFilter_AuthorityEntry.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('getHost', '()Ljava/lang/String;');
  AddMethod('getPort', '()I');
  AddMethod('match', '(Landroid/net/Uri;)I');
end;

class function TJIntentFilter_AuthorityEntry.Wrap(const AObjectID: JNIObject): JIntentFilter_AuthorityEntry;
begin
  Result := Wrap<TJIntentFilter_AuthorityEntry, JIntentFilter_AuthorityEntry>(AObjectId);
end;

class function TJIntentFilter_AuthorityEntry.Wrap(const AObject: IJNIObject): JIntentFilter_AuthorityEntry;
begin
  Result := Wrap<TJIntentFilter_AuthorityEntry, JIntentFilter_AuthorityEntry>(AObject);
end;

class function TJIntentFilter_AuthorityEntry.Create(const AArg0: JString; const AArg1: JString): JIntentFilter_AuthorityEntry;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
  Result := O;
end;

function TJIntentFilter_AuthorityEntry.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJIntentFilter_AuthorityEntry.getHost: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getHost', '()Ljava/lang/String;', []);
end;

function TJIntentFilter_AuthorityEntry.getPort: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPort', '()I', []);
end;

function TJIntentFilter_AuthorityEntry.match(const AArg0: JUri): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'match', '(Landroid/net/Uri;)I', [AArg0]);
end;

{ TJIntentSender }

class procedure TJIntentSender.LoadConstructors;
begin
end;

class procedure TJIntentSender.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('getCreatorPackage', '()Ljava/lang/String;');
  AddMethod('getCreatorUid', '()I');
  AddMethod('getCreatorUserHandle', '()Landroid/os/UserHandle;');
  AddMethod('getTargetPackage', '()Ljava/lang/String;');
  AddMethod('hashCode', '()I');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJIntentSender.Wrap(const AObjectID: JNIObject): JIntentSender;
begin
  Result := Wrap<TJIntentSender, JIntentSender>(AObjectId);
end;

class function TJIntentSender.Wrap(const AObject: IJNIObject): JIntentSender;
begin
  Result := Wrap<TJIntentSender, JIntentSender>(AObject);
end;

function TJIntentSender.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJIntentSender.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJIntentSender.getCreatorPackage: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getCreatorPackage', '()Ljava/lang/String;', []);
end;

function TJIntentSender.getCreatorUid: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getCreatorUid', '()I', []);
end;

function TJIntentSender.getCreatorUserHandle: JUserHandle;
begin
  Result := CallObjectMethod<TJUserHandle, JUserHandle>('getCreatorUserHandle', '()Landroid/os/UserHandle;', []);
end;

function TJIntentSender.getTargetPackage: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getTargetPackage', '()Ljava/lang/String;', []);
end;

function TJIntentSender.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJIntentSender.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJSharedPreferences }

class procedure TJSharedPreferences.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('contains', '(Ljava/lang/String;)Z');
  AddMethod('edit', '()Landroid/content/SharedPreferences$Editor;');
  AddMethod('getAll', '()Ljava/util/Map;');
  AddMethod('getBoolean', '(Ljava/lang/String;Z)Z');
  AddMethod('getFloat', '(Ljava/lang/String;F)F');
  AddMethod('getInt', '(Ljava/lang/String;I)I');
  AddMethod('getLong', '(Ljava/lang/String;J)J');
  AddMethod('getString', '(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;');
  AddMethod('getStringSet', '(Ljava/lang/String;Ljava/util/Set;)Ljava/util/Set;');
  AddMethod('registerOnSharedPreferenceChangeListener', '(Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;)V');
  AddMethod('unregisterOnSharedPreferenceChangeListener', '(Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;)V');
end;

class function TJSharedPreferences.Wrap(const AObjectID: JNIObject): JSharedPreferences;
begin
  Result := Wrap<TJSharedPreferences, JSharedPreferences>(AObjectId);
end;

class function TJSharedPreferences.Wrap(const AObject: IJNIObject): JSharedPreferences;
begin
  Result := Wrap<TJSharedPreferences, JSharedPreferences>(AObject);
end;

function TJSharedPreferences.contains(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'contains', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJSharedPreferences.edit: JSharedPreferences_Editor;
begin
  Result := CallObjectMethod<TJSharedPreferences_Editor, JSharedPreferences_Editor>('edit', '()Landroid/content/SharedPreferences$Editor;', []);
end;

function TJSharedPreferences.getAll: JMap;
begin
  Result := CallObjectMethod<TJMap, JMap>('getAll', '()Ljava/util/Map;', []);
end;

function TJSharedPreferences.getBoolean(const AArg0: JString; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getBoolean', '(Ljava/lang/String;Z)Z', [AArg0, AArg1]);
end;

function TJSharedPreferences.getFloat(const AArg0: JString; const AArg1: Single): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFloat', '(Ljava/lang/String;F)F', [AArg0, AArg1]);
end;

function TJSharedPreferences.getInt(const AArg0: JString; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getInt', '(Ljava/lang/String;I)I', [AArg0, AArg1]);
end;

function TJSharedPreferences.getLong(const AArg0: JString; const AArg1: Int64): Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getLong', '(Ljava/lang/String;J)J', [AArg0, AArg1]);
end;

function TJSharedPreferences.getString(const AArg0: JString; const AArg1: JString): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;', [AArg0, AArg1]);
end;

function TJSharedPreferences.getStringSet(const AArg0: JString; const AArg1: JSet): JSet;
begin
  Result := CallObjectMethod<TJSet, JSet>('getStringSet', '(Ljava/lang/String;Ljava/util/Set;)Ljava/util/Set;', [AArg0, AArg1]);
end;

procedure TJSharedPreferences.registerOnSharedPreferenceChangeListener(const AArg0: JSharedPreferences_OnSharedPreferenceChangeListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerOnSharedPreferenceChangeListener', '(Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;)V', [AArg0]);
end;

procedure TJSharedPreferences.unregisterOnSharedPreferenceChangeListener(const AArg0: JSharedPreferences_OnSharedPreferenceChangeListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterOnSharedPreferenceChangeListener', '(Landroid/content/SharedPreferences$OnSharedPreferenceChangeListener;)V', [AArg0]);
end;

{ TJSharedPreferences_Editor }

class procedure TJSharedPreferences_Editor.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('apply', '()V');
  AddMethod('clear', '()Landroid/content/SharedPreferences$Editor;');
  AddMethod('commit', '()Z');
  AddMethod('putBoolean', '(Ljava/lang/String;Z)Landroid/content/SharedPreferences$Editor;');
  AddMethod('putFloat', '(Ljava/lang/String;F)Landroid/content/SharedPreferences$Editor;');
  AddMethod('putInt', '(Ljava/lang/String;I)Landroid/content/SharedPreferences$Editor;');
  AddMethod('putLong', '(Ljava/lang/String;J)Landroid/content/SharedPreferences$Editor;');
  AddMethod('putString', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;');
  AddMethod('putStringSet', '(Ljava/lang/String;Ljava/util/Set;)Landroid/content/SharedPreferences$Editor;');
  AddMethod('remove', '(Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;');
end;

class function TJSharedPreferences_Editor.Wrap(const AObjectID: JNIObject): JSharedPreferences_Editor;
begin
  Result := Wrap<TJSharedPreferences_Editor, JSharedPreferences_Editor>(AObjectId);
end;

class function TJSharedPreferences_Editor.Wrap(const AObject: IJNIObject): JSharedPreferences_Editor;
begin
  Result := Wrap<TJSharedPreferences_Editor, JSharedPreferences_Editor>(AObject);
end;

procedure TJSharedPreferences_Editor.apply;
begin
  JavaType.CallVoidMethod(ObjectID, 'apply', '()V', []);
end;

function TJSharedPreferences_Editor.clear: JSharedPreferences_Editor;
begin
  Result := CallObjectMethod<TJSharedPreferences_Editor, JSharedPreferences_Editor>('clear', '()Landroid/content/SharedPreferences$Editor;', []);
end;

function TJSharedPreferences_Editor.commit: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'commit', '()Z', []);
end;

function TJSharedPreferences_Editor.putBoolean(const AArg0: JString; const AArg1: Boolean): JSharedPreferences_Editor;
begin
  Result := CallObjectMethod<TJSharedPreferences_Editor, JSharedPreferences_Editor>('putBoolean', '(Ljava/lang/String;Z)Landroid/content/SharedPreferences$Editor;', [AArg0, AArg1]);
end;

function TJSharedPreferences_Editor.putFloat(const AArg0: JString; const AArg1: Single): JSharedPreferences_Editor;
begin
  Result := CallObjectMethod<TJSharedPreferences_Editor, JSharedPreferences_Editor>('putFloat', '(Ljava/lang/String;F)Landroid/content/SharedPreferences$Editor;', [AArg0, AArg1]);
end;

function TJSharedPreferences_Editor.putInt(const AArg0: JString; const AArg1: Integer): JSharedPreferences_Editor;
begin
  Result := CallObjectMethod<TJSharedPreferences_Editor, JSharedPreferences_Editor>('putInt', '(Ljava/lang/String;I)Landroid/content/SharedPreferences$Editor;', [AArg0, AArg1]);
end;

function TJSharedPreferences_Editor.putLong(const AArg0: JString; const AArg1: Int64): JSharedPreferences_Editor;
begin
  Result := CallObjectMethod<TJSharedPreferences_Editor, JSharedPreferences_Editor>('putLong', '(Ljava/lang/String;J)Landroid/content/SharedPreferences$Editor;', [AArg0, AArg1]);
end;

function TJSharedPreferences_Editor.putString(const AArg0: JString; const AArg1: JString): JSharedPreferences_Editor;
begin
  Result := CallObjectMethod<TJSharedPreferences_Editor, JSharedPreferences_Editor>('putString', '(Ljava/lang/String;Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;', [AArg0, AArg1]);
end;

function TJSharedPreferences_Editor.putStringSet(const AArg0: JString; const AArg1: JSet): JSharedPreferences_Editor;
begin
  Result := CallObjectMethod<TJSharedPreferences_Editor, JSharedPreferences_Editor>('putStringSet', '(Ljava/lang/String;Ljava/util/Set;)Landroid/content/SharedPreferences$Editor;', [AArg0, AArg1]);
end;

function TJSharedPreferences_Editor.remove(const AArg0: JString): JSharedPreferences_Editor;
begin
  Result := CallObjectMethod<TJSharedPreferences_Editor, JSharedPreferences_Editor>('remove', '(Ljava/lang/String;)Landroid/content/SharedPreferences$Editor;', [AArg0]);
end;

{ TJSharedPreferences_OnSharedPreferenceChangeListener }

class procedure TJSharedPreferences_OnSharedPreferenceChangeListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onSharedPreferenceChanged', '(Landroid/content/SharedPreferences;Ljava/lang/String;)V');
end;

class function TJSharedPreferences_OnSharedPreferenceChangeListener.Wrap(const AObjectID: JNIObject): JSharedPreferences_OnSharedPreferenceChangeListener;
begin
  Result := Wrap<TJSharedPreferences_OnSharedPreferenceChangeListener, JSharedPreferences_OnSharedPreferenceChangeListener>(AObjectId);
end;

class function TJSharedPreferences_OnSharedPreferenceChangeListener.Wrap(const AObject: IJNIObject): JSharedPreferences_OnSharedPreferenceChangeListener;
begin
  Result := Wrap<TJSharedPreferences_OnSharedPreferenceChangeListener, JSharedPreferences_OnSharedPreferenceChangeListener>(AObject);
end;

procedure TJSharedPreferences_OnSharedPreferenceChangeListener.onSharedPreferenceChanged(const AArg0: JSharedPreferences; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'onSharedPreferenceChanged', '(Landroid/content/SharedPreferences;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

{ TJPackageInfo }

class procedure TJPackageInfo.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJPackageInfo.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('getLongVersionCode', '()J');
  AddMethod('setLongVersionCode', '(J)V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJPackageInfo.LoadFields;
begin
  inherited;
  AddStaticField('INSTALL_LOCATION_AUTO', 'I');
  AddStaticField('INSTALL_LOCATION_INTERNAL_ONLY', 'I');
  AddStaticField('INSTALL_LOCATION_PREFER_EXTERNAL', 'I');
  AddStaticField('REQUESTED_PERMISSION_GRANTED', 'I');
  AddField('activities', '[Landroid/content/pm/ActivityInfo;');
  AddField('applicationInfo', 'Landroid/content/pm/ApplicationInfo;');
  AddField('baseRevisionCode', 'I');
  AddField('firstInstallTime', 'J');
  AddField('gids', '[I');
  AddField('installLocation', 'I');
  AddField('lastUpdateTime', 'J');
  AddField('packageName', 'Ljava/lang/String;');
  AddField('receivers', '[Landroid/content/pm/ActivityInfo;');
  AddField('requestedPermissions', '[Ljava/lang/String;');
  AddField('requestedPermissionsFlags', '[I');
  AddField('sharedUserId', 'Ljava/lang/String;');
  AddField('sharedUserLabel', 'I');
  AddField('splitNames', '[Ljava/lang/String;');
  AddField('splitRevisionCodes', '[I');
  AddField('versionCode', 'I');
  AddField('versionName', 'Ljava/lang/String;');
end;

class function TJPackageInfo.Wrap(const AObjectID: JNIObject): JPackageInfo;
begin
  Result := Wrap<TJPackageInfo, JPackageInfo>(AObjectId);
end;

class function TJPackageInfo.Wrap(const AObject: IJNIObject): JPackageInfo;
begin
  Result := Wrap<TJPackageInfo, JPackageInfo>(AObject);
end;

class function TJPackageInfo.Create: JPackageInfo;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJPackageInfo.INSTALL_LOCATION_AUTO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INSTALL_LOCATION_AUTO');
end;

class function TJPackageInfo.INSTALL_LOCATION_INTERNAL_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INSTALL_LOCATION_INTERNAL_ONLY');
end;

class function TJPackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INSTALL_LOCATION_PREFER_EXTERNAL');
end;

class function TJPackageInfo.REQUESTED_PERMISSION_GRANTED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('REQUESTED_PERMISSION_GRANTED');
end;

function TJPackageInfo._GetActivities: IJavaArray<JActivityInfo>;
begin
  Result := GetArrayField<JActivityInfo>('activities');
end;

procedure TJPackageInfo._SetActivities(const AValue: IJavaArray<JActivityInfo>);
begin
  JavaType.SetObjectField(ObjectId, 'activities', AValue.ObjectId);
end;

function TJPackageInfo._GetApplicationInfo: JApplicationInfo;
begin
  Result := GetObjectField<TJApplicationInfo, JApplicationInfo>('applicationInfo');
end;

procedure TJPackageInfo._SetApplicationInfo(const AValue: JApplicationInfo);
begin
  JavaType.SetObjectField(ObjectId, 'applicationInfo', AValue);
end;

function TJPackageInfo._GetBaseRevisionCode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'baseRevisionCode');
end;

procedure TJPackageInfo._SetBaseRevisionCode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'baseRevisionCode', AValue);
end;

function TJPackageInfo._GetFirstInstallTime: Int64;
begin
  Result := JavaType.GetLongField(ObjectId, 'firstInstallTime');
end;

procedure TJPackageInfo._SetFirstInstallTime(const AValue: Int64);
begin
  JavaType.SetLongField(ObjectId, 'firstInstallTime', AValue);
end;

function TJPackageInfo._GetGids: IJavaArray<Integer>;
begin
  Result := GetArrayField<Integer>('gids');
end;

procedure TJPackageInfo._SetGids(const AValue: IJavaArray<Integer>);
begin
  JavaType.SetObjectField(ObjectId, 'gids', AValue.ObjectId);
end;

function TJPackageInfo._GetInstallLocation: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'installLocation');
end;

procedure TJPackageInfo._SetInstallLocation(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'installLocation', AValue);
end;

function TJPackageInfo._GetLastUpdateTime: Int64;
begin
  Result := JavaType.GetLongField(ObjectId, 'lastUpdateTime');
end;

procedure TJPackageInfo._SetLastUpdateTime(const AValue: Int64);
begin
  JavaType.SetLongField(ObjectId, 'lastUpdateTime', AValue);
end;

function TJPackageInfo._GetPackageName: JString;
begin
  Result := GetObjectField<TJString, JString>('packageName');
end;

procedure TJPackageInfo._SetPackageName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'packageName', AValue);
end;

function TJPackageInfo._GetReceivers: IJavaArray<JActivityInfo>;
begin
  Result := GetArrayField<JActivityInfo>('receivers');
end;

procedure TJPackageInfo._SetReceivers(const AValue: IJavaArray<JActivityInfo>);
begin
  JavaType.SetObjectField(ObjectId, 'receivers', AValue.ObjectId);
end;

function TJPackageInfo._GetRequestedPermissions: IJavaArray<JString>;
begin
  Result := GetArrayField<JString>('requestedPermissions');
end;

procedure TJPackageInfo._SetRequestedPermissions(const AValue: IJavaArray<JString>);
begin
  JavaType.SetObjectField(ObjectId, 'requestedPermissions', AValue.ObjectId);
end;

function TJPackageInfo._GetRequestedPermissionsFlags: IJavaArray<Integer>;
begin
  Result := GetArrayField<Integer>('requestedPermissionsFlags');
end;

procedure TJPackageInfo._SetRequestedPermissionsFlags(const AValue: IJavaArray<Integer>);
begin
  JavaType.SetObjectField(ObjectId, 'requestedPermissionsFlags', AValue.ObjectId);
end;

function TJPackageInfo._GetSharedUserId: JString;
begin
  Result := GetObjectField<TJString, JString>('sharedUserId');
end;

procedure TJPackageInfo._SetSharedUserId(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'sharedUserId', AValue);
end;

function TJPackageInfo._GetSharedUserLabel: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'sharedUserLabel');
end;

procedure TJPackageInfo._SetSharedUserLabel(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'sharedUserLabel', AValue);
end;

function TJPackageInfo._GetSplitNames: IJavaArray<JString>;
begin
  Result := GetArrayField<JString>('splitNames');
end;

procedure TJPackageInfo._SetSplitNames(const AValue: IJavaArray<JString>);
begin
  JavaType.SetObjectField(ObjectId, 'splitNames', AValue.ObjectId);
end;

function TJPackageInfo._GetSplitRevisionCodes: IJavaArray<Integer>;
begin
  Result := GetArrayField<Integer>('splitRevisionCodes');
end;

procedure TJPackageInfo._SetSplitRevisionCodes(const AValue: IJavaArray<Integer>);
begin
  JavaType.SetObjectField(ObjectId, 'splitRevisionCodes', AValue.ObjectId);
end;

function TJPackageInfo._GetVersionCode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'versionCode');
end;

procedure TJPackageInfo._SetVersionCode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'versionCode', AValue);
end;

function TJPackageInfo._GetVersionName: JString;
begin
  Result := GetObjectField<TJString, JString>('versionName');
end;

procedure TJPackageInfo._SetVersionName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'versionName', AValue);
end;

function TJPackageInfo.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJPackageInfo.getLongVersionCode: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getLongVersionCode', '()J', []);
end;

procedure TJPackageInfo.setLongVersionCode(const AArg0: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLongVersionCode', '(J)V', [AArg0]);
end;

function TJPackageInfo.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJPackageItemInfo }

class procedure TJPackageItemInfo.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/content/pm/PackageItemInfo;)V');
end;

class procedure TJPackageItemInfo.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('loadBanner', '(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;');
  AddMethod('loadIcon', '(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;');
  AddMethod('loadLabel', '(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;');
  AddMethod('loadLogo', '(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;');
  AddMethod('loadUnbadgedIcon', '(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;');
end;

class procedure TJPackageItemInfo.LoadFields;
begin
  inherited;
  AddField('banner', 'I');
  AddField('icon', 'I');
  AddField('labelRes', 'I');
  AddField('logo', 'I');
  AddField('metaData', 'Landroid/os/Bundle;');
  AddField('name', 'Ljava/lang/String;');
  AddField('nonLocalizedLabel', 'Ljava/lang/CharSequence;');
  AddField('packageName', 'Ljava/lang/String;');
end;

class function TJPackageItemInfo.Wrap(const AObjectID: JNIObject): JPackageItemInfo;
begin
  Result := Wrap<TJPackageItemInfo, JPackageItemInfo>(AObjectId);
end;

class function TJPackageItemInfo.Wrap(const AObject: IJNIObject): JPackageItemInfo;
begin
  Result := Wrap<TJPackageItemInfo, JPackageItemInfo>(AObject);
end;

class function TJPackageItemInfo.Create: JPackageItemInfo;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJPackageItemInfo.Create(const AArg0: JPackageItemInfo): JPackageItemInfo;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/pm/PackageItemInfo;)V', [AArg0]);
  Result := O;
end;

function TJPackageItemInfo._GetBanner: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'banner');
end;

procedure TJPackageItemInfo._SetBanner(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'banner', AValue);
end;

function TJPackageItemInfo._GetIcon: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'icon');
end;

procedure TJPackageItemInfo._SetIcon(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'icon', AValue);
end;

function TJPackageItemInfo._GetLabelRes: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'labelRes');
end;

procedure TJPackageItemInfo._SetLabelRes(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'labelRes', AValue);
end;

function TJPackageItemInfo._GetLogo: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'logo');
end;

procedure TJPackageItemInfo._SetLogo(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'logo', AValue);
end;

function TJPackageItemInfo._GetMetaData: JBundle;
begin
  Result := GetObjectField<TJBundle, JBundle>('metaData');
end;

procedure TJPackageItemInfo._SetMetaData(const AValue: JBundle);
begin
  JavaType.SetObjectField(ObjectId, 'metaData', AValue);
end;

function TJPackageItemInfo._GetName: JString;
begin
  Result := GetObjectField<TJString, JString>('name');
end;

procedure TJPackageItemInfo._SetName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'name', AValue);
end;

function TJPackageItemInfo._GetNonLocalizedLabel: JCharSequence;
begin
  Result := GetObjectField<TJCharSequence, JCharSequence>('nonLocalizedLabel');
end;

procedure TJPackageItemInfo._SetNonLocalizedLabel(const AValue: JCharSequence);
begin
  JavaType.SetObjectField(ObjectId, 'nonLocalizedLabel', AValue);
end;

function TJPackageItemInfo._GetPackageName: JString;
begin
  Result := GetObjectField<TJString, JString>('packageName');
end;

procedure TJPackageItemInfo._SetPackageName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'packageName', AValue);
end;

function TJPackageItemInfo.loadBanner(const AArg0: JPackageManager): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('loadBanner', '(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageItemInfo.loadIcon(const AArg0: JPackageManager): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('loadIcon', '(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageItemInfo.loadLabel(const AArg0: JPackageManager): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('loadLabel', '(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJPackageItemInfo.loadLogo(const AArg0: JPackageManager): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('loadLogo', '(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageItemInfo.loadUnbadgedIcon(const AArg0: JPackageManager): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('loadUnbadgedIcon', '(Landroid/content/pm/PackageManager;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

{ TJApplicationInfo }

class procedure TJApplicationInfo.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/content/pm/ApplicationInfo;)V');
end;

class procedure TJApplicationInfo.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddStaticMethod('getCategoryTitle', '(Landroid/content/Context;I)Ljava/lang/CharSequence;');
  AddMethod('isVirtualPreload', '()Z');
  AddMethod('loadDescription', '(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJApplicationInfo.LoadFields;
begin
  inherited;
  AddStaticField('CATEGORY_AUDIO', 'I');
  AddStaticField('CATEGORY_GAME', 'I');
  AddStaticField('CATEGORY_IMAGE', 'I');
  AddStaticField('CATEGORY_MAPS', 'I');
  AddStaticField('CATEGORY_NEWS', 'I');
  AddStaticField('CATEGORY_PRODUCTIVITY', 'I');
  AddStaticField('CATEGORY_SOCIAL', 'I');
  AddStaticField('CATEGORY_UNDEFINED', 'I');
  AddStaticField('CATEGORY_VIDEO', 'I');
  AddStaticField('FLAG_ALLOW_BACKUP', 'I');
  AddStaticField('FLAG_ALLOW_CLEAR_USER_DATA', 'I');
  AddStaticField('FLAG_ALLOW_TASK_REPARENTING', 'I');
  AddStaticField('FLAG_DEBUGGABLE', 'I');
  AddStaticField('FLAG_EXTERNAL_STORAGE', 'I');
  AddStaticField('FLAG_EXTRACT_NATIVE_LIBS', 'I');
  AddStaticField('FLAG_FACTORY_TEST', 'I');
  AddStaticField('FLAG_FULL_BACKUP_ONLY', 'I');
  AddStaticField('FLAG_HARDWARE_ACCELERATED', 'I');
  AddStaticField('FLAG_HAS_CODE', 'I');
  AddStaticField('FLAG_INSTALLED', 'I');
  AddStaticField('FLAG_IS_DATA_ONLY', 'I');
  AddStaticField('FLAG_IS_GAME', 'I');
  AddStaticField('FLAG_KILL_AFTER_RESTORE', 'I');
  AddStaticField('FLAG_LARGE_HEAP', 'I');
  AddStaticField('FLAG_MULTIARCH', 'I');
  AddStaticField('FLAG_PERSISTENT', 'I');
  AddStaticField('FLAG_RESIZEABLE_FOR_SCREENS', 'I');
  AddStaticField('FLAG_RESTORE_ANY_VERSION', 'I');
  AddStaticField('FLAG_STOPPED', 'I');
  AddStaticField('FLAG_SUPPORTS_LARGE_SCREENS', 'I');
  AddStaticField('FLAG_SUPPORTS_NORMAL_SCREENS', 'I');
  AddStaticField('FLAG_SUPPORTS_RTL', 'I');
  AddStaticField('FLAG_SUPPORTS_SCREEN_DENSITIES', 'I');
  AddStaticField('FLAG_SUPPORTS_SMALL_SCREENS', 'I');
  AddStaticField('FLAG_SUPPORTS_XLARGE_SCREENS', 'I');
  AddStaticField('FLAG_SUSPENDED', 'I');
  AddStaticField('FLAG_SYSTEM', 'I');
  AddStaticField('FLAG_TEST_ONLY', 'I');
  AddStaticField('FLAG_UPDATED_SYSTEM_APP', 'I');
  AddStaticField('FLAG_USES_CLEARTEXT_TRAFFIC', 'I');
  AddStaticField('FLAG_VM_SAFE_MODE', 'I');
  AddField('appComponentFactory', 'Ljava/lang/String;');
  AddField('backupAgentName', 'Ljava/lang/String;');
  AddField('category', 'I');
  AddField('className', 'Ljava/lang/String;');
  AddField('compatibleWidthLimitDp', 'I');
  AddField('dataDir', 'Ljava/lang/String;');
  AddField('descriptionRes', 'I');
  AddField('deviceProtectedDataDir', 'Ljava/lang/String;');
  AddField('enabled', 'Z');
  AddField('flags', 'I');
  AddField('largestWidthLimitDp', 'I');
  AddField('manageSpaceActivityName', 'Ljava/lang/String;');
  AddField('minSdkVersion', 'I');
  AddField('nativeLibraryDir', 'Ljava/lang/String;');
  AddField('permission', 'Ljava/lang/String;');
  AddField('processName', 'Ljava/lang/String;');
  AddField('publicSourceDir', 'Ljava/lang/String;');
  AddField('requiresSmallestWidthDp', 'I');
  AddField('sharedLibraryFiles', '[Ljava/lang/String;');
  AddField('sourceDir', 'Ljava/lang/String;');
  AddField('splitNames', '[Ljava/lang/String;');
  AddField('splitPublicSourceDirs', '[Ljava/lang/String;');
  AddField('splitSourceDirs', '[Ljava/lang/String;');
  AddField('targetSdkVersion', 'I');
  AddField('taskAffinity', 'Ljava/lang/String;');
  AddField('theme', 'I');
  AddField('uiOptions', 'I');
  AddField('uid', 'I');
end;

class function TJApplicationInfo.Wrap(const AObjectID: JNIObject): JApplicationInfo;
begin
  Result := Wrap<TJApplicationInfo, JApplicationInfo>(AObjectId);
end;

class function TJApplicationInfo.Wrap(const AObject: IJNIObject): JApplicationInfo;
begin
  Result := Wrap<TJApplicationInfo, JApplicationInfo>(AObject);
end;

class function TJApplicationInfo.Create: JApplicationInfo;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJApplicationInfo.Create(const AArg0: JApplicationInfo): JApplicationInfo;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/pm/ApplicationInfo;)V', [AArg0]);
  Result := O;
end;

class function TJApplicationInfo.CATEGORY_AUDIO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_AUDIO');
end;

class function TJApplicationInfo.CATEGORY_GAME: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_GAME');
end;

class function TJApplicationInfo.CATEGORY_IMAGE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_IMAGE');
end;

class function TJApplicationInfo.CATEGORY_MAPS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_MAPS');
end;

class function TJApplicationInfo.CATEGORY_NEWS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_NEWS');
end;

class function TJApplicationInfo.CATEGORY_PRODUCTIVITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_PRODUCTIVITY');
end;

class function TJApplicationInfo.CATEGORY_SOCIAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_SOCIAL');
end;

class function TJApplicationInfo.CATEGORY_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_UNDEFINED');
end;

class function TJApplicationInfo.CATEGORY_VIDEO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_VIDEO');
end;

class function TJApplicationInfo.FLAG_ALLOW_BACKUP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ALLOW_BACKUP');
end;

class function TJApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ALLOW_CLEAR_USER_DATA');
end;

class function TJApplicationInfo.FLAG_ALLOW_TASK_REPARENTING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ALLOW_TASK_REPARENTING');
end;

class function TJApplicationInfo.FLAG_DEBUGGABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_DEBUGGABLE');
end;

class function TJApplicationInfo.FLAG_EXTERNAL_STORAGE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_EXTERNAL_STORAGE');
end;

class function TJApplicationInfo.FLAG_EXTRACT_NATIVE_LIBS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_EXTRACT_NATIVE_LIBS');
end;

class function TJApplicationInfo.FLAG_FACTORY_TEST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_FACTORY_TEST');
end;

class function TJApplicationInfo.FLAG_FULL_BACKUP_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_FULL_BACKUP_ONLY');
end;

class function TJApplicationInfo.FLAG_HARDWARE_ACCELERATED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_HARDWARE_ACCELERATED');
end;

class function TJApplicationInfo.FLAG_HAS_CODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_HAS_CODE');
end;

class function TJApplicationInfo.FLAG_INSTALLED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_INSTALLED');
end;

class function TJApplicationInfo.FLAG_IS_DATA_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_IS_DATA_ONLY');
end;

class function TJApplicationInfo.FLAG_IS_GAME: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_IS_GAME');
end;

class function TJApplicationInfo.FLAG_KILL_AFTER_RESTORE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_KILL_AFTER_RESTORE');
end;

class function TJApplicationInfo.FLAG_LARGE_HEAP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_LARGE_HEAP');
end;

class function TJApplicationInfo.FLAG_MULTIARCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_MULTIARCH');
end;

class function TJApplicationInfo.FLAG_PERSISTENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_PERSISTENT');
end;

class function TJApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_RESIZEABLE_FOR_SCREENS');
end;

class function TJApplicationInfo.FLAG_RESTORE_ANY_VERSION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_RESTORE_ANY_VERSION');
end;

class function TJApplicationInfo.FLAG_STOPPED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_STOPPED');
end;

class function TJApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SUPPORTS_LARGE_SCREENS');
end;

class function TJApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SUPPORTS_NORMAL_SCREENS');
end;

class function TJApplicationInfo.FLAG_SUPPORTS_RTL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SUPPORTS_RTL');
end;

class function TJApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SUPPORTS_SCREEN_DENSITIES');
end;

class function TJApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SUPPORTS_SMALL_SCREENS');
end;

class function TJApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SUPPORTS_XLARGE_SCREENS');
end;

class function TJApplicationInfo.FLAG_SUSPENDED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SUSPENDED');
end;

class function TJApplicationInfo.FLAG_SYSTEM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SYSTEM');
end;

class function TJApplicationInfo.FLAG_TEST_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_TEST_ONLY');
end;

class function TJApplicationInfo.FLAG_UPDATED_SYSTEM_APP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_UPDATED_SYSTEM_APP');
end;

class function TJApplicationInfo.FLAG_USES_CLEARTEXT_TRAFFIC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_USES_CLEARTEXT_TRAFFIC');
end;

class function TJApplicationInfo.FLAG_VM_SAFE_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_VM_SAFE_MODE');
end;

function TJApplicationInfo._GetAppComponentFactory: JString;
begin
  Result := GetObjectField<TJString, JString>('appComponentFactory');
end;

procedure TJApplicationInfo._SetAppComponentFactory(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'appComponentFactory', AValue);
end;

function TJApplicationInfo._GetBackupAgentName: JString;
begin
  Result := GetObjectField<TJString, JString>('backupAgentName');
end;

procedure TJApplicationInfo._SetBackupAgentName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'backupAgentName', AValue);
end;

function TJApplicationInfo._GetCategory: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'category');
end;

procedure TJApplicationInfo._SetCategory(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'category', AValue);
end;

function TJApplicationInfo._GetClassName: JString;
begin
  Result := GetObjectField<TJString, JString>('className');
end;

procedure TJApplicationInfo._SetClassName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'className', AValue);
end;

function TJApplicationInfo._GetCompatibleWidthLimitDp: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'compatibleWidthLimitDp');
end;

procedure TJApplicationInfo._SetCompatibleWidthLimitDp(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'compatibleWidthLimitDp', AValue);
end;

function TJApplicationInfo._GetDataDir: JString;
begin
  Result := GetObjectField<TJString, JString>('dataDir');
end;

procedure TJApplicationInfo._SetDataDir(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'dataDir', AValue);
end;

function TJApplicationInfo._GetDescriptionRes: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'descriptionRes');
end;

procedure TJApplicationInfo._SetDescriptionRes(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'descriptionRes', AValue);
end;

function TJApplicationInfo._GetDeviceProtectedDataDir: JString;
begin
  Result := GetObjectField<TJString, JString>('deviceProtectedDataDir');
end;

procedure TJApplicationInfo._SetDeviceProtectedDataDir(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'deviceProtectedDataDir', AValue);
end;

function TJApplicationInfo._GetEnabled: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'enabled');
end;

procedure TJApplicationInfo._SetEnabled(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'enabled', AValue);
end;

function TJApplicationInfo._GetFlags: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'flags');
end;

procedure TJApplicationInfo._SetFlags(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'flags', AValue);
end;

function TJApplicationInfo._GetLargestWidthLimitDp: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'largestWidthLimitDp');
end;

procedure TJApplicationInfo._SetLargestWidthLimitDp(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'largestWidthLimitDp', AValue);
end;

function TJApplicationInfo._GetManageSpaceActivityName: JString;
begin
  Result := GetObjectField<TJString, JString>('manageSpaceActivityName');
end;

procedure TJApplicationInfo._SetManageSpaceActivityName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'manageSpaceActivityName', AValue);
end;

function TJApplicationInfo._GetMinSdkVersion: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'minSdkVersion');
end;

procedure TJApplicationInfo._SetMinSdkVersion(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'minSdkVersion', AValue);
end;

function TJApplicationInfo._GetNativeLibraryDir: JString;
begin
  Result := GetObjectField<TJString, JString>('nativeLibraryDir');
end;

procedure TJApplicationInfo._SetNativeLibraryDir(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'nativeLibraryDir', AValue);
end;

function TJApplicationInfo._GetPermission: JString;
begin
  Result := GetObjectField<TJString, JString>('permission');
end;

procedure TJApplicationInfo._SetPermission(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'permission', AValue);
end;

function TJApplicationInfo._GetProcessName: JString;
begin
  Result := GetObjectField<TJString, JString>('processName');
end;

procedure TJApplicationInfo._SetProcessName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'processName', AValue);
end;

function TJApplicationInfo._GetPublicSourceDir: JString;
begin
  Result := GetObjectField<TJString, JString>('publicSourceDir');
end;

procedure TJApplicationInfo._SetPublicSourceDir(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'publicSourceDir', AValue);
end;

function TJApplicationInfo._GetRequiresSmallestWidthDp: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'requiresSmallestWidthDp');
end;

procedure TJApplicationInfo._SetRequiresSmallestWidthDp(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'requiresSmallestWidthDp', AValue);
end;

function TJApplicationInfo._GetSharedLibraryFiles: IJavaArray<JString>;
begin
  Result := GetArrayField<JString>('sharedLibraryFiles');
end;

procedure TJApplicationInfo._SetSharedLibraryFiles(const AValue: IJavaArray<JString>);
begin
  JavaType.SetObjectField(ObjectId, 'sharedLibraryFiles', AValue.ObjectId);
end;

function TJApplicationInfo._GetSourceDir: JString;
begin
  Result := GetObjectField<TJString, JString>('sourceDir');
end;

procedure TJApplicationInfo._SetSourceDir(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'sourceDir', AValue);
end;

function TJApplicationInfo._GetSplitNames: IJavaArray<JString>;
begin
  Result := GetArrayField<JString>('splitNames');
end;

procedure TJApplicationInfo._SetSplitNames(const AValue: IJavaArray<JString>);
begin
  JavaType.SetObjectField(ObjectId, 'splitNames', AValue.ObjectId);
end;

function TJApplicationInfo._GetSplitPublicSourceDirs: IJavaArray<JString>;
begin
  Result := GetArrayField<JString>('splitPublicSourceDirs');
end;

procedure TJApplicationInfo._SetSplitPublicSourceDirs(const AValue: IJavaArray<JString>);
begin
  JavaType.SetObjectField(ObjectId, 'splitPublicSourceDirs', AValue.ObjectId);
end;

function TJApplicationInfo._GetSplitSourceDirs: IJavaArray<JString>;
begin
  Result := GetArrayField<JString>('splitSourceDirs');
end;

procedure TJApplicationInfo._SetSplitSourceDirs(const AValue: IJavaArray<JString>);
begin
  JavaType.SetObjectField(ObjectId, 'splitSourceDirs', AValue.ObjectId);
end;

function TJApplicationInfo._GetTargetSdkVersion: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'targetSdkVersion');
end;

procedure TJApplicationInfo._SetTargetSdkVersion(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'targetSdkVersion', AValue);
end;

function TJApplicationInfo._GetTaskAffinity: JString;
begin
  Result := GetObjectField<TJString, JString>('taskAffinity');
end;

procedure TJApplicationInfo._SetTaskAffinity(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'taskAffinity', AValue);
end;

function TJApplicationInfo._GetTheme: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'theme');
end;

procedure TJApplicationInfo._SetTheme(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'theme', AValue);
end;

function TJApplicationInfo._GetUiOptions: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'uiOptions');
end;

procedure TJApplicationInfo._SetUiOptions(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'uiOptions', AValue);
end;

function TJApplicationInfo._GetUid: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'uid');
end;

procedure TJApplicationInfo._SetUid(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'uid', AValue);
end;

function TJApplicationInfo.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

class function TJApplicationInfo.getCategoryTitle(const AArg0: JContext; const AArg1: Integer): JCharSequence;
begin
  Result := CallStaticObjectMethod<TJCharSequence, JCharSequence>('getCategoryTitle', '(Landroid/content/Context;I)Ljava/lang/CharSequence;', [AArg0, AArg1]);
end;

function TJApplicationInfo.isVirtualPreload: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVirtualPreload', '()Z', []);
end;

function TJApplicationInfo.loadDescription(const AArg0: JPackageManager): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('loadDescription', '(Landroid/content/pm/PackageManager;)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJApplicationInfo.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJComponentInfo }

class procedure TJComponentInfo.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/content/pm/ComponentInfo;)V');
end;

class procedure TJComponentInfo.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getBannerResource', '()I');
  AddMethod('getIconResource', '()I');
  AddMethod('getLogoResource', '()I');
  AddMethod('isEnabled', '()Z');
end;

class procedure TJComponentInfo.LoadFields;
begin
  inherited;
  AddField('applicationInfo', 'Landroid/content/pm/ApplicationInfo;');
  AddField('descriptionRes', 'I');
  AddField('directBootAware', 'Z');
  AddField('enabled', 'Z');
  AddField('exported', 'Z');
  AddField('processName', 'Ljava/lang/String;');
  AddField('splitName', 'Ljava/lang/String;');
end;

class function TJComponentInfo.Wrap(const AObjectID: JNIObject): JComponentInfo;
begin
  Result := Wrap<TJComponentInfo, JComponentInfo>(AObjectId);
end;

class function TJComponentInfo.Wrap(const AObject: IJNIObject): JComponentInfo;
begin
  Result := Wrap<TJComponentInfo, JComponentInfo>(AObject);
end;

class function TJComponentInfo.Create: JComponentInfo;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJComponentInfo.Create(const AArg0: JComponentInfo): JComponentInfo;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/pm/ComponentInfo;)V', [AArg0]);
  Result := O;
end;

function TJComponentInfo._GetApplicationInfo: JApplicationInfo;
begin
  Result := GetObjectField<TJApplicationInfo, JApplicationInfo>('applicationInfo');
end;

procedure TJComponentInfo._SetApplicationInfo(const AValue: JApplicationInfo);
begin
  JavaType.SetObjectField(ObjectId, 'applicationInfo', AValue);
end;

function TJComponentInfo._GetDescriptionRes: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'descriptionRes');
end;

procedure TJComponentInfo._SetDescriptionRes(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'descriptionRes', AValue);
end;

function TJComponentInfo._GetDirectBootAware: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'directBootAware');
end;

procedure TJComponentInfo._SetDirectBootAware(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'directBootAware', AValue);
end;

function TJComponentInfo._GetEnabled: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'enabled');
end;

procedure TJComponentInfo._SetEnabled(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'enabled', AValue);
end;

function TJComponentInfo._GetExported: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'exported');
end;

procedure TJComponentInfo._SetExported(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'exported', AValue);
end;

function TJComponentInfo._GetProcessName: JString;
begin
  Result := GetObjectField<TJString, JString>('processName');
end;

procedure TJComponentInfo._SetProcessName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'processName', AValue);
end;

function TJComponentInfo._GetSplitName: JString;
begin
  Result := GetObjectField<TJString, JString>('splitName');
end;

procedure TJComponentInfo._SetSplitName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'splitName', AValue);
end;

function TJComponentInfo.getBannerResource: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getBannerResource', '()I', []);
end;

function TJComponentInfo.getIconResource: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIconResource', '()I', []);
end;

function TJComponentInfo.getLogoResource: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLogoResource', '()I', []);
end;

function TJComponentInfo.isEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEnabled', '()Z', []);
end;

{ TJActivityInfo }

class procedure TJActivityInfo.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/content/pm/ActivityInfo;)V');
end;

class procedure TJActivityInfo.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('getThemeResource', '()I');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJActivityInfo.LoadFields;
begin
  inherited;
  AddStaticField('COLOR_MODE_DEFAULT', 'I');
  AddStaticField('COLOR_MODE_HDR', 'I');
  AddStaticField('COLOR_MODE_WIDE_COLOR_GAMUT', 'I');
  AddStaticField('CONFIG_COLOR_MODE', 'I');
  AddStaticField('CONFIG_DENSITY', 'I');
  AddStaticField('CONFIG_FONT_SCALE', 'I');
  AddStaticField('CONFIG_KEYBOARD', 'I');
  AddStaticField('CONFIG_KEYBOARD_HIDDEN', 'I');
  AddStaticField('CONFIG_LAYOUT_DIRECTION', 'I');
  AddStaticField('CONFIG_LOCALE', 'I');
  AddStaticField('CONFIG_MCC', 'I');
  AddStaticField('CONFIG_MNC', 'I');
  AddStaticField('CONFIG_NAVIGATION', 'I');
  AddStaticField('CONFIG_ORIENTATION', 'I');
  AddStaticField('CONFIG_SCREEN_LAYOUT', 'I');
  AddStaticField('CONFIG_SCREEN_SIZE', 'I');
  AddStaticField('CONFIG_SMALLEST_SCREEN_SIZE', 'I');
  AddStaticField('CONFIG_TOUCHSCREEN', 'I');
  AddStaticField('CONFIG_UI_MODE', 'I');
  AddStaticField('DOCUMENT_LAUNCH_ALWAYS', 'I');
  AddStaticField('DOCUMENT_LAUNCH_INTO_EXISTING', 'I');
  AddStaticField('DOCUMENT_LAUNCH_NEVER', 'I');
  AddStaticField('DOCUMENT_LAUNCH_NONE', 'I');
  AddStaticField('FLAG_ALLOW_TASK_REPARENTING', 'I');
  AddStaticField('FLAG_ALWAYS_RETAIN_TASK_STATE', 'I');
  AddStaticField('FLAG_AUTO_REMOVE_FROM_RECENTS', 'I');
  AddStaticField('FLAG_CLEAR_TASK_ON_LAUNCH', 'I');
  AddStaticField('FLAG_ENABLE_VR_MODE', 'I');
  AddStaticField('FLAG_EXCLUDE_FROM_RECENTS', 'I');
  AddStaticField('FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS', 'I');
  AddStaticField('FLAG_FINISH_ON_TASK_LAUNCH', 'I');
  AddStaticField('FLAG_HARDWARE_ACCELERATED', 'I');
  AddStaticField('FLAG_IMMERSIVE', 'I');
  AddStaticField('FLAG_MULTIPROCESS', 'I');
  AddStaticField('FLAG_NO_HISTORY', 'I');
  AddStaticField('FLAG_RELINQUISH_TASK_IDENTITY', 'I');
  AddStaticField('FLAG_RESUME_WHILE_PAUSING', 'I');
  AddStaticField('FLAG_SINGLE_USER', 'I');
  AddStaticField('FLAG_STATE_NOT_NEEDED', 'I');
  AddStaticField('LAUNCH_MULTIPLE', 'I');
  AddStaticField('LAUNCH_SINGLE_INSTANCE', 'I');
  AddStaticField('LAUNCH_SINGLE_TASK', 'I');
  AddStaticField('LAUNCH_SINGLE_TOP', 'I');
  AddStaticField('PERSIST_ACROSS_REBOOTS', 'I');
  AddStaticField('PERSIST_NEVER', 'I');
  AddStaticField('PERSIST_ROOT_ONLY', 'I');
  AddStaticField('SCREEN_ORIENTATION_BEHIND', 'I');
  AddStaticField('SCREEN_ORIENTATION_FULL_SENSOR', 'I');
  AddStaticField('SCREEN_ORIENTATION_FULL_USER', 'I');
  AddStaticField('SCREEN_ORIENTATION_LANDSCAPE', 'I');
  AddStaticField('SCREEN_ORIENTATION_LOCKED', 'I');
  AddStaticField('SCREEN_ORIENTATION_NOSENSOR', 'I');
  AddStaticField('SCREEN_ORIENTATION_PORTRAIT', 'I');
  AddStaticField('SCREEN_ORIENTATION_REVERSE_LANDSCAPE', 'I');
  AddStaticField('SCREEN_ORIENTATION_REVERSE_PORTRAIT', 'I');
  AddStaticField('SCREEN_ORIENTATION_SENSOR', 'I');
  AddStaticField('SCREEN_ORIENTATION_SENSOR_LANDSCAPE', 'I');
  AddStaticField('SCREEN_ORIENTATION_SENSOR_PORTRAIT', 'I');
  AddStaticField('SCREEN_ORIENTATION_UNSPECIFIED', 'I');
  AddStaticField('SCREEN_ORIENTATION_USER', 'I');
  AddStaticField('SCREEN_ORIENTATION_USER_LANDSCAPE', 'I');
  AddStaticField('SCREEN_ORIENTATION_USER_PORTRAIT', 'I');
  AddStaticField('UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW', 'I');
  AddField('colorMode', 'I');
  AddField('configChanges', 'I');
  AddField('documentLaunchMode', 'I');
  AddField('flags', 'I');
  AddField('launchMode', 'I');
  AddField('maxRecents', 'I');
  AddField('parentActivityName', 'Ljava/lang/String;');
  AddField('permission', 'Ljava/lang/String;');
  AddField('persistableMode', 'I');
  AddField('screenOrientation', 'I');
  AddField('softInputMode', 'I');
  AddField('targetActivity', 'Ljava/lang/String;');
  AddField('taskAffinity', 'Ljava/lang/String;');
  AddField('theme', 'I');
  AddField('uiOptions', 'I');
end;

class function TJActivityInfo.Wrap(const AObjectID: JNIObject): JActivityInfo;
begin
  Result := Wrap<TJActivityInfo, JActivityInfo>(AObjectId);
end;

class function TJActivityInfo.Wrap(const AObject: IJNIObject): JActivityInfo;
begin
  Result := Wrap<TJActivityInfo, JActivityInfo>(AObject);
end;

class function TJActivityInfo.Create: JActivityInfo;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJActivityInfo.Create(const AArg0: JActivityInfo): JActivityInfo;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/pm/ActivityInfo;)V', [AArg0]);
  Result := O;
end;

class function TJActivityInfo.COLOR_MODE_DEFAULT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_DEFAULT');
end;

class function TJActivityInfo.COLOR_MODE_HDR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_HDR');
end;

class function TJActivityInfo.COLOR_MODE_WIDE_COLOR_GAMUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_WIDE_COLOR_GAMUT');
end;

class function TJActivityInfo.CONFIG_COLOR_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_COLOR_MODE');
end;

class function TJActivityInfo.CONFIG_DENSITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_DENSITY');
end;

class function TJActivityInfo.CONFIG_FONT_SCALE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_FONT_SCALE');
end;

class function TJActivityInfo.CONFIG_KEYBOARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_KEYBOARD');
end;

class function TJActivityInfo.CONFIG_KEYBOARD_HIDDEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_KEYBOARD_HIDDEN');
end;

class function TJActivityInfo.CONFIG_LAYOUT_DIRECTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_LAYOUT_DIRECTION');
end;

class function TJActivityInfo.CONFIG_LOCALE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_LOCALE');
end;

class function TJActivityInfo.CONFIG_MCC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_MCC');
end;

class function TJActivityInfo.CONFIG_MNC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_MNC');
end;

class function TJActivityInfo.CONFIG_NAVIGATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_NAVIGATION');
end;

class function TJActivityInfo.CONFIG_ORIENTATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_ORIENTATION');
end;

class function TJActivityInfo.CONFIG_SCREEN_LAYOUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_SCREEN_LAYOUT');
end;

class function TJActivityInfo.CONFIG_SCREEN_SIZE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_SCREEN_SIZE');
end;

class function TJActivityInfo.CONFIG_SMALLEST_SCREEN_SIZE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_SMALLEST_SCREEN_SIZE');
end;

class function TJActivityInfo.CONFIG_TOUCHSCREEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_TOUCHSCREEN');
end;

class function TJActivityInfo.CONFIG_UI_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CONFIG_UI_MODE');
end;

class function TJActivityInfo.DOCUMENT_LAUNCH_ALWAYS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DOCUMENT_LAUNCH_ALWAYS');
end;

class function TJActivityInfo.DOCUMENT_LAUNCH_INTO_EXISTING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DOCUMENT_LAUNCH_INTO_EXISTING');
end;

class function TJActivityInfo.DOCUMENT_LAUNCH_NEVER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DOCUMENT_LAUNCH_NEVER');
end;

class function TJActivityInfo.DOCUMENT_LAUNCH_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DOCUMENT_LAUNCH_NONE');
end;

class function TJActivityInfo.FLAG_ALLOW_TASK_REPARENTING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ALLOW_TASK_REPARENTING');
end;

class function TJActivityInfo.FLAG_ALWAYS_RETAIN_TASK_STATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ALWAYS_RETAIN_TASK_STATE');
end;

class function TJActivityInfo.FLAG_AUTO_REMOVE_FROM_RECENTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_AUTO_REMOVE_FROM_RECENTS');
end;

class function TJActivityInfo.FLAG_CLEAR_TASK_ON_LAUNCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_CLEAR_TASK_ON_LAUNCH');
end;

class function TJActivityInfo.FLAG_ENABLE_VR_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ENABLE_VR_MODE');
end;

class function TJActivityInfo.FLAG_EXCLUDE_FROM_RECENTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_EXCLUDE_FROM_RECENTS');
end;

class function TJActivityInfo.FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_FINISH_ON_CLOSE_SYSTEM_DIALOGS');
end;

class function TJActivityInfo.FLAG_FINISH_ON_TASK_LAUNCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_FINISH_ON_TASK_LAUNCH');
end;

class function TJActivityInfo.FLAG_HARDWARE_ACCELERATED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_HARDWARE_ACCELERATED');
end;

class function TJActivityInfo.FLAG_IMMERSIVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_IMMERSIVE');
end;

class function TJActivityInfo.FLAG_MULTIPROCESS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_MULTIPROCESS');
end;

class function TJActivityInfo.FLAG_NO_HISTORY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_NO_HISTORY');
end;

class function TJActivityInfo.FLAG_RELINQUISH_TASK_IDENTITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_RELINQUISH_TASK_IDENTITY');
end;

class function TJActivityInfo.FLAG_RESUME_WHILE_PAUSING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_RESUME_WHILE_PAUSING');
end;

class function TJActivityInfo.FLAG_SINGLE_USER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SINGLE_USER');
end;

class function TJActivityInfo.FLAG_STATE_NOT_NEEDED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_STATE_NOT_NEEDED');
end;

class function TJActivityInfo.LAUNCH_MULTIPLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAUNCH_MULTIPLE');
end;

class function TJActivityInfo.LAUNCH_SINGLE_INSTANCE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAUNCH_SINGLE_INSTANCE');
end;

class function TJActivityInfo.LAUNCH_SINGLE_TASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAUNCH_SINGLE_TASK');
end;

class function TJActivityInfo.LAUNCH_SINGLE_TOP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAUNCH_SINGLE_TOP');
end;

class function TJActivityInfo.PERSIST_ACROSS_REBOOTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERSIST_ACROSS_REBOOTS');
end;

class function TJActivityInfo.PERSIST_NEVER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERSIST_NEVER');
end;

class function TJActivityInfo.PERSIST_ROOT_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERSIST_ROOT_ONLY');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_BEHIND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_BEHIND');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_FULL_SENSOR');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_FULL_USER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_FULL_USER');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_LANDSCAPE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_LANDSCAPE');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_LOCKED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_LOCKED');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_NOSENSOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_NOSENSOR');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_PORTRAIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_PORTRAIT');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_REVERSE_LANDSCAPE');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_REVERSE_PORTRAIT');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_SENSOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_SENSOR');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_SENSOR_LANDSCAPE');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_SENSOR_PORTRAIT');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_UNSPECIFIED');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_USER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_USER');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_USER_LANDSCAPE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_USER_LANDSCAPE');
end;

class function TJActivityInfo.SCREEN_ORIENTATION_USER_PORTRAIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_USER_PORTRAIT');
end;

class function TJActivityInfo.UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UIOPTION_SPLIT_ACTION_BAR_WHEN_NARROW');
end;

function TJActivityInfo._GetColorMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'colorMode');
end;

procedure TJActivityInfo._SetColorMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'colorMode', AValue);
end;

function TJActivityInfo._GetConfigChanges: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'configChanges');
end;

procedure TJActivityInfo._SetConfigChanges(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'configChanges', AValue);
end;

function TJActivityInfo._GetDocumentLaunchMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'documentLaunchMode');
end;

procedure TJActivityInfo._SetDocumentLaunchMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'documentLaunchMode', AValue);
end;

function TJActivityInfo._GetFlags: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'flags');
end;

procedure TJActivityInfo._SetFlags(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'flags', AValue);
end;

function TJActivityInfo._GetLaunchMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'launchMode');
end;

procedure TJActivityInfo._SetLaunchMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'launchMode', AValue);
end;

function TJActivityInfo._GetMaxRecents: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'maxRecents');
end;

procedure TJActivityInfo._SetMaxRecents(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'maxRecents', AValue);
end;

function TJActivityInfo._GetParentActivityName: JString;
begin
  Result := GetObjectField<TJString, JString>('parentActivityName');
end;

procedure TJActivityInfo._SetParentActivityName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'parentActivityName', AValue);
end;

function TJActivityInfo._GetPermission: JString;
begin
  Result := GetObjectField<TJString, JString>('permission');
end;

procedure TJActivityInfo._SetPermission(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'permission', AValue);
end;

function TJActivityInfo._GetPersistableMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'persistableMode');
end;

procedure TJActivityInfo._SetPersistableMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'persistableMode', AValue);
end;

function TJActivityInfo._GetScreenOrientation: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'screenOrientation');
end;

procedure TJActivityInfo._SetScreenOrientation(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'screenOrientation', AValue);
end;

function TJActivityInfo._GetSoftInputMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'softInputMode');
end;

procedure TJActivityInfo._SetSoftInputMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'softInputMode', AValue);
end;

function TJActivityInfo._GetTargetActivity: JString;
begin
  Result := GetObjectField<TJString, JString>('targetActivity');
end;

procedure TJActivityInfo._SetTargetActivity(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'targetActivity', AValue);
end;

function TJActivityInfo._GetTaskAffinity: JString;
begin
  Result := GetObjectField<TJString, JString>('taskAffinity');
end;

procedure TJActivityInfo._SetTaskAffinity(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'taskAffinity', AValue);
end;

function TJActivityInfo._GetTheme: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'theme');
end;

procedure TJActivityInfo._SetTheme(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'theme', AValue);
end;

function TJActivityInfo._GetUiOptions: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'uiOptions');
end;

procedure TJActivityInfo._SetUiOptions(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'uiOptions', AValue);
end;

function TJActivityInfo.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJActivityInfo.getThemeResource: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getThemeResource', '()I', []);
end;

function TJActivityInfo.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJPackageManager }

class procedure TJPackageManager.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJPackageManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addPackageToPreferred', '(Ljava/lang/String;)V');
  AddMethod('addPreferredActivity', '(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;)V');
  AddMethod('canRequestPackageInstalls', '()Z');
  AddMethod('canonicalToCurrentPackageNames', '([Ljava/lang/String;)[Ljava/lang/String;');
  AddMethod('checkPermission', '(Ljava/lang/String;Ljava/lang/String;)I');
  AddMethod('checkSignatures', '(Ljava/lang/String;Ljava/lang/String;)I');
  AddMethod('checkSignatures', '(II)I');
  AddMethod('clearInstantAppCookie', '()V');
  AddMethod('clearPackagePreferredActivities', '(Ljava/lang/String;)V');
  AddMethod('currentToCanonicalPackageNames', '([Ljava/lang/String;)[Ljava/lang/String;');
  AddMethod('extendVerificationTimeout', '(IIJ)V');
  AddMethod('getActivityBanner', '(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getActivityBanner', '(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getActivityIcon', '(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getActivityIcon', '(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getActivityInfo', '(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;');
  AddMethod('getActivityLogo', '(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getActivityLogo', '(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getAllPermissionGroups', '(I)Ljava/util/List;');
  AddMethod('getApplicationBanner', '(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getApplicationBanner', '(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getApplicationEnabledSetting', '(Ljava/lang/String;)I');
  AddMethod('getApplicationIcon', '(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getApplicationIcon', '(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getApplicationInfo', '(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;');
  AddMethod('getApplicationLabel', '(Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;');
  AddMethod('getApplicationLogo', '(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getApplicationLogo', '(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getComponentEnabledSetting', '(Landroid/content/ComponentName;)I');
  AddMethod('getDefaultActivityIcon', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('getDrawable', '(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getInstalledApplications', '(I)Ljava/util/List;');
  AddMethod('getInstalledPackages', '(I)Ljava/util/List;');
  AddMethod('getInstallerPackageName', '(Ljava/lang/String;)Ljava/lang/String;');
  AddMethod('getInstantAppCookie', '()[B');
  AddMethod('getInstantAppCookieMaxBytes', '()I');
  AddMethod('getLaunchIntentForPackage', '(Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('getLeanbackLaunchIntentForPackage', '(Ljava/lang/String;)Landroid/content/Intent;');
  AddMethod('getNameForUid', '(I)Ljava/lang/String;');
  AddMethod('getPackageArchiveInfo', '(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;');
  AddMethod('getPackageGids', '(Ljava/lang/String;I)[I');
  AddMethod('getPackageGids', '(Ljava/lang/String;)[I');
  AddMethod('getPackageInfo', '(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;');
  AddMethod('getPackageUid', '(Ljava/lang/String;I)I');
  AddMethod('getPackagesForUid', '(I)[Ljava/lang/String;');
  AddMethod('getPackagesHoldingPermissions', '([Ljava/lang/String;I)Ljava/util/List;');
  AddMethod('getPreferredActivities', '(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I');
  AddMethod('getPreferredPackages', '(I)Ljava/util/List;');
  AddMethod('getReceiverInfo', '(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;');
  AddMethod('getResourcesForActivity', '(Landroid/content/ComponentName;)Landroid/content/res/Resources;');
  AddMethod('getResourcesForApplication', '(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/Resources;');
  AddMethod('getResourcesForApplication', '(Ljava/lang/String;)Landroid/content/res/Resources;');
  AddMethod('getSharedLibraries', '(I)Ljava/util/List;');
  AddMethod('getSuspendedPackageAppExtras', '()Landroid/os/Bundle;');
  AddMethod('getSystemSharedLibraryNames', '()[Ljava/lang/String;');
  AddMethod('getText', '(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;');
  AddMethod('getUserBadgedDrawableForDensity', '(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;Landroid/graphics/Rect;I)Landroid/graphics/drawable/Drawable;');
  AddMethod('getUserBadgedIcon', '(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getUserBadgedLabel', '(Ljava/lang/CharSequence;Landroid/os/UserHandle;)Ljava/lang/CharSequence;');
  AddMethod('hasSigningCertificate', '(I[BI)Z');
  AddMethod('hasSigningCertificate', '(Ljava/lang/String;[BI)Z');
  AddMethod('hasSystemFeature', '(Ljava/lang/String;I)Z');
  AddMethod('hasSystemFeature', '(Ljava/lang/String;)Z');
  AddMethod('isInstantApp', '()Z');
  AddMethod('isInstantApp', '(Ljava/lang/String;)Z');
  AddMethod('isPackageSuspended', '()Z');
  AddMethod('isPermissionRevokedByPolicy', '(Ljava/lang/String;Ljava/lang/String;)Z');
  AddMethod('isSafeMode', '()Z');
  AddMethod('queryBroadcastReceivers', '(Landroid/content/Intent;I)Ljava/util/List;');
  AddMethod('queryContentProviders', '(Ljava/lang/String;II)Ljava/util/List;');
  AddMethod('queryInstrumentation', '(Ljava/lang/String;I)Ljava/util/List;');
  AddMethod('queryIntentActivities', '(Landroid/content/Intent;I)Ljava/util/List;');
  AddMethod('queryIntentActivityOptions', '(Landroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I)Ljava/util/List;');
  AddMethod('queryIntentContentProviders', '(Landroid/content/Intent;I)Ljava/util/List;');
  AddMethod('queryIntentServices', '(Landroid/content/Intent;I)Ljava/util/List;');
  AddMethod('queryPermissionsByGroup', '(Ljava/lang/String;I)Ljava/util/List;');
  AddMethod('removePackageFromPreferred', '(Ljava/lang/String;)V');
  AddMethod('removePermission', '(Ljava/lang/String;)V');
  AddMethod('setApplicationCategoryHint', '(Ljava/lang/String;I)V');
  AddMethod('setApplicationEnabledSetting', '(Ljava/lang/String;II)V');
  AddMethod('setComponentEnabledSetting', '(Landroid/content/ComponentName;II)V');
  AddMethod('setInstallerPackageName', '(Ljava/lang/String;Ljava/lang/String;)V');
  AddMethod('updateInstantAppCookie', '([B)V');
  AddMethod('verifyPendingInstall', '(II)V');
end;

class procedure TJPackageManager.LoadFields;
begin
  inherited;
  AddStaticField('CERT_INPUT_RAW_X509', 'I');
  AddStaticField('CERT_INPUT_SHA256', 'I');
  AddStaticField('COMPONENT_ENABLED_STATE_DEFAULT', 'I');
  AddStaticField('COMPONENT_ENABLED_STATE_DISABLED', 'I');
  AddStaticField('COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED', 'I');
  AddStaticField('COMPONENT_ENABLED_STATE_DISABLED_USER', 'I');
  AddStaticField('COMPONENT_ENABLED_STATE_ENABLED', 'I');
  AddStaticField('DONT_KILL_APP', 'I');
  AddStaticField('EXTRA_VERIFICATION_ID', 'Ljava/lang/String;');
  AddStaticField('EXTRA_VERIFICATION_RESULT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_APP_WIDGETS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_AUDIO_LOW_LATENCY', 'Ljava/lang/String;');
  AddStaticField('FEATURE_AUDIO_OUTPUT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_AUDIO_PRO', 'Ljava/lang/String;');
  AddStaticField('FEATURE_AUTOFILL', 'Ljava/lang/String;');
  AddStaticField('FEATURE_AUTOMOTIVE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_BACKUP', 'Ljava/lang/String;');
  AddStaticField('FEATURE_BLUETOOTH', 'Ljava/lang/String;');
  AddStaticField('FEATURE_BLUETOOTH_LE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_ANY', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_AR', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_AUTOFOCUS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_CAPABILITY_RAW', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_EXTERNAL', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_FLASH', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_FRONT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CAMERA_LEVEL_FULL', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CANT_SAVE_STATE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_COMPANION_DEVICE_SETUP', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CONNECTION_SERVICE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_CONSUMER_IR', 'Ljava/lang/String;');
  AddStaticField('FEATURE_DEVICE_ADMIN', 'Ljava/lang/String;');
  AddStaticField('FEATURE_EMBEDDED', 'Ljava/lang/String;');
  AddStaticField('FEATURE_ETHERNET', 'Ljava/lang/String;');
  AddStaticField('FEATURE_FAKETOUCH', 'Ljava/lang/String;');
  AddStaticField('FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND', 'Ljava/lang/String;');
  AddStaticField('FEATURE_FINGERPRINT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_FREEFORM_WINDOW_MANAGEMENT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_GAMEPAD', 'Ljava/lang/String;');
  AddStaticField('FEATURE_HIFI_SENSORS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_HOME_SCREEN', 'Ljava/lang/String;');
  AddStaticField('FEATURE_INPUT_METHODS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_LEANBACK', 'Ljava/lang/String;');
  AddStaticField('FEATURE_LEANBACK_ONLY', 'Ljava/lang/String;');
  AddStaticField('FEATURE_LIVE_TV', 'Ljava/lang/String;');
  AddStaticField('FEATURE_LIVE_WALLPAPER', 'Ljava/lang/String;');
  AddStaticField('FEATURE_LOCATION', 'Ljava/lang/String;');
  AddStaticField('FEATURE_LOCATION_GPS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_LOCATION_NETWORK', 'Ljava/lang/String;');
  AddStaticField('FEATURE_MANAGED_USERS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_MICROPHONE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_MIDI', 'Ljava/lang/String;');
  AddStaticField('FEATURE_NFC', 'Ljava/lang/String;');
  AddStaticField('FEATURE_NFC_HOST_CARD_EMULATION', 'Ljava/lang/String;');
  AddStaticField('FEATURE_NFC_HOST_CARD_EMULATION_NFCF', 'Ljava/lang/String;');
  AddStaticField('FEATURE_OPENGLES_EXTENSION_PACK', 'Ljava/lang/String;');
  AddStaticField('FEATURE_PC', 'Ljava/lang/String;');
  AddStaticField('FEATURE_PICTURE_IN_PICTURE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_PRINTING', 'Ljava/lang/String;');
  AddStaticField('FEATURE_RAM_LOW', 'Ljava/lang/String;');
  AddStaticField('FEATURE_RAM_NORMAL', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SCREEN_LANDSCAPE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SCREEN_PORTRAIT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SECURELY_REMOVES_USERS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_ACCELEROMETER', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_AMBIENT_TEMPERATURE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_BAROMETER', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_COMPASS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_GYROSCOPE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_HEART_RATE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_HEART_RATE_ECG', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_LIGHT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_PROXIMITY', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_RELATIVE_HUMIDITY', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_STEP_COUNTER', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SENSOR_STEP_DETECTOR', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SIP', 'Ljava/lang/String;');
  AddStaticField('FEATURE_SIP_VOIP', 'Ljava/lang/String;');
  AddStaticField('FEATURE_STRONGBOX_KEYSTORE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TELEPHONY', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TELEPHONY_CDMA', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TELEPHONY_EUICC', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TELEPHONY_GSM', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TELEPHONY_MBMS', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TELEVISION', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TOUCHSCREEN', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TOUCHSCREEN_MULTITOUCH', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND', 'Ljava/lang/String;');
  AddStaticField('FEATURE_USB_ACCESSORY', 'Ljava/lang/String;');
  AddStaticField('FEATURE_USB_HOST', 'Ljava/lang/String;');
  AddStaticField('FEATURE_VERIFIED_BOOT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_VR_HEADTRACKING', 'Ljava/lang/String;');
  AddStaticField('FEATURE_VR_MODE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_VR_MODE_HIGH_PERFORMANCE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_VULKAN_HARDWARE_COMPUTE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_VULKAN_HARDWARE_LEVEL', 'Ljava/lang/String;');
  AddStaticField('FEATURE_VULKAN_HARDWARE_VERSION', 'Ljava/lang/String;');
  AddStaticField('FEATURE_WATCH', 'Ljava/lang/String;');
  AddStaticField('FEATURE_WEBVIEW', 'Ljava/lang/String;');
  AddStaticField('FEATURE_WIFI', 'Ljava/lang/String;');
  AddStaticField('FEATURE_WIFI_AWARE', 'Ljava/lang/String;');
  AddStaticField('FEATURE_WIFI_DIRECT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_WIFI_PASSPOINT', 'Ljava/lang/String;');
  AddStaticField('FEATURE_WIFI_RTT', 'Ljava/lang/String;');
  AddStaticField('GET_ACTIVITIES', 'I');
  AddStaticField('GET_CONFIGURATIONS', 'I');
  AddStaticField('GET_DISABLED_COMPONENTS', 'I');
  AddStaticField('GET_DISABLED_UNTIL_USED_COMPONENTS', 'I');
  AddStaticField('GET_GIDS', 'I');
  AddStaticField('GET_INSTRUMENTATION', 'I');
  AddStaticField('GET_INTENT_FILTERS', 'I');
  AddStaticField('GET_META_DATA', 'I');
  AddStaticField('GET_PERMISSIONS', 'I');
  AddStaticField('GET_PROVIDERS', 'I');
  AddStaticField('GET_RECEIVERS', 'I');
  AddStaticField('GET_RESOLVED_FILTER', 'I');
  AddStaticField('GET_SERVICES', 'I');
  AddStaticField('GET_SHARED_LIBRARY_FILES', 'I');
  AddStaticField('GET_SIGNATURES', 'I');
  AddStaticField('GET_SIGNING_CERTIFICATES', 'I');
  AddStaticField('GET_UNINSTALLED_PACKAGES', 'I');
  AddStaticField('GET_URI_PERMISSION_PATTERNS', 'I');
  AddStaticField('INSTALL_REASON_DEVICE_RESTORE', 'I');
  AddStaticField('INSTALL_REASON_DEVICE_SETUP', 'I');
  AddStaticField('INSTALL_REASON_POLICY', 'I');
  AddStaticField('INSTALL_REASON_UNKNOWN', 'I');
  AddStaticField('INSTALL_REASON_USER', 'I');
  AddStaticField('MATCH_ALL', 'I');
  AddStaticField('MATCH_DEFAULT_ONLY', 'I');
  AddStaticField('MATCH_DIRECT_BOOT_AWARE', 'I');
  AddStaticField('MATCH_DIRECT_BOOT_UNAWARE', 'I');
  AddStaticField('MATCH_DISABLED_COMPONENTS', 'I');
  AddStaticField('MATCH_DISABLED_UNTIL_USED_COMPONENTS', 'I');
  AddStaticField('MATCH_SYSTEM_ONLY', 'I');
  AddStaticField('MATCH_UNINSTALLED_PACKAGES', 'I');
  AddStaticField('MAXIMUM_VERIFICATION_TIMEOUT', 'J');
  AddStaticField('PERMISSION_DENIED', 'I');
  AddStaticField('PERMISSION_GRANTED', 'I');
  AddStaticField('SIGNATURE_FIRST_NOT_SIGNED', 'I');
  AddStaticField('SIGNATURE_MATCH', 'I');
  AddStaticField('SIGNATURE_NEITHER_SIGNED', 'I');
  AddStaticField('SIGNATURE_NO_MATCH', 'I');
  AddStaticField('SIGNATURE_SECOND_NOT_SIGNED', 'I');
  AddStaticField('SIGNATURE_UNKNOWN_PACKAGE', 'I');
  AddStaticField('VERIFICATION_ALLOW', 'I');
  AddStaticField('VERIFICATION_REJECT', 'I');
  AddStaticField('VERSION_CODE_HIGHEST', 'I');
end;

class function TJPackageManager.Wrap(const AObjectID: JNIObject): JPackageManager;
begin
  Result := Wrap<TJPackageManager, JPackageManager>(AObjectId);
end;

class function TJPackageManager.Wrap(const AObject: IJNIObject): JPackageManager;
begin
  Result := Wrap<TJPackageManager, JPackageManager>(AObject);
end;

class function TJPackageManager.Create: JPackageManager;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJPackageManager.CERT_INPUT_RAW_X509: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CERT_INPUT_RAW_X509');
end;

class function TJPackageManager.CERT_INPUT_SHA256: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CERT_INPUT_SHA256');
end;

class function TJPackageManager.COMPONENT_ENABLED_STATE_DEFAULT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPONENT_ENABLED_STATE_DEFAULT');
end;

class function TJPackageManager.COMPONENT_ENABLED_STATE_DISABLED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPONENT_ENABLED_STATE_DISABLED');
end;

class function TJPackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED');
end;

class function TJPackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPONENT_ENABLED_STATE_DISABLED_USER');
end;

class function TJPackageManager.COMPONENT_ENABLED_STATE_ENABLED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPONENT_ENABLED_STATE_ENABLED');
end;

class function TJPackageManager.DONT_KILL_APP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DONT_KILL_APP');
end;

class function TJPackageManager.EXTRA_VERIFICATION_ID: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_VERIFICATION_ID');
end;

class function TJPackageManager.EXTRA_VERIFICATION_RESULT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('EXTRA_VERIFICATION_RESULT');
end;

class function TJPackageManager.FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_ACTIVITIES_ON_SECONDARY_DISPLAYS');
end;

class function TJPackageManager.FEATURE_APP_WIDGETS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_APP_WIDGETS');
end;

class function TJPackageManager.FEATURE_AUDIO_LOW_LATENCY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_AUDIO_LOW_LATENCY');
end;

class function TJPackageManager.FEATURE_AUDIO_OUTPUT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_AUDIO_OUTPUT');
end;

class function TJPackageManager.FEATURE_AUDIO_PRO: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_AUDIO_PRO');
end;

class function TJPackageManager.FEATURE_AUTOFILL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_AUTOFILL');
end;

class function TJPackageManager.FEATURE_AUTOMOTIVE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_AUTOMOTIVE');
end;

class function TJPackageManager.FEATURE_BACKUP: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_BACKUP');
end;

class function TJPackageManager.FEATURE_BLUETOOTH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_BLUETOOTH');
end;

class function TJPackageManager.FEATURE_BLUETOOTH_LE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_BLUETOOTH_LE');
end;

class function TJPackageManager.FEATURE_CAMERA: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA');
end;

class function TJPackageManager.FEATURE_CAMERA_ANY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_ANY');
end;

class function TJPackageManager.FEATURE_CAMERA_AR: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_AR');
end;

class function TJPackageManager.FEATURE_CAMERA_AUTOFOCUS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_AUTOFOCUS');
end;

class function TJPackageManager.FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_CAPABILITY_MANUAL_POST_PROCESSING');
end;

class function TJPackageManager.FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_CAPABILITY_MANUAL_SENSOR');
end;

class function TJPackageManager.FEATURE_CAMERA_CAPABILITY_RAW: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_CAPABILITY_RAW');
end;

class function TJPackageManager.FEATURE_CAMERA_EXTERNAL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_EXTERNAL');
end;

class function TJPackageManager.FEATURE_CAMERA_FLASH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_FLASH');
end;

class function TJPackageManager.FEATURE_CAMERA_FRONT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_FRONT');
end;

class function TJPackageManager.FEATURE_CAMERA_LEVEL_FULL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CAMERA_LEVEL_FULL');
end;

class function TJPackageManager.FEATURE_CANT_SAVE_STATE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CANT_SAVE_STATE');
end;

class function TJPackageManager.FEATURE_COMPANION_DEVICE_SETUP: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_COMPANION_DEVICE_SETUP');
end;

class function TJPackageManager.FEATURE_CONNECTION_SERVICE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CONNECTION_SERVICE');
end;

class function TJPackageManager.FEATURE_CONSUMER_IR: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_CONSUMER_IR');
end;

class function TJPackageManager.FEATURE_DEVICE_ADMIN: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_DEVICE_ADMIN');
end;

class function TJPackageManager.FEATURE_EMBEDDED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_EMBEDDED');
end;

class function TJPackageManager.FEATURE_ETHERNET: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_ETHERNET');
end;

class function TJPackageManager.FEATURE_FAKETOUCH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_FAKETOUCH');
end;

class function TJPackageManager.FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_FAKETOUCH_MULTITOUCH_DISTINCT');
end;

class function TJPackageManager.FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_FAKETOUCH_MULTITOUCH_JAZZHAND');
end;

class function TJPackageManager.FEATURE_FINGERPRINT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_FINGERPRINT');
end;

class function TJPackageManager.FEATURE_FREEFORM_WINDOW_MANAGEMENT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_FREEFORM_WINDOW_MANAGEMENT');
end;

class function TJPackageManager.FEATURE_GAMEPAD: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_GAMEPAD');
end;

class function TJPackageManager.FEATURE_HIFI_SENSORS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_HIFI_SENSORS');
end;

class function TJPackageManager.FEATURE_HOME_SCREEN: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_HOME_SCREEN');
end;

class function TJPackageManager.FEATURE_INPUT_METHODS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_INPUT_METHODS');
end;

class function TJPackageManager.FEATURE_LEANBACK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_LEANBACK');
end;

class function TJPackageManager.FEATURE_LEANBACK_ONLY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_LEANBACK_ONLY');
end;

class function TJPackageManager.FEATURE_LIVE_TV: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_LIVE_TV');
end;

class function TJPackageManager.FEATURE_LIVE_WALLPAPER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_LIVE_WALLPAPER');
end;

class function TJPackageManager.FEATURE_LOCATION: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_LOCATION');
end;

class function TJPackageManager.FEATURE_LOCATION_GPS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_LOCATION_GPS');
end;

class function TJPackageManager.FEATURE_LOCATION_NETWORK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_LOCATION_NETWORK');
end;

class function TJPackageManager.FEATURE_MANAGED_USERS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_MANAGED_USERS');
end;

class function TJPackageManager.FEATURE_MICROPHONE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_MICROPHONE');
end;

class function TJPackageManager.FEATURE_MIDI: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_MIDI');
end;

class function TJPackageManager.FEATURE_NFC: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_NFC');
end;

class function TJPackageManager.FEATURE_NFC_HOST_CARD_EMULATION: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_NFC_HOST_CARD_EMULATION');
end;

class function TJPackageManager.FEATURE_NFC_HOST_CARD_EMULATION_NFCF: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_NFC_HOST_CARD_EMULATION_NFCF');
end;

class function TJPackageManager.FEATURE_OPENGLES_EXTENSION_PACK: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_OPENGLES_EXTENSION_PACK');
end;

class function TJPackageManager.FEATURE_PC: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_PC');
end;

class function TJPackageManager.FEATURE_PICTURE_IN_PICTURE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_PICTURE_IN_PICTURE');
end;

class function TJPackageManager.FEATURE_PRINTING: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_PRINTING');
end;

class function TJPackageManager.FEATURE_RAM_LOW: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_RAM_LOW');
end;

class function TJPackageManager.FEATURE_RAM_NORMAL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_RAM_NORMAL');
end;

class function TJPackageManager.FEATURE_SCREEN_LANDSCAPE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SCREEN_LANDSCAPE');
end;

class function TJPackageManager.FEATURE_SCREEN_PORTRAIT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SCREEN_PORTRAIT');
end;

class function TJPackageManager.FEATURE_SECURELY_REMOVES_USERS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SECURELY_REMOVES_USERS');
end;

class function TJPackageManager.FEATURE_SENSOR_ACCELEROMETER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_ACCELEROMETER');
end;

class function TJPackageManager.FEATURE_SENSOR_AMBIENT_TEMPERATURE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_AMBIENT_TEMPERATURE');
end;

class function TJPackageManager.FEATURE_SENSOR_BAROMETER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_BAROMETER');
end;

class function TJPackageManager.FEATURE_SENSOR_COMPASS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_COMPASS');
end;

class function TJPackageManager.FEATURE_SENSOR_GYROSCOPE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_GYROSCOPE');
end;

class function TJPackageManager.FEATURE_SENSOR_HEART_RATE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_HEART_RATE');
end;

class function TJPackageManager.FEATURE_SENSOR_HEART_RATE_ECG: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_HEART_RATE_ECG');
end;

class function TJPackageManager.FEATURE_SENSOR_LIGHT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_LIGHT');
end;

class function TJPackageManager.FEATURE_SENSOR_PROXIMITY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_PROXIMITY');
end;

class function TJPackageManager.FEATURE_SENSOR_RELATIVE_HUMIDITY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_RELATIVE_HUMIDITY');
end;

class function TJPackageManager.FEATURE_SENSOR_STEP_COUNTER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_STEP_COUNTER');
end;

class function TJPackageManager.FEATURE_SENSOR_STEP_DETECTOR: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SENSOR_STEP_DETECTOR');
end;

class function TJPackageManager.FEATURE_SIP: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SIP');
end;

class function TJPackageManager.FEATURE_SIP_VOIP: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_SIP_VOIP');
end;

class function TJPackageManager.FEATURE_STRONGBOX_KEYSTORE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_STRONGBOX_KEYSTORE');
end;

class function TJPackageManager.FEATURE_TELEPHONY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TELEPHONY');
end;

class function TJPackageManager.FEATURE_TELEPHONY_CDMA: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TELEPHONY_CDMA');
end;

class function TJPackageManager.FEATURE_TELEPHONY_EUICC: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TELEPHONY_EUICC');
end;

class function TJPackageManager.FEATURE_TELEPHONY_GSM: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TELEPHONY_GSM');
end;

class function TJPackageManager.FEATURE_TELEPHONY_MBMS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TELEPHONY_MBMS');
end;

class function TJPackageManager.FEATURE_TELEVISION: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TELEVISION');
end;

class function TJPackageManager.FEATURE_TOUCHSCREEN: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TOUCHSCREEN');
end;

class function TJPackageManager.FEATURE_TOUCHSCREEN_MULTITOUCH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TOUCHSCREEN_MULTITOUCH');
end;

class function TJPackageManager.FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT');
end;

class function TJPackageManager.FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND');
end;

class function TJPackageManager.FEATURE_USB_ACCESSORY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_USB_ACCESSORY');
end;

class function TJPackageManager.FEATURE_USB_HOST: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_USB_HOST');
end;

class function TJPackageManager.FEATURE_VERIFIED_BOOT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_VERIFIED_BOOT');
end;

class function TJPackageManager.FEATURE_VR_HEADTRACKING: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_VR_HEADTRACKING');
end;

class function TJPackageManager.FEATURE_VR_MODE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_VR_MODE');
end;

class function TJPackageManager.FEATURE_VR_MODE_HIGH_PERFORMANCE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_VR_MODE_HIGH_PERFORMANCE');
end;

class function TJPackageManager.FEATURE_VULKAN_HARDWARE_COMPUTE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_VULKAN_HARDWARE_COMPUTE');
end;

class function TJPackageManager.FEATURE_VULKAN_HARDWARE_LEVEL: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_VULKAN_HARDWARE_LEVEL');
end;

class function TJPackageManager.FEATURE_VULKAN_HARDWARE_VERSION: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_VULKAN_HARDWARE_VERSION');
end;

class function TJPackageManager.FEATURE_WATCH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_WATCH');
end;

class function TJPackageManager.FEATURE_WEBVIEW: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_WEBVIEW');
end;

class function TJPackageManager.FEATURE_WIFI: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_WIFI');
end;

class function TJPackageManager.FEATURE_WIFI_AWARE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_WIFI_AWARE');
end;

class function TJPackageManager.FEATURE_WIFI_DIRECT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_WIFI_DIRECT');
end;

class function TJPackageManager.FEATURE_WIFI_PASSPOINT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_WIFI_PASSPOINT');
end;

class function TJPackageManager.FEATURE_WIFI_RTT: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('FEATURE_WIFI_RTT');
end;

class function TJPackageManager.GET_ACTIVITIES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_ACTIVITIES');
end;

class function TJPackageManager.GET_CONFIGURATIONS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_CONFIGURATIONS');
end;

class function TJPackageManager.GET_DISABLED_COMPONENTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_DISABLED_COMPONENTS');
end;

class function TJPackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_DISABLED_UNTIL_USED_COMPONENTS');
end;

class function TJPackageManager.GET_GIDS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_GIDS');
end;

class function TJPackageManager.GET_INSTRUMENTATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_INSTRUMENTATION');
end;

class function TJPackageManager.GET_INTENT_FILTERS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_INTENT_FILTERS');
end;

class function TJPackageManager.GET_META_DATA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_META_DATA');
end;

class function TJPackageManager.GET_PERMISSIONS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_PERMISSIONS');
end;

class function TJPackageManager.GET_PROVIDERS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_PROVIDERS');
end;

class function TJPackageManager.GET_RECEIVERS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_RECEIVERS');
end;

class function TJPackageManager.GET_RESOLVED_FILTER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_RESOLVED_FILTER');
end;

class function TJPackageManager.GET_SERVICES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_SERVICES');
end;

class function TJPackageManager.GET_SHARED_LIBRARY_FILES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_SHARED_LIBRARY_FILES');
end;

class function TJPackageManager.GET_SIGNATURES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_SIGNATURES');
end;

class function TJPackageManager.GET_SIGNING_CERTIFICATES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_SIGNING_CERTIFICATES');
end;

class function TJPackageManager.GET_UNINSTALLED_PACKAGES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_UNINSTALLED_PACKAGES');
end;

class function TJPackageManager.GET_URI_PERMISSION_PATTERNS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GET_URI_PERMISSION_PATTERNS');
end;

class function TJPackageManager.INSTALL_REASON_DEVICE_RESTORE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INSTALL_REASON_DEVICE_RESTORE');
end;

class function TJPackageManager.INSTALL_REASON_DEVICE_SETUP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INSTALL_REASON_DEVICE_SETUP');
end;

class function TJPackageManager.INSTALL_REASON_POLICY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INSTALL_REASON_POLICY');
end;

class function TJPackageManager.INSTALL_REASON_UNKNOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INSTALL_REASON_UNKNOWN');
end;

class function TJPackageManager.INSTALL_REASON_USER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INSTALL_REASON_USER');
end;

class function TJPackageManager.MATCH_ALL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_ALL');
end;

class function TJPackageManager.MATCH_DEFAULT_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_DEFAULT_ONLY');
end;

class function TJPackageManager.MATCH_DIRECT_BOOT_AWARE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_DIRECT_BOOT_AWARE');
end;

class function TJPackageManager.MATCH_DIRECT_BOOT_UNAWARE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_DIRECT_BOOT_UNAWARE');
end;

class function TJPackageManager.MATCH_DISABLED_COMPONENTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_DISABLED_COMPONENTS');
end;

class function TJPackageManager.MATCH_DISABLED_UNTIL_USED_COMPONENTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_DISABLED_UNTIL_USED_COMPONENTS');
end;

class function TJPackageManager.MATCH_SYSTEM_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_SYSTEM_ONLY');
end;

class function TJPackageManager.MATCH_UNINSTALLED_PACKAGES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_UNINSTALLED_PACKAGES');
end;

class function TJPackageManager.MAXIMUM_VERIFICATION_TIMEOUT: Int64;
begin
  Result := StaticJavaType[Self].GetStaticLongField('MAXIMUM_VERIFICATION_TIMEOUT');
end;

class function TJPackageManager.PERMISSION_DENIED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERMISSION_DENIED');
end;

class function TJPackageManager.PERMISSION_GRANTED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERMISSION_GRANTED');
end;

class function TJPackageManager.SIGNATURE_FIRST_NOT_SIGNED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SIGNATURE_FIRST_NOT_SIGNED');
end;

class function TJPackageManager.SIGNATURE_MATCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SIGNATURE_MATCH');
end;

class function TJPackageManager.SIGNATURE_NEITHER_SIGNED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SIGNATURE_NEITHER_SIGNED');
end;

class function TJPackageManager.SIGNATURE_NO_MATCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SIGNATURE_NO_MATCH');
end;

class function TJPackageManager.SIGNATURE_SECOND_NOT_SIGNED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SIGNATURE_SECOND_NOT_SIGNED');
end;

class function TJPackageManager.SIGNATURE_UNKNOWN_PACKAGE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SIGNATURE_UNKNOWN_PACKAGE');
end;

class function TJPackageManager.VERIFICATION_ALLOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VERIFICATION_ALLOW');
end;

class function TJPackageManager.VERIFICATION_REJECT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VERIFICATION_REJECT');
end;

class function TJPackageManager.VERSION_CODE_HIGHEST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VERSION_CODE_HIGHEST');
end;

procedure TJPackageManager.addPackageToPreferred(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'addPackageToPreferred', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJPackageManager.addPreferredActivity(const AArg0: JIntentFilter; const AArg1: Integer; const AArg2: IJavaArray<JComponentName>; const AArg3: JComponentName);
begin
  JavaType.CallVoidMethod(ObjectID, 'addPreferredActivity', '(Landroid/content/IntentFilter;I[Landroid/content/ComponentName;Landroid/content/ComponentName;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPackageManager.canRequestPackageInstalls: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canRequestPackageInstalls', '()Z', []);
end;

function TJPackageManager.canonicalToCurrentPackageNames(const AArg0: IJavaArray<JString>): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('canonicalToCurrentPackageNames', '([Ljava/lang/String;)[Ljava/lang/String;', [AArg0]);
end;

function TJPackageManager.checkPermission(const AArg0: JString; const AArg1: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkPermission', '(Ljava/lang/String;Ljava/lang/String;)I', [AArg0, AArg1]);
end;

function TJPackageManager.checkSignatures(const AArg0: JString; const AArg1: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkSignatures', '(Ljava/lang/String;Ljava/lang/String;)I', [AArg0, AArg1]);
end;

function TJPackageManager.checkSignatures(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'checkSignatures', '(II)I', [AArg0, AArg1]);
end;

procedure TJPackageManager.clearInstantAppCookie;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearInstantAppCookie', '()V', []);
end;

procedure TJPackageManager.clearPackagePreferredActivities(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'clearPackagePreferredActivities', '(Ljava/lang/String;)V', [AArg0]);
end;

function TJPackageManager.currentToCanonicalPackageNames(const AArg0: IJavaArray<JString>): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('currentToCanonicalPackageNames', '([Ljava/lang/String;)[Ljava/lang/String;', [AArg0]);
end;

procedure TJPackageManager.extendVerificationTimeout(const AArg0: Integer; const AArg1: Integer; const AArg2: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'extendVerificationTimeout', '(IIJ)V', [AArg0, AArg1, AArg2]);
end;

function TJPackageManager.getActivityBanner(const AArg0: JComponentName): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getActivityBanner', '(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getActivityBanner(const AArg0: JIntent): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getActivityBanner', '(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getActivityIcon(const AArg0: JComponentName): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getActivityIcon', '(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getActivityIcon(const AArg0: JIntent): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getActivityIcon', '(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getActivityInfo(const AArg0: JComponentName; const AArg1: Integer): JActivityInfo;
begin
  Result := CallObjectMethod<TJActivityInfo, JActivityInfo>('getActivityInfo', '(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;', [AArg0, AArg1]);
end;

function TJPackageManager.getActivityLogo(const AArg0: JIntent): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getActivityLogo', '(Landroid/content/Intent;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getActivityLogo(const AArg0: JComponentName): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getActivityLogo', '(Landroid/content/ComponentName;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getAllPermissionGroups(const AArg0: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('getAllPermissionGroups', '(I)Ljava/util/List;', [AArg0]);
end;

function TJPackageManager.getApplicationBanner(const AArg0: JApplicationInfo): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getApplicationBanner', '(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getApplicationBanner(const AArg0: JString): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getApplicationBanner', '(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getApplicationEnabledSetting(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getApplicationEnabledSetting', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJPackageManager.getApplicationIcon(const AArg0: JString): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getApplicationIcon', '(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getApplicationIcon(const AArg0: JApplicationInfo): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getApplicationIcon', '(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getApplicationInfo(const AArg0: JString; const AArg1: Integer): JApplicationInfo;
begin
  Result := CallObjectMethod<TJApplicationInfo, JApplicationInfo>('getApplicationInfo', '(Ljava/lang/String;I)Landroid/content/pm/ApplicationInfo;', [AArg0, AArg1]);
end;

function TJPackageManager.getApplicationLabel(const AArg0: JApplicationInfo): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getApplicationLabel', '(Landroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJPackageManager.getApplicationLogo(const AArg0: JString): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getApplicationLogo', '(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getApplicationLogo(const AArg0: JApplicationInfo): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getApplicationLogo', '(Landroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJPackageManager.getComponentEnabledSetting(const AArg0: JComponentName): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getComponentEnabledSetting', '(Landroid/content/ComponentName;)I', [AArg0]);
end;

function TJPackageManager.getDefaultActivityIcon: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDefaultActivityIcon', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJPackageManager.getDrawable(const AArg0: JString; const AArg1: Integer; const AArg2: JApplicationInfo): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDrawable', '(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1, AArg2]);
end;

function TJPackageManager.getInstalledApplications(const AArg0: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('getInstalledApplications', '(I)Ljava/util/List;', [AArg0]);
end;

function TJPackageManager.getInstalledPackages(const AArg0: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('getInstalledPackages', '(I)Ljava/util/List;', [AArg0]);
end;

function TJPackageManager.getInstallerPackageName(const AArg0: JString): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getInstallerPackageName', '(Ljava/lang/String;)Ljava/lang/String;', [AArg0]);
end;

function TJPackageManager.getInstantAppCookie: IJavaArray<Byte>;
begin
  Result := CallArrayMethod<Byte>('getInstantAppCookie', '()[B', []);
end;

function TJPackageManager.getInstantAppCookieMaxBytes: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getInstantAppCookieMaxBytes', '()I', []);
end;

function TJPackageManager.getLaunchIntentForPackage(const AArg0: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('getLaunchIntentForPackage', '(Ljava/lang/String;)Landroid/content/Intent;', [AArg0]);
end;

function TJPackageManager.getLeanbackLaunchIntentForPackage(const AArg0: JString): JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('getLeanbackLaunchIntentForPackage', '(Ljava/lang/String;)Landroid/content/Intent;', [AArg0]);
end;

function TJPackageManager.getNameForUid(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getNameForUid', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJPackageManager.getPackageArchiveInfo(const AArg0: JString; const AArg1: Integer): JPackageInfo;
begin
  Result := CallObjectMethod<TJPackageInfo, JPackageInfo>('getPackageArchiveInfo', '(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;', [AArg0, AArg1]);
end;

function TJPackageManager.getPackageGids(const AArg0: JString; const AArg1: Integer): IJavaArray<Integer>;
begin
  Result := CallArrayMethod<Integer>('getPackageGids', '(Ljava/lang/String;I)[I', [AArg0, AArg1]);
end;

function TJPackageManager.getPackageGids(const AArg0: JString): IJavaArray<Integer>;
begin
  Result := CallArrayMethod<Integer>('getPackageGids', '(Ljava/lang/String;)[I', [AArg0]);
end;

function TJPackageManager.getPackageInfo(const AArg0: JString; const AArg1: Integer): JPackageInfo;
begin
  Result := CallObjectMethod<TJPackageInfo, JPackageInfo>('getPackageInfo', '(Ljava/lang/String;I)Landroid/content/pm/PackageInfo;', [AArg0, AArg1]);
end;

function TJPackageManager.getPackageUid(const AArg0: JString; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPackageUid', '(Ljava/lang/String;I)I', [AArg0, AArg1]);
end;

function TJPackageManager.getPackagesForUid(const AArg0: Integer): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getPackagesForUid', '(I)[Ljava/lang/String;', [AArg0]);
end;

function TJPackageManager.getPackagesHoldingPermissions(const AArg0: IJavaArray<JString>; const AArg1: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('getPackagesHoldingPermissions', '([Ljava/lang/String;I)Ljava/util/List;', [AArg0, AArg1]);
end;

function TJPackageManager.getPreferredActivities(const AArg0: JList; const AArg1: JList; const AArg2: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPreferredActivities', '(Ljava/util/List;Ljava/util/List;Ljava/lang/String;)I', [AArg0, AArg1, AArg2]);
end;

function TJPackageManager.getPreferredPackages(const AArg0: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('getPreferredPackages', '(I)Ljava/util/List;', [AArg0]);
end;

function TJPackageManager.getReceiverInfo(const AArg0: JComponentName; const AArg1: Integer): JActivityInfo;
begin
  Result := CallObjectMethod<TJActivityInfo, JActivityInfo>('getReceiverInfo', '(Landroid/content/ComponentName;I)Landroid/content/pm/ActivityInfo;', [AArg0, AArg1]);
end;

function TJPackageManager.getResourcesForActivity(const AArg0: JComponentName): JResources;
begin
  Result := CallObjectMethod<TJResources, JResources>('getResourcesForActivity', '(Landroid/content/ComponentName;)Landroid/content/res/Resources;', [AArg0]);
end;

function TJPackageManager.getResourcesForApplication(const AArg0: JApplicationInfo): JResources;
begin
  Result := CallObjectMethod<TJResources, JResources>('getResourcesForApplication', '(Landroid/content/pm/ApplicationInfo;)Landroid/content/res/Resources;', [AArg0]);
end;

function TJPackageManager.getResourcesForApplication(const AArg0: JString): JResources;
begin
  Result := CallObjectMethod<TJResources, JResources>('getResourcesForApplication', '(Ljava/lang/String;)Landroid/content/res/Resources;', [AArg0]);
end;

function TJPackageManager.getSharedLibraries(const AArg0: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('getSharedLibraries', '(I)Ljava/util/List;', [AArg0]);
end;

function TJPackageManager.getSuspendedPackageAppExtras: JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getSuspendedPackageAppExtras', '()Landroid/os/Bundle;', []);
end;

function TJPackageManager.getSystemSharedLibraryNames: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getSystemSharedLibraryNames', '()[Ljava/lang/String;', []);
end;

function TJPackageManager.getText(const AArg0: JString; const AArg1: Integer; const AArg2: JApplicationInfo): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getText', '(Ljava/lang/String;ILandroid/content/pm/ApplicationInfo;)Ljava/lang/CharSequence;', [AArg0, AArg1, AArg2]);
end;

function TJPackageManager.getUserBadgedDrawableForDensity(const AArg0: JDrawable; const AArg1: JUserHandle; const AArg2: JRect; const AArg3: Integer): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getUserBadgedDrawableForDensity', '(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;Landroid/graphics/Rect;I)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPackageManager.getUserBadgedIcon(const AArg0: JDrawable; const AArg1: JUserHandle): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getUserBadgedIcon', '(Landroid/graphics/drawable/Drawable;Landroid/os/UserHandle;)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1]);
end;

function TJPackageManager.getUserBadgedLabel(const AArg0: JCharSequence; const AArg1: JUserHandle): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getUserBadgedLabel', '(Ljava/lang/CharSequence;Landroid/os/UserHandle;)Ljava/lang/CharSequence;', [AArg0, AArg1]);
end;

function TJPackageManager.hasSigningCertificate(const AArg0: Integer; const AArg1: IJavaArray<Byte>; const AArg2: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasSigningCertificate', '(I[BI)Z', [AArg0, AArg1, AArg2]);
end;

function TJPackageManager.hasSigningCertificate(const AArg0: JString; const AArg1: IJavaArray<Byte>; const AArg2: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasSigningCertificate', '(Ljava/lang/String;[BI)Z', [AArg0, AArg1, AArg2]);
end;

function TJPackageManager.hasSystemFeature(const AArg0: JString; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasSystemFeature', '(Ljava/lang/String;I)Z', [AArg0, AArg1]);
end;

function TJPackageManager.hasSystemFeature(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasSystemFeature', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJPackageManager.isInstantApp: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInstantApp', '()Z', []);
end;

function TJPackageManager.isInstantApp(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInstantApp', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJPackageManager.isPackageSuspended: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isPackageSuspended', '()Z', []);
end;

function TJPackageManager.isPermissionRevokedByPolicy(const AArg0: JString; const AArg1: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isPermissionRevokedByPolicy', '(Ljava/lang/String;Ljava/lang/String;)Z', [AArg0, AArg1]);
end;

function TJPackageManager.isSafeMode: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isSafeMode', '()Z', []);
end;

function TJPackageManager.queryBroadcastReceivers(const AArg0: JIntent; const AArg1: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('queryBroadcastReceivers', '(Landroid/content/Intent;I)Ljava/util/List;', [AArg0, AArg1]);
end;

function TJPackageManager.queryContentProviders(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('queryContentProviders', '(Ljava/lang/String;II)Ljava/util/List;', [AArg0, AArg1, AArg2]);
end;

function TJPackageManager.queryInstrumentation(const AArg0: JString; const AArg1: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('queryInstrumentation', '(Ljava/lang/String;I)Ljava/util/List;', [AArg0, AArg1]);
end;

function TJPackageManager.queryIntentActivities(const AArg0: JIntent; const AArg1: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('queryIntentActivities', '(Landroid/content/Intent;I)Ljava/util/List;', [AArg0, AArg1]);
end;

function TJPackageManager.queryIntentActivityOptions(const AArg0: JComponentName; const AArg1: IJavaArray<JIntent>; const AArg2: JIntent; const AArg3: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('queryIntentActivityOptions', '(Landroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I)Ljava/util/List;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPackageManager.queryIntentContentProviders(const AArg0: JIntent; const AArg1: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('queryIntentContentProviders', '(Landroid/content/Intent;I)Ljava/util/List;', [AArg0, AArg1]);
end;

function TJPackageManager.queryIntentServices(const AArg0: JIntent; const AArg1: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('queryIntentServices', '(Landroid/content/Intent;I)Ljava/util/List;', [AArg0, AArg1]);
end;

function TJPackageManager.queryPermissionsByGroup(const AArg0: JString; const AArg1: Integer): JList;
begin
  Result := CallObjectMethod<TJList, JList>('queryPermissionsByGroup', '(Ljava/lang/String;I)Ljava/util/List;', [AArg0, AArg1]);
end;

procedure TJPackageManager.removePackageFromPreferred(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'removePackageFromPreferred', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJPackageManager.removePermission(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'removePermission', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJPackageManager.setApplicationCategoryHint(const AArg0: JString; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setApplicationCategoryHint', '(Ljava/lang/String;I)V', [AArg0, AArg1]);
end;

procedure TJPackageManager.setApplicationEnabledSetting(const AArg0: JString; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setApplicationEnabledSetting', '(Ljava/lang/String;II)V', [AArg0, AArg1, AArg2]);
end;

procedure TJPackageManager.setComponentEnabledSetting(const AArg0: JComponentName; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setComponentEnabledSetting', '(Landroid/content/ComponentName;II)V', [AArg0, AArg1, AArg2]);
end;

procedure TJPackageManager.setInstallerPackageName(const AArg0: JString; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'setInstallerPackageName', '(Ljava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

procedure TJPackageManager.updateInstantAppCookie(const AArg0: IJavaArray<Byte>);
begin
  JavaType.CallVoidMethod(ObjectID, 'updateInstantAppCookie', '([B)V', [AArg0]);
end;

procedure TJPackageManager.verifyPendingInstall(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'verifyPendingInstall', '(II)V', [AArg0, AArg1]);
end;

{ TJAssetFileDescriptor }

class procedure TJAssetFileDescriptor.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/os/ParcelFileDescriptor;JJ)V');
  AddMethod('<init>', '(Landroid/os/ParcelFileDescriptor;JJLandroid/os/Bundle;)V');
end;

class procedure TJAssetFileDescriptor.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('close', '()V');
  AddMethod('createInputStream', '()Ljava/io/FileInputStream;');
  AddMethod('createOutputStream', '()Ljava/io/FileOutputStream;');
  AddMethod('describeContents', '()I');
  AddMethod('getDeclaredLength', '()J');
  AddMethod('getExtras', '()Landroid/os/Bundle;');
  AddMethod('getFileDescriptor', '()Ljava/io/FileDescriptor;');
  AddMethod('getLength', '()J');
  AddMethod('getParcelFileDescriptor', '()Landroid/os/ParcelFileDescriptor;');
  AddMethod('getStartOffset', '()J');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJAssetFileDescriptor.LoadFields;
begin
  inherited;
  AddStaticField('UNKNOWN_LENGTH', 'J');
end;

class function TJAssetFileDescriptor.Wrap(const AObjectID: JNIObject): JAssetFileDescriptor;
begin
  Result := Wrap<TJAssetFileDescriptor, JAssetFileDescriptor>(AObjectId);
end;

class function TJAssetFileDescriptor.Wrap(const AObject: IJNIObject): JAssetFileDescriptor;
begin
  Result := Wrap<TJAssetFileDescriptor, JAssetFileDescriptor>(AObject);
end;

class function TJAssetFileDescriptor.Create(const AArg0: JParcelFileDescriptor; const AArg1: Int64; const AArg2: Int64): JAssetFileDescriptor;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/os/ParcelFileDescriptor;JJ)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJAssetFileDescriptor.Create(const AArg0: JParcelFileDescriptor; const AArg1: Int64; const AArg2: Int64; const AArg3: JBundle): JAssetFileDescriptor;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/os/ParcelFileDescriptor;JJLandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

class function TJAssetFileDescriptor.UNKNOWN_LENGTH: Int64;
begin
  Result := StaticJavaType[Self].GetStaticLongField('UNKNOWN_LENGTH');
end;

procedure TJAssetFileDescriptor.close;
begin
  JavaType.CallVoidMethod(ObjectID, 'close', '()V', []);
end;

function TJAssetFileDescriptor.createInputStream: JFileInputStream;
begin
  Result := CallObjectMethod<TJFileInputStream, JFileInputStream>('createInputStream', '()Ljava/io/FileInputStream;', []);
end;

function TJAssetFileDescriptor.createOutputStream: JFileOutputStream;
begin
  Result := CallObjectMethod<TJFileOutputStream, JFileOutputStream>('createOutputStream', '()Ljava/io/FileOutputStream;', []);
end;

function TJAssetFileDescriptor.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJAssetFileDescriptor.getDeclaredLength: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getDeclaredLength', '()J', []);
end;

function TJAssetFileDescriptor.getExtras: JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getExtras', '()Landroid/os/Bundle;', []);
end;

function TJAssetFileDescriptor.getFileDescriptor: JFileDescriptor;
begin
  Result := CallObjectMethod<TJFileDescriptor, JFileDescriptor>('getFileDescriptor', '()Ljava/io/FileDescriptor;', []);
end;

function TJAssetFileDescriptor.getLength: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getLength', '()J', []);
end;

function TJAssetFileDescriptor.getParcelFileDescriptor: JParcelFileDescriptor;
begin
  Result := CallObjectMethod<TJParcelFileDescriptor, JParcelFileDescriptor>('getParcelFileDescriptor', '()Landroid/os/ParcelFileDescriptor;', []);
end;

function TJAssetFileDescriptor.getStartOffset: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getStartOffset', '()J', []);
end;

function TJAssetFileDescriptor.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJAssetManager }

class procedure TJAssetManager.LoadConstructors;
begin
end;

class procedure TJAssetManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('close', '()V');
  AddMethod('getLocales', '()[Ljava/lang/String;');
  AddMethod('list', '(Ljava/lang/String;)[Ljava/lang/String;');
  AddMethod('open', '(Ljava/lang/String;)Ljava/io/InputStream;');
  AddMethod('open', '(Ljava/lang/String;I)Ljava/io/InputStream;');
  AddMethod('openFd', '(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('openNonAssetFd', '(ILjava/lang/String;)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('openNonAssetFd', '(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;');
end;

class procedure TJAssetManager.LoadFields;
begin
  inherited;
  AddStaticField('ACCESS_BUFFER', 'I');
  AddStaticField('ACCESS_RANDOM', 'I');
  AddStaticField('ACCESS_STREAMING', 'I');
  AddStaticField('ACCESS_UNKNOWN', 'I');
end;

class function TJAssetManager.Wrap(const AObjectID: JNIObject): JAssetManager;
begin
  Result := Wrap<TJAssetManager, JAssetManager>(AObjectId);
end;

class function TJAssetManager.Wrap(const AObject: IJNIObject): JAssetManager;
begin
  Result := Wrap<TJAssetManager, JAssetManager>(AObject);
end;

class function TJAssetManager.ACCESS_BUFFER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACCESS_BUFFER');
end;

class function TJAssetManager.ACCESS_RANDOM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACCESS_RANDOM');
end;

class function TJAssetManager.ACCESS_STREAMING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACCESS_STREAMING');
end;

class function TJAssetManager.ACCESS_UNKNOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACCESS_UNKNOWN');
end;

procedure TJAssetManager.close;
begin
  JavaType.CallVoidMethod(ObjectID, 'close', '()V', []);
end;

function TJAssetManager.getLocales: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getLocales', '()[Ljava/lang/String;', []);
end;

function TJAssetManager.list(const AArg0: JString): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('list', '(Ljava/lang/String;)[Ljava/lang/String;', [AArg0]);
end;

function TJAssetManager.open(const AArg0: JString): JInputStream;
begin
  Result := CallObjectMethod<TJInputStream, JInputStream>('open', '(Ljava/lang/String;)Ljava/io/InputStream;', [AArg0]);
end;

function TJAssetManager.open(const AArg0: JString; const AArg1: Integer): JInputStream;
begin
  Result := CallObjectMethod<TJInputStream, JInputStream>('open', '(Ljava/lang/String;I)Ljava/io/InputStream;', [AArg0, AArg1]);
end;

function TJAssetManager.openFd(const AArg0: JString): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openFd', '(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;', [AArg0]);
end;

function TJAssetManager.openNonAssetFd(const AArg0: Integer; const AArg1: JString): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openNonAssetFd', '(ILjava/lang/String;)Landroid/content/res/AssetFileDescriptor;', [AArg0, AArg1]);
end;

function TJAssetManager.openNonAssetFd(const AArg0: JString): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openNonAssetFd', '(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;', [AArg0]);
end;

{ TJColorStateList }

class procedure TJColorStateList.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '([[I[I)V');
end;

class procedure TJColorStateList.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getColorForState', '([II)I');
  AddMethod('getDefaultColor', '()I');
  AddMethod('isOpaque', '()Z');
  AddMethod('isStateful', '()Z');
  AddMethod('toString', '()Ljava/lang/String;');
  AddStaticMethod('valueOf', '(I)Landroid/content/res/ColorStateList;');
  AddMethod('withAlpha', '(I)Landroid/content/res/ColorStateList;');
end;

class function TJColorStateList.Wrap(const AObjectID: JNIObject): JColorStateList;
begin
  Result := Wrap<TJColorStateList, JColorStateList>(AObjectId);
end;

class function TJColorStateList.Wrap(const AObject: IJNIObject): JColorStateList;
begin
  Result := Wrap<TJColorStateList, JColorStateList>(AObject);
end;

class function TJColorStateList.Create(const AArg0: IJavaArray<Integer>; const AArg1: IJavaArray<Integer>): JColorStateList;
begin
  var O := CreateForWrap;
  O.NewObject('([[I[I)V', [AArg0, AArg1]);
  Result := O;
end;

function TJColorStateList.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJColorStateList.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJColorStateList.getColorForState(const AArg0: IJavaArray<Integer>; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColorForState', '([II)I', [AArg0, AArg1]);
end;

function TJColorStateList.getDefaultColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDefaultColor', '()I', []);
end;

function TJColorStateList.isOpaque: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isOpaque', '()Z', []);
end;

function TJColorStateList.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

function TJColorStateList.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

class function TJColorStateList.valueOf(const AArg0: Integer): JColorStateList;
begin
  Result := CallStaticObjectMethod<TJColorStateList, JColorStateList>('valueOf', '(I)Landroid/content/res/ColorStateList;', [AArg0]);
end;

function TJColorStateList.withAlpha(const AArg0: Integer): JColorStateList;
begin
  Result := CallObjectMethod<TJColorStateList, JColorStateList>('withAlpha', '(I)Landroid/content/res/ColorStateList;', [AArg0]);
end;

{ TJConfiguration }

class procedure TJConfiguration.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/content/res/Configuration;)V');
end;

class procedure TJConfiguration.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('compareTo', '(Landroid/content/res/Configuration;)I');
  AddMethod('compareTo', '(Ljava/lang/Object;)I');
  AddMethod('describeContents', '()I');
  AddMethod('diff', '(Landroid/content/res/Configuration;)I');
  AddMethod('equals', '(Landroid/content/res/Configuration;)Z');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('getLayoutDirection', '()I');
  AddMethod('hashCode', '()I');
  AddMethod('isLayoutSizeAtLeast', '(I)Z');
  AddMethod('isScreenHdr', '()Z');
  AddMethod('isScreenRound', '()Z');
  AddMethod('isScreenWideColorGamut', '()Z');
  AddStaticMethod('needNewResources', '(II)Z');
  AddMethod('setLayoutDirection', '(Ljava/util/Locale;)V');
  AddMethod('setLocale', '(Ljava/util/Locale;)V');
  AddMethod('setTo', '(Landroid/content/res/Configuration;)V');
  AddMethod('setToDefaults', '()V');
  AddMethod('toString', '()Ljava/lang/String;');
  AddMethod('updateFrom', '(Landroid/content/res/Configuration;)I');
end;

class procedure TJConfiguration.LoadFields;
begin
  inherited;
  AddStaticField('COLOR_MODE_HDR_MASK', 'I');
  AddStaticField('COLOR_MODE_HDR_NO', 'I');
  AddStaticField('COLOR_MODE_HDR_SHIFT', 'I');
  AddStaticField('COLOR_MODE_HDR_UNDEFINED', 'I');
  AddStaticField('COLOR_MODE_HDR_YES', 'I');
  AddStaticField('COLOR_MODE_UNDEFINED', 'I');
  AddStaticField('COLOR_MODE_WIDE_COLOR_GAMUT_MASK', 'I');
  AddStaticField('COLOR_MODE_WIDE_COLOR_GAMUT_NO', 'I');
  AddStaticField('COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED', 'I');
  AddStaticField('COLOR_MODE_WIDE_COLOR_GAMUT_YES', 'I');
  AddStaticField('DENSITY_DPI_UNDEFINED', 'I');
  AddStaticField('HARDKEYBOARDHIDDEN_NO', 'I');
  AddStaticField('HARDKEYBOARDHIDDEN_UNDEFINED', 'I');
  AddStaticField('HARDKEYBOARDHIDDEN_YES', 'I');
  AddStaticField('KEYBOARDHIDDEN_NO', 'I');
  AddStaticField('KEYBOARDHIDDEN_UNDEFINED', 'I');
  AddStaticField('KEYBOARDHIDDEN_YES', 'I');
  AddStaticField('KEYBOARD_12KEY', 'I');
  AddStaticField('KEYBOARD_NOKEYS', 'I');
  AddStaticField('KEYBOARD_QWERTY', 'I');
  AddStaticField('KEYBOARD_UNDEFINED', 'I');
  AddStaticField('MNC_ZERO', 'I');
  AddStaticField('NAVIGATIONHIDDEN_NO', 'I');
  AddStaticField('NAVIGATIONHIDDEN_UNDEFINED', 'I');
  AddStaticField('NAVIGATIONHIDDEN_YES', 'I');
  AddStaticField('NAVIGATION_DPAD', 'I');
  AddStaticField('NAVIGATION_NONAV', 'I');
  AddStaticField('NAVIGATION_TRACKBALL', 'I');
  AddStaticField('NAVIGATION_UNDEFINED', 'I');
  AddStaticField('NAVIGATION_WHEEL', 'I');
  AddStaticField('ORIENTATION_LANDSCAPE', 'I');
  AddStaticField('ORIENTATION_PORTRAIT', 'I');
  AddStaticField('ORIENTATION_SQUARE', 'I');
  AddStaticField('ORIENTATION_UNDEFINED', 'I');
  AddStaticField('SCREENLAYOUT_LAYOUTDIR_LTR', 'I');
  AddStaticField('SCREENLAYOUT_LAYOUTDIR_MASK', 'I');
  AddStaticField('SCREENLAYOUT_LAYOUTDIR_RTL', 'I');
  AddStaticField('SCREENLAYOUT_LAYOUTDIR_SHIFT', 'I');
  AddStaticField('SCREENLAYOUT_LAYOUTDIR_UNDEFINED', 'I');
  AddStaticField('SCREENLAYOUT_LONG_MASK', 'I');
  AddStaticField('SCREENLAYOUT_LONG_NO', 'I');
  AddStaticField('SCREENLAYOUT_LONG_UNDEFINED', 'I');
  AddStaticField('SCREENLAYOUT_LONG_YES', 'I');
  AddStaticField('SCREENLAYOUT_ROUND_MASK', 'I');
  AddStaticField('SCREENLAYOUT_ROUND_NO', 'I');
  AddStaticField('SCREENLAYOUT_ROUND_UNDEFINED', 'I');
  AddStaticField('SCREENLAYOUT_ROUND_YES', 'I');
  AddStaticField('SCREENLAYOUT_SIZE_LARGE', 'I');
  AddStaticField('SCREENLAYOUT_SIZE_MASK', 'I');
  AddStaticField('SCREENLAYOUT_SIZE_NORMAL', 'I');
  AddStaticField('SCREENLAYOUT_SIZE_SMALL', 'I');
  AddStaticField('SCREENLAYOUT_SIZE_UNDEFINED', 'I');
  AddStaticField('SCREENLAYOUT_SIZE_XLARGE', 'I');
  AddStaticField('SCREENLAYOUT_UNDEFINED', 'I');
  AddStaticField('SCREEN_HEIGHT_DP_UNDEFINED', 'I');
  AddStaticField('SCREEN_WIDTH_DP_UNDEFINED', 'I');
  AddStaticField('SMALLEST_SCREEN_WIDTH_DP_UNDEFINED', 'I');
  AddStaticField('TOUCHSCREEN_FINGER', 'I');
  AddStaticField('TOUCHSCREEN_NOTOUCH', 'I');
  AddStaticField('TOUCHSCREEN_STYLUS', 'I');
  AddStaticField('TOUCHSCREEN_UNDEFINED', 'I');
  AddStaticField('UI_MODE_NIGHT_MASK', 'I');
  AddStaticField('UI_MODE_NIGHT_NO', 'I');
  AddStaticField('UI_MODE_NIGHT_UNDEFINED', 'I');
  AddStaticField('UI_MODE_NIGHT_YES', 'I');
  AddStaticField('UI_MODE_TYPE_APPLIANCE', 'I');
  AddStaticField('UI_MODE_TYPE_CAR', 'I');
  AddStaticField('UI_MODE_TYPE_DESK', 'I');
  AddStaticField('UI_MODE_TYPE_MASK', 'I');
  AddStaticField('UI_MODE_TYPE_NORMAL', 'I');
  AddStaticField('UI_MODE_TYPE_TELEVISION', 'I');
  AddStaticField('UI_MODE_TYPE_UNDEFINED', 'I');
  AddStaticField('UI_MODE_TYPE_VR_HEADSET', 'I');
  AddStaticField('UI_MODE_TYPE_WATCH', 'I');
  AddField('colorMode', 'I');
  AddField('densityDpi', 'I');
  AddField('fontScale', 'F');
  AddField('hardKeyboardHidden', 'I');
  AddField('keyboard', 'I');
  AddField('keyboardHidden', 'I');
  AddField('locale', 'Ljava/util/Locale;');
  AddField('mcc', 'I');
  AddField('mnc', 'I');
  AddField('navigation', 'I');
  AddField('navigationHidden', 'I');
  AddField('orientation', 'I');
  AddField('screenHeightDp', 'I');
  AddField('screenLayout', 'I');
  AddField('screenWidthDp', 'I');
  AddField('smallestScreenWidthDp', 'I');
  AddField('touchscreen', 'I');
  AddField('uiMode', 'I');
end;

class function TJConfiguration.Wrap(const AObjectID: JNIObject): JConfiguration;
begin
  Result := Wrap<TJConfiguration, JConfiguration>(AObjectId);
end;

class function TJConfiguration.Wrap(const AObject: IJNIObject): JConfiguration;
begin
  Result := Wrap<TJConfiguration, JConfiguration>(AObject);
end;

class function TJConfiguration.Create: JConfiguration;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJConfiguration.Create(const AArg0: JConfiguration): JConfiguration;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/res/Configuration;)V', [AArg0]);
  Result := O;
end;

class function TJConfiguration.COLOR_MODE_HDR_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_HDR_MASK');
end;

class function TJConfiguration.COLOR_MODE_HDR_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_HDR_NO');
end;

class function TJConfiguration.COLOR_MODE_HDR_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_HDR_SHIFT');
end;

class function TJConfiguration.COLOR_MODE_HDR_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_HDR_UNDEFINED');
end;

class function TJConfiguration.COLOR_MODE_HDR_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_HDR_YES');
end;

class function TJConfiguration.COLOR_MODE_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_UNDEFINED');
end;

class function TJConfiguration.COLOR_MODE_WIDE_COLOR_GAMUT_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_WIDE_COLOR_GAMUT_MASK');
end;

class function TJConfiguration.COLOR_MODE_WIDE_COLOR_GAMUT_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_WIDE_COLOR_GAMUT_NO');
end;

class function TJConfiguration.COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_WIDE_COLOR_GAMUT_UNDEFINED');
end;

class function TJConfiguration.COLOR_MODE_WIDE_COLOR_GAMUT_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COLOR_MODE_WIDE_COLOR_GAMUT_YES');
end;

class function TJConfiguration.DENSITY_DPI_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_DPI_UNDEFINED');
end;

class function TJConfiguration.HARDKEYBOARDHIDDEN_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HARDKEYBOARDHIDDEN_NO');
end;

class function TJConfiguration.HARDKEYBOARDHIDDEN_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HARDKEYBOARDHIDDEN_UNDEFINED');
end;

class function TJConfiguration.HARDKEYBOARDHIDDEN_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HARDKEYBOARDHIDDEN_YES');
end;

class function TJConfiguration.KEYBOARDHIDDEN_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARDHIDDEN_NO');
end;

class function TJConfiguration.KEYBOARDHIDDEN_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARDHIDDEN_UNDEFINED');
end;

class function TJConfiguration.KEYBOARDHIDDEN_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARDHIDDEN_YES');
end;

class function TJConfiguration.KEYBOARD_12KEY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARD_12KEY');
end;

class function TJConfiguration.KEYBOARD_NOKEYS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARD_NOKEYS');
end;

class function TJConfiguration.KEYBOARD_QWERTY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARD_QWERTY');
end;

class function TJConfiguration.KEYBOARD_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARD_UNDEFINED');
end;

class function TJConfiguration.MNC_ZERO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MNC_ZERO');
end;

class function TJConfiguration.NAVIGATIONHIDDEN_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NAVIGATIONHIDDEN_NO');
end;

class function TJConfiguration.NAVIGATIONHIDDEN_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NAVIGATIONHIDDEN_UNDEFINED');
end;

class function TJConfiguration.NAVIGATIONHIDDEN_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NAVIGATIONHIDDEN_YES');
end;

class function TJConfiguration.NAVIGATION_DPAD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NAVIGATION_DPAD');
end;

class function TJConfiguration.NAVIGATION_NONAV: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NAVIGATION_NONAV');
end;

class function TJConfiguration.NAVIGATION_TRACKBALL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NAVIGATION_TRACKBALL');
end;

class function TJConfiguration.NAVIGATION_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NAVIGATION_UNDEFINED');
end;

class function TJConfiguration.NAVIGATION_WHEEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NAVIGATION_WHEEL');
end;

class function TJConfiguration.ORIENTATION_LANDSCAPE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ORIENTATION_LANDSCAPE');
end;

class function TJConfiguration.ORIENTATION_PORTRAIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ORIENTATION_PORTRAIT');
end;

class function TJConfiguration.ORIENTATION_SQUARE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ORIENTATION_SQUARE');
end;

class function TJConfiguration.ORIENTATION_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ORIENTATION_UNDEFINED');
end;

class function TJConfiguration.SCREENLAYOUT_LAYOUTDIR_LTR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_LAYOUTDIR_LTR');
end;

class function TJConfiguration.SCREENLAYOUT_LAYOUTDIR_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_LAYOUTDIR_MASK');
end;

class function TJConfiguration.SCREENLAYOUT_LAYOUTDIR_RTL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_LAYOUTDIR_RTL');
end;

class function TJConfiguration.SCREENLAYOUT_LAYOUTDIR_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_LAYOUTDIR_SHIFT');
end;

class function TJConfiguration.SCREENLAYOUT_LAYOUTDIR_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_LAYOUTDIR_UNDEFINED');
end;

class function TJConfiguration.SCREENLAYOUT_LONG_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_LONG_MASK');
end;

class function TJConfiguration.SCREENLAYOUT_LONG_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_LONG_NO');
end;

class function TJConfiguration.SCREENLAYOUT_LONG_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_LONG_UNDEFINED');
end;

class function TJConfiguration.SCREENLAYOUT_LONG_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_LONG_YES');
end;

class function TJConfiguration.SCREENLAYOUT_ROUND_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_ROUND_MASK');
end;

class function TJConfiguration.SCREENLAYOUT_ROUND_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_ROUND_NO');
end;

class function TJConfiguration.SCREENLAYOUT_ROUND_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_ROUND_UNDEFINED');
end;

class function TJConfiguration.SCREENLAYOUT_ROUND_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_ROUND_YES');
end;

class function TJConfiguration.SCREENLAYOUT_SIZE_LARGE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_SIZE_LARGE');
end;

class function TJConfiguration.SCREENLAYOUT_SIZE_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_SIZE_MASK');
end;

class function TJConfiguration.SCREENLAYOUT_SIZE_NORMAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_SIZE_NORMAL');
end;

class function TJConfiguration.SCREENLAYOUT_SIZE_SMALL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_SIZE_SMALL');
end;

class function TJConfiguration.SCREENLAYOUT_SIZE_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_SIZE_UNDEFINED');
end;

class function TJConfiguration.SCREENLAYOUT_SIZE_XLARGE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_SIZE_XLARGE');
end;

class function TJConfiguration.SCREENLAYOUT_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREENLAYOUT_UNDEFINED');
end;

class function TJConfiguration.SCREEN_HEIGHT_DP_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_HEIGHT_DP_UNDEFINED');
end;

class function TJConfiguration.SCREEN_WIDTH_DP_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_WIDTH_DP_UNDEFINED');
end;

class function TJConfiguration.SMALLEST_SCREEN_WIDTH_DP_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SMALLEST_SCREEN_WIDTH_DP_UNDEFINED');
end;

class function TJConfiguration.TOUCHSCREEN_FINGER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOUCHSCREEN_FINGER');
end;

class function TJConfiguration.TOUCHSCREEN_NOTOUCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOUCHSCREEN_NOTOUCH');
end;

class function TJConfiguration.TOUCHSCREEN_STYLUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOUCHSCREEN_STYLUS');
end;

class function TJConfiguration.TOUCHSCREEN_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOUCHSCREEN_UNDEFINED');
end;

class function TJConfiguration.UI_MODE_NIGHT_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_NIGHT_MASK');
end;

class function TJConfiguration.UI_MODE_NIGHT_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_NIGHT_NO');
end;

class function TJConfiguration.UI_MODE_NIGHT_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_NIGHT_UNDEFINED');
end;

class function TJConfiguration.UI_MODE_NIGHT_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_NIGHT_YES');
end;

class function TJConfiguration.UI_MODE_TYPE_APPLIANCE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_TYPE_APPLIANCE');
end;

class function TJConfiguration.UI_MODE_TYPE_CAR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_TYPE_CAR');
end;

class function TJConfiguration.UI_MODE_TYPE_DESK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_TYPE_DESK');
end;

class function TJConfiguration.UI_MODE_TYPE_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_TYPE_MASK');
end;

class function TJConfiguration.UI_MODE_TYPE_NORMAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_TYPE_NORMAL');
end;

class function TJConfiguration.UI_MODE_TYPE_TELEVISION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_TYPE_TELEVISION');
end;

class function TJConfiguration.UI_MODE_TYPE_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_TYPE_UNDEFINED');
end;

class function TJConfiguration.UI_MODE_TYPE_VR_HEADSET: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_TYPE_VR_HEADSET');
end;

class function TJConfiguration.UI_MODE_TYPE_WATCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UI_MODE_TYPE_WATCH');
end;

function TJConfiguration._GetColorMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'colorMode');
end;

procedure TJConfiguration._SetColorMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'colorMode', AValue);
end;

function TJConfiguration._GetDensityDpi: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'densityDpi');
end;

procedure TJConfiguration._SetDensityDpi(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'densityDpi', AValue);
end;

function TJConfiguration._GetFontScale: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'fontScale');
end;

procedure TJConfiguration._SetFontScale(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'fontScale', AValue);
end;

function TJConfiguration._GetHardKeyboardHidden: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'hardKeyboardHidden');
end;

procedure TJConfiguration._SetHardKeyboardHidden(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'hardKeyboardHidden', AValue);
end;

function TJConfiguration._GetKeyboard: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'keyboard');
end;

procedure TJConfiguration._SetKeyboard(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'keyboard', AValue);
end;

function TJConfiguration._GetKeyboardHidden: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'keyboardHidden');
end;

procedure TJConfiguration._SetKeyboardHidden(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'keyboardHidden', AValue);
end;

function TJConfiguration._GetLocale: JLocale;
begin
  Result := GetObjectField<TJLocale, JLocale>('locale');
end;

procedure TJConfiguration._SetLocale(const AValue: JLocale);
begin
  JavaType.SetObjectField(ObjectId, 'locale', AValue);
end;

function TJConfiguration._GetMcc: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'mcc');
end;

procedure TJConfiguration._SetMcc(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'mcc', AValue);
end;

function TJConfiguration._GetMnc: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'mnc');
end;

procedure TJConfiguration._SetMnc(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'mnc', AValue);
end;

function TJConfiguration._GetNavigation: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'navigation');
end;

procedure TJConfiguration._SetNavigation(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'navigation', AValue);
end;

function TJConfiguration._GetNavigationHidden: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'navigationHidden');
end;

procedure TJConfiguration._SetNavigationHidden(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'navigationHidden', AValue);
end;

function TJConfiguration._GetOrientation: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'orientation');
end;

procedure TJConfiguration._SetOrientation(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'orientation', AValue);
end;

function TJConfiguration._GetScreenHeightDp: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'screenHeightDp');
end;

procedure TJConfiguration._SetScreenHeightDp(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'screenHeightDp', AValue);
end;

function TJConfiguration._GetScreenLayout: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'screenLayout');
end;

procedure TJConfiguration._SetScreenLayout(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'screenLayout', AValue);
end;

function TJConfiguration._GetScreenWidthDp: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'screenWidthDp');
end;

procedure TJConfiguration._SetScreenWidthDp(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'screenWidthDp', AValue);
end;

function TJConfiguration._GetSmallestScreenWidthDp: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'smallestScreenWidthDp');
end;

procedure TJConfiguration._SetSmallestScreenWidthDp(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'smallestScreenWidthDp', AValue);
end;

function TJConfiguration._GetTouchscreen: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'touchscreen');
end;

procedure TJConfiguration._SetTouchscreen(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'touchscreen', AValue);
end;

function TJConfiguration._GetUiMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'uiMode');
end;

procedure TJConfiguration._SetUiMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'uiMode', AValue);
end;

function TJConfiguration.compareTo(const AArg0: JConfiguration): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'compareTo', '(Landroid/content/res/Configuration;)I', [AArg0]);
end;

function TJConfiguration.compareTo(const AArg0: JObject): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'compareTo', '(Ljava/lang/Object;)I', [AArg0]);
end;

function TJConfiguration.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJConfiguration.diff(const AArg0: JConfiguration): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'diff', '(Landroid/content/res/Configuration;)I', [AArg0]);
end;

function TJConfiguration.equals(const AArg0: JConfiguration): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Landroid/content/res/Configuration;)Z', [AArg0]);
end;

function TJConfiguration.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJConfiguration.getLayoutDirection: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayoutDirection', '()I', []);
end;

function TJConfiguration.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJConfiguration.isLayoutSizeAtLeast(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLayoutSizeAtLeast', '(I)Z', [AArg0]);
end;

function TJConfiguration.isScreenHdr: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isScreenHdr', '()Z', []);
end;

function TJConfiguration.isScreenRound: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isScreenRound', '()Z', []);
end;

function TJConfiguration.isScreenWideColorGamut: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isScreenWideColorGamut', '()Z', []);
end;

class function TJConfiguration.needNewResources(const AArg0: Integer; const AArg1: Integer): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('needNewResources', '(II)Z', [AArg0, AArg1]);
end;

procedure TJConfiguration.setLayoutDirection(const AArg0: JLocale);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayoutDirection', '(Ljava/util/Locale;)V', [AArg0]);
end;

procedure TJConfiguration.setLocale(const AArg0: JLocale);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLocale', '(Ljava/util/Locale;)V', [AArg0]);
end;

procedure TJConfiguration.setTo(const AArg0: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTo', '(Landroid/content/res/Configuration;)V', [AArg0]);
end;

procedure TJConfiguration.setToDefaults;
begin
  JavaType.CallVoidMethod(ObjectID, 'setToDefaults', '()V', []);
end;

function TJConfiguration.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

function TJConfiguration.updateFrom(const AArg0: JConfiguration): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'updateFrom', '(Landroid/content/res/Configuration;)I', [AArg0]);
end;

{ TJResources }

class procedure TJResources.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/res/AssetManager;Landroid/util/DisplayMetrics;Landroid/content/res/Configuration;)V');
end;

class procedure TJResources.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('finishPreloading', '()V');
  AddMethod('flushLayoutCache', '()V');
  AddMethod('getAssets', '()Landroid/content/res/AssetManager;');
  AddMethod('getBoolean', '(I)Z');
  AddMethod('getColor', '(I)I');
  AddMethod('getColor', '(ILandroid/content/res/Resources$Theme;)I');
  AddMethod('getColorStateList', '(I)Landroid/content/res/ColorStateList;');
  AddMethod('getColorStateList', '(ILandroid/content/res/Resources$Theme;)Landroid/content/res/ColorStateList;');
  AddMethod('getConfiguration', '()Landroid/content/res/Configuration;');
  AddMethod('getDimension', '(I)F');
  AddMethod('getDimensionPixelOffset', '(I)I');
  AddMethod('getDimensionPixelSize', '(I)I');
  AddMethod('getDisplayMetrics', '()Landroid/util/DisplayMetrics;');
  AddMethod('getDrawable', '(ILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getDrawable', '(I)Landroid/graphics/drawable/Drawable;');
  AddMethod('getDrawableForDensity', '(IILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;');
  AddMethod('getDrawableForDensity', '(II)Landroid/graphics/drawable/Drawable;');
  AddMethod('getFont', '(I)Landroid/graphics/Typeface;');
  AddMethod('getFraction', '(III)F');
  AddMethod('getIdentifier', '(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I');
  AddMethod('getIntArray', '(I)[I');
  AddMethod('getInteger', '(I)I');
  AddMethod('getQuantityString', '(II)Ljava/lang/String;');
  AddMethod('getQuantityString', '(II[Ljava/lang/Object;)Ljava/lang/String;');
  AddMethod('getQuantityText', '(II)Ljava/lang/CharSequence;');
  AddMethod('getResourceEntryName', '(I)Ljava/lang/String;');
  AddMethod('getResourceName', '(I)Ljava/lang/String;');
  AddMethod('getResourcePackageName', '(I)Ljava/lang/String;');
  AddMethod('getResourceTypeName', '(I)Ljava/lang/String;');
  AddMethod('getString', '(I)Ljava/lang/String;');
  AddMethod('getString', '(I[Ljava/lang/Object;)Ljava/lang/String;');
  AddMethod('getStringArray', '(I)[Ljava/lang/String;');
  AddStaticMethod('getSystem', '()Landroid/content/res/Resources;');
  AddMethod('getText', '(ILjava/lang/CharSequence;)Ljava/lang/CharSequence;');
  AddMethod('getText', '(I)Ljava/lang/CharSequence;');
  AddMethod('getTextArray', '(I)[Ljava/lang/CharSequence;');
  AddMethod('getValue', '(Ljava/lang/String;Landroid/util/TypedValue;Z)V');
  AddMethod('getValue', '(ILandroid/util/TypedValue;Z)V');
  AddMethod('getValueForDensity', '(IILandroid/util/TypedValue;Z)V');
  AddMethod('newTheme', '()Landroid/content/res/Resources$Theme;');
  AddMethod('openRawResource', '(I)Ljava/io/InputStream;');
  AddMethod('openRawResource', '(ILandroid/util/TypedValue;)Ljava/io/InputStream;');
  AddMethod('openRawResourceFd', '(I)Landroid/content/res/AssetFileDescriptor;');
  AddMethod('parseBundleExtra', '(Ljava/lang/String;Landroid/util/AttributeSet;Landroid/os/Bundle;)V');
  AddMethod('updateConfiguration', '(Landroid/content/res/Configuration;Landroid/util/DisplayMetrics;)V');
end;

class function TJResources.Wrap(const AObjectID: JNIObject): JResources;
begin
  Result := Wrap<TJResources, JResources>(AObjectId);
end;

class function TJResources.Wrap(const AObject: IJNIObject): JResources;
begin
  Result := Wrap<TJResources, JResources>(AObject);
end;

class function TJResources.Create(const AArg0: JAssetManager; const AArg1: JDisplayMetrics; const AArg2: JConfiguration): JResources;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/res/AssetManager;Landroid/util/DisplayMetrics;Landroid/content/res/Configuration;)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

procedure TJResources.finishPreloading;
begin
  JavaType.CallVoidMethod(ObjectID, 'finishPreloading', '()V', []);
end;

procedure TJResources.flushLayoutCache;
begin
  JavaType.CallVoidMethod(ObjectID, 'flushLayoutCache', '()V', []);
end;

function TJResources.getAssets: JAssetManager;
begin
  Result := CallObjectMethod<TJAssetManager, JAssetManager>('getAssets', '()Landroid/content/res/AssetManager;', []);
end;

function TJResources.getBoolean(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getBoolean', '(I)Z', [AArg0]);
end;

function TJResources.getColor(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColor', '(I)I', [AArg0]);
end;

function TJResources.getColor(const AArg0: Integer; const AArg1: JResources_Theme): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColor', '(ILandroid/content/res/Resources$Theme;)I', [AArg0, AArg1]);
end;

function TJResources.getColorStateList(const AArg0: Integer): JColorStateList;
begin
  Result := CallObjectMethod<TJColorStateList, JColorStateList>('getColorStateList', '(I)Landroid/content/res/ColorStateList;', [AArg0]);
end;

function TJResources.getColorStateList(const AArg0: Integer; const AArg1: JResources_Theme): JColorStateList;
begin
  Result := CallObjectMethod<TJColorStateList, JColorStateList>('getColorStateList', '(ILandroid/content/res/Resources$Theme;)Landroid/content/res/ColorStateList;', [AArg0, AArg1]);
end;

function TJResources.getConfiguration: JConfiguration;
begin
  Result := CallObjectMethod<TJConfiguration, JConfiguration>('getConfiguration', '()Landroid/content/res/Configuration;', []);
end;

function TJResources.getDimension(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getDimension', '(I)F', [AArg0]);
end;

function TJResources.getDimensionPixelOffset(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDimensionPixelOffset', '(I)I', [AArg0]);
end;

function TJResources.getDimensionPixelSize(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDimensionPixelSize', '(I)I', [AArg0]);
end;

function TJResources.getDisplayMetrics: JDisplayMetrics;
begin
  Result := CallObjectMethod<TJDisplayMetrics, JDisplayMetrics>('getDisplayMetrics', '()Landroid/util/DisplayMetrics;', []);
end;

function TJResources.getDrawable(const AArg0: Integer; const AArg1: JResources_Theme): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDrawable', '(ILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1]);
end;

function TJResources.getDrawable(const AArg0: Integer): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDrawable', '(I)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJResources.getDrawableForDensity(const AArg0: Integer; const AArg1: Integer; const AArg2: JResources_Theme): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDrawableForDensity', '(IILandroid/content/res/Resources$Theme;)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1, AArg2]);
end;

function TJResources.getDrawableForDensity(const AArg0: Integer; const AArg1: Integer): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDrawableForDensity', '(II)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1]);
end;

function TJResources.getFont(const AArg0: Integer): JTypeface;
begin
  Result := CallObjectMethod<TJTypeface, JTypeface>('getFont', '(I)Landroid/graphics/Typeface;', [AArg0]);
end;

function TJResources.getFraction(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFraction', '(III)F', [AArg0, AArg1, AArg2]);
end;

function TJResources.getIdentifier(const AArg0: JString; const AArg1: JString; const AArg2: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIdentifier', '(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I', [AArg0, AArg1, AArg2]);
end;

function TJResources.getIntArray(const AArg0: Integer): IJavaArray<Integer>;
begin
  Result := CallArrayMethod<Integer>('getIntArray', '(I)[I', [AArg0]);
end;

function TJResources.getInteger(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getInteger', '(I)I', [AArg0]);
end;

function TJResources.getQuantityString(const AArg0: Integer; const AArg1: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getQuantityString', '(II)Ljava/lang/String;', [AArg0, AArg1]);
end;

function TJResources.getQuantityString(const AArg0: Integer; const AArg1: Integer; const AArg2: IJavaArray<JObject>): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getQuantityString', '(II[Ljava/lang/Object;)Ljava/lang/String;', [AArg0, AArg1, AArg2]);
end;

function TJResources.getQuantityText(const AArg0: Integer; const AArg1: Integer): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getQuantityText', '(II)Ljava/lang/CharSequence;', [AArg0, AArg1]);
end;

function TJResources.getResourceEntryName(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getResourceEntryName', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJResources.getResourceName(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getResourceName', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJResources.getResourcePackageName(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getResourcePackageName', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJResources.getResourceTypeName(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getResourceTypeName', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJResources.getString(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJResources.getString(const AArg0: Integer; const AArg1: IJavaArray<JObject>): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(I[Ljava/lang/Object;)Ljava/lang/String;', [AArg0, AArg1]);
end;

function TJResources.getStringArray(const AArg0: Integer): IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getStringArray', '(I)[Ljava/lang/String;', [AArg0]);
end;

class function TJResources.getSystem: JResources;
begin
  Result := CallStaticObjectMethod<TJResources, JResources>('getSystem', '()Landroid/content/res/Resources;', []);
end;

function TJResources.getText(const AArg0: Integer; const AArg1: JCharSequence): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getText', '(ILjava/lang/CharSequence;)Ljava/lang/CharSequence;', [AArg0, AArg1]);
end;

function TJResources.getText(const AArg0: Integer): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getText', '(I)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJResources.getTextArray(const AArg0: Integer): IJavaArray<JCharSequence>;
begin
  Result := CallArrayMethod<JCharSequence>('getTextArray', '(I)[Ljava/lang/CharSequence;', [AArg0]);
end;

procedure TJResources.getValue(const AArg0: JString; const AArg1: JTypedValue; const AArg2: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'getValue', '(Ljava/lang/String;Landroid/util/TypedValue;Z)V', [AArg0, AArg1, AArg2]);
end;

procedure TJResources.getValue(const AArg0: Integer; const AArg1: JTypedValue; const AArg2: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'getValue', '(ILandroid/util/TypedValue;Z)V', [AArg0, AArg1, AArg2]);
end;

procedure TJResources.getValueForDensity(const AArg0: Integer; const AArg1: Integer; const AArg2: JTypedValue; const AArg3: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'getValueForDensity', '(IILandroid/util/TypedValue;Z)V', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJResources.newTheme: JResources_Theme;
begin
  Result := CallObjectMethod<TJResources_Theme, JResources_Theme>('newTheme', '()Landroid/content/res/Resources$Theme;', []);
end;

function TJResources.openRawResource(const AArg0: Integer): JInputStream;
begin
  Result := CallObjectMethod<TJInputStream, JInputStream>('openRawResource', '(I)Ljava/io/InputStream;', [AArg0]);
end;

function TJResources.openRawResource(const AArg0: Integer; const AArg1: JTypedValue): JInputStream;
begin
  Result := CallObjectMethod<TJInputStream, JInputStream>('openRawResource', '(ILandroid/util/TypedValue;)Ljava/io/InputStream;', [AArg0, AArg1]);
end;

function TJResources.openRawResourceFd(const AArg0: Integer): JAssetFileDescriptor;
begin
  Result := CallObjectMethod<TJAssetFileDescriptor, JAssetFileDescriptor>('openRawResourceFd', '(I)Landroid/content/res/AssetFileDescriptor;', [AArg0]);
end;

procedure TJResources.parseBundleExtra(const AArg0: JString; const AArg1: JAttributeSet; const AArg2: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'parseBundleExtra', '(Ljava/lang/String;Landroid/util/AttributeSet;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJResources.updateConfiguration(const AArg0: JConfiguration; const AArg1: JDisplayMetrics);
begin
  JavaType.CallVoidMethod(ObjectID, 'updateConfiguration', '(Landroid/content/res/Configuration;Landroid/util/DisplayMetrics;)V', [AArg0, AArg1]);
end;

{ TJResources_Theme }

class procedure TJResources_Theme.LoadConstructors;
begin
end;

class procedure TJResources_Theme.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyStyle', '(IZ)V');
  AddMethod('dump', '(ILjava/lang/String;Ljava/lang/String;)V');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getDrawable', '(I)Landroid/graphics/drawable/Drawable;');
  AddMethod('getResources', '()Landroid/content/res/Resources;');
  AddMethod('resolveAttribute', '(ILandroid/util/TypedValue;Z)Z');
  AddMethod('setTo', '(Landroid/content/res/Resources$Theme;)V');
end;

class function TJResources_Theme.Wrap(const AObjectID: JNIObject): JResources_Theme;
begin
  Result := Wrap<TJResources_Theme, JResources_Theme>(AObjectId);
end;

class function TJResources_Theme.Wrap(const AObject: IJNIObject): JResources_Theme;
begin
  Result := Wrap<TJResources_Theme, JResources_Theme>(AObject);
end;

procedure TJResources_Theme.applyStyle(const AArg0: Integer; const AArg1: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyStyle', '(IZ)V', [AArg0, AArg1]);
end;

procedure TJResources_Theme.dump(const AArg0: Integer; const AArg1: JString; const AArg2: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'dump', '(ILjava/lang/String;Ljava/lang/String;)V', [AArg0, AArg1, AArg2]);
end;

function TJResources_Theme.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJResources_Theme.getDrawable(const AArg0: Integer): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDrawable', '(I)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJResources_Theme.getResources: JResources;
begin
  Result := CallObjectMethod<TJResources, JResources>('getResources', '()Landroid/content/res/Resources;', []);
end;

function TJResources_Theme.resolveAttribute(const AArg0: Integer; const AArg1: JTypedValue; const AArg2: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'resolveAttribute', '(ILandroid/util/TypedValue;Z)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJResources_Theme.setTo(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTo', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

{ TJAbstractCursor }

class procedure TJAbstractCursor.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJAbstractCursor.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('close', '()V');
  AddMethod('deactivate', '()V');
  AddMethod('getBlob', '(I)[B');
  AddMethod('getColumnCount', '()I');
  AddMethod('getColumnIndex', '(Ljava/lang/String;)I');
  AddMethod('getColumnIndexOrThrow', '(Ljava/lang/String;)I');
  AddMethod('getColumnName', '(I)Ljava/lang/String;');
  AddMethod('getColumnNames', '()[Ljava/lang/String;');
  AddMethod('getCount', '()I');
  AddMethod('getDouble', '(I)D');
  AddMethod('getExtras', '()Landroid/os/Bundle;');
  AddMethod('getFloat', '(I)F');
  AddMethod('getInt', '(I)I');
  AddMethod('getLong', '(I)J');
  AddMethod('getNotificationUri', '()Landroid/net/Uri;');
  AddMethod('getPosition', '()I');
  AddMethod('getShort', '(I)S');
  AddMethod('getString', '(I)Ljava/lang/String;');
  AddMethod('getType', '(I)I');
  AddMethod('getWantsAllOnMoveCalls', '()Z');
  AddMethod('isAfterLast', '()Z');
  AddMethod('isBeforeFirst', '()Z');
  AddMethod('isClosed', '()Z');
  AddMethod('isFirst', '()Z');
  AddMethod('isLast', '()Z');
  AddMethod('isNull', '(I)Z');
  AddMethod('move', '(I)Z');
  AddMethod('moveToFirst', '()Z');
  AddMethod('moveToLast', '()Z');
  AddMethod('moveToNext', '()Z');
  AddMethod('moveToPosition', '(I)Z');
  AddMethod('moveToPrevious', '()Z');
  AddMethod('onMove', '(II)Z');
  AddMethod('registerContentObserver', '(Landroid/database/ContentObserver;)V');
  AddMethod('registerDataSetObserver', '(Landroid/database/DataSetObserver;)V');
  AddMethod('requery', '()Z');
  AddMethod('respond', '(Landroid/os/Bundle;)Landroid/os/Bundle;');
  AddMethod('setExtras', '(Landroid/os/Bundle;)V');
  AddMethod('setNotificationUri', '(Landroid/content/ContentResolver;Landroid/net/Uri;)V');
  AddMethod('unregisterContentObserver', '(Landroid/database/ContentObserver;)V');
  AddMethod('unregisterDataSetObserver', '(Landroid/database/DataSetObserver;)V');
end;

class function TJAbstractCursor.Wrap(const AObjectID: JNIObject): JAbstractCursor;
begin
  Result := Wrap<TJAbstractCursor, JAbstractCursor>(AObjectId);
end;

class function TJAbstractCursor.Wrap(const AObject: IJNIObject): JAbstractCursor;
begin
  Result := Wrap<TJAbstractCursor, JAbstractCursor>(AObject);
end;

class function TJAbstractCursor.Create: JAbstractCursor;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJAbstractCursor.close;
begin
  JavaType.CallVoidMethod(ObjectID, 'close', '()V', []);
end;

procedure TJAbstractCursor.deactivate;
begin
  JavaType.CallVoidMethod(ObjectID, 'deactivate', '()V', []);
end;

function TJAbstractCursor.getBlob(const AArg0: Integer): IJavaArray<Byte>;
begin
  Result := CallArrayMethod<Byte>('getBlob', '(I)[B', [AArg0]);
end;

function TJAbstractCursor.getColumnCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColumnCount', '()I', []);
end;

function TJAbstractCursor.getColumnIndex(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColumnIndex', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJAbstractCursor.getColumnIndexOrThrow(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColumnIndexOrThrow', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJAbstractCursor.getColumnName(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getColumnName', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJAbstractCursor.getColumnNames: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getColumnNames', '()[Ljava/lang/String;', []);
end;

function TJAbstractCursor.getCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getCount', '()I', []);
end;

function TJAbstractCursor.getDouble(const AArg0: Integer): Double;
begin
  Result := JavaType.CallDoubleMethod(ObjectID, 'getDouble', '(I)D', [AArg0]);
end;

function TJAbstractCursor.getExtras: JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getExtras', '()Landroid/os/Bundle;', []);
end;

function TJAbstractCursor.getFloat(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFloat', '(I)F', [AArg0]);
end;

function TJAbstractCursor.getInt(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getInt', '(I)I', [AArg0]);
end;

function TJAbstractCursor.getLong(const AArg0: Integer): Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getLong', '(I)J', [AArg0]);
end;

function TJAbstractCursor.getNotificationUri: JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('getNotificationUri', '()Landroid/net/Uri;', []);
end;

function TJAbstractCursor.getPosition: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPosition', '()I', []);
end;

function TJAbstractCursor.getShort(const AArg0: Integer): ShortInt;
begin
  Result := JavaType.CallShortMethod(ObjectID, 'getShort', '(I)S', [AArg0]);
end;

function TJAbstractCursor.getString(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJAbstractCursor.getType(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getType', '(I)I', [AArg0]);
end;

function TJAbstractCursor.getWantsAllOnMoveCalls: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getWantsAllOnMoveCalls', '()Z', []);
end;

function TJAbstractCursor.isAfterLast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAfterLast', '()Z', []);
end;

function TJAbstractCursor.isBeforeFirst: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isBeforeFirst', '()Z', []);
end;

function TJAbstractCursor.isClosed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isClosed', '()Z', []);
end;

function TJAbstractCursor.isFirst: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFirst', '()Z', []);
end;

function TJAbstractCursor.isLast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLast', '()Z', []);
end;

function TJAbstractCursor.isNull(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isNull', '(I)Z', [AArg0]);
end;

function TJAbstractCursor.move(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'move', '(I)Z', [AArg0]);
end;

function TJAbstractCursor.moveToFirst: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToFirst', '()Z', []);
end;

function TJAbstractCursor.moveToLast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToLast', '()Z', []);
end;

function TJAbstractCursor.moveToNext: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToNext', '()Z', []);
end;

function TJAbstractCursor.moveToPosition(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToPosition', '(I)Z', [AArg0]);
end;

function TJAbstractCursor.moveToPrevious: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToPrevious', '()Z', []);
end;

function TJAbstractCursor.onMove(const AArg0: Integer; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onMove', '(II)Z', [AArg0, AArg1]);
end;

procedure TJAbstractCursor.registerContentObserver(const AArg0: JContentObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerContentObserver', '(Landroid/database/ContentObserver;)V', [AArg0]);
end;

procedure TJAbstractCursor.registerDataSetObserver(const AArg0: JDataSetObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerDataSetObserver', '(Landroid/database/DataSetObserver;)V', [AArg0]);
end;

function TJAbstractCursor.requery: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requery', '()Z', []);
end;

function TJAbstractCursor.respond(const AArg0: JBundle): JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('respond', '(Landroid/os/Bundle;)Landroid/os/Bundle;', [AArg0]);
end;

procedure TJAbstractCursor.setExtras(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'setExtras', '(Landroid/os/Bundle;)V', [AArg0]);
end;

procedure TJAbstractCursor.setNotificationUri(const AArg0: JContentResolver; const AArg1: JUri);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNotificationUri', '(Landroid/content/ContentResolver;Landroid/net/Uri;)V', [AArg0, AArg1]);
end;

procedure TJAbstractCursor.unregisterContentObserver(const AArg0: JContentObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterContentObserver', '(Landroid/database/ContentObserver;)V', [AArg0]);
end;

procedure TJAbstractCursor.unregisterDataSetObserver(const AArg0: JDataSetObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterDataSetObserver', '(Landroid/database/DataSetObserver;)V', [AArg0]);
end;

{ TJMatrixCursor }

class procedure TJMatrixCursor.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '([Ljava/lang/String;I)V');
  AddMethod('<init>', '([Ljava/lang/String;)V');
end;

class procedure TJMatrixCursor.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addRow', '(Ljava/lang/Iterable;)V');
  AddMethod('addRow', '([Ljava/lang/Object;)V');
  AddMethod('getBlob', '(I)[B');
  AddMethod('getColumnNames', '()[Ljava/lang/String;');
  AddMethod('getCount', '()I');
  AddMethod('getDouble', '(I)D');
  AddMethod('getFloat', '(I)F');
  AddMethod('getInt', '(I)I');
  AddMethod('getLong', '(I)J');
  AddMethod('getShort', '(I)S');
  AddMethod('getString', '(I)Ljava/lang/String;');
  AddMethod('getType', '(I)I');
  AddMethod('isNull', '(I)Z');
end;

class function TJMatrixCursor.Wrap(const AObjectID: JNIObject): JMatrixCursor;
begin
  Result := Wrap<TJMatrixCursor, JMatrixCursor>(AObjectId);
end;

class function TJMatrixCursor.Wrap(const AObject: IJNIObject): JMatrixCursor;
begin
  Result := Wrap<TJMatrixCursor, JMatrixCursor>(AObject);
end;

class function TJMatrixCursor.Create(const AArg0: IJavaArray<JString>; const AArg1: Integer): JMatrixCursor;
begin
  var O := CreateForWrap;
  O.NewObject('([Ljava/lang/String;I)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJMatrixCursor.Create(const AArg0: IJavaArray<JString>): JMatrixCursor;
begin
  var O := CreateForWrap;
  O.NewObject('([Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

procedure TJMatrixCursor.addRow(const AArg0: JIterable);
begin
  JavaType.CallVoidMethod(ObjectID, 'addRow', '(Ljava/lang/Iterable;)V', [AArg0]);
end;

procedure TJMatrixCursor.addRow(const AArg0: IJavaArray<JObject>);
begin
  JavaType.CallVoidMethod(ObjectID, 'addRow', '([Ljava/lang/Object;)V', [AArg0]);
end;

function TJMatrixCursor.getBlob(const AArg0: Integer): IJavaArray<Byte>;
begin
  Result := CallArrayMethod<Byte>('getBlob', '(I)[B', [AArg0]);
end;

function TJMatrixCursor.getColumnNames: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getColumnNames', '()[Ljava/lang/String;', []);
end;

function TJMatrixCursor.getCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getCount', '()I', []);
end;

function TJMatrixCursor.getDouble(const AArg0: Integer): Double;
begin
  Result := JavaType.CallDoubleMethod(ObjectID, 'getDouble', '(I)D', [AArg0]);
end;

function TJMatrixCursor.getFloat(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFloat', '(I)F', [AArg0]);
end;

function TJMatrixCursor.getInt(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getInt', '(I)I', [AArg0]);
end;

function TJMatrixCursor.getLong(const AArg0: Integer): Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getLong', '(I)J', [AArg0]);
end;

function TJMatrixCursor.getShort(const AArg0: Integer): ShortInt;
begin
  Result := JavaType.CallShortMethod(ObjectID, 'getShort', '(I)S', [AArg0]);
end;

function TJMatrixCursor.getString(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJMatrixCursor.getType(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getType', '(I)I', [AArg0]);
end;

function TJMatrixCursor.isNull(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isNull', '(I)Z', [AArg0]);
end;

{ TJContentObserver }

class procedure TJContentObserver.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/os/Handler;)V');
end;

class procedure TJContentObserver.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('deliverSelfNotifications', '()Z');
  AddMethod('dispatchChange', '(Z)V');
  AddMethod('dispatchChange', '(ZLandroid/net/Uri;)V');
  AddMethod('onChange', '(ZLandroid/net/Uri;)V');
  AddMethod('onChange', '(Z)V');
end;

class function TJContentObserver.Wrap(const AObjectID: JNIObject): JContentObserver;
begin
  Result := Wrap<TJContentObserver, JContentObserver>(AObjectId);
end;

class function TJContentObserver.Wrap(const AObject: IJNIObject): JContentObserver;
begin
  Result := Wrap<TJContentObserver, JContentObserver>(AObject);
end;

class function TJContentObserver.Create(const AArg0: JHandler): JContentObserver;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/os/Handler;)V', [AArg0]);
  Result := O;
end;

function TJContentObserver.deliverSelfNotifications: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'deliverSelfNotifications', '()Z', []);
end;

procedure TJContentObserver.dispatchChange(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchChange', '(Z)V', [AArg0]);
end;

procedure TJContentObserver.dispatchChange(const AArg0: Boolean; const AArg1: JUri);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchChange', '(ZLandroid/net/Uri;)V', [AArg0, AArg1]);
end;

procedure TJContentObserver.onChange(const AArg0: Boolean; const AArg1: JUri);
begin
  JavaType.CallVoidMethod(ObjectID, 'onChange', '(ZLandroid/net/Uri;)V', [AArg0, AArg1]);
end;

procedure TJContentObserver.onChange(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onChange', '(Z)V', [AArg0]);
end;

{ TJCursor }

class procedure TJCursor.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('close', '()V');
  AddMethod('deactivate', '()V');
  AddMethod('getBlob', '(I)[B');
  AddMethod('getColumnCount', '()I');
  AddMethod('getColumnIndex', '(Ljava/lang/String;)I');
  AddMethod('getColumnIndexOrThrow', '(Ljava/lang/String;)I');
  AddMethod('getColumnName', '(I)Ljava/lang/String;');
  AddMethod('getColumnNames', '()[Ljava/lang/String;');
  AddMethod('getCount', '()I');
  AddMethod('getDouble', '(I)D');
  AddMethod('getExtras', '()Landroid/os/Bundle;');
  AddMethod('getFloat', '(I)F');
  AddMethod('getInt', '(I)I');
  AddMethod('getLong', '(I)J');
  AddMethod('getNotificationUri', '()Landroid/net/Uri;');
  AddMethod('getPosition', '()I');
  AddMethod('getShort', '(I)S');
  AddMethod('getString', '(I)Ljava/lang/String;');
  AddMethod('getType', '(I)I');
  AddMethod('getWantsAllOnMoveCalls', '()Z');
  AddMethod('isAfterLast', '()Z');
  AddMethod('isBeforeFirst', '()Z');
  AddMethod('isClosed', '()Z');
  AddMethod('isFirst', '()Z');
  AddMethod('isLast', '()Z');
  AddMethod('isNull', '(I)Z');
  AddMethod('move', '(I)Z');
  AddMethod('moveToFirst', '()Z');
  AddMethod('moveToLast', '()Z');
  AddMethod('moveToNext', '()Z');
  AddMethod('moveToPosition', '(I)Z');
  AddMethod('moveToPrevious', '()Z');
  AddMethod('registerContentObserver', '(Landroid/database/ContentObserver;)V');
  AddMethod('registerDataSetObserver', '(Landroid/database/DataSetObserver;)V');
  AddMethod('requery', '()Z');
  AddMethod('respond', '(Landroid/os/Bundle;)Landroid/os/Bundle;');
  AddMethod('setExtras', '(Landroid/os/Bundle;)V');
  AddMethod('setNotificationUri', '(Landroid/content/ContentResolver;Landroid/net/Uri;)V');
  AddMethod('unregisterContentObserver', '(Landroid/database/ContentObserver;)V');
  AddMethod('unregisterDataSetObserver', '(Landroid/database/DataSetObserver;)V');
end;

class procedure TJCursor.LoadFields;
begin
  inherited;
  AddStaticField('FIELD_TYPE_BLOB', 'I');
  AddStaticField('FIELD_TYPE_FLOAT', 'I');
  AddStaticField('FIELD_TYPE_INTEGER', 'I');
  AddStaticField('FIELD_TYPE_NULL', 'I');
  AddStaticField('FIELD_TYPE_STRING', 'I');
end;

class function TJCursor.Wrap(const AObjectID: JNIObject): JCursor;
begin
  Result := Wrap<TJCursor, JCursor>(AObjectId);
end;

class function TJCursor.Wrap(const AObject: IJNIObject): JCursor;
begin
  Result := Wrap<TJCursor, JCursor>(AObject);
end;

class function TJCursor.FIELD_TYPE_BLOB: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIELD_TYPE_BLOB');
end;

class function TJCursor.FIELD_TYPE_FLOAT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIELD_TYPE_FLOAT');
end;

class function TJCursor.FIELD_TYPE_INTEGER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIELD_TYPE_INTEGER');
end;

class function TJCursor.FIELD_TYPE_NULL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIELD_TYPE_NULL');
end;

class function TJCursor.FIELD_TYPE_STRING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIELD_TYPE_STRING');
end;

procedure TJCursor.close;
begin
  JavaType.CallVoidMethod(ObjectID, 'close', '()V', []);
end;

procedure TJCursor.deactivate;
begin
  JavaType.CallVoidMethod(ObjectID, 'deactivate', '()V', []);
end;

function TJCursor.getBlob(const AArg0: Integer): IJavaArray<Byte>;
begin
  Result := CallArrayMethod<Byte>('getBlob', '(I)[B', [AArg0]);
end;

function TJCursor.getColumnCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColumnCount', '()I', []);
end;

function TJCursor.getColumnIndex(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColumnIndex', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJCursor.getColumnIndexOrThrow(const AArg0: JString): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColumnIndexOrThrow', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJCursor.getColumnName(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getColumnName', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJCursor.getColumnNames: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getColumnNames', '()[Ljava/lang/String;', []);
end;

function TJCursor.getCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getCount', '()I', []);
end;

function TJCursor.getDouble(const AArg0: Integer): Double;
begin
  Result := JavaType.CallDoubleMethod(ObjectID, 'getDouble', '(I)D', [AArg0]);
end;

function TJCursor.getExtras: JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getExtras', '()Landroid/os/Bundle;', []);
end;

function TJCursor.getFloat(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFloat', '(I)F', [AArg0]);
end;

function TJCursor.getInt(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getInt', '(I)I', [AArg0]);
end;

function TJCursor.getLong(const AArg0: Integer): Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getLong', '(I)J', [AArg0]);
end;

function TJCursor.getNotificationUri: JUri;
begin
  Result := CallObjectMethod<TJUri, JUri>('getNotificationUri', '()Landroid/net/Uri;', []);
end;

function TJCursor.getPosition: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPosition', '()I', []);
end;

function TJCursor.getShort(const AArg0: Integer): ShortInt;
begin
  Result := JavaType.CallShortMethod(ObjectID, 'getShort', '(I)S', [AArg0]);
end;

function TJCursor.getString(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJCursor.getType(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getType', '(I)I', [AArg0]);
end;

function TJCursor.getWantsAllOnMoveCalls: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getWantsAllOnMoveCalls', '()Z', []);
end;

function TJCursor.isAfterLast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAfterLast', '()Z', []);
end;

function TJCursor.isBeforeFirst: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isBeforeFirst', '()Z', []);
end;

function TJCursor.isClosed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isClosed', '()Z', []);
end;

function TJCursor.isFirst: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFirst', '()Z', []);
end;

function TJCursor.isLast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLast', '()Z', []);
end;

function TJCursor.isNull(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isNull', '(I)Z', [AArg0]);
end;

function TJCursor.move(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'move', '(I)Z', [AArg0]);
end;

function TJCursor.moveToFirst: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToFirst', '()Z', []);
end;

function TJCursor.moveToLast: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToLast', '()Z', []);
end;

function TJCursor.moveToNext: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToNext', '()Z', []);
end;

function TJCursor.moveToPosition(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToPosition', '(I)Z', [AArg0]);
end;

function TJCursor.moveToPrevious: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'moveToPrevious', '()Z', []);
end;

procedure TJCursor.registerContentObserver(const AArg0: JContentObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerContentObserver', '(Landroid/database/ContentObserver;)V', [AArg0]);
end;

procedure TJCursor.registerDataSetObserver(const AArg0: JDataSetObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerDataSetObserver', '(Landroid/database/DataSetObserver;)V', [AArg0]);
end;

function TJCursor.requery: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requery', '()Z', []);
end;

function TJCursor.respond(const AArg0: JBundle): JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('respond', '(Landroid/os/Bundle;)Landroid/os/Bundle;', [AArg0]);
end;

procedure TJCursor.setExtras(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'setExtras', '(Landroid/os/Bundle;)V', [AArg0]);
end;

procedure TJCursor.setNotificationUri(const AArg0: JContentResolver; const AArg1: JUri);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNotificationUri', '(Landroid/content/ContentResolver;Landroid/net/Uri;)V', [AArg0, AArg1]);
end;

procedure TJCursor.unregisterContentObserver(const AArg0: JContentObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterContentObserver', '(Landroid/database/ContentObserver;)V', [AArg0]);
end;

procedure TJCursor.unregisterDataSetObserver(const AArg0: JDataSetObserver);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterDataSetObserver', '(Landroid/database/DataSetObserver;)V', [AArg0]);
end;

{ TJDataSetObserver }

class procedure TJDataSetObserver.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJDataSetObserver.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onChanged', '()V');
  AddMethod('onInvalidated', '()V');
end;

class function TJDataSetObserver.Wrap(const AObjectID: JNIObject): JDataSetObserver;
begin
  Result := Wrap<TJDataSetObserver, JDataSetObserver>(AObjectId);
end;

class function TJDataSetObserver.Wrap(const AObject: IJNIObject): JDataSetObserver;
begin
  Result := Wrap<TJDataSetObserver, JDataSetObserver>(AObject);
end;

class function TJDataSetObserver.Create: JDataSetObserver;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJDataSetObserver.onChanged;
begin
  JavaType.CallVoidMethod(ObjectID, 'onChanged', '()V', []);
end;

procedure TJDataSetObserver.onInvalidated;
begin
  JavaType.CallVoidMethod(ObjectID, 'onInvalidated', '()V', []);
end;

{ TJObservable }

class procedure TJObservable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJObservable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('registerObserver', '(Ljava/lang/Object;)V');
  AddMethod('unregisterAll', '()V');
  AddMethod('unregisterObserver', '(Ljava/lang/Object;)V');
end;

class function TJObservable.Wrap(const AObjectID: JNIObject): JObservable;
begin
  Result := Wrap<TJObservable, JObservable>(AObjectId);
end;

class function TJObservable.Wrap(const AObject: IJNIObject): JObservable;
begin
  Result := Wrap<TJObservable, JObservable>(AObject);
end;

class function TJObservable.Create: JObservable;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJObservable.registerObserver(const AArg0: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerObserver', '(Ljava/lang/Object;)V', [AArg0]);
end;

procedure TJObservable.unregisterAll;
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterAll', '()V', []);
end;

procedure TJObservable.unregisterObserver(const AArg0: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterObserver', '(Ljava/lang/Object;)V', [AArg0]);
end;

{ TJDataSetObservable }

class procedure TJDataSetObservable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJDataSetObservable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('notifyChanged', '()V');
  AddMethod('notifyInvalidated', '()V');
end;

class function TJDataSetObservable.Wrap(const AObjectID: JNIObject): JDataSetObservable;
begin
  Result := Wrap<TJDataSetObservable, JDataSetObservable>(AObjectId);
end;

class function TJDataSetObservable.Wrap(const AObject: IJNIObject): JDataSetObservable;
begin
  Result := Wrap<TJDataSetObservable, JDataSetObservable>(AObject);
end;

class function TJDataSetObservable.Create: JDataSetObservable;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJDataSetObservable.notifyChanged;
begin
  JavaType.CallVoidMethod(ObjectID, 'notifyChanged', '()V', []);
end;

procedure TJDataSetObservable.notifyInvalidated;
begin
  JavaType.CallVoidMethod(ObjectID, 'notifyInvalidated', '()V', []);
end;

{ TJBitmap }

class procedure TJBitmap.LoadConstructors;
begin
end;

class procedure TJBitmap.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('compress', '(Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z');
  AddMethod('copy', '(Landroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '(Landroid/util/DisplayMetrics;IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '(IILandroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '(Landroid/util/DisplayMetrics;IILandroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '(Landroid/util/DisplayMetrics;[IIILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '([IIILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '([IIIIILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '(Landroid/util/DisplayMetrics;[IIIIILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '(Landroid/graphics/Bitmap;IIII)Landroid/graphics/Bitmap;');
  AddStaticMethod('createBitmap', '(Landroid/graphics/Bitmap;IIIILandroid/graphics/Matrix;Z)Landroid/graphics/Bitmap;');
  AddStaticMethod('createScaledBitmap', '(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;');
  AddMethod('describeContents', '()I');
  AddMethod('eraseColor', '(I)V');
  AddMethod('extractAlpha', '()Landroid/graphics/Bitmap;');
  AddMethod('extractAlpha', '(Landroid/graphics/Paint;[I)Landroid/graphics/Bitmap;');
  AddMethod('getAllocationByteCount', '()I');
  AddMethod('getByteCount', '()I');
  AddMethod('getConfig', '()Landroid/graphics/Bitmap$Config;');
  AddMethod('getDensity', '()I');
  AddMethod('getGenerationId', '()I');
  AddMethod('getHeight', '()I');
  AddMethod('getNinePatchChunk', '()[B');
  AddMethod('getPixel', '(II)I');
  AddMethod('getPixels', '([IIIIIII)V');
  AddMethod('getRowBytes', '()I');
  AddMethod('getScaledHeight', '(Landroid/util/DisplayMetrics;)I');
  AddMethod('getScaledHeight', '(I)I');
  AddMethod('getScaledHeight', '(Landroid/graphics/Canvas;)I');
  AddMethod('getScaledWidth', '(Landroid/graphics/Canvas;)I');
  AddMethod('getScaledWidth', '(I)I');
  AddMethod('getScaledWidth', '(Landroid/util/DisplayMetrics;)I');
  AddMethod('getWidth', '()I');
  AddMethod('hasAlpha', '()Z');
  AddMethod('hasMipMap', '()Z');
  AddMethod('isMutable', '()Z');
  AddMethod('isPremultiplied', '()Z');
  AddMethod('isRecycled', '()Z');
  AddMethod('prepareToDraw', '()V');
  AddMethod('reconfigure', '(IILandroid/graphics/Bitmap$Config;)V');
  AddMethod('recycle', '()V');
  AddMethod('sameAs', '(Landroid/graphics/Bitmap;)Z');
  AddMethod('setConfig', '(Landroid/graphics/Bitmap$Config;)V');
  AddMethod('setDensity', '(I)V');
  AddMethod('setHasAlpha', '(Z)V');
  AddMethod('setHasMipMap', '(Z)V');
  AddMethod('setHeight', '(I)V');
  AddMethod('setPixel', '(III)V');
  AddMethod('setPixels', '([IIIIIII)V');
  AddMethod('setPremultiplied', '(Z)V');
  AddMethod('setWidth', '(I)V');
end;

class procedure TJBitmap.LoadFields;
begin
  inherited;
  AddStaticField('DENSITY_NONE', 'I');
end;

class function TJBitmap.Wrap(const AObjectID: JNIObject): JBitmap;
begin
  Result := Wrap<TJBitmap, JBitmap>(AObjectId);
end;

class function TJBitmap.Wrap(const AObject: IJNIObject): JBitmap;
begin
  Result := Wrap<TJBitmap, JBitmap>(AObject);
end;

class function TJBitmap.DENSITY_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_NONE');
end;

function TJBitmap.compress(const AArg0: JBitmap_CompressFormat; const AArg1: Integer; const AArg2: JOutputStream): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'compress', '(Landroid/graphics/Bitmap$CompressFormat;ILjava/io/OutputStream;)Z', [AArg0, AArg1, AArg2]);
end;

function TJBitmap.copy(const AArg0: JBitmap_Config; const AArg1: Boolean): JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('copy', '(Landroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;', [AArg0, AArg1]);
end;

class function TJBitmap.createBitmap(const AArg0: Integer; const AArg1: Integer; const AArg2: JBitmap_Config): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2]);
end;

class function TJBitmap.createBitmap(const AArg0: JDisplayMetrics; const AArg1: Integer; const AArg2: Integer; const AArg3: JBitmap_Config): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '(Landroid/util/DisplayMetrics;IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJBitmap.createBitmap(const AArg0: Integer; const AArg1: Integer; const AArg2: JBitmap_Config; const AArg3: Boolean): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '(IILandroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJBitmap.createBitmap(const AArg0: JDisplayMetrics; const AArg1: Integer; const AArg2: Integer; const AArg3: JBitmap_Config; const AArg4: Boolean): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '(Landroid/util/DisplayMetrics;IILandroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

class function TJBitmap.createBitmap(const AArg0: JDisplayMetrics; const AArg1: IJavaArray<Integer>; const AArg2: Integer; const AArg3: Integer; const AArg4: JBitmap_Config): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '(Landroid/util/DisplayMetrics;[IIILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

class function TJBitmap.createBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: JBitmap_Config): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '([IIILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJBitmap.createBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JBitmap_Config): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '([IIIIILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

class function TJBitmap.createBitmap(const AArg0: JDisplayMetrics; const AArg1: IJavaArray<Integer>; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JBitmap_Config): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '(Landroid/util/DisplayMetrics;[IIIIILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

class function TJBitmap.createBitmap(const AArg0: JBitmap): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;', [AArg0]);
end;

class function TJBitmap.createBitmap(const AArg0: JBitmap; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '(Landroid/graphics/Bitmap;IIII)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

class function TJBitmap.createBitmap(const AArg0: JBitmap; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: JMatrix; const AArg6: Boolean): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createBitmap', '(Landroid/graphics/Bitmap;IIIILandroid/graphics/Matrix;Z)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

class function TJBitmap.createScaledBitmap(const AArg0: JBitmap; const AArg1: Integer; const AArg2: Integer; const AArg3: Boolean): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('createScaledBitmap', '(Landroid/graphics/Bitmap;IIZ)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJBitmap.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

procedure TJBitmap.eraseColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'eraseColor', '(I)V', [AArg0]);
end;

function TJBitmap.extractAlpha: JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('extractAlpha', '()Landroid/graphics/Bitmap;', []);
end;

function TJBitmap.extractAlpha(const AArg0: JPaint; const AArg1: IJavaArray<Integer>): JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('extractAlpha', '(Landroid/graphics/Paint;[I)Landroid/graphics/Bitmap;', [AArg0, AArg1]);
end;

function TJBitmap.getAllocationByteCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAllocationByteCount', '()I', []);
end;

function TJBitmap.getByteCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getByteCount', '()I', []);
end;

function TJBitmap.getConfig: JBitmap_Config;
begin
  Result := CallObjectMethod<TJBitmap_Config, JBitmap_Config>('getConfig', '()Landroid/graphics/Bitmap$Config;', []);
end;

function TJBitmap.getDensity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDensity', '()I', []);
end;

function TJBitmap.getGenerationId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getGenerationId', '()I', []);
end;

function TJBitmap.getHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getHeight', '()I', []);
end;

function TJBitmap.getNinePatchChunk: IJavaArray<Byte>;
begin
  Result := CallArrayMethod<Byte>('getNinePatchChunk', '()[B', []);
end;

function TJBitmap.getPixel(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPixel', '(II)I', [AArg0, AArg1]);
end;

procedure TJBitmap.getPixels(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'getPixels', '([IIIIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

function TJBitmap.getRowBytes: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getRowBytes', '()I', []);
end;

function TJBitmap.getScaledHeight(const AArg0: JDisplayMetrics): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScaledHeight', '(Landroid/util/DisplayMetrics;)I', [AArg0]);
end;

function TJBitmap.getScaledHeight(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScaledHeight', '(I)I', [AArg0]);
end;

function TJBitmap.getScaledHeight(const AArg0: JCanvas): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScaledHeight', '(Landroid/graphics/Canvas;)I', [AArg0]);
end;

function TJBitmap.getScaledWidth(const AArg0: JCanvas): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScaledWidth', '(Landroid/graphics/Canvas;)I', [AArg0]);
end;

function TJBitmap.getScaledWidth(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScaledWidth', '(I)I', [AArg0]);
end;

function TJBitmap.getScaledWidth(const AArg0: JDisplayMetrics): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScaledWidth', '(Landroid/util/DisplayMetrics;)I', [AArg0]);
end;

function TJBitmap.getWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWidth', '()I', []);
end;

function TJBitmap.hasAlpha: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasAlpha', '()Z', []);
end;

function TJBitmap.hasMipMap: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasMipMap', '()Z', []);
end;

function TJBitmap.isMutable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isMutable', '()Z', []);
end;

function TJBitmap.isPremultiplied: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isPremultiplied', '()Z', []);
end;

function TJBitmap.isRecycled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isRecycled', '()Z', []);
end;

procedure TJBitmap.prepareToDraw;
begin
  JavaType.CallVoidMethod(ObjectID, 'prepareToDraw', '()V', []);
end;

procedure TJBitmap.reconfigure(const AArg0: Integer; const AArg1: Integer; const AArg2: JBitmap_Config);
begin
  JavaType.CallVoidMethod(ObjectID, 'reconfigure', '(IILandroid/graphics/Bitmap$Config;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJBitmap.recycle;
begin
  JavaType.CallVoidMethod(ObjectID, 'recycle', '()V', []);
end;

function TJBitmap.sameAs(const AArg0: JBitmap): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'sameAs', '(Landroid/graphics/Bitmap;)Z', [AArg0]);
end;

procedure TJBitmap.setConfig(const AArg0: JBitmap_Config);
begin
  JavaType.CallVoidMethod(ObjectID, 'setConfig', '(Landroid/graphics/Bitmap$Config;)V', [AArg0]);
end;

procedure TJBitmap.setDensity(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDensity', '(I)V', [AArg0]);
end;

procedure TJBitmap.setHasAlpha(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHasAlpha', '(Z)V', [AArg0]);
end;

procedure TJBitmap.setHasMipMap(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHasMipMap', '(Z)V', [AArg0]);
end;

procedure TJBitmap.setHeight(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHeight', '(I)V', [AArg0]);
end;

procedure TJBitmap.setPixel(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPixel', '(III)V', [AArg0, AArg1, AArg2]);
end;

procedure TJBitmap.setPixels(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPixels', '([IIIIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJBitmap.setPremultiplied(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPremultiplied', '(Z)V', [AArg0]);
end;

procedure TJBitmap.setWidth(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWidth', '(I)V', [AArg0]);
end;

{ TJBitmap_CompressFormat }

class procedure TJBitmap_CompressFormat.LoadConstructors;
begin
end;

class procedure TJBitmap_CompressFormat.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('valueOf', '(Ljava/lang/String;)Landroid/graphics/Bitmap$CompressFormat;');
  AddStaticMethod('values', '()[Landroid/graphics/Bitmap$CompressFormat;');
end;

class procedure TJBitmap_CompressFormat.LoadFields;
begin
  inherited;
  AddStaticField('JPEG', 'Landroid/graphics/Bitmap$CompressFormat;');
  AddStaticField('PNG', 'Landroid/graphics/Bitmap$CompressFormat;');
  AddStaticField('WEBP', 'Landroid/graphics/Bitmap$CompressFormat;');
end;

class function TJBitmap_CompressFormat.Wrap(const AObjectID: JNIObject): JBitmap_CompressFormat;
begin
  Result := Wrap<TJBitmap_CompressFormat, JBitmap_CompressFormat>(AObjectId);
end;

class function TJBitmap_CompressFormat.Wrap(const AObject: IJNIObject): JBitmap_CompressFormat;
begin
  Result := Wrap<TJBitmap_CompressFormat, JBitmap_CompressFormat>(AObject);
end;

class function TJBitmap_CompressFormat.JPEG: JBitmap_CompressFormat;
begin
  Result := GetStaticObjectField<TJBitmap_CompressFormat, JBitmap_CompressFormat>('JPEG');
end;

class function TJBitmap_CompressFormat.PNG: JBitmap_CompressFormat;
begin
  Result := GetStaticObjectField<TJBitmap_CompressFormat, JBitmap_CompressFormat>('PNG');
end;

class function TJBitmap_CompressFormat.WEBP: JBitmap_CompressFormat;
begin
  Result := GetStaticObjectField<TJBitmap_CompressFormat, JBitmap_CompressFormat>('WEBP');
end;

class function TJBitmap_CompressFormat.valueOf(const AArg0: JString): JBitmap_CompressFormat;
begin
  Result := CallStaticObjectMethod<TJBitmap_CompressFormat, JBitmap_CompressFormat>('valueOf', '(Ljava/lang/String;)Landroid/graphics/Bitmap$CompressFormat;', [AArg0]);
end;

class function TJBitmap_CompressFormat.values: IJavaArray<JBitmap_CompressFormat>;
begin
  Result := CallStaticArrayMethod<JBitmap_CompressFormat>('values', '()[Landroid/graphics/Bitmap$CompressFormat;', []);
end;

{ TJBitmap_Config }

class procedure TJBitmap_Config.LoadConstructors;
begin
end;

class procedure TJBitmap_Config.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('valueOf', '(Ljava/lang/String;)Landroid/graphics/Bitmap$Config;');
  AddStaticMethod('values', '()[Landroid/graphics/Bitmap$Config;');
end;

class procedure TJBitmap_Config.LoadFields;
begin
  inherited;
  AddStaticField('ALPHA_8', 'Landroid/graphics/Bitmap$Config;');
  AddStaticField('ARGB_4444', 'Landroid/graphics/Bitmap$Config;');
  AddStaticField('ARGB_8888', 'Landroid/graphics/Bitmap$Config;');
  AddStaticField('HARDWARE', 'Landroid/graphics/Bitmap$Config;');
  AddStaticField('RGBA_F16', 'Landroid/graphics/Bitmap$Config;');
  AddStaticField('RGB_565', 'Landroid/graphics/Bitmap$Config;');
end;

class function TJBitmap_Config.Wrap(const AObjectID: JNIObject): JBitmap_Config;
begin
  Result := Wrap<TJBitmap_Config, JBitmap_Config>(AObjectId);
end;

class function TJBitmap_Config.Wrap(const AObject: IJNIObject): JBitmap_Config;
begin
  Result := Wrap<TJBitmap_Config, JBitmap_Config>(AObject);
end;

class function TJBitmap_Config.ALPHA_8: JBitmap_Config;
begin
  Result := GetStaticObjectField<TJBitmap_Config, JBitmap_Config>('ALPHA_8');
end;

class function TJBitmap_Config.ARGB_4444: JBitmap_Config;
begin
  Result := GetStaticObjectField<TJBitmap_Config, JBitmap_Config>('ARGB_4444');
end;

class function TJBitmap_Config.ARGB_8888: JBitmap_Config;
begin
  Result := GetStaticObjectField<TJBitmap_Config, JBitmap_Config>('ARGB_8888');
end;

class function TJBitmap_Config.HARDWARE: JBitmap_Config;
begin
  Result := GetStaticObjectField<TJBitmap_Config, JBitmap_Config>('HARDWARE');
end;

class function TJBitmap_Config.RGBA_F16: JBitmap_Config;
begin
  Result := GetStaticObjectField<TJBitmap_Config, JBitmap_Config>('RGBA_F16');
end;

class function TJBitmap_Config.RGB_565: JBitmap_Config;
begin
  Result := GetStaticObjectField<TJBitmap_Config, JBitmap_Config>('RGB_565');
end;

class function TJBitmap_Config.valueOf(const AArg0: JString): JBitmap_Config;
begin
  Result := CallStaticObjectMethod<TJBitmap_Config, JBitmap_Config>('valueOf', '(Ljava/lang/String;)Landroid/graphics/Bitmap$Config;', [AArg0]);
end;

class function TJBitmap_Config.values: IJavaArray<JBitmap_Config>;
begin
  Result := CallStaticArrayMethod<JBitmap_Config>('values', '()[Landroid/graphics/Bitmap$Config;', []);
end;

{ TJBitmapFactory }

class procedure TJBitmapFactory.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJBitmapFactory.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('decodeByteArray', '([BII)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeByteArray', '([BIILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeFile', '(Ljava/lang/String;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeFile', '(Ljava/lang/String;)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeFileDescriptor', '(Ljava/io/FileDescriptor;)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeFileDescriptor', '(Ljava/io/FileDescriptor;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeResource', '(Landroid/content/res/Resources;ILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeResource', '(Landroid/content/res/Resources;I)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeResourceStream', '(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeStream', '(Ljava/io/InputStream;)Landroid/graphics/Bitmap;');
  AddStaticMethod('decodeStream', '(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;');
end;

class function TJBitmapFactory.Wrap(const AObjectID: JNIObject): JBitmapFactory;
begin
  Result := Wrap<TJBitmapFactory, JBitmapFactory>(AObjectId);
end;

class function TJBitmapFactory.Wrap(const AObject: IJNIObject): JBitmapFactory;
begin
  Result := Wrap<TJBitmapFactory, JBitmapFactory>(AObject);
end;

class function TJBitmapFactory.Create: JBitmapFactory;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJBitmapFactory.decodeByteArray(const AArg0: IJavaArray<Byte>; const AArg1: Integer; const AArg2: Integer): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeByteArray', '([BII)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2]);
end;

class function TJBitmapFactory.decodeByteArray(const AArg0: IJavaArray<Byte>; const AArg1: Integer; const AArg2: Integer; const AArg3: JBitmapFactory_Options): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeByteArray', '([BIILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJBitmapFactory.decodeFile(const AArg0: JString; const AArg1: JBitmapFactory_Options): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeFile', '(Ljava/lang/String;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;', [AArg0, AArg1]);
end;

class function TJBitmapFactory.decodeFile(const AArg0: JString): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeFile', '(Ljava/lang/String;)Landroid/graphics/Bitmap;', [AArg0]);
end;

class function TJBitmapFactory.decodeFileDescriptor(const AArg0: JFileDescriptor): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeFileDescriptor', '(Ljava/io/FileDescriptor;)Landroid/graphics/Bitmap;', [AArg0]);
end;

class function TJBitmapFactory.decodeFileDescriptor(const AArg0: JFileDescriptor; const AArg1: JRect; const AArg2: JBitmapFactory_Options): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeFileDescriptor', '(Ljava/io/FileDescriptor;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2]);
end;

class function TJBitmapFactory.decodeResource(const AArg0: JResources; const AArg1: Integer; const AArg2: JBitmapFactory_Options): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeResource', '(Landroid/content/res/Resources;ILandroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2]);
end;

class function TJBitmapFactory.decodeResource(const AArg0: JResources; const AArg1: Integer): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeResource', '(Landroid/content/res/Resources;I)Landroid/graphics/Bitmap;', [AArg0, AArg1]);
end;

class function TJBitmapFactory.decodeResourceStream(const AArg0: JResources; const AArg1: JTypedValue; const AArg2: JInputStream; const AArg3: JRect; const AArg4: JBitmapFactory_Options): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeResourceStream', '(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

class function TJBitmapFactory.decodeStream(const AArg0: JInputStream): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeStream', '(Ljava/io/InputStream;)Landroid/graphics/Bitmap;', [AArg0]);
end;

class function TJBitmapFactory.decodeStream(const AArg0: JInputStream; const AArg1: JRect; const AArg2: JBitmapFactory_Options): JBitmap;
begin
  Result := CallStaticObjectMethod<TJBitmap, JBitmap>('decodeStream', '(Ljava/io/InputStream;Landroid/graphics/Rect;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/Bitmap;', [AArg0, AArg1, AArg2]);
end;

{ TJBitmapFactory_Options }

class procedure TJBitmapFactory_Options.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJBitmapFactory_Options.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('requestCancelDecode', '()V');
end;

class procedure TJBitmapFactory_Options.LoadFields;
begin
  inherited;
  AddField('inBitmap', 'Landroid/graphics/Bitmap;');
  AddField('inDensity', 'I');
  AddField('inDither', 'Z');
  AddField('inInputShareable', 'Z');
  AddField('inJustDecodeBounds', 'Z');
  AddField('inMutable', 'Z');
  AddField('inPreferQualityOverSpeed', 'Z');
  AddField('inPreferredConfig', 'Landroid/graphics/Bitmap$Config;');
  AddField('inPremultiplied', 'Z');
  AddField('inPurgeable', 'Z');
  AddField('inSampleSize', 'I');
  AddField('inScaled', 'Z');
  AddField('inScreenDensity', 'I');
  AddField('inTargetDensity', 'I');
  AddField('inTempStorage', '[B');
  AddField('mCancel', 'Z');
  AddField('outConfig', 'Landroid/graphics/Bitmap$Config;');
  AddField('outHeight', 'I');
  AddField('outMimeType', 'Ljava/lang/String;');
  AddField('outWidth', 'I');
end;

class function TJBitmapFactory_Options.Wrap(const AObjectID: JNIObject): JBitmapFactory_Options;
begin
  Result := Wrap<TJBitmapFactory_Options, JBitmapFactory_Options>(AObjectId);
end;

class function TJBitmapFactory_Options.Wrap(const AObject: IJNIObject): JBitmapFactory_Options;
begin
  Result := Wrap<TJBitmapFactory_Options, JBitmapFactory_Options>(AObject);
end;

class function TJBitmapFactory_Options.Create: JBitmapFactory_Options;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJBitmapFactory_Options._GetInBitmap: JBitmap;
begin
  Result := GetObjectField<TJBitmap, JBitmap>('inBitmap');
end;

procedure TJBitmapFactory_Options._SetInBitmap(const AValue: JBitmap);
begin
  JavaType.SetObjectField(ObjectId, 'inBitmap', AValue);
end;

function TJBitmapFactory_Options._GetInDensity: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'inDensity');
end;

procedure TJBitmapFactory_Options._SetInDensity(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'inDensity', AValue);
end;

function TJBitmapFactory_Options._GetInDither: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'inDither');
end;

procedure TJBitmapFactory_Options._SetInDither(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'inDither', AValue);
end;

function TJBitmapFactory_Options._GetInInputShareable: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'inInputShareable');
end;

procedure TJBitmapFactory_Options._SetInInputShareable(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'inInputShareable', AValue);
end;

function TJBitmapFactory_Options._GetInJustDecodeBounds: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'inJustDecodeBounds');
end;

procedure TJBitmapFactory_Options._SetInJustDecodeBounds(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'inJustDecodeBounds', AValue);
end;

function TJBitmapFactory_Options._GetInMutable: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'inMutable');
end;

procedure TJBitmapFactory_Options._SetInMutable(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'inMutable', AValue);
end;

function TJBitmapFactory_Options._GetInPreferQualityOverSpeed: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'inPreferQualityOverSpeed');
end;

procedure TJBitmapFactory_Options._SetInPreferQualityOverSpeed(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'inPreferQualityOverSpeed', AValue);
end;

function TJBitmapFactory_Options._GetInPreferredConfig: JBitmap_Config;
begin
  Result := GetObjectField<TJBitmap_Config, JBitmap_Config>('inPreferredConfig');
end;

procedure TJBitmapFactory_Options._SetInPreferredConfig(const AValue: JBitmap_Config);
begin
  JavaType.SetObjectField(ObjectId, 'inPreferredConfig', AValue);
end;

function TJBitmapFactory_Options._GetInPremultiplied: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'inPremultiplied');
end;

procedure TJBitmapFactory_Options._SetInPremultiplied(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'inPremultiplied', AValue);
end;

function TJBitmapFactory_Options._GetInPurgeable: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'inPurgeable');
end;

procedure TJBitmapFactory_Options._SetInPurgeable(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'inPurgeable', AValue);
end;

function TJBitmapFactory_Options._GetInSampleSize: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'inSampleSize');
end;

procedure TJBitmapFactory_Options._SetInSampleSize(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'inSampleSize', AValue);
end;

function TJBitmapFactory_Options._GetInScaled: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'inScaled');
end;

procedure TJBitmapFactory_Options._SetInScaled(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'inScaled', AValue);
end;

function TJBitmapFactory_Options._GetInScreenDensity: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'inScreenDensity');
end;

procedure TJBitmapFactory_Options._SetInScreenDensity(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'inScreenDensity', AValue);
end;

function TJBitmapFactory_Options._GetInTargetDensity: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'inTargetDensity');
end;

procedure TJBitmapFactory_Options._SetInTargetDensity(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'inTargetDensity', AValue);
end;

function TJBitmapFactory_Options._GetInTempStorage: IJavaArray<Byte>;
begin
  Result := GetArrayField<Byte>('inTempStorage');
end;

procedure TJBitmapFactory_Options._SetInTempStorage(const AValue: IJavaArray<Byte>);
begin
  JavaType.SetObjectField(ObjectId, 'inTempStorage', AValue.ObjectId);
end;

function TJBitmapFactory_Options._GetMCancel: Boolean;
begin
  Result := JavaType.GetBooleanField(ObjectId, 'mCancel');
end;

procedure TJBitmapFactory_Options._SetMCancel(const AValue: Boolean);
begin
  JavaType.SetBooleanField(ObjectId, 'mCancel', AValue);
end;

function TJBitmapFactory_Options._GetOutConfig: JBitmap_Config;
begin
  Result := GetObjectField<TJBitmap_Config, JBitmap_Config>('outConfig');
end;

procedure TJBitmapFactory_Options._SetOutConfig(const AValue: JBitmap_Config);
begin
  JavaType.SetObjectField(ObjectId, 'outConfig', AValue);
end;

function TJBitmapFactory_Options._GetOutHeight: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'outHeight');
end;

procedure TJBitmapFactory_Options._SetOutHeight(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'outHeight', AValue);
end;

function TJBitmapFactory_Options._GetOutMimeType: JString;
begin
  Result := GetObjectField<TJString, JString>('outMimeType');
end;

procedure TJBitmapFactory_Options._SetOutMimeType(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'outMimeType', AValue);
end;

function TJBitmapFactory_Options._GetOutWidth: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'outWidth');
end;

procedure TJBitmapFactory_Options._SetOutWidth(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'outWidth', AValue);
end;

procedure TJBitmapFactory_Options.requestCancelDecode;
begin
  JavaType.CallVoidMethod(ObjectID, 'requestCancelDecode', '()V', []);
end;

{ TJCanvas }

class procedure TJCanvas.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/graphics/Bitmap;)V');
end;

class procedure TJCanvas.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clipOutPath', '(Landroid/graphics/Path;)Z');
  AddMethod('clipOutRect', '(Landroid/graphics/RectF;)Z');
  AddMethod('clipOutRect', '(FFFF)Z');
  AddMethod('clipOutRect', '(Landroid/graphics/Rect;)Z');
  AddMethod('clipOutRect', '(IIII)Z');
  AddMethod('clipPath', '(Landroid/graphics/Path;)Z');
  AddMethod('clipRect', '(Landroid/graphics/RectF;)Z');
  AddMethod('clipRect', '(IIII)Z');
  AddMethod('clipRect', '(FFFF)Z');
  AddMethod('clipRect', '(Landroid/graphics/Rect;)Z');
  AddMethod('concat', '(Landroid/graphics/Matrix;)V');
  AddMethod('drawARGB', '(IIII)V');
  AddMethod('drawArc', '(Landroid/graphics/RectF;FFZLandroid/graphics/Paint;)V');
  AddMethod('drawArc', '(FFFFFFZLandroid/graphics/Paint;)V');
  AddMethod('drawBitmap', '([IIIIIIIZLandroid/graphics/Paint;)V');
  AddMethod('drawBitmap', '(Landroid/graphics/Bitmap;Landroid/graphics/Matrix;Landroid/graphics/Paint;)V');
  AddMethod('drawBitmap', '([IIIFFIIZLandroid/graphics/Paint;)V');
  AddMethod('drawBitmap', '(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V');
  AddMethod('drawBitmap', '(Landroid/graphics/Bitmap;FFLandroid/graphics/Paint;)V');
  AddMethod('drawBitmap', '(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/RectF;Landroid/graphics/Paint;)V');
  AddMethod('drawBitmapMesh', '(Landroid/graphics/Bitmap;II[FI[IILandroid/graphics/Paint;)V');
  AddMethod('drawCircle', '(FFFLandroid/graphics/Paint;)V');
  AddMethod('drawColor', '(ILandroid/graphics/PorterDuff$Mode;)V');
  AddMethod('drawColor', '(I)V');
  AddMethod('drawLine', '(FFFFLandroid/graphics/Paint;)V');
  AddMethod('drawLines', '([FIILandroid/graphics/Paint;)V');
  AddMethod('drawLines', '([FLandroid/graphics/Paint;)V');
  AddMethod('drawOval', '(FFFFLandroid/graphics/Paint;)V');
  AddMethod('drawOval', '(Landroid/graphics/RectF;Landroid/graphics/Paint;)V');
  AddMethod('drawPaint', '(Landroid/graphics/Paint;)V');
  AddMethod('drawPath', '(Landroid/graphics/Path;Landroid/graphics/Paint;)V');
  AddMethod('drawPoint', '(FFLandroid/graphics/Paint;)V');
  AddMethod('drawPoints', '([FIILandroid/graphics/Paint;)V');
  AddMethod('drawPoints', '([FLandroid/graphics/Paint;)V');
  AddMethod('drawPosText', '([CII[FLandroid/graphics/Paint;)V');
  AddMethod('drawPosText', '(Ljava/lang/String;[FLandroid/graphics/Paint;)V');
  AddMethod('drawRGB', '(III)V');
  AddMethod('drawRect', '(Landroid/graphics/RectF;Landroid/graphics/Paint;)V');
  AddMethod('drawRect', '(FFFFLandroid/graphics/Paint;)V');
  AddMethod('drawRect', '(Landroid/graphics/Rect;Landroid/graphics/Paint;)V');
  AddMethod('drawRoundRect', '(Landroid/graphics/RectF;FFLandroid/graphics/Paint;)V');
  AddMethod('drawRoundRect', '(FFFFFFLandroid/graphics/Paint;)V');
  AddMethod('drawText', '(Ljava/lang/String;FFLandroid/graphics/Paint;)V');
  AddMethod('drawText', '([CIIFFLandroid/graphics/Paint;)V');
  AddMethod('drawText', '(Ljava/lang/CharSequence;IIFFLandroid/graphics/Paint;)V');
  AddMethod('drawText', '(Ljava/lang/String;IIFFLandroid/graphics/Paint;)V');
  AddMethod('drawTextOnPath', '([CIILandroid/graphics/Path;FFLandroid/graphics/Paint;)V');
  AddMethod('drawTextOnPath', '(Ljava/lang/String;Landroid/graphics/Path;FFLandroid/graphics/Paint;)V');
  AddMethod('drawTextRun', '(Ljava/lang/CharSequence;IIIIFFZLandroid/graphics/Paint;)V');
  AddMethod('drawTextRun', '([CIIIIFFZLandroid/graphics/Paint;)V');
  AddMethod('getClipBounds', '(Landroid/graphics/Rect;)Z');
  AddMethod('getClipBounds', '()Landroid/graphics/Rect;');
  AddMethod('getDensity', '()I');
  AddMethod('getHeight', '()I');
  AddMethod('getMatrix', '()Landroid/graphics/Matrix;');
  AddMethod('getMatrix', '(Landroid/graphics/Matrix;)V');
  AddMethod('getMaximumBitmapHeight', '()I');
  AddMethod('getMaximumBitmapWidth', '()I');
  AddMethod('getSaveCount', '()I');
  AddMethod('getWidth', '()I');
  AddMethod('isHardwareAccelerated', '()Z');
  AddMethod('isOpaque', '()Z');
  AddMethod('restore', '()V');
  AddMethod('restoreToCount', '(I)V');
  AddMethod('rotate', '(F)V');
  AddMethod('rotate', '(FFF)V');
  AddMethod('save', '()I');
  AddMethod('saveLayer', '(FFFFLandroid/graphics/Paint;I)I');
  AddMethod('saveLayer', '(FFFFLandroid/graphics/Paint;)I');
  AddMethod('saveLayer', '(Landroid/graphics/RectF;Landroid/graphics/Paint;I)I');
  AddMethod('saveLayer', '(Landroid/graphics/RectF;Landroid/graphics/Paint;)I');
  AddMethod('saveLayerAlpha', '(Landroid/graphics/RectF;I)I');
  AddMethod('saveLayerAlpha', '(Landroid/graphics/RectF;II)I');
  AddMethod('saveLayerAlpha', '(FFFFII)I');
  AddMethod('saveLayerAlpha', '(FFFFI)I');
  AddMethod('scale', '(FF)V');
  AddMethod('scale', '(FFFF)V');
  AddMethod('setBitmap', '(Landroid/graphics/Bitmap;)V');
  AddMethod('setDensity', '(I)V');
  AddMethod('setMatrix', '(Landroid/graphics/Matrix;)V');
  AddMethod('skew', '(FF)V');
  AddMethod('translate', '(FF)V');
end;

class procedure TJCanvas.LoadFields;
begin
  inherited;
  AddStaticField('ALL_SAVE_FLAG', 'I');
end;

class function TJCanvas.Wrap(const AObjectID: JNIObject): JCanvas;
begin
  Result := Wrap<TJCanvas, JCanvas>(AObjectId);
end;

class function TJCanvas.Wrap(const AObject: IJNIObject): JCanvas;
begin
  Result := Wrap<TJCanvas, JCanvas>(AObject);
end;

class function TJCanvas.Create: JCanvas;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJCanvas.Create(const AArg0: JBitmap): JCanvas;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Bitmap;)V', [AArg0]);
  Result := O;
end;

class function TJCanvas.ALL_SAVE_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ALL_SAVE_FLAG');
end;

function TJCanvas.clipOutPath(const AArg0: JPath): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipOutPath', '(Landroid/graphics/Path;)Z', [AArg0]);
end;

function TJCanvas.clipOutRect(const AArg0: JRectF): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipOutRect', '(Landroid/graphics/RectF;)Z', [AArg0]);
end;

function TJCanvas.clipOutRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipOutRect', '(FFFF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJCanvas.clipOutRect(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipOutRect', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJCanvas.clipOutRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipOutRect', '(IIII)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJCanvas.clipPath(const AArg0: JPath): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipPath', '(Landroid/graphics/Path;)Z', [AArg0]);
end;

function TJCanvas.clipRect(const AArg0: JRectF): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipRect', '(Landroid/graphics/RectF;)Z', [AArg0]);
end;

function TJCanvas.clipRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipRect', '(IIII)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJCanvas.clipRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipRect', '(FFFF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJCanvas.clipRect(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'clipRect', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

procedure TJCanvas.concat(const AArg0: JMatrix);
begin
  JavaType.CallVoidMethod(ObjectID, 'concat', '(Landroid/graphics/Matrix;)V', [AArg0]);
end;

procedure TJCanvas.drawARGB(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawARGB', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.drawArc(const AArg0: JRectF; const AArg1: Single; const AArg2: Single; const AArg3: Boolean; const AArg4: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawArc', '(Landroid/graphics/RectF;FFZLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJCanvas.drawArc(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: Boolean; const AArg7: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawArc', '(FFFFFFZLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
end;

procedure TJCanvas.drawBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Boolean; const AArg8: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawBitmap', '([IIIIIIIZLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7, AArg8]);
end;

procedure TJCanvas.drawBitmap(const AArg0: JBitmap; const AArg1: JMatrix; const AArg2: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawBitmap', '(Landroid/graphics/Bitmap;Landroid/graphics/Matrix;Landroid/graphics/Paint;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJCanvas.drawBitmap(const AArg0: IJavaArray<Integer>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: Integer; const AArg6: Integer; const AArg7: Boolean; const AArg8: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawBitmap', '([IIIFFIIZLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7, AArg8]);
end;

procedure TJCanvas.drawBitmap(const AArg0: JBitmap; const AArg1: JRect; const AArg2: JRect; const AArg3: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawBitmap', '(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/Rect;Landroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.drawBitmap(const AArg0: JBitmap; const AArg1: Single; const AArg2: Single; const AArg3: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawBitmap', '(Landroid/graphics/Bitmap;FFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.drawBitmap(const AArg0: JBitmap; const AArg1: JRect; const AArg2: JRectF; const AArg3: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawBitmap', '(Landroid/graphics/Bitmap;Landroid/graphics/Rect;Landroid/graphics/RectF;Landroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.drawBitmapMesh(const AArg0: JBitmap; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>; const AArg4: Integer; const AArg5: IJavaArray<Integer>; const AArg6: Integer; const AArg7: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawBitmapMesh', '(Landroid/graphics/Bitmap;II[FI[IILandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
end;

procedure TJCanvas.drawCircle(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawCircle', '(FFFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.drawColor(const AArg0: Integer; const AArg1: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawColor', '(ILandroid/graphics/PorterDuff$Mode;)V', [AArg0, AArg1]);
end;

procedure TJCanvas.drawColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawColor', '(I)V', [AArg0]);
end;

procedure TJCanvas.drawLine(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawLine', '(FFFFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJCanvas.drawLines(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: Integer; const AArg3: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawLines', '([FIILandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.drawLines(const AArg0: IJavaArray<Single>; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawLines', '([FLandroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJCanvas.drawOval(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawOval', '(FFFFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJCanvas.drawOval(const AArg0: JRectF; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawOval', '(Landroid/graphics/RectF;Landroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJCanvas.drawPaint(const AArg0: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawPaint', '(Landroid/graphics/Paint;)V', [AArg0]);
end;

procedure TJCanvas.drawPath(const AArg0: JPath; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawPath', '(Landroid/graphics/Path;Landroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJCanvas.drawPoint(const AArg0: Single; const AArg1: Single; const AArg2: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawPoint', '(FFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJCanvas.drawPoints(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: Integer; const AArg3: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawPoints', '([FIILandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.drawPoints(const AArg0: IJavaArray<Single>; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawPoints', '([FLandroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJCanvas.drawPosText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>; const AArg4: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawPosText', '([CII[FLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJCanvas.drawPosText(const AArg0: JString; const AArg1: IJavaArray<Single>; const AArg2: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawPosText', '(Ljava/lang/String;[FLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJCanvas.drawRGB(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawRGB', '(III)V', [AArg0, AArg1, AArg2]);
end;

procedure TJCanvas.drawRect(const AArg0: JRectF; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawRect', '(Landroid/graphics/RectF;Landroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJCanvas.drawRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawRect', '(FFFFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJCanvas.drawRect(const AArg0: JRect; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawRect', '(Landroid/graphics/Rect;Landroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJCanvas.drawRoundRect(const AArg0: JRectF; const AArg1: Single; const AArg2: Single; const AArg3: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawRoundRect', '(Landroid/graphics/RectF;FFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.drawRoundRect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawRoundRect', '(FFFFFFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJCanvas.drawText(const AArg0: JString; const AArg1: Single; const AArg2: Single; const AArg3: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawText', '(Ljava/lang/String;FFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.drawText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawText', '([CIIFFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJCanvas.drawText(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawText', '(Ljava/lang/CharSequence;IIFFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJCanvas.drawText(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawText', '(Ljava/lang/String;IIFFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJCanvas.drawTextOnPath(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: JPath; const AArg4: Single; const AArg5: Single; const AArg6: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawTextOnPath', '([CIILandroid/graphics/Path;FFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJCanvas.drawTextOnPath(const AArg0: JString; const AArg1: JPath; const AArg2: Single; const AArg3: Single; const AArg4: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawTextOnPath', '(Ljava/lang/String;Landroid/graphics/Path;FFLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJCanvas.drawTextRun(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Single; const AArg6: Single; const AArg7: Boolean; const AArg8: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawTextRun', '(Ljava/lang/CharSequence;IIIIFFZLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7, AArg8]);
end;

procedure TJCanvas.drawTextRun(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Single; const AArg6: Single; const AArg7: Boolean; const AArg8: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawTextRun', '([CIIIIFFZLandroid/graphics/Paint;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7, AArg8]);
end;

function TJCanvas.getClipBounds(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getClipBounds', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJCanvas.getClipBounds: JRect;
begin
  Result := CallObjectMethod<TJRect, JRect>('getClipBounds', '()Landroid/graphics/Rect;', []);
end;

function TJCanvas.getDensity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDensity', '()I', []);
end;

function TJCanvas.getHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getHeight', '()I', []);
end;

function TJCanvas.getMatrix: JMatrix;
begin
  Result := CallObjectMethod<TJMatrix, JMatrix>('getMatrix', '()Landroid/graphics/Matrix;', []);
end;

procedure TJCanvas.getMatrix(const AArg0: JMatrix);
begin
  JavaType.CallVoidMethod(ObjectID, 'getMatrix', '(Landroid/graphics/Matrix;)V', [AArg0]);
end;

function TJCanvas.getMaximumBitmapHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMaximumBitmapHeight', '()I', []);
end;

function TJCanvas.getMaximumBitmapWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMaximumBitmapWidth', '()I', []);
end;

function TJCanvas.getSaveCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getSaveCount', '()I', []);
end;

function TJCanvas.getWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWidth', '()I', []);
end;

function TJCanvas.isHardwareAccelerated: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isHardwareAccelerated', '()Z', []);
end;

function TJCanvas.isOpaque: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isOpaque', '()Z', []);
end;

procedure TJCanvas.restore;
begin
  JavaType.CallVoidMethod(ObjectID, 'restore', '()V', []);
end;

procedure TJCanvas.restoreToCount(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'restoreToCount', '(I)V', [AArg0]);
end;

procedure TJCanvas.rotate(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'rotate', '(F)V', [AArg0]);
end;

procedure TJCanvas.rotate(const AArg0: Single; const AArg1: Single; const AArg2: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'rotate', '(FFF)V', [AArg0, AArg1, AArg2]);
end;

function TJCanvas.save: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'save', '()I', []);
end;

function TJCanvas.saveLayer(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint; const AArg5: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'saveLayer', '(FFFFLandroid/graphics/Paint;I)I', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJCanvas.saveLayer(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: JPaint): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'saveLayer', '(FFFFLandroid/graphics/Paint;)I', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJCanvas.saveLayer(const AArg0: JRectF; const AArg1: JPaint; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'saveLayer', '(Landroid/graphics/RectF;Landroid/graphics/Paint;I)I', [AArg0, AArg1, AArg2]);
end;

function TJCanvas.saveLayer(const AArg0: JRectF; const AArg1: JPaint): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'saveLayer', '(Landroid/graphics/RectF;Landroid/graphics/Paint;)I', [AArg0, AArg1]);
end;

function TJCanvas.saveLayerAlpha(const AArg0: JRectF; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'saveLayerAlpha', '(Landroid/graphics/RectF;I)I', [AArg0, AArg1]);
end;

function TJCanvas.saveLayerAlpha(const AArg0: JRectF; const AArg1: Integer; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'saveLayerAlpha', '(Landroid/graphics/RectF;II)I', [AArg0, AArg1, AArg2]);
end;

function TJCanvas.saveLayerAlpha(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Integer; const AArg5: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'saveLayerAlpha', '(FFFFII)I', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJCanvas.saveLayerAlpha(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'saveLayerAlpha', '(FFFFI)I', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJCanvas.scale(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'scale', '(FF)V', [AArg0, AArg1]);
end;

procedure TJCanvas.scale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'scale', '(FFFF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJCanvas.setBitmap(const AArg0: JBitmap);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBitmap', '(Landroid/graphics/Bitmap;)V', [AArg0]);
end;

procedure TJCanvas.setDensity(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDensity', '(I)V', [AArg0]);
end;

procedure TJCanvas.setMatrix(const AArg0: JMatrix);
begin
  JavaType.CallVoidMethod(ObjectID, 'setMatrix', '(Landroid/graphics/Matrix;)V', [AArg0]);
end;

procedure TJCanvas.skew(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'skew', '(FF)V', [AArg0, AArg1]);
end;

procedure TJCanvas.translate(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'translate', '(FF)V', [AArg0, AArg1]);
end;

{ TJColor }

class procedure TJColor.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJColor.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('HSVToColor', '(I[F)I');
  AddStaticMethod('HSVToColor', '([F)I');
  AddStaticMethod('RGBToHSV', '(III[F)V');
  AddStaticMethod('alpha', '(I)I');
  AddStaticMethod('alpha', '(J)F');
  AddMethod('alpha', '()F');
  AddStaticMethod('argb', '(FFFF)I');
  AddStaticMethod('argb', '(IIII)I');
  AddMethod('blue', '()F');
  AddStaticMethod('blue', '(J)F');
  AddStaticMethod('blue', '(I)I');
  AddStaticMethod('colorToHSV', '(I[F)V');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('getComponent', '(I)F');
  AddMethod('getComponentCount', '()I');
  AddMethod('getComponents', '()[F');
  AddMethod('getComponents', '([F)[F');
  AddStaticMethod('green', '(I)I');
  AddStaticMethod('green', '(J)F');
  AddMethod('green', '()F');
  AddMethod('hashCode', '()I');
  AddStaticMethod('isSrgb', '(J)Z');
  AddMethod('isSrgb', '()Z');
  AddStaticMethod('isWideGamut', '(J)Z');
  AddMethod('isWideGamut', '()Z');
  AddMethod('luminance', '()F');
  AddStaticMethod('luminance', '(J)F');
  AddStaticMethod('luminance', '(I)F');
  AddMethod('pack', '()J');
  AddStaticMethod('pack', '(I)J');
  AddStaticMethod('pack', '(FFF)J');
  AddStaticMethod('pack', '(FFFF)J');
  AddStaticMethod('parseColor', '(Ljava/lang/String;)I');
  AddMethod('red', '()F');
  AddStaticMethod('red', '(I)I');
  AddStaticMethod('red', '(J)F');
  AddStaticMethod('rgb', '(FFF)I');
  AddStaticMethod('rgb', '(III)I');
  AddMethod('toArgb', '()I');
  AddStaticMethod('toArgb', '(J)I');
  AddMethod('toString', '()Ljava/lang/String;');
  AddStaticMethod('valueOf', '(FFF)Landroid/graphics/Color;');
  AddStaticMethod('valueOf', '(J)Landroid/graphics/Color;');
  AddStaticMethod('valueOf', '(I)Landroid/graphics/Color;');
  AddStaticMethod('valueOf', '(FFFF)Landroid/graphics/Color;');
end;

class procedure TJColor.LoadFields;
begin
  inherited;
  AddStaticField('BLACK', 'I');
  AddStaticField('BLUE', 'I');
  AddStaticField('CYAN', 'I');
  AddStaticField('DKGRAY', 'I');
  AddStaticField('GRAY', 'I');
  AddStaticField('GREEN', 'I');
  AddStaticField('LTGRAY', 'I');
  AddStaticField('MAGENTA', 'I');
  AddStaticField('RED', 'I');
  AddStaticField('TRANSPARENT', 'I');
  AddStaticField('WHITE', 'I');
  AddStaticField('YELLOW', 'I');
end;

class function TJColor.Wrap(const AObjectID: JNIObject): JColor;
begin
  Result := Wrap<TJColor, JColor>(AObjectId);
end;

class function TJColor.Wrap(const AObject: IJNIObject): JColor;
begin
  Result := Wrap<TJColor, JColor>(AObject);
end;

class function TJColor.Create: JColor;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJColor.BLACK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BLACK');
end;

class function TJColor.BLUE_: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BLUE');
end;

class function TJColor.CYAN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CYAN');
end;

class function TJColor.DKGRAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DKGRAY');
end;

class function TJColor.GRAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GRAY');
end;

class function TJColor.GREEN_: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GREEN');
end;

class function TJColor.LTGRAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LTGRAY');
end;

class function TJColor.MAGENTA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MAGENTA');
end;

class function TJColor.RED_: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RED');
end;

class function TJColor.TRANSPARENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TRANSPARENT');
end;

class function TJColor.WHITE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('WHITE');
end;

class function TJColor.YELLOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('YELLOW');
end;

class function TJColor.HSVToColor(const AArg0: Integer; const AArg1: IJavaArray<Single>): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('HSVToColor', '(I[F)I', [AArg0, AArg1]);
end;

class function TJColor.HSVToColor(const AArg0: IJavaArray<Single>): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('HSVToColor', '([F)I', [AArg0]);
end;

class procedure TJColor.RGBToHSV(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>);
begin
  StaticJavaType[Self].CallStaticVoidMethod('RGBToHSV', '(III[F)V', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJColor.alpha(const AArg0: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('alpha', '(I)I', [AArg0]);
end;

class function TJColor.alpha(const AArg0: Int64): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('alpha', '(J)F', [AArg0]);
end;

function TJColor.alpha: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'alpha', '()F', []);
end;

class function TJColor.argb(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('argb', '(FFFF)I', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJColor.argb(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('argb', '(IIII)I', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJColor.blue: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'blue', '()F', []);
end;

class function TJColor.blue(const AArg0: Int64): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('blue', '(J)F', [AArg0]);
end;

class function TJColor.blue(const AArg0: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('blue', '(I)I', [AArg0]);
end;

class procedure TJColor.colorToHSV(const AArg0: Integer; const AArg1: IJavaArray<Single>);
begin
  StaticJavaType[Self].CallStaticVoidMethod('colorToHSV', '(I[F)V', [AArg0, AArg1]);
end;

function TJColor.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJColor.getComponent(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getComponent', '(I)F', [AArg0]);
end;

function TJColor.getComponentCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getComponentCount', '()I', []);
end;

function TJColor.getComponents: IJavaArray<Single>;
begin
  Result := CallArrayMethod<Single>('getComponents', '()[F', []);
end;

function TJColor.getComponents(const AArg0: IJavaArray<Single>): IJavaArray<Single>;
begin
  Result := CallArrayMethod<Single>('getComponents', '([F)[F', [AArg0]);
end;

class function TJColor.green(const AArg0: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('green', '(I)I', [AArg0]);
end;

class function TJColor.green(const AArg0: Int64): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('green', '(J)F', [AArg0]);
end;

function TJColor.green: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'green', '()F', []);
end;

function TJColor.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

class function TJColor.isSrgb(const AArg0: Int64): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('isSrgb', '(J)Z', [AArg0]);
end;

function TJColor.isSrgb: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isSrgb', '()Z', []);
end;

class function TJColor.isWideGamut(const AArg0: Int64): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('isWideGamut', '(J)Z', [AArg0]);
end;

function TJColor.isWideGamut: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isWideGamut', '()Z', []);
end;

function TJColor.luminance: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'luminance', '()F', []);
end;

class function TJColor.luminance(const AArg0: Int64): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('luminance', '(J)F', [AArg0]);
end;

class function TJColor.luminance(const AArg0: Integer): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('luminance', '(I)F', [AArg0]);
end;

function TJColor.pack: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'pack', '()J', []);
end;

class function TJColor.pack(const AArg0: Integer): Int64;
begin
  Result := StaticJavaType[Self].CallStaticLongMethod('pack', '(I)J', [AArg0]);
end;

class function TJColor.pack(const AArg0: Single; const AArg1: Single; const AArg2: Single): Int64;
begin
  Result := StaticJavaType[Self].CallStaticLongMethod('pack', '(FFF)J', [AArg0, AArg1, AArg2]);
end;

class function TJColor.pack(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Int64;
begin
  Result := StaticJavaType[Self].CallStaticLongMethod('pack', '(FFFF)J', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJColor.parseColor(const AArg0: JString): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('parseColor', '(Ljava/lang/String;)I', [AArg0]);
end;

function TJColor.red: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'red', '()F', []);
end;

class function TJColor.red(const AArg0: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('red', '(I)I', [AArg0]);
end;

class function TJColor.red(const AArg0: Int64): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('red', '(J)F', [AArg0]);
end;

class function TJColor.rgb(const AArg0: Single; const AArg1: Single; const AArg2: Single): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('rgb', '(FFF)I', [AArg0, AArg1, AArg2]);
end;

class function TJColor.rgb(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('rgb', '(III)I', [AArg0, AArg1, AArg2]);
end;

function TJColor.toArgb: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'toArgb', '()I', []);
end;

class function TJColor.toArgb(const AArg0: Int64): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('toArgb', '(J)I', [AArg0]);
end;

function TJColor.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

class function TJColor.valueOf(const AArg0: Single; const AArg1: Single; const AArg2: Single): JColor;
begin
  Result := CallStaticObjectMethod<TJColor, JColor>('valueOf', '(FFF)Landroid/graphics/Color;', [AArg0, AArg1, AArg2]);
end;

class function TJColor.valueOf(const AArg0: Int64): JColor;
begin
  Result := CallStaticObjectMethod<TJColor, JColor>('valueOf', '(J)Landroid/graphics/Color;', [AArg0]);
end;

class function TJColor.valueOf(const AArg0: Integer): JColor;
begin
  Result := CallStaticObjectMethod<TJColor, JColor>('valueOf', '(I)Landroid/graphics/Color;', [AArg0]);
end;

class function TJColor.valueOf(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): JColor;
begin
  Result := CallStaticObjectMethod<TJColor, JColor>('valueOf', '(FFFF)Landroid/graphics/Color;', [AArg0, AArg1, AArg2, AArg3]);
end;

{ TJColorFilter }

class procedure TJColorFilter.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJColorFilter.LoadMethods;
begin
  inherited;
end;

class function TJColorFilter.Wrap(const AObjectID: JNIObject): JColorFilter;
begin
  Result := Wrap<TJColorFilter, JColorFilter>(AObjectId);
end;

class function TJColorFilter.Wrap(const AObject: IJNIObject): JColorFilter;
begin
  Result := Wrap<TJColorFilter, JColorFilter>(AObject);
end;

class function TJColorFilter.Create: JColorFilter;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

{ TJPorterDuffColorFilter }

class procedure TJPorterDuffColorFilter.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(ILandroid/graphics/PorterDuff$Mode;)V');
end;

class procedure TJPorterDuffColorFilter.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('hashCode', '()I');
end;

class function TJPorterDuffColorFilter.Wrap(const AObjectID: JNIObject): JPorterDuffColorFilter;
begin
  Result := Wrap<TJPorterDuffColorFilter, JPorterDuffColorFilter>(AObjectId);
end;

class function TJPorterDuffColorFilter.Wrap(const AObject: IJNIObject): JPorterDuffColorFilter;
begin
  Result := Wrap<TJPorterDuffColorFilter, JPorterDuffColorFilter>(AObject);
end;

class function TJPorterDuffColorFilter.Create(const AArg0: Integer; const AArg1: JPorterDuff_Mode): JPorterDuffColorFilter;
begin
  var O := CreateForWrap;
  O.NewObject('(ILandroid/graphics/PorterDuff$Mode;)V', [AArg0, AArg1]);
  Result := O;
end;

function TJPorterDuffColorFilter.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJPorterDuffColorFilter.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

{ TJImageFormat }

class procedure TJImageFormat.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJImageFormat.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('getBitsPerPixel', '(I)I');
end;

class procedure TJImageFormat.LoadFields;
begin
  inherited;
  AddStaticField('DEPTH16', 'I');
  AddStaticField('DEPTH_POINT_CLOUD', 'I');
  AddStaticField('FLEX_RGBA_8888', 'I');
  AddStaticField('FLEX_RGB_888', 'I');
  AddStaticField('JPEG', 'I');
  AddStaticField('NV16', 'I');
  AddStaticField('NV21', 'I');
  AddStaticField('PRIVATE', 'I');
  AddStaticField('RAW10', 'I');
  AddStaticField('RAW12', 'I');
  AddStaticField('RAW_PRIVATE', 'I');
  AddStaticField('RAW_SENSOR', 'I');
  AddStaticField('RGB_565', 'I');
  AddStaticField('UNKNOWN', 'I');
  AddStaticField('YUV_420_888', 'I');
  AddStaticField('YUV_422_888', 'I');
  AddStaticField('YUV_444_888', 'I');
  AddStaticField('YUY2', 'I');
  AddStaticField('YV12', 'I');
end;

class function TJImageFormat.Wrap(const AObjectID: JNIObject): JImageFormat;
begin
  Result := Wrap<TJImageFormat, JImageFormat>(AObjectId);
end;

class function TJImageFormat.Wrap(const AObject: IJNIObject): JImageFormat;
begin
  Result := Wrap<TJImageFormat, JImageFormat>(AObject);
end;

class function TJImageFormat.Create: JImageFormat;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJImageFormat.DEPTH16: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DEPTH16');
end;

class function TJImageFormat.DEPTH_POINT_CLOUD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DEPTH_POINT_CLOUD');
end;

class function TJImageFormat.FLEX_RGBA_8888: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLEX_RGBA_8888');
end;

class function TJImageFormat.FLEX_RGB_888: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLEX_RGB_888');
end;

class function TJImageFormat.JPEG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('JPEG');
end;

class function TJImageFormat.NV16: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NV16');
end;

class function TJImageFormat.NV21: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NV21');
end;

class function TJImageFormat.PRIVATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PRIVATE');
end;

class function TJImageFormat.RAW10: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RAW10');
end;

class function TJImageFormat.RAW12: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RAW12');
end;

class function TJImageFormat.RAW_PRIVATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RAW_PRIVATE');
end;

class function TJImageFormat.RAW_SENSOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RAW_SENSOR');
end;

class function TJImageFormat.RGB_565: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RGB_565');
end;

class function TJImageFormat.UNKNOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UNKNOWN');
end;

class function TJImageFormat.YUV_420_888: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('YUV_420_888');
end;

class function TJImageFormat.YUV_422_888: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('YUV_422_888');
end;

class function TJImageFormat.YUV_444_888: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('YUV_444_888');
end;

class function TJImageFormat.YUY2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('YUY2');
end;

class function TJImageFormat.YV12: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('YV12');
end;

class function TJImageFormat.getBitsPerPixel(const AArg0: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getBitsPerPixel', '(I)I', [AArg0]);
end;

{ TJMatrix }

class procedure TJMatrix.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/graphics/Matrix;)V');
end;

class procedure TJMatrix.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('getValues', '([F)V');
  AddMethod('hashCode', '()I');
  AddMethod('invert', '(Landroid/graphics/Matrix;)Z');
  AddMethod('isAffine', '()Z');
  AddMethod('isIdentity', '()Z');
  AddMethod('mapPoints', '([F)V');
  AddMethod('mapPoints', '([F[F)V');
  AddMethod('mapPoints', '([FI[FII)V');
  AddMethod('mapRadius', '(F)F');
  AddMethod('mapRect', '(Landroid/graphics/RectF;)Z');
  AddMethod('mapRect', '(Landroid/graphics/RectF;Landroid/graphics/RectF;)Z');
  AddMethod('mapVectors', '([F)V');
  AddMethod('mapVectors', '([FI[FII)V');
  AddMethod('mapVectors', '([F[F)V');
  AddMethod('postConcat', '(Landroid/graphics/Matrix;)Z');
  AddMethod('postRotate', '(FFF)Z');
  AddMethod('postRotate', '(F)Z');
  AddMethod('postScale', '(FF)Z');
  AddMethod('postScale', '(FFFF)Z');
  AddMethod('postSkew', '(FF)Z');
  AddMethod('postSkew', '(FFFF)Z');
  AddMethod('postTranslate', '(FF)Z');
  AddMethod('preConcat', '(Landroid/graphics/Matrix;)Z');
  AddMethod('preRotate', '(FFF)Z');
  AddMethod('preRotate', '(F)Z');
  AddMethod('preScale', '(FFFF)Z');
  AddMethod('preScale', '(FF)Z');
  AddMethod('preSkew', '(FFFF)Z');
  AddMethod('preSkew', '(FF)Z');
  AddMethod('preTranslate', '(FF)Z');
  AddMethod('rectStaysRect', '()Z');
  AddMethod('reset', '()V');
  AddMethod('set', '(Landroid/graphics/Matrix;)V');
  AddMethod('setConcat', '(Landroid/graphics/Matrix;Landroid/graphics/Matrix;)Z');
  AddMethod('setPolyToPoly', '([FI[FII)Z');
  AddMethod('setRectToRect', '(Landroid/graphics/RectF;Landroid/graphics/RectF;Landroid/graphics/Matrix$ScaleToFit;)Z');
  AddMethod('setRotate', '(FFF)V');
  AddMethod('setRotate', '(F)V');
  AddMethod('setScale', '(FF)V');
  AddMethod('setScale', '(FFFF)V');
  AddMethod('setSinCos', '(FFFF)V');
  AddMethod('setSinCos', '(FF)V');
  AddMethod('setSkew', '(FF)V');
  AddMethod('setSkew', '(FFFF)V');
  AddMethod('setTranslate', '(FF)V');
  AddMethod('setValues', '([F)V');
  AddMethod('toShortString', '()Ljava/lang/String;');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJMatrix.LoadFields;
begin
  inherited;
  AddStaticField('MPERSP_0', 'I');
  AddStaticField('MPERSP_1', 'I');
  AddStaticField('MPERSP_2', 'I');
  AddStaticField('MSCALE_X', 'I');
  AddStaticField('MSCALE_Y', 'I');
  AddStaticField('MSKEW_X', 'I');
  AddStaticField('MSKEW_Y', 'I');
  AddStaticField('MTRANS_X', 'I');
  AddStaticField('MTRANS_Y', 'I');
end;

class function TJMatrix.Wrap(const AObjectID: JNIObject): JMatrix;
begin
  Result := Wrap<TJMatrix, JMatrix>(AObjectId);
end;

class function TJMatrix.Wrap(const AObject: IJNIObject): JMatrix;
begin
  Result := Wrap<TJMatrix, JMatrix>(AObject);
end;

class function TJMatrix.Create: JMatrix;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJMatrix.Create(const AArg0: JMatrix): JMatrix;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Matrix;)V', [AArg0]);
  Result := O;
end;

class function TJMatrix.MPERSP_0: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MPERSP_0');
end;

class function TJMatrix.MPERSP_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MPERSP_1');
end;

class function TJMatrix.MPERSP_2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MPERSP_2');
end;

class function TJMatrix.MSCALE_X: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MSCALE_X');
end;

class function TJMatrix.MSCALE_Y: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MSCALE_Y');
end;

class function TJMatrix.MSKEW_X: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MSKEW_X');
end;

class function TJMatrix.MSKEW_Y: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MSKEW_Y');
end;

class function TJMatrix.MTRANS_X: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MTRANS_X');
end;

class function TJMatrix.MTRANS_Y: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MTRANS_Y');
end;

function TJMatrix.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

procedure TJMatrix.getValues(const AArg0: IJavaArray<Single>);
begin
  JavaType.CallVoidMethod(ObjectID, 'getValues', '([F)V', [AArg0]);
end;

function TJMatrix.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJMatrix.invert(const AArg0: JMatrix): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'invert', '(Landroid/graphics/Matrix;)Z', [AArg0]);
end;

function TJMatrix.isAffine: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAffine', '()Z', []);
end;

function TJMatrix.isIdentity: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isIdentity', '()Z', []);
end;

procedure TJMatrix.mapPoints(const AArg0: IJavaArray<Single>);
begin
  JavaType.CallVoidMethod(ObjectID, 'mapPoints', '([F)V', [AArg0]);
end;

procedure TJMatrix.mapPoints(const AArg0: IJavaArray<Single>; const AArg1: IJavaArray<Single>);
begin
  JavaType.CallVoidMethod(ObjectID, 'mapPoints', '([F[F)V', [AArg0, AArg1]);
end;

procedure TJMatrix.mapPoints(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: IJavaArray<Single>; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'mapPoints', '([FI[FII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJMatrix.mapRadius(const AArg0: Single): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'mapRadius', '(F)F', [AArg0]);
end;

function TJMatrix.mapRect(const AArg0: JRectF): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'mapRect', '(Landroid/graphics/RectF;)Z', [AArg0]);
end;

function TJMatrix.mapRect(const AArg0: JRectF; const AArg1: JRectF): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'mapRect', '(Landroid/graphics/RectF;Landroid/graphics/RectF;)Z', [AArg0, AArg1]);
end;

procedure TJMatrix.mapVectors(const AArg0: IJavaArray<Single>);
begin
  JavaType.CallVoidMethod(ObjectID, 'mapVectors', '([F)V', [AArg0]);
end;

procedure TJMatrix.mapVectors(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: IJavaArray<Single>; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'mapVectors', '([FI[FII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJMatrix.mapVectors(const AArg0: IJavaArray<Single>; const AArg1: IJavaArray<Single>);
begin
  JavaType.CallVoidMethod(ObjectID, 'mapVectors', '([F[F)V', [AArg0, AArg1]);
end;

function TJMatrix.postConcat(const AArg0: JMatrix): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postConcat', '(Landroid/graphics/Matrix;)Z', [AArg0]);
end;

function TJMatrix.postRotate(const AArg0: Single; const AArg1: Single; const AArg2: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postRotate', '(FFF)Z', [AArg0, AArg1, AArg2]);
end;

function TJMatrix.postRotate(const AArg0: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postRotate', '(F)Z', [AArg0]);
end;

function TJMatrix.postScale(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postScale', '(FF)Z', [AArg0, AArg1]);
end;

function TJMatrix.postScale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postScale', '(FFFF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJMatrix.postSkew(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postSkew', '(FF)Z', [AArg0, AArg1]);
end;

function TJMatrix.postSkew(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postSkew', '(FFFF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJMatrix.postTranslate(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postTranslate', '(FF)Z', [AArg0, AArg1]);
end;

function TJMatrix.preConcat(const AArg0: JMatrix): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'preConcat', '(Landroid/graphics/Matrix;)Z', [AArg0]);
end;

function TJMatrix.preRotate(const AArg0: Single; const AArg1: Single; const AArg2: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'preRotate', '(FFF)Z', [AArg0, AArg1, AArg2]);
end;

function TJMatrix.preRotate(const AArg0: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'preRotate', '(F)Z', [AArg0]);
end;

function TJMatrix.preScale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'preScale', '(FFFF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJMatrix.preScale(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'preScale', '(FF)Z', [AArg0, AArg1]);
end;

function TJMatrix.preSkew(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'preSkew', '(FFFF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJMatrix.preSkew(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'preSkew', '(FF)Z', [AArg0, AArg1]);
end;

function TJMatrix.preTranslate(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'preTranslate', '(FF)Z', [AArg0, AArg1]);
end;

function TJMatrix.rectStaysRect: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'rectStaysRect', '()Z', []);
end;

procedure TJMatrix.reset;
begin
  JavaType.CallVoidMethod(ObjectID, 'reset', '()V', []);
end;

procedure TJMatrix.&set(const AArg0: JMatrix);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Landroid/graphics/Matrix;)V', [AArg0]);
end;

function TJMatrix.setConcat(const AArg0: JMatrix; const AArg1: JMatrix): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setConcat', '(Landroid/graphics/Matrix;Landroid/graphics/Matrix;)Z', [AArg0, AArg1]);
end;

function TJMatrix.setPolyToPoly(const AArg0: IJavaArray<Single>; const AArg1: Integer; const AArg2: IJavaArray<Single>; const AArg3: Integer; const AArg4: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setPolyToPoly', '([FI[FII)Z', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJMatrix.setRectToRect(const AArg0: JRectF; const AArg1: JRectF; const AArg2: JMatrix_ScaleToFit): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setRectToRect', '(Landroid/graphics/RectF;Landroid/graphics/RectF;Landroid/graphics/Matrix$ScaleToFit;)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJMatrix.setRotate(const AArg0: Single; const AArg1: Single; const AArg2: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRotate', '(FFF)V', [AArg0, AArg1, AArg2]);
end;

procedure TJMatrix.setRotate(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRotate', '(F)V', [AArg0]);
end;

procedure TJMatrix.setScale(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScale', '(FF)V', [AArg0, AArg1]);
end;

procedure TJMatrix.setScale(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScale', '(FFFF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJMatrix.setSinCos(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSinCos', '(FFFF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJMatrix.setSinCos(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSinCos', '(FF)V', [AArg0, AArg1]);
end;

procedure TJMatrix.setSkew(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSkew', '(FF)V', [AArg0, AArg1]);
end;

procedure TJMatrix.setSkew(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSkew', '(FFFF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJMatrix.setTranslate(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTranslate', '(FF)V', [AArg0, AArg1]);
end;

procedure TJMatrix.setValues(const AArg0: IJavaArray<Single>);
begin
  JavaType.CallVoidMethod(ObjectID, 'setValues', '([F)V', [AArg0]);
end;

function TJMatrix.toShortString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toShortString', '()Ljava/lang/String;', []);
end;

function TJMatrix.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJMatrix_ScaleToFit }

class procedure TJMatrix_ScaleToFit.LoadConstructors;
begin
end;

class procedure TJMatrix_ScaleToFit.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('valueOf', '(Ljava/lang/String;)Landroid/graphics/Matrix$ScaleToFit;');
  AddStaticMethod('values', '()[Landroid/graphics/Matrix$ScaleToFit;');
end;

class procedure TJMatrix_ScaleToFit.LoadFields;
begin
  inherited;
  AddStaticField('CENTER', 'Landroid/graphics/Matrix$ScaleToFit;');
  AddStaticField('END', 'Landroid/graphics/Matrix$ScaleToFit;');
  AddStaticField('FILL', 'Landroid/graphics/Matrix$ScaleToFit;');
  AddStaticField('START', 'Landroid/graphics/Matrix$ScaleToFit;');
end;

class function TJMatrix_ScaleToFit.Wrap(const AObjectID: JNIObject): JMatrix_ScaleToFit;
begin
  Result := Wrap<TJMatrix_ScaleToFit, JMatrix_ScaleToFit>(AObjectId);
end;

class function TJMatrix_ScaleToFit.Wrap(const AObject: IJNIObject): JMatrix_ScaleToFit;
begin
  Result := Wrap<TJMatrix_ScaleToFit, JMatrix_ScaleToFit>(AObject);
end;

class function TJMatrix_ScaleToFit.CENTER: JMatrix_ScaleToFit;
begin
  Result := GetStaticObjectField<TJMatrix_ScaleToFit, JMatrix_ScaleToFit>('CENTER');
end;

class function TJMatrix_ScaleToFit.&END: JMatrix_ScaleToFit;
begin
  Result := GetStaticObjectField<TJMatrix_ScaleToFit, JMatrix_ScaleToFit>('END');
end;

class function TJMatrix_ScaleToFit.FILL: JMatrix_ScaleToFit;
begin
  Result := GetStaticObjectField<TJMatrix_ScaleToFit, JMatrix_ScaleToFit>('FILL');
end;

class function TJMatrix_ScaleToFit.START: JMatrix_ScaleToFit;
begin
  Result := GetStaticObjectField<TJMatrix_ScaleToFit, JMatrix_ScaleToFit>('START');
end;

class function TJMatrix_ScaleToFit.valueOf(const AArg0: JString): JMatrix_ScaleToFit;
begin
  Result := CallStaticObjectMethod<TJMatrix_ScaleToFit, JMatrix_ScaleToFit>('valueOf', '(Ljava/lang/String;)Landroid/graphics/Matrix$ScaleToFit;', [AArg0]);
end;

class function TJMatrix_ScaleToFit.values: IJavaArray<JMatrix_ScaleToFit>;
begin
  Result := CallStaticArrayMethod<JMatrix_ScaleToFit>('values', '()[Landroid/graphics/Matrix$ScaleToFit;', []);
end;

{ TJOutline }

class procedure TJOutline.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/graphics/Outline;)V');
end;

class procedure TJOutline.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('canClip', '()Z');
  AddMethod('getAlpha', '()F');
  AddMethod('getRadius', '()F');
  AddMethod('getRect', '(Landroid/graphics/Rect;)Z');
  AddMethod('isEmpty', '()Z');
  AddMethod('offset', '(II)V');
  AddMethod('set', '(Landroid/graphics/Outline;)V');
  AddMethod('setAlpha', '(F)V');
  AddMethod('setConvexPath', '(Landroid/graphics/Path;)V');
  AddMethod('setEmpty', '()V');
  AddMethod('setOval', '(IIII)V');
  AddMethod('setOval', '(Landroid/graphics/Rect;)V');
  AddMethod('setRect', '(IIII)V');
  AddMethod('setRect', '(Landroid/graphics/Rect;)V');
  AddMethod('setRoundRect', '(IIIIF)V');
  AddMethod('setRoundRect', '(Landroid/graphics/Rect;F)V');
end;

class function TJOutline.Wrap(const AObjectID: JNIObject): JOutline;
begin
  Result := Wrap<TJOutline, JOutline>(AObjectId);
end;

class function TJOutline.Wrap(const AObject: IJNIObject): JOutline;
begin
  Result := Wrap<TJOutline, JOutline>(AObject);
end;

class function TJOutline.Create: JOutline;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJOutline.Create(const AArg0: JOutline): JOutline;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Outline;)V', [AArg0]);
  Result := O;
end;

function TJOutline.canClip: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canClip', '()Z', []);
end;

function TJOutline.getAlpha: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getAlpha', '()F', []);
end;

function TJOutline.getRadius: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRadius', '()F', []);
end;

function TJOutline.getRect(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getRect', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJOutline.isEmpty: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEmpty', '()Z', []);
end;

procedure TJOutline.offset(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'offset', '(II)V', [AArg0, AArg1]);
end;

procedure TJOutline.&set(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

procedure TJOutline.setAlpha(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(F)V', [AArg0]);
end;

procedure TJOutline.setConvexPath(const AArg0: JPath);
begin
  JavaType.CallVoidMethod(ObjectID, 'setConvexPath', '(Landroid/graphics/Path;)V', [AArg0]);
end;

procedure TJOutline.setEmpty;
begin
  JavaType.CallVoidMethod(ObjectID, 'setEmpty', '()V', []);
end;

procedure TJOutline.setOval(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOval', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJOutline.setOval(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOval', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJOutline.setRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRect', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJOutline.setRect(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRect', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJOutline.setRoundRect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRoundRect', '(IIIIF)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJOutline.setRoundRect(const AArg0: JRect; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRoundRect', '(Landroid/graphics/Rect;F)V', [AArg0, AArg1]);
end;

{ TJPaint }

class procedure TJPaint.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(I)V');
  AddMethod('<init>', '(Landroid/graphics/Paint;)V');
end;

class procedure TJPaint.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('ascent', '()F');
  AddMethod('breakText', '([CIIF[F)I');
  AddMethod('breakText', '(Ljava/lang/CharSequence;IIZF[F)I');
  AddMethod('breakText', '(Ljava/lang/String;ZF[F)I');
  AddMethod('clearShadowLayer', '()V');
  AddMethod('descent', '()F');
  AddMethod('equalsForTextMeasurement', '(Landroid/graphics/Paint;)Z');
  AddMethod('getAlpha', '()I');
  AddMethod('getColor', '()I');
  AddMethod('getColorFilter', '()Landroid/graphics/ColorFilter;');
  AddMethod('getFillPath', '(Landroid/graphics/Path;Landroid/graphics/Path;)Z');
  AddMethod('getFlags', '()I');
  AddMethod('getFontFeatureSettings', '()Ljava/lang/String;');
  AddMethod('getFontSpacing', '()F');
  AddMethod('getFontVariationSettings', '()Ljava/lang/String;');
  AddMethod('getHinting', '()I');
  AddMethod('getLetterSpacing', '()F');
  AddMethod('getOffsetForAdvance', '(Ljava/lang/CharSequence;IIIIZF)I');
  AddMethod('getOffsetForAdvance', '([CIIIIZF)I');
  AddMethod('getPathEffect', '()Landroid/graphics/PathEffect;');
  AddMethod('getRunAdvance', '(Ljava/lang/CharSequence;IIIIZI)F');
  AddMethod('getRunAdvance', '([CIIIIZI)F');
  AddMethod('getShader', '()Landroid/graphics/Shader;');
  AddMethod('getStrokeCap', '()Landroid/graphics/Paint$Cap;');
  AddMethod('getStrokeJoin', '()Landroid/graphics/Paint$Join;');
  AddMethod('getStrokeMiter', '()F');
  AddMethod('getStrokeWidth', '()F');
  AddMethod('getStyle', '()Landroid/graphics/Paint$Style;');
  AddMethod('getTextBounds', '([CIILandroid/graphics/Rect;)V');
  AddMethod('getTextBounds', '(Ljava/lang/String;IILandroid/graphics/Rect;)V');
  AddMethod('getTextLocale', '()Ljava/util/Locale;');
  AddMethod('getTextPath', '(Ljava/lang/String;IIFFLandroid/graphics/Path;)V');
  AddMethod('getTextPath', '([CIIFFLandroid/graphics/Path;)V');
  AddMethod('getTextScaleX', '()F');
  AddMethod('getTextSize', '()F');
  AddMethod('getTextSkewX', '()F');
  AddMethod('getTextWidths', '(Ljava/lang/String;[F)I');
  AddMethod('getTextWidths', '([CII[F)I');
  AddMethod('getTextWidths', '(Ljava/lang/CharSequence;II[F)I');
  AddMethod('getTextWidths', '(Ljava/lang/String;II[F)I');
  AddMethod('getTypeface', '()Landroid/graphics/Typeface;');
  AddMethod('getXfermode', '()Landroid/graphics/Xfermode;');
  AddMethod('hasGlyph', '(Ljava/lang/String;)Z');
  AddMethod('isAntiAlias', '()Z');
  AddMethod('isDither', '()Z');
  AddMethod('isElegantTextHeight', '()Z');
  AddMethod('isFakeBoldText', '()Z');
  AddMethod('isFilterBitmap', '()Z');
  AddMethod('isLinearText', '()Z');
  AddMethod('isStrikeThruText', '()Z');
  AddMethod('isSubpixelText', '()Z');
  AddMethod('isUnderlineText', '()Z');
  AddMethod('measureText', '([CII)F');
  AddMethod('measureText', '(Ljava/lang/CharSequence;II)F');
  AddMethod('measureText', '(Ljava/lang/String;)F');
  AddMethod('measureText', '(Ljava/lang/String;II)F');
  AddMethod('reset', '()V');
  AddMethod('set', '(Landroid/graphics/Paint;)V');
  AddMethod('setARGB', '(IIII)V');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setAntiAlias', '(Z)V');
  AddMethod('setColor', '(I)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)Landroid/graphics/ColorFilter;');
  AddMethod('setDither', '(Z)V');
  AddMethod('setElegantTextHeight', '(Z)V');
  AddMethod('setFakeBoldText', '(Z)V');
  AddMethod('setFilterBitmap', '(Z)V');
  AddMethod('setFlags', '(I)V');
  AddMethod('setFontFeatureSettings', '(Ljava/lang/String;)V');
  AddMethod('setFontVariationSettings', '(Ljava/lang/String;)Z');
  AddMethod('setHinting', '(I)V');
  AddMethod('setLetterSpacing', '(F)V');
  AddMethod('setLinearText', '(Z)V');
  AddMethod('setPathEffect', '(Landroid/graphics/PathEffect;)Landroid/graphics/PathEffect;');
  AddMethod('setShader', '(Landroid/graphics/Shader;)Landroid/graphics/Shader;');
  AddMethod('setShadowLayer', '(FFFI)V');
  AddMethod('setStrikeThruText', '(Z)V');
  AddMethod('setStrokeCap', '(Landroid/graphics/Paint$Cap;)V');
  AddMethod('setStrokeJoin', '(Landroid/graphics/Paint$Join;)V');
  AddMethod('setStrokeMiter', '(F)V');
  AddMethod('setStrokeWidth', '(F)V');
  AddMethod('setStyle', '(Landroid/graphics/Paint$Style;)V');
  AddMethod('setSubpixelText', '(Z)V');
  AddMethod('setTextLocale', '(Ljava/util/Locale;)V');
  AddMethod('setTextScaleX', '(F)V');
  AddMethod('setTextSize', '(F)V');
  AddMethod('setTextSkewX', '(F)V');
  AddMethod('setTypeface', '(Landroid/graphics/Typeface;)Landroid/graphics/Typeface;');
  AddMethod('setUnderlineText', '(Z)V');
  AddMethod('setXfermode', '(Landroid/graphics/Xfermode;)Landroid/graphics/Xfermode;');
end;

class procedure TJPaint.LoadFields;
begin
  inherited;
  AddStaticField('ANTI_ALIAS_FLAG', 'I');
  AddStaticField('DEV_KERN_TEXT_FLAG', 'I');
  AddStaticField('DITHER_FLAG', 'I');
  AddStaticField('EMBEDDED_BITMAP_TEXT_FLAG', 'I');
  AddStaticField('FAKE_BOLD_TEXT_FLAG', 'I');
  AddStaticField('FILTER_BITMAP_FLAG', 'I');
  AddStaticField('HINTING_OFF', 'I');
  AddStaticField('HINTING_ON', 'I');
  AddStaticField('LINEAR_TEXT_FLAG', 'I');
  AddStaticField('STRIKE_THRU_TEXT_FLAG', 'I');
  AddStaticField('SUBPIXEL_TEXT_FLAG', 'I');
  AddStaticField('UNDERLINE_TEXT_FLAG', 'I');
end;

class function TJPaint.Wrap(const AObjectID: JNIObject): JPaint;
begin
  Result := Wrap<TJPaint, JPaint>(AObjectId);
end;

class function TJPaint.Wrap(const AObject: IJNIObject): JPaint;
begin
  Result := Wrap<TJPaint, JPaint>(AObject);
end;

class function TJPaint.Create: JPaint;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJPaint.Create(const AArg0: Integer): JPaint;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

class function TJPaint.Create(const AArg0: JPaint): JPaint;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Paint;)V', [AArg0]);
  Result := O;
end;

class function TJPaint.ANTI_ALIAS_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ANTI_ALIAS_FLAG');
end;

class function TJPaint.DEV_KERN_TEXT_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DEV_KERN_TEXT_FLAG');
end;

class function TJPaint.DITHER_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DITHER_FLAG');
end;

class function TJPaint.EMBEDDED_BITMAP_TEXT_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EMBEDDED_BITMAP_TEXT_FLAG');
end;

class function TJPaint.FAKE_BOLD_TEXT_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FAKE_BOLD_TEXT_FLAG');
end;

class function TJPaint.FILTER_BITMAP_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILTER_BITMAP_FLAG');
end;

class function TJPaint.HINTING_OFF: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HINTING_OFF');
end;

class function TJPaint.HINTING_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HINTING_ON');
end;

class function TJPaint.LINEAR_TEXT_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LINEAR_TEXT_FLAG');
end;

class function TJPaint.STRIKE_THRU_TEXT_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STRIKE_THRU_TEXT_FLAG');
end;

class function TJPaint.SUBPIXEL_TEXT_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SUBPIXEL_TEXT_FLAG');
end;

class function TJPaint.UNDERLINE_TEXT_FLAG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UNDERLINE_TEXT_FLAG');
end;

function TJPaint.ascent: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'ascent', '()F', []);
end;

function TJPaint.breakText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: IJavaArray<Single>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'breakText', '([CIIF[F)I', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

function TJPaint.breakText(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Boolean; const AArg4: Single; const AArg5: IJavaArray<Single>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'breakText', '(Ljava/lang/CharSequence;IIZF[F)I', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJPaint.breakText(const AArg0: JString; const AArg1: Boolean; const AArg2: Single; const AArg3: IJavaArray<Single>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'breakText', '(Ljava/lang/String;ZF[F)I', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJPaint.clearShadowLayer;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearShadowLayer', '()V', []);
end;

function TJPaint.descent: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'descent', '()F', []);
end;

function TJPaint.equalsForTextMeasurement(const AArg0: JPaint): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equalsForTextMeasurement', '(Landroid/graphics/Paint;)Z', [AArg0]);
end;

function TJPaint.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJPaint.getColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColor', '()I', []);
end;

function TJPaint.getColorFilter: JColorFilter;
begin
  Result := CallObjectMethod<TJColorFilter, JColorFilter>('getColorFilter', '()Landroid/graphics/ColorFilter;', []);
end;

function TJPaint.getFillPath(const AArg0: JPath; const AArg1: JPath): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getFillPath', '(Landroid/graphics/Path;Landroid/graphics/Path;)Z', [AArg0, AArg1]);
end;

function TJPaint.getFlags: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getFlags', '()I', []);
end;

function TJPaint.getFontFeatureSettings: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getFontFeatureSettings', '()Ljava/lang/String;', []);
end;

function TJPaint.getFontSpacing: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFontSpacing', '()F', []);
end;

function TJPaint.getFontVariationSettings: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getFontVariationSettings', '()Ljava/lang/String;', []);
end;

function TJPaint.getHinting: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getHinting', '()I', []);
end;

function TJPaint.getLetterSpacing: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getLetterSpacing', '()F', []);
end;

function TJPaint.getOffsetForAdvance(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Single): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOffsetForAdvance', '(Ljava/lang/CharSequence;IIIIZF)I', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

function TJPaint.getOffsetForAdvance(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Single): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOffsetForAdvance', '([CIIIIZF)I', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

function TJPaint.getPathEffect: JPathEffect;
begin
  Result := CallObjectMethod<TJPathEffect, JPathEffect>('getPathEffect', '()Landroid/graphics/PathEffect;', []);
end;

function TJPaint.getRunAdvance(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRunAdvance', '(Ljava/lang/CharSequence;IIIIZI)F', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

function TJPaint.getRunAdvance(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Boolean; const AArg6: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRunAdvance', '([CIIIIZI)F', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

function TJPaint.getShader: JShader;
begin
  Result := CallObjectMethod<TJShader, JShader>('getShader', '()Landroid/graphics/Shader;', []);
end;

function TJPaint.getStrokeCap: JPaint_Cap;
begin
  Result := CallObjectMethod<TJPaint_Cap, JPaint_Cap>('getStrokeCap', '()Landroid/graphics/Paint$Cap;', []);
end;

function TJPaint.getStrokeJoin: JPaint_Join;
begin
  Result := CallObjectMethod<TJPaint_Join, JPaint_Join>('getStrokeJoin', '()Landroid/graphics/Paint$Join;', []);
end;

function TJPaint.getStrokeMiter: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getStrokeMiter', '()F', []);
end;

function TJPaint.getStrokeWidth: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getStrokeWidth', '()F', []);
end;

function TJPaint.getStyle: JPaint_Style;
begin
  Result := CallObjectMethod<TJPaint_Style, JPaint_Style>('getStyle', '()Landroid/graphics/Paint$Style;', []);
end;

procedure TJPaint.getTextBounds(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getTextBounds', '([CIILandroid/graphics/Rect;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJPaint.getTextBounds(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getTextBounds', '(Ljava/lang/String;IILandroid/graphics/Rect;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPaint.getTextLocale: JLocale;
begin
  Result := CallObjectMethod<TJLocale, JLocale>('getTextLocale', '()Ljava/util/Locale;', []);
end;

procedure TJPaint.getTextPath(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPath);
begin
  JavaType.CallVoidMethod(ObjectID, 'getTextPath', '(Ljava/lang/String;IIFFLandroid/graphics/Path;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJPaint.getTextPath(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: JPath);
begin
  JavaType.CallVoidMethod(ObjectID, 'getTextPath', '([CIIFFLandroid/graphics/Path;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJPaint.getTextScaleX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTextScaleX', '()F', []);
end;

function TJPaint.getTextSize: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTextSize', '()F', []);
end;

function TJPaint.getTextSkewX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTextSkewX', '()F', []);
end;

function TJPaint.getTextWidths(const AArg0: JString; const AArg1: IJavaArray<Single>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTextWidths', '(Ljava/lang/String;[F)I', [AArg0, AArg1]);
end;

function TJPaint.getTextWidths(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTextWidths', '([CII[F)I', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPaint.getTextWidths(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTextWidths', '(Ljava/lang/CharSequence;II[F)I', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPaint.getTextWidths(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Single>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTextWidths', '(Ljava/lang/String;II[F)I', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPaint.getTypeface: JTypeface;
begin
  Result := CallObjectMethod<TJTypeface, JTypeface>('getTypeface', '()Landroid/graphics/Typeface;', []);
end;

function TJPaint.getXfermode: JXfermode;
begin
  Result := CallObjectMethod<TJXfermode, JXfermode>('getXfermode', '()Landroid/graphics/Xfermode;', []);
end;

function TJPaint.hasGlyph(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasGlyph', '(Ljava/lang/String;)Z', [AArg0]);
end;

function TJPaint.isAntiAlias: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAntiAlias', '()Z', []);
end;

function TJPaint.isDither: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isDither', '()Z', []);
end;

function TJPaint.isElegantTextHeight: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isElegantTextHeight', '()Z', []);
end;

function TJPaint.isFakeBoldText: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFakeBoldText', '()Z', []);
end;

function TJPaint.isFilterBitmap: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFilterBitmap', '()Z', []);
end;

function TJPaint.isLinearText: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLinearText', '()Z', []);
end;

function TJPaint.isStrikeThruText: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStrikeThruText', '()Z', []);
end;

function TJPaint.isSubpixelText: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isSubpixelText', '()Z', []);
end;

function TJPaint.isUnderlineText: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isUnderlineText', '()Z', []);
end;

function TJPaint.measureText(const AArg0: IJavaArray<Char>; const AArg1: Integer; const AArg2: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'measureText', '([CII)F', [AArg0, AArg1, AArg2]);
end;

function TJPaint.measureText(const AArg0: JCharSequence; const AArg1: Integer; const AArg2: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'measureText', '(Ljava/lang/CharSequence;II)F', [AArg0, AArg1, AArg2]);
end;

function TJPaint.measureText(const AArg0: JString): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'measureText', '(Ljava/lang/String;)F', [AArg0]);
end;

function TJPaint.measureText(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'measureText', '(Ljava/lang/String;II)F', [AArg0, AArg1, AArg2]);
end;

procedure TJPaint.reset;
begin
  JavaType.CallVoidMethod(ObjectID, 'reset', '()V', []);
end;

procedure TJPaint.&set(const AArg0: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Landroid/graphics/Paint;)V', [AArg0]);
end;

procedure TJPaint.setARGB(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setARGB', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJPaint.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJPaint.setAntiAlias(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAntiAlias', '(Z)V', [AArg0]);
end;

procedure TJPaint.setColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColor', '(I)V', [AArg0]);
end;

function TJPaint.setColorFilter(const AArg0: JColorFilter): JColorFilter;
begin
  Result := CallObjectMethod<TJColorFilter, JColorFilter>('setColorFilter', '(Landroid/graphics/ColorFilter;)Landroid/graphics/ColorFilter;', [AArg0]);
end;

procedure TJPaint.setDither(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDither', '(Z)V', [AArg0]);
end;

procedure TJPaint.setElegantTextHeight(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setElegantTextHeight', '(Z)V', [AArg0]);
end;

procedure TJPaint.setFakeBoldText(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFakeBoldText', '(Z)V', [AArg0]);
end;

procedure TJPaint.setFilterBitmap(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFilterBitmap', '(Z)V', [AArg0]);
end;

procedure TJPaint.setFlags(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFlags', '(I)V', [AArg0]);
end;

procedure TJPaint.setFontFeatureSettings(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFontFeatureSettings', '(Ljava/lang/String;)V', [AArg0]);
end;

function TJPaint.setFontVariationSettings(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setFontVariationSettings', '(Ljava/lang/String;)Z', [AArg0]);
end;

procedure TJPaint.setHinting(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHinting', '(I)V', [AArg0]);
end;

procedure TJPaint.setLetterSpacing(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLetterSpacing', '(F)V', [AArg0]);
end;

procedure TJPaint.setLinearText(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLinearText', '(Z)V', [AArg0]);
end;

function TJPaint.setPathEffect(const AArg0: JPathEffect): JPathEffect;
begin
  Result := CallObjectMethod<TJPathEffect, JPathEffect>('setPathEffect', '(Landroid/graphics/PathEffect;)Landroid/graphics/PathEffect;', [AArg0]);
end;

function TJPaint.setShader(const AArg0: JShader): JShader;
begin
  Result := CallObjectMethod<TJShader, JShader>('setShader', '(Landroid/graphics/Shader;)Landroid/graphics/Shader;', [AArg0]);
end;

procedure TJPaint.setShadowLayer(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setShadowLayer', '(FFFI)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJPaint.setStrikeThruText(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStrikeThruText', '(Z)V', [AArg0]);
end;

procedure TJPaint.setStrokeCap(const AArg0: JPaint_Cap);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStrokeCap', '(Landroid/graphics/Paint$Cap;)V', [AArg0]);
end;

procedure TJPaint.setStrokeJoin(const AArg0: JPaint_Join);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStrokeJoin', '(Landroid/graphics/Paint$Join;)V', [AArg0]);
end;

procedure TJPaint.setStrokeMiter(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStrokeMiter', '(F)V', [AArg0]);
end;

procedure TJPaint.setStrokeWidth(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStrokeWidth', '(F)V', [AArg0]);
end;

procedure TJPaint.setStyle(const AArg0: JPaint_Style);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStyle', '(Landroid/graphics/Paint$Style;)V', [AArg0]);
end;

procedure TJPaint.setSubpixelText(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSubpixelText', '(Z)V', [AArg0]);
end;

procedure TJPaint.setTextLocale(const AArg0: JLocale);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTextLocale', '(Ljava/util/Locale;)V', [AArg0]);
end;

procedure TJPaint.setTextScaleX(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTextScaleX', '(F)V', [AArg0]);
end;

procedure TJPaint.setTextSize(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTextSize', '(F)V', [AArg0]);
end;

procedure TJPaint.setTextSkewX(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTextSkewX', '(F)V', [AArg0]);
end;

function TJPaint.setTypeface(const AArg0: JTypeface): JTypeface;
begin
  Result := CallObjectMethod<TJTypeface, JTypeface>('setTypeface', '(Landroid/graphics/Typeface;)Landroid/graphics/Typeface;', [AArg0]);
end;

procedure TJPaint.setUnderlineText(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setUnderlineText', '(Z)V', [AArg0]);
end;

function TJPaint.setXfermode(const AArg0: JXfermode): JXfermode;
begin
  Result := CallObjectMethod<TJXfermode, JXfermode>('setXfermode', '(Landroid/graphics/Xfermode;)Landroid/graphics/Xfermode;', [AArg0]);
end;

{ TJPaint_Cap }

class procedure TJPaint_Cap.LoadConstructors;
begin
end;

class procedure TJPaint_Cap.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('valueOf', '(Ljava/lang/String;)Landroid/graphics/Paint$Cap;');
  AddStaticMethod('values', '()[Landroid/graphics/Paint$Cap;');
end;

class procedure TJPaint_Cap.LoadFields;
begin
  inherited;
  AddStaticField('BUTT', 'Landroid/graphics/Paint$Cap;');
  AddStaticField('ROUND', 'Landroid/graphics/Paint$Cap;');
  AddStaticField('SQUARE', 'Landroid/graphics/Paint$Cap;');
end;

class function TJPaint_Cap.Wrap(const AObjectID: JNIObject): JPaint_Cap;
begin
  Result := Wrap<TJPaint_Cap, JPaint_Cap>(AObjectId);
end;

class function TJPaint_Cap.Wrap(const AObject: IJNIObject): JPaint_Cap;
begin
  Result := Wrap<TJPaint_Cap, JPaint_Cap>(AObject);
end;

class function TJPaint_Cap.BUTT: JPaint_Cap;
begin
  Result := GetStaticObjectField<TJPaint_Cap, JPaint_Cap>('BUTT');
end;

class function TJPaint_Cap.ROUND: JPaint_Cap;
begin
  Result := GetStaticObjectField<TJPaint_Cap, JPaint_Cap>('ROUND');
end;

class function TJPaint_Cap.SQUARE: JPaint_Cap;
begin
  Result := GetStaticObjectField<TJPaint_Cap, JPaint_Cap>('SQUARE');
end;

class function TJPaint_Cap.valueOf(const AArg0: JString): JPaint_Cap;
begin
  Result := CallStaticObjectMethod<TJPaint_Cap, JPaint_Cap>('valueOf', '(Ljava/lang/String;)Landroid/graphics/Paint$Cap;', [AArg0]);
end;

class function TJPaint_Cap.values: IJavaArray<JPaint_Cap>;
begin
  Result := CallStaticArrayMethod<JPaint_Cap>('values', '()[Landroid/graphics/Paint$Cap;', []);
end;

{ TJPaint_Join }

class procedure TJPaint_Join.LoadConstructors;
begin
end;

class procedure TJPaint_Join.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('valueOf', '(Ljava/lang/String;)Landroid/graphics/Paint$Join;');
  AddStaticMethod('values', '()[Landroid/graphics/Paint$Join;');
end;

class procedure TJPaint_Join.LoadFields;
begin
  inherited;
  AddStaticField('BEVEL', 'Landroid/graphics/Paint$Join;');
  AddStaticField('MITER', 'Landroid/graphics/Paint$Join;');
  AddStaticField('ROUND', 'Landroid/graphics/Paint$Join;');
end;

class function TJPaint_Join.Wrap(const AObjectID: JNIObject): JPaint_Join;
begin
  Result := Wrap<TJPaint_Join, JPaint_Join>(AObjectId);
end;

class function TJPaint_Join.Wrap(const AObject: IJNIObject): JPaint_Join;
begin
  Result := Wrap<TJPaint_Join, JPaint_Join>(AObject);
end;

class function TJPaint_Join.BEVEL: JPaint_Join;
begin
  Result := GetStaticObjectField<TJPaint_Join, JPaint_Join>('BEVEL');
end;

class function TJPaint_Join.MITER: JPaint_Join;
begin
  Result := GetStaticObjectField<TJPaint_Join, JPaint_Join>('MITER');
end;

class function TJPaint_Join.ROUND: JPaint_Join;
begin
  Result := GetStaticObjectField<TJPaint_Join, JPaint_Join>('ROUND');
end;

class function TJPaint_Join.valueOf(const AArg0: JString): JPaint_Join;
begin
  Result := CallStaticObjectMethod<TJPaint_Join, JPaint_Join>('valueOf', '(Ljava/lang/String;)Landroid/graphics/Paint$Join;', [AArg0]);
end;

class function TJPaint_Join.values: IJavaArray<JPaint_Join>;
begin
  Result := CallStaticArrayMethod<JPaint_Join>('values', '()[Landroid/graphics/Paint$Join;', []);
end;

{ TJPaint_Style }

class procedure TJPaint_Style.LoadConstructors;
begin
end;

class procedure TJPaint_Style.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('valueOf', '(Ljava/lang/String;)Landroid/graphics/Paint$Style;');
  AddStaticMethod('values', '()[Landroid/graphics/Paint$Style;');
end;

class procedure TJPaint_Style.LoadFields;
begin
  inherited;
  AddStaticField('FILL', 'Landroid/graphics/Paint$Style;');
  AddStaticField('FILL_AND_STROKE', 'Landroid/graphics/Paint$Style;');
  AddStaticField('STROKE', 'Landroid/graphics/Paint$Style;');
end;

class function TJPaint_Style.Wrap(const AObjectID: JNIObject): JPaint_Style;
begin
  Result := Wrap<TJPaint_Style, JPaint_Style>(AObjectId);
end;

class function TJPaint_Style.Wrap(const AObject: IJNIObject): JPaint_Style;
begin
  Result := Wrap<TJPaint_Style, JPaint_Style>(AObject);
end;

class function TJPaint_Style.FILL: JPaint_Style;
begin
  Result := GetStaticObjectField<TJPaint_Style, JPaint_Style>('FILL');
end;

class function TJPaint_Style.FILL_AND_STROKE: JPaint_Style;
begin
  Result := GetStaticObjectField<TJPaint_Style, JPaint_Style>('FILL_AND_STROKE');
end;

class function TJPaint_Style.STROKE: JPaint_Style;
begin
  Result := GetStaticObjectField<TJPaint_Style, JPaint_Style>('STROKE');
end;

class function TJPaint_Style.valueOf(const AArg0: JString): JPaint_Style;
begin
  Result := CallStaticObjectMethod<TJPaint_Style, JPaint_Style>('valueOf', '(Ljava/lang/String;)Landroid/graphics/Paint$Style;', [AArg0]);
end;

class function TJPaint_Style.values: IJavaArray<JPaint_Style>;
begin
  Result := CallStaticArrayMethod<JPaint_Style>('values', '()[Landroid/graphics/Paint$Style;', []);
end;

{ TJPath }

class procedure TJPath.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/graphics/Path;)V');
end;

class procedure TJPath.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addArc', '(Landroid/graphics/RectF;FF)V');
  AddMethod('addArc', '(FFFFFF)V');
  AddMethod('addPath', '(Landroid/graphics/Path;Landroid/graphics/Matrix;)V');
  AddMethod('addPath', '(Landroid/graphics/Path;)V');
  AddMethod('addPath', '(Landroid/graphics/Path;FF)V');
  AddMethod('approximate', '(F)[F');
  AddMethod('arcTo', '(Landroid/graphics/RectF;FFZ)V');
  AddMethod('arcTo', '(Landroid/graphics/RectF;FF)V');
  AddMethod('arcTo', '(FFFFFFZ)V');
  AddMethod('close', '()V');
  AddMethod('computeBounds', '(Landroid/graphics/RectF;Z)V');
  AddMethod('cubicTo', '(FFFFFF)V');
  AddMethod('getFillType', '()Landroid/graphics/Path$FillType;');
  AddMethod('incReserve', '(I)V');
  AddMethod('isConvex', '()Z');
  AddMethod('isEmpty', '()Z');
  AddMethod('isInverseFillType', '()Z');
  AddMethod('isRect', '(Landroid/graphics/RectF;)Z');
  AddMethod('lineTo', '(FF)V');
  AddMethod('moveTo', '(FF)V');
  AddMethod('offset', '(FF)V');
  AddMethod('offset', '(FFLandroid/graphics/Path;)V');
  AddMethod('quadTo', '(FFFF)V');
  AddMethod('rCubicTo', '(FFFFFF)V');
  AddMethod('rLineTo', '(FF)V');
  AddMethod('rMoveTo', '(FF)V');
  AddMethod('rQuadTo', '(FFFF)V');
  AddMethod('reset', '()V');
  AddMethod('rewind', '()V');
  AddMethod('set', '(Landroid/graphics/Path;)V');
  AddMethod('setFillType', '(Landroid/graphics/Path$FillType;)V');
  AddMethod('setLastPoint', '(FF)V');
  AddMethod('toggleInverseFillType', '()V');
  AddMethod('transform', '(Landroid/graphics/Matrix;)V');
  AddMethod('transform', '(Landroid/graphics/Matrix;Landroid/graphics/Path;)V');
end;

class function TJPath.Wrap(const AObjectID: JNIObject): JPath;
begin
  Result := Wrap<TJPath, JPath>(AObjectId);
end;

class function TJPath.Wrap(const AObject: IJNIObject): JPath;
begin
  Result := Wrap<TJPath, JPath>(AObject);
end;

class function TJPath.Create: JPath;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJPath.Create(const AArg0: JPath): JPath;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Path;)V', [AArg0]);
  Result := O;
end;

procedure TJPath.addArc(const AArg0: JRectF; const AArg1: Single; const AArg2: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'addArc', '(Landroid/graphics/RectF;FF)V', [AArg0, AArg1, AArg2]);
end;

procedure TJPath.addArc(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'addArc', '(FFFFFF)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJPath.addPath(const AArg0: JPath; const AArg1: JMatrix);
begin
  JavaType.CallVoidMethod(ObjectID, 'addPath', '(Landroid/graphics/Path;Landroid/graphics/Matrix;)V', [AArg0, AArg1]);
end;

procedure TJPath.addPath(const AArg0: JPath);
begin
  JavaType.CallVoidMethod(ObjectID, 'addPath', '(Landroid/graphics/Path;)V', [AArg0]);
end;

procedure TJPath.addPath(const AArg0: JPath; const AArg1: Single; const AArg2: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'addPath', '(Landroid/graphics/Path;FF)V', [AArg0, AArg1, AArg2]);
end;

function TJPath.approximate(const AArg0: Single): IJavaArray<Single>;
begin
  Result := CallArrayMethod<Single>('approximate', '(F)[F', [AArg0]);
end;

procedure TJPath.arcTo(const AArg0: JRectF; const AArg1: Single; const AArg2: Single; const AArg3: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'arcTo', '(Landroid/graphics/RectF;FFZ)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJPath.arcTo(const AArg0: JRectF; const AArg1: Single; const AArg2: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'arcTo', '(Landroid/graphics/RectF;FF)V', [AArg0, AArg1, AArg2]);
end;

procedure TJPath.arcTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'arcTo', '(FFFFFFZ)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJPath.close;
begin
  JavaType.CallVoidMethod(ObjectID, 'close', '()V', []);
end;

procedure TJPath.computeBounds(const AArg0: JRectF; const AArg1: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'computeBounds', '(Landroid/graphics/RectF;Z)V', [AArg0, AArg1]);
end;

procedure TJPath.cubicTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'cubicTo', '(FFFFFF)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJPath.getFillType: JPath_FillType;
begin
  Result := CallObjectMethod<TJPath_FillType, JPath_FillType>('getFillType', '()Landroid/graphics/Path$FillType;', []);
end;

procedure TJPath.incReserve(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'incReserve', '(I)V', [AArg0]);
end;

function TJPath.isConvex: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isConvex', '()Z', []);
end;

function TJPath.isEmpty: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEmpty', '()Z', []);
end;

function TJPath.isInverseFillType: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInverseFillType', '()Z', []);
end;

function TJPath.isRect(const AArg0: JRectF): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isRect', '(Landroid/graphics/RectF;)Z', [AArg0]);
end;

procedure TJPath.lineTo(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'lineTo', '(FF)V', [AArg0, AArg1]);
end;

procedure TJPath.moveTo(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'moveTo', '(FF)V', [AArg0, AArg1]);
end;

procedure TJPath.offset(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'offset', '(FF)V', [AArg0, AArg1]);
end;

procedure TJPath.offset(const AArg0: Single; const AArg1: Single; const AArg2: JPath);
begin
  JavaType.CallVoidMethod(ObjectID, 'offset', '(FFLandroid/graphics/Path;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJPath.quadTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'quadTo', '(FFFF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJPath.rCubicTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'rCubicTo', '(FFFFFF)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

procedure TJPath.rLineTo(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'rLineTo', '(FF)V', [AArg0, AArg1]);
end;

procedure TJPath.rMoveTo(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'rMoveTo', '(FF)V', [AArg0, AArg1]);
end;

procedure TJPath.rQuadTo(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'rQuadTo', '(FFFF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJPath.reset;
begin
  JavaType.CallVoidMethod(ObjectID, 'reset', '()V', []);
end;

procedure TJPath.rewind;
begin
  JavaType.CallVoidMethod(ObjectID, 'rewind', '()V', []);
end;

procedure TJPath.&set(const AArg0: JPath);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Landroid/graphics/Path;)V', [AArg0]);
end;

procedure TJPath.setFillType(const AArg0: JPath_FillType);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFillType', '(Landroid/graphics/Path$FillType;)V', [AArg0]);
end;

procedure TJPath.setLastPoint(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLastPoint', '(FF)V', [AArg0, AArg1]);
end;

procedure TJPath.toggleInverseFillType;
begin
  JavaType.CallVoidMethod(ObjectID, 'toggleInverseFillType', '()V', []);
end;

procedure TJPath.transform(const AArg0: JMatrix);
begin
  JavaType.CallVoidMethod(ObjectID, 'transform', '(Landroid/graphics/Matrix;)V', [AArg0]);
end;

procedure TJPath.transform(const AArg0: JMatrix; const AArg1: JPath);
begin
  JavaType.CallVoidMethod(ObjectID, 'transform', '(Landroid/graphics/Matrix;Landroid/graphics/Path;)V', [AArg0, AArg1]);
end;

{ TJPath_FillType }

class procedure TJPath_FillType.LoadConstructors;
begin
end;

class procedure TJPath_FillType.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('valueOf', '(Ljava/lang/String;)Landroid/graphics/Path$FillType;');
  AddStaticMethod('values', '()[Landroid/graphics/Path$FillType;');
end;

class procedure TJPath_FillType.LoadFields;
begin
  inherited;
  AddStaticField('EVEN_ODD', 'Landroid/graphics/Path$FillType;');
  AddStaticField('INVERSE_EVEN_ODD', 'Landroid/graphics/Path$FillType;');
  AddStaticField('INVERSE_WINDING', 'Landroid/graphics/Path$FillType;');
  AddStaticField('WINDING', 'Landroid/graphics/Path$FillType;');
end;

class function TJPath_FillType.Wrap(const AObjectID: JNIObject): JPath_FillType;
begin
  Result := Wrap<TJPath_FillType, JPath_FillType>(AObjectId);
end;

class function TJPath_FillType.Wrap(const AObject: IJNIObject): JPath_FillType;
begin
  Result := Wrap<TJPath_FillType, JPath_FillType>(AObject);
end;

class function TJPath_FillType.EVEN_ODD: JPath_FillType;
begin
  Result := GetStaticObjectField<TJPath_FillType, JPath_FillType>('EVEN_ODD');
end;

class function TJPath_FillType.INVERSE_EVEN_ODD: JPath_FillType;
begin
  Result := GetStaticObjectField<TJPath_FillType, JPath_FillType>('INVERSE_EVEN_ODD');
end;

class function TJPath_FillType.INVERSE_WINDING: JPath_FillType;
begin
  Result := GetStaticObjectField<TJPath_FillType, JPath_FillType>('INVERSE_WINDING');
end;

class function TJPath_FillType.WINDING: JPath_FillType;
begin
  Result := GetStaticObjectField<TJPath_FillType, JPath_FillType>('WINDING');
end;

class function TJPath_FillType.valueOf(const AArg0: JString): JPath_FillType;
begin
  Result := CallStaticObjectMethod<TJPath_FillType, JPath_FillType>('valueOf', '(Ljava/lang/String;)Landroid/graphics/Path$FillType;', [AArg0]);
end;

class function TJPath_FillType.values: IJavaArray<JPath_FillType>;
begin
  Result := CallStaticArrayMethod<JPath_FillType>('values', '()[Landroid/graphics/Path$FillType;', []);
end;

{ TJPathEffect }

class procedure TJPathEffect.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJPathEffect.LoadMethods;
begin
  inherited;
end;

class function TJPathEffect.Wrap(const AObjectID: JNIObject): JPathEffect;
begin
  Result := Wrap<TJPathEffect, JPathEffect>(AObjectId);
end;

class function TJPathEffect.Wrap(const AObject: IJNIObject): JPathEffect;
begin
  Result := Wrap<TJPathEffect, JPathEffect>(AObject);
end;

class function TJPathEffect.Create: JPathEffect;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

{ TJDashPathEffect }

class procedure TJDashPathEffect.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '([FF)V');
end;

class procedure TJDashPathEffect.LoadMethods;
begin
  inherited;
end;

class function TJDashPathEffect.Wrap(const AObjectID: JNIObject): JDashPathEffect;
begin
  Result := Wrap<TJDashPathEffect, JDashPathEffect>(AObjectId);
end;

class function TJDashPathEffect.Wrap(const AObject: IJNIObject): JDashPathEffect;
begin
  Result := Wrap<TJDashPathEffect, JDashPathEffect>(AObject);
end;

class function TJDashPathEffect.Create(const AArg0: IJavaArray<Single>; const AArg1: Single): JDashPathEffect;
begin
  var O := CreateForWrap;
  O.NewObject('([FF)V', [AArg0, AArg1]);
  Result := O;
end;

{ TJPoint }

class procedure TJPoint.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(II)V');
  AddMethod('<init>', '(Landroid/graphics/Point;)V');
end;

class procedure TJPoint.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(II)Z');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('hashCode', '()I');
  AddMethod('negate', '()V');
  AddMethod('offset', '(II)V');
  AddMethod('set', '(II)V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJPoint.LoadFields;
begin
  inherited;
  AddField('x', 'I');
  AddField('y', 'I');
end;

class function TJPoint.Wrap(const AObjectID: JNIObject): JPoint;
begin
  Result := Wrap<TJPoint, JPoint>(AObjectId);
end;

class function TJPoint.Wrap(const AObject: IJNIObject): JPoint;
begin
  Result := Wrap<TJPoint, JPoint>(AObject);
end;

class function TJPoint.Create: JPoint;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJPoint.Create(const AArg0: Integer; const AArg1: Integer): JPoint;
begin
  var O := CreateForWrap;
  O.NewObject('(II)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJPoint.Create(const AArg0: JPoint): JPoint;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Point;)V', [AArg0]);
  Result := O;
end;

function TJPoint._GetX: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'x');
end;

procedure TJPoint._SetX(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'x', AValue);
end;

function TJPoint._GetY: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'y');
end;

procedure TJPoint._SetY(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'y', AValue);
end;

function TJPoint.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJPoint.equals(const AArg0: Integer; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(II)Z', [AArg0, AArg1]);
end;

function TJPoint.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJPoint.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

procedure TJPoint.negate;
begin
  JavaType.CallVoidMethod(ObjectID, 'negate', '()V', []);
end;

procedure TJPoint.offset(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'offset', '(II)V', [AArg0, AArg1]);
end;

procedure TJPoint.&set(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(II)V', [AArg0, AArg1]);
end;

function TJPoint.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJPointF }

class procedure TJPointF.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(FF)V');
  AddMethod('<init>', '(Landroid/graphics/Point;)V');
end;

class procedure TJPointF.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('equals', '(FF)Z');
  AddMethod('hashCode', '()I');
  AddStaticMethod('length', '(FF)F');
  AddMethod('length', '()F');
  AddMethod('negate', '()V');
  AddMethod('offset', '(FF)V');
  AddMethod('set', '(FF)V');
  AddMethod('set', '(Landroid/graphics/PointF;)V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJPointF.LoadFields;
begin
  inherited;
  AddField('x', 'F');
  AddField('y', 'F');
end;

class function TJPointF.Wrap(const AObjectID: JNIObject): JPointF;
begin
  Result := Wrap<TJPointF, JPointF>(AObjectId);
end;

class function TJPointF.Wrap(const AObject: IJNIObject): JPointF;
begin
  Result := Wrap<TJPointF, JPointF>(AObject);
end;

class function TJPointF.Create: JPointF;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJPointF.Create(const AArg0: Single; const AArg1: Single): JPointF;
begin
  var O := CreateForWrap;
  O.NewObject('(FF)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJPointF.Create(const AArg0: JPoint): JPointF;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Point;)V', [AArg0]);
  Result := O;
end;

function TJPointF._GetX: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'x');
end;

procedure TJPointF._SetX(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'x', AValue);
end;

function TJPointF._GetY: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'y');
end;

procedure TJPointF._SetY(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'y', AValue);
end;

function TJPointF.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJPointF.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJPointF.equals(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(FF)Z', [AArg0, AArg1]);
end;

function TJPointF.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

class function TJPointF.length(const AArg0: Single; const AArg1: Single): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('length', '(FF)F', [AArg0, AArg1]);
end;

function TJPointF.length: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'length', '()F', []);
end;

procedure TJPointF.negate;
begin
  JavaType.CallVoidMethod(ObjectID, 'negate', '()V', []);
end;

procedure TJPointF.offset(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'offset', '(FF)V', [AArg0, AArg1]);
end;

procedure TJPointF.&set(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(FF)V', [AArg0, AArg1]);
end;

procedure TJPointF.&set(const AArg0: JPointF);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Landroid/graphics/PointF;)V', [AArg0]);
end;

function TJPointF.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJPorterDuff }

class procedure TJPorterDuff.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJPorterDuff.LoadMethods;
begin
  inherited;
end;

class function TJPorterDuff.Wrap(const AObjectID: JNIObject): JPorterDuff;
begin
  Result := Wrap<TJPorterDuff, JPorterDuff>(AObjectId);
end;

class function TJPorterDuff.Wrap(const AObject: IJNIObject): JPorterDuff;
begin
  Result := Wrap<TJPorterDuff, JPorterDuff>(AObject);
end;

class function TJPorterDuff.Create: JPorterDuff;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

{ TJPorterDuff_Mode }

class procedure TJPorterDuff_Mode.LoadConstructors;
begin
end;

class procedure TJPorterDuff_Mode.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('valueOf', '(Ljava/lang/String;)Landroid/graphics/PorterDuff$Mode;');
  AddStaticMethod('values', '()[Landroid/graphics/PorterDuff$Mode;');
end;

class procedure TJPorterDuff_Mode.LoadFields;
begin
  inherited;
  AddStaticField('ADD', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('CLEAR', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('DARKEN', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('DST', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('DST_ATOP', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('DST_IN', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('DST_OUT', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('DST_OVER', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('LIGHTEN', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('MULTIPLY', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('OVERLAY', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('SCREEN', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('SRC', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('SRC_ATOP', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('SRC_IN', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('SRC_OUT', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('SRC_OVER', 'Landroid/graphics/PorterDuff$Mode;');
  AddStaticField('XOR', 'Landroid/graphics/PorterDuff$Mode;');
end;

class function TJPorterDuff_Mode.Wrap(const AObjectID: JNIObject): JPorterDuff_Mode;
begin
  Result := Wrap<TJPorterDuff_Mode, JPorterDuff_Mode>(AObjectId);
end;

class function TJPorterDuff_Mode.Wrap(const AObject: IJNIObject): JPorterDuff_Mode;
begin
  Result := Wrap<TJPorterDuff_Mode, JPorterDuff_Mode>(AObject);
end;

class function TJPorterDuff_Mode.ADD: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('ADD');
end;

class function TJPorterDuff_Mode.CLEAR: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('CLEAR');
end;

class function TJPorterDuff_Mode.DARKEN: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('DARKEN');
end;

class function TJPorterDuff_Mode.DST: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('DST');
end;

class function TJPorterDuff_Mode.DST_ATOP: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('DST_ATOP');
end;

class function TJPorterDuff_Mode.DST_IN: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('DST_IN');
end;

class function TJPorterDuff_Mode.DST_OUT: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('DST_OUT');
end;

class function TJPorterDuff_Mode.DST_OVER: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('DST_OVER');
end;

class function TJPorterDuff_Mode.LIGHTEN: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('LIGHTEN');
end;

class function TJPorterDuff_Mode.MULTIPLY: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('MULTIPLY');
end;

class function TJPorterDuff_Mode.OVERLAY: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('OVERLAY');
end;

class function TJPorterDuff_Mode.SCREEN: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('SCREEN');
end;

class function TJPorterDuff_Mode.SRC: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('SRC');
end;

class function TJPorterDuff_Mode.SRC_ATOP: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('SRC_ATOP');
end;

class function TJPorterDuff_Mode.SRC_IN: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('SRC_IN');
end;

class function TJPorterDuff_Mode.SRC_OUT: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('SRC_OUT');
end;

class function TJPorterDuff_Mode.SRC_OVER: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('SRC_OVER');
end;

class function TJPorterDuff_Mode.&XOR: JPorterDuff_Mode;
begin
  Result := GetStaticObjectField<TJPorterDuff_Mode, JPorterDuff_Mode>('XOR');
end;

class function TJPorterDuff_Mode.valueOf(const AArg0: JString): JPorterDuff_Mode;
begin
  Result := CallStaticObjectMethod<TJPorterDuff_Mode, JPorterDuff_Mode>('valueOf', '(Ljava/lang/String;)Landroid/graphics/PorterDuff$Mode;', [AArg0]);
end;

class function TJPorterDuff_Mode.values: IJavaArray<JPorterDuff_Mode>;
begin
  Result := CallStaticArrayMethod<JPorterDuff_Mode>('values', '()[Landroid/graphics/PorterDuff$Mode;', []);
end;

{ TJRect }

class procedure TJRect.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(IIII)V');
  AddMethod('<init>', '(Landroid/graphics/Rect;)V');
end;

class procedure TJRect.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('centerX', '()I');
  AddMethod('centerY', '()I');
  AddMethod('contains', '(IIII)Z');
  AddMethod('contains', '(Landroid/graphics/Rect;)Z');
  AddMethod('contains', '(II)Z');
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('exactCenterX', '()F');
  AddMethod('exactCenterY', '()F');
  AddMethod('flattenToString', '()Ljava/lang/String;');
  AddMethod('hashCode', '()I');
  AddMethod('height', '()I');
  AddMethod('inset', '(II)V');
  AddMethod('intersect', '(IIII)Z');
  AddMethod('intersect', '(Landroid/graphics/Rect;)Z');
  AddStaticMethod('intersects', '(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z');
  AddMethod('intersects', '(IIII)Z');
  AddMethod('isEmpty', '()Z');
  AddMethod('offset', '(II)V');
  AddMethod('offsetTo', '(II)V');
  AddMethod('set', '(IIII)V');
  AddMethod('set', '(Landroid/graphics/Rect;)V');
  AddMethod('setEmpty', '()V');
  AddMethod('setIntersect', '(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z');
  AddMethod('sort', '()V');
  AddMethod('toShortString', '()Ljava/lang/String;');
  AddMethod('toString', '()Ljava/lang/String;');
  AddStaticMethod('unflattenFromString', '(Ljava/lang/String;)Landroid/graphics/Rect;');
  AddMethod('union', '(IIII)V');
  AddMethod('union', '(Landroid/graphics/Rect;)V');
  AddMethod('union', '(II)V');
  AddMethod('width', '()I');
end;

class procedure TJRect.LoadFields;
begin
  inherited;
  AddField('bottom', 'I');
  AddField('left', 'I');
  AddField('right', 'I');
  AddField('top', 'I');
end;

class function TJRect.Wrap(const AObjectID: JNIObject): JRect;
begin
  Result := Wrap<TJRect, JRect>(AObjectId);
end;

class function TJRect.Wrap(const AObject: IJNIObject): JRect;
begin
  Result := Wrap<TJRect, JRect>(AObject);
end;

class function TJRect.Create: JRect;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJRect.Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JRect;
begin
  var O := CreateForWrap;
  O.NewObject('(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

class function TJRect.Create(const AArg0: JRect): JRect;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Rect;)V', [AArg0]);
  Result := O;
end;

function TJRect._GetBottom: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'bottom');
end;

procedure TJRect._SetBottom(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'bottom', AValue);
end;

function TJRect._GetLeft: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'left');
end;

procedure TJRect._SetLeft(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'left', AValue);
end;

function TJRect._GetRight: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'right');
end;

procedure TJRect._SetRight(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'right', AValue);
end;

function TJRect._GetTop: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'top');
end;

procedure TJRect._SetTop(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'top', AValue);
end;

function TJRect.centerX: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'centerX', '()I', []);
end;

function TJRect.centerY: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'centerY', '()I', []);
end;

function TJRect.contains(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'contains', '(IIII)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJRect.contains(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'contains', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJRect.contains(const AArg0: Integer; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'contains', '(II)Z', [AArg0, AArg1]);
end;

function TJRect.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJRect.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJRect.exactCenterX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'exactCenterX', '()F', []);
end;

function TJRect.exactCenterY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'exactCenterY', '()F', []);
end;

function TJRect.flattenToString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('flattenToString', '()Ljava/lang/String;', []);
end;

function TJRect.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJRect.height: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'height', '()I', []);
end;

procedure TJRect.inset(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'inset', '(II)V', [AArg0, AArg1]);
end;

function TJRect.intersect(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'intersect', '(IIII)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJRect.intersect(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'intersect', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

class function TJRect.intersects(const AArg0: JRect; const AArg1: JRect): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('intersects', '(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z', [AArg0, AArg1]);
end;

function TJRect.intersects(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'intersects', '(IIII)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJRect.isEmpty: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEmpty', '()Z', []);
end;

procedure TJRect.offset(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'offset', '(II)V', [AArg0, AArg1]);
end;

procedure TJRect.offsetTo(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'offsetTo', '(II)V', [AArg0, AArg1]);
end;

procedure TJRect.&set(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJRect.&set(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJRect.setEmpty;
begin
  JavaType.CallVoidMethod(ObjectID, 'setEmpty', '()V', []);
end;

function TJRect.setIntersect(const AArg0: JRect; const AArg1: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setIntersect', '(Landroid/graphics/Rect;Landroid/graphics/Rect;)Z', [AArg0, AArg1]);
end;

procedure TJRect.sort;
begin
  JavaType.CallVoidMethod(ObjectID, 'sort', '()V', []);
end;

function TJRect.toShortString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toShortString', '()Ljava/lang/String;', []);
end;

function TJRect.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

class function TJRect.unflattenFromString(const AArg0: JString): JRect;
begin
  Result := CallStaticObjectMethod<TJRect, JRect>('unflattenFromString', '(Ljava/lang/String;)Landroid/graphics/Rect;', [AArg0]);
end;

procedure TJRect.union(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'union', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJRect.union(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'union', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJRect.union(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'union', '(II)V', [AArg0, AArg1]);
end;

function TJRect.width: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'width', '()I', []);
end;

{ TJRectF }

class procedure TJRectF.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(FFFF)V');
  AddMethod('<init>', '(Landroid/graphics/RectF;)V');
  AddMethod('<init>', '(Landroid/graphics/Rect;)V');
end;

class procedure TJRectF.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('centerX', '()F');
  AddMethod('centerY', '()F');
  AddMethod('contains', '(FF)Z');
  AddMethod('contains', '(FFFF)Z');
  AddMethod('contains', '(Landroid/graphics/RectF;)Z');
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('hashCode', '()I');
  AddMethod('height', '()F');
  AddMethod('inset', '(FF)V');
  AddMethod('intersect', '(Landroid/graphics/RectF;)Z');
  AddMethod('intersect', '(FFFF)Z');
  AddStaticMethod('intersects', '(Landroid/graphics/RectF;Landroid/graphics/RectF;)Z');
  AddMethod('intersects', '(FFFF)Z');
  AddMethod('isEmpty', '()Z');
  AddMethod('offset', '(FF)V');
  AddMethod('offsetTo', '(FF)V');
  AddMethod('round', '(Landroid/graphics/Rect;)V');
  AddMethod('roundOut', '(Landroid/graphics/Rect;)V');
  AddMethod('set', '(Landroid/graphics/Rect;)V');
  AddMethod('set', '(Landroid/graphics/RectF;)V');
  AddMethod('set', '(FFFF)V');
  AddMethod('setEmpty', '()V');
  AddMethod('setIntersect', '(Landroid/graphics/RectF;Landroid/graphics/RectF;)Z');
  AddMethod('sort', '()V');
  AddMethod('toShortString', '()Ljava/lang/String;');
  AddMethod('toString', '()Ljava/lang/String;');
  AddMethod('union', '(FF)V');
  AddMethod('union', '(Landroid/graphics/RectF;)V');
  AddMethod('union', '(FFFF)V');
  AddMethod('width', '()F');
end;

class procedure TJRectF.LoadFields;
begin
  inherited;
  AddField('bottom', 'F');
  AddField('left', 'F');
  AddField('right', 'F');
  AddField('top', 'F');
end;

class function TJRectF.Wrap(const AObjectID: JNIObject): JRectF;
begin
  Result := Wrap<TJRectF, JRectF>(AObjectId);
end;

class function TJRectF.Wrap(const AObject: IJNIObject): JRectF;
begin
  Result := Wrap<TJRectF, JRectF>(AObject);
end;

class function TJRectF.Create: JRectF;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJRectF.Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): JRectF;
begin
  var O := CreateForWrap;
  O.NewObject('(FFFF)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

class function TJRectF.Create(const AArg0: JRectF): JRectF;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/RectF;)V', [AArg0]);
  Result := O;
end;

class function TJRectF.Create(const AArg0: JRect): JRectF;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Rect;)V', [AArg0]);
  Result := O;
end;

function TJRectF._GetBottom: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'bottom');
end;

procedure TJRectF._SetBottom(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'bottom', AValue);
end;

function TJRectF._GetLeft: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'left');
end;

procedure TJRectF._SetLeft(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'left', AValue);
end;

function TJRectF._GetRight: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'right');
end;

procedure TJRectF._SetRight(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'right', AValue);
end;

function TJRectF._GetTop: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'top');
end;

procedure TJRectF._SetTop(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'top', AValue);
end;

function TJRectF.centerX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'centerX', '()F', []);
end;

function TJRectF.centerY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'centerY', '()F', []);
end;

function TJRectF.contains(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'contains', '(FF)Z', [AArg0, AArg1]);
end;

function TJRectF.contains(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'contains', '(FFFF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJRectF.contains(const AArg0: JRectF): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'contains', '(Landroid/graphics/RectF;)Z', [AArg0]);
end;

function TJRectF.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJRectF.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJRectF.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJRectF.height: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'height', '()F', []);
end;

procedure TJRectF.inset(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'inset', '(FF)V', [AArg0, AArg1]);
end;

function TJRectF.intersect(const AArg0: JRectF): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'intersect', '(Landroid/graphics/RectF;)Z', [AArg0]);
end;

function TJRectF.intersect(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'intersect', '(FFFF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJRectF.intersects(const AArg0: JRectF; const AArg1: JRectF): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('intersects', '(Landroid/graphics/RectF;Landroid/graphics/RectF;)Z', [AArg0, AArg1]);
end;

function TJRectF.intersects(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'intersects', '(FFFF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJRectF.isEmpty: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEmpty', '()Z', []);
end;

procedure TJRectF.offset(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'offset', '(FF)V', [AArg0, AArg1]);
end;

procedure TJRectF.offsetTo(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'offsetTo', '(FF)V', [AArg0, AArg1]);
end;

procedure TJRectF.round(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'round', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJRectF.roundOut(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'roundOut', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJRectF.&set(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJRectF.&set(const AArg0: JRectF);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Landroid/graphics/RectF;)V', [AArg0]);
end;

procedure TJRectF.&set(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(FFFF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJRectF.setEmpty;
begin
  JavaType.CallVoidMethod(ObjectID, 'setEmpty', '()V', []);
end;

function TJRectF.setIntersect(const AArg0: JRectF; const AArg1: JRectF): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setIntersect', '(Landroid/graphics/RectF;Landroid/graphics/RectF;)Z', [AArg0, AArg1]);
end;

procedure TJRectF.sort;
begin
  JavaType.CallVoidMethod(ObjectID, 'sort', '()V', []);
end;

function TJRectF.toShortString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toShortString', '()Ljava/lang/String;', []);
end;

function TJRectF.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

procedure TJRectF.union(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'union', '(FF)V', [AArg0, AArg1]);
end;

procedure TJRectF.union(const AArg0: JRectF);
begin
  JavaType.CallVoidMethod(ObjectID, 'union', '(Landroid/graphics/RectF;)V', [AArg0]);
end;

procedure TJRectF.union(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'union', '(FFFF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJRectF.width: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'width', '()F', []);
end;

{ TJShader }

class procedure TJShader.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJShader.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getLocalMatrix', '(Landroid/graphics/Matrix;)Z');
  AddMethod('setLocalMatrix', '(Landroid/graphics/Matrix;)V');
end;

class function TJShader.Wrap(const AObjectID: JNIObject): JShader;
begin
  Result := Wrap<TJShader, JShader>(AObjectId);
end;

class function TJShader.Wrap(const AObject: IJNIObject): JShader;
begin
  Result := Wrap<TJShader, JShader>(AObject);
end;

class function TJShader.Create: JShader;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJShader.getLocalMatrix(const AArg0: JMatrix): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getLocalMatrix', '(Landroid/graphics/Matrix;)Z', [AArg0]);
end;

procedure TJShader.setLocalMatrix(const AArg0: JMatrix);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLocalMatrix', '(Landroid/graphics/Matrix;)V', [AArg0]);
end;

{ TJLinearGradient }

class procedure TJLinearGradient.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(FFFF[I[FLandroid/graphics/Shader$TileMode;)V');
  AddMethod('<init>', '(FFFFIILandroid/graphics/Shader$TileMode;)V');
end;

class procedure TJLinearGradient.LoadMethods;
begin
  inherited;
end;

class function TJLinearGradient.Wrap(const AObjectID: JNIObject): JLinearGradient;
begin
  Result := Wrap<TJLinearGradient, JLinearGradient>(AObjectId);
end;

class function TJLinearGradient.Wrap(const AObject: IJNIObject): JLinearGradient;
begin
  Result := Wrap<TJLinearGradient, JLinearGradient>(AObject);
end;

class function TJLinearGradient.Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: IJavaArray<Integer>; const AArg5: IJavaArray<Single>; const AArg6: JShader_TileMode): JLinearGradient;
begin
  var O := CreateForWrap;
  O.NewObject('(FFFF[I[FLandroid/graphics/Shader$TileMode;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
  Result := O;
end;

class function TJLinearGradient.Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Integer; const AArg5: Integer; const AArg6: JShader_TileMode): JLinearGradient;
begin
  var O := CreateForWrap;
  O.NewObject('(FFFFIILandroid/graphics/Shader$TileMode;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
  Result := O;
end;

{ TJRadialGradient }

class procedure TJRadialGradient.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(FFF[I[FLandroid/graphics/Shader$TileMode;)V');
  AddMethod('<init>', '(FFFIILandroid/graphics/Shader$TileMode;)V');
end;

class procedure TJRadialGradient.LoadMethods;
begin
  inherited;
end;

class function TJRadialGradient.Wrap(const AObjectID: JNIObject): JRadialGradient;
begin
  Result := Wrap<TJRadialGradient, JRadialGradient>(AObjectId);
end;

class function TJRadialGradient.Wrap(const AObject: IJNIObject): JRadialGradient;
begin
  Result := Wrap<TJRadialGradient, JRadialGradient>(AObject);
end;

class function TJRadialGradient.Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: IJavaArray<Integer>; const AArg4: IJavaArray<Single>; const AArg5: JShader_TileMode): JRadialGradient;
begin
  var O := CreateForWrap;
  O.NewObject('(FFF[I[FLandroid/graphics/Shader$TileMode;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
  Result := O;
end;

class function TJRadialGradient.Create(const AArg0: Single; const AArg1: Single; const AArg2: Single; const AArg3: Integer; const AArg4: Integer; const AArg5: JShader_TileMode): JRadialGradient;
begin
  var O := CreateForWrap;
  O.NewObject('(FFFIILandroid/graphics/Shader$TileMode;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
  Result := O;
end;

{ TJShader_TileMode }

class procedure TJShader_TileMode.LoadConstructors;
begin
end;

class procedure TJShader_TileMode.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('valueOf', '(Ljava/lang/String;)Landroid/graphics/Shader$TileMode;');
  AddStaticMethod('values', '()[Landroid/graphics/Shader$TileMode;');
end;

class procedure TJShader_TileMode.LoadFields;
begin
  inherited;
  AddStaticField('CLAMP', 'Landroid/graphics/Shader$TileMode;');
  AddStaticField('MIRROR', 'Landroid/graphics/Shader$TileMode;');
  AddStaticField('REPEAT', 'Landroid/graphics/Shader$TileMode;');
end;

class function TJShader_TileMode.Wrap(const AObjectID: JNIObject): JShader_TileMode;
begin
  Result := Wrap<TJShader_TileMode, JShader_TileMode>(AObjectId);
end;

class function TJShader_TileMode.Wrap(const AObject: IJNIObject): JShader_TileMode;
begin
  Result := Wrap<TJShader_TileMode, JShader_TileMode>(AObject);
end;

class function TJShader_TileMode.CLAMP: JShader_TileMode;
begin
  Result := GetStaticObjectField<TJShader_TileMode, JShader_TileMode>('CLAMP');
end;

class function TJShader_TileMode.MIRROR: JShader_TileMode;
begin
  Result := GetStaticObjectField<TJShader_TileMode, JShader_TileMode>('MIRROR');
end;

class function TJShader_TileMode.&REPEAT: JShader_TileMode;
begin
  Result := GetStaticObjectField<TJShader_TileMode, JShader_TileMode>('REPEAT');
end;

class function TJShader_TileMode.valueOf(const AArg0: JString): JShader_TileMode;
begin
  Result := CallStaticObjectMethod<TJShader_TileMode, JShader_TileMode>('valueOf', '(Ljava/lang/String;)Landroid/graphics/Shader$TileMode;', [AArg0]);
end;

class function TJShader_TileMode.values: IJavaArray<JShader_TileMode>;
begin
  Result := CallStaticArrayMethod<JShader_TileMode>('values', '()[Landroid/graphics/Shader$TileMode;', []);
end;

{ TJSurfaceTexture }

class procedure TJSurfaceTexture.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(I)V');
  AddMethod('<init>', '(IZ)V');
  AddMethod('<init>', '(Z)V');
end;

class procedure TJSurfaceTexture.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('attachToGLContext', '(I)V');
  AddMethod('detachFromGLContext', '()V');
  AddMethod('getTimestamp', '()J');
  AddMethod('getTransformMatrix', '([F)V');
  AddMethod('isReleased', '()Z');
  AddMethod('release', '()V');
  AddMethod('releaseTexImage', '()V');
  AddMethod('setDefaultBufferSize', '(II)V');
  AddMethod('updateTexImage', '()V');
end;

class function TJSurfaceTexture.Wrap(const AObjectID: JNIObject): JSurfaceTexture;
begin
  Result := Wrap<TJSurfaceTexture, JSurfaceTexture>(AObjectId);
end;

class function TJSurfaceTexture.Wrap(const AObject: IJNIObject): JSurfaceTexture;
begin
  Result := Wrap<TJSurfaceTexture, JSurfaceTexture>(AObject);
end;

class function TJSurfaceTexture.Create(const AArg0: Integer): JSurfaceTexture;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

class function TJSurfaceTexture.Create(const AArg0: Integer; const AArg1: Boolean): JSurfaceTexture;
begin
  var O := CreateForWrap;
  O.NewObject('(IZ)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJSurfaceTexture.Create(const AArg0: Boolean): JSurfaceTexture;
begin
  var O := CreateForWrap;
  O.NewObject('(Z)V', [AArg0]);
  Result := O;
end;

procedure TJSurfaceTexture.attachToGLContext(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'attachToGLContext', '(I)V', [AArg0]);
end;

procedure TJSurfaceTexture.detachFromGLContext;
begin
  JavaType.CallVoidMethod(ObjectID, 'detachFromGLContext', '()V', []);
end;

function TJSurfaceTexture.getTimestamp: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getTimestamp', '()J', []);
end;

procedure TJSurfaceTexture.getTransformMatrix(const AArg0: IJavaArray<Single>);
begin
  JavaType.CallVoidMethod(ObjectID, 'getTransformMatrix', '([F)V', [AArg0]);
end;

function TJSurfaceTexture.isReleased: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isReleased', '()Z', []);
end;

procedure TJSurfaceTexture.release;
begin
  JavaType.CallVoidMethod(ObjectID, 'release', '()V', []);
end;

procedure TJSurfaceTexture.releaseTexImage;
begin
  JavaType.CallVoidMethod(ObjectID, 'releaseTexImage', '()V', []);
end;

procedure TJSurfaceTexture.setDefaultBufferSize(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDefaultBufferSize', '(II)V', [AArg0, AArg1]);
end;

procedure TJSurfaceTexture.updateTexImage;
begin
  JavaType.CallVoidMethod(ObjectID, 'updateTexImage', '()V', []);
end;

{ TJTypeface }

class procedure TJTypeface.LoadConstructors;
begin
end;

class procedure TJTypeface.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('create', '(Ljava/lang/String;I)Landroid/graphics/Typeface;');
  AddStaticMethod('create', '(Landroid/graphics/Typeface;I)Landroid/graphics/Typeface;');
  AddStaticMethod('create', '(Landroid/graphics/Typeface;IZ)Landroid/graphics/Typeface;');
  AddStaticMethod('createFromAsset', '(Landroid/content/res/AssetManager;Ljava/lang/String;)Landroid/graphics/Typeface;');
  AddStaticMethod('createFromFile', '(Ljava/io/File;)Landroid/graphics/Typeface;');
  AddStaticMethod('createFromFile', '(Ljava/lang/String;)Landroid/graphics/Typeface;');
  AddStaticMethod('defaultFromStyle', '(I)Landroid/graphics/Typeface;');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('getStyle', '()I');
  AddMethod('getWeight', '()I');
  AddMethod('hashCode', '()I');
  AddMethod('isBold', '()Z');
  AddMethod('isItalic', '()Z');
end;

class procedure TJTypeface.LoadFields;
begin
  inherited;
  AddStaticField('BOLD', 'I');
  AddStaticField('BOLD_ITALIC', 'I');
  AddStaticField('DEFAULT', 'Landroid/graphics/Typeface;');
  AddStaticField('DEFAULT_BOLD', 'Landroid/graphics/Typeface;');
  AddStaticField('ITALIC', 'I');
  AddStaticField('MONOSPACE', 'Landroid/graphics/Typeface;');
  AddStaticField('NORMAL', 'I');
  AddStaticField('SANS_SERIF', 'Landroid/graphics/Typeface;');
  AddStaticField('SERIF', 'Landroid/graphics/Typeface;');
end;

class function TJTypeface.Wrap(const AObjectID: JNIObject): JTypeface;
begin
  Result := Wrap<TJTypeface, JTypeface>(AObjectId);
end;

class function TJTypeface.Wrap(const AObject: IJNIObject): JTypeface;
begin
  Result := Wrap<TJTypeface, JTypeface>(AObject);
end;

class function TJTypeface.BOLD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BOLD');
end;

class function TJTypeface.BOLD_ITALIC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BOLD_ITALIC');
end;

class function TJTypeface.DEFAULT: JTypeface;
begin
  Result := GetStaticObjectField<TJTypeface, JTypeface>('DEFAULT');
end;

class function TJTypeface.DEFAULT_BOLD: JTypeface;
begin
  Result := GetStaticObjectField<TJTypeface, JTypeface>('DEFAULT_BOLD');
end;

class function TJTypeface.ITALIC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ITALIC');
end;

class function TJTypeface.MONOSPACE: JTypeface;
begin
  Result := GetStaticObjectField<TJTypeface, JTypeface>('MONOSPACE');
end;

class function TJTypeface.NORMAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NORMAL');
end;

class function TJTypeface.SANS_SERIF: JTypeface;
begin
  Result := GetStaticObjectField<TJTypeface, JTypeface>('SANS_SERIF');
end;

class function TJTypeface.SERIF: JTypeface;
begin
  Result := GetStaticObjectField<TJTypeface, JTypeface>('SERIF');
end;

class function TJTypeface.create(const AArg0: JString; const AArg1: Integer): JTypeface;
begin
  Result := CallStaticObjectMethod<TJTypeface, JTypeface>('create', '(Ljava/lang/String;I)Landroid/graphics/Typeface;', [AArg0, AArg1]);
end;

class function TJTypeface.create(const AArg0: JTypeface; const AArg1: Integer): JTypeface;
begin
  Result := CallStaticObjectMethod<TJTypeface, JTypeface>('create', '(Landroid/graphics/Typeface;I)Landroid/graphics/Typeface;', [AArg0, AArg1]);
end;

class function TJTypeface.create(const AArg0: JTypeface; const AArg1: Integer; const AArg2: Boolean): JTypeface;
begin
  Result := CallStaticObjectMethod<TJTypeface, JTypeface>('create', '(Landroid/graphics/Typeface;IZ)Landroid/graphics/Typeface;', [AArg0, AArg1, AArg2]);
end;

class function TJTypeface.createFromAsset(const AArg0: JAssetManager; const AArg1: JString): JTypeface;
begin
  Result := CallStaticObjectMethod<TJTypeface, JTypeface>('createFromAsset', '(Landroid/content/res/AssetManager;Ljava/lang/String;)Landroid/graphics/Typeface;', [AArg0, AArg1]);
end;

class function TJTypeface.createFromFile(const AArg0: JFile): JTypeface;
begin
  Result := CallStaticObjectMethod<TJTypeface, JTypeface>('createFromFile', '(Ljava/io/File;)Landroid/graphics/Typeface;', [AArg0]);
end;

class function TJTypeface.createFromFile(const AArg0: JString): JTypeface;
begin
  Result := CallStaticObjectMethod<TJTypeface, JTypeface>('createFromFile', '(Ljava/lang/String;)Landroid/graphics/Typeface;', [AArg0]);
end;

class function TJTypeface.defaultFromStyle(const AArg0: Integer): JTypeface;
begin
  Result := CallStaticObjectMethod<TJTypeface, JTypeface>('defaultFromStyle', '(I)Landroid/graphics/Typeface;', [AArg0]);
end;

function TJTypeface.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJTypeface.getStyle: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getStyle', '()I', []);
end;

function TJTypeface.getWeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWeight', '()I', []);
end;

function TJTypeface.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJTypeface.isBold: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isBold', '()Z', []);
end;

function TJTypeface.isItalic: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isItalic', '()Z', []);
end;

{ TJXfermode }

class procedure TJXfermode.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJXfermode.LoadMethods;
begin
  inherited;
end;

class function TJXfermode.Wrap(const AObjectID: JNIObject): JXfermode;
begin
  Result := Wrap<TJXfermode, JXfermode>(AObjectId);
end;

class function TJXfermode.Wrap(const AObject: IJNIObject): JXfermode;
begin
  Result := Wrap<TJXfermode, JXfermode>(AObject);
end;

class function TJXfermode.Create: JXfermode;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

{ TJPorterDuffXfermode }

class procedure TJPorterDuffXfermode.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/graphics/PorterDuff$Mode;)V');
end;

class procedure TJPorterDuffXfermode.LoadMethods;
begin
  inherited;
end;

class function TJPorterDuffXfermode.Wrap(const AObjectID: JNIObject): JPorterDuffXfermode;
begin
  Result := Wrap<TJPorterDuffXfermode, JPorterDuffXfermode>(AObjectId);
end;

class function TJPorterDuffXfermode.Wrap(const AObject: IJNIObject): JPorterDuffXfermode;
begin
  Result := Wrap<TJPorterDuffXfermode, JPorterDuffXfermode>(AObject);
end;

class function TJPorterDuffXfermode.Create(const AArg0: JPorterDuff_Mode): JPorterDuffXfermode;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
  Result := O;
end;

{ TJDrawable }

class procedure TJDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('canApplyTheme', '()Z');
  AddMethod('clearColorFilter', '()V');
  AddMethod('copyBounds', '()Landroid/graphics/Rect;');
  AddMethod('copyBounds', '(Landroid/graphics/Rect;)V');
  AddStaticMethod('createFromPath', '(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;');
  AddStaticMethod('createFromResourceStream', '(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Ljava/lang/String;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/drawable/Drawable;');
  AddStaticMethod('createFromResourceStream', '(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Ljava/lang/String;)Landroid/graphics/drawable/Drawable;');
  AddStaticMethod('createFromStream', '(Ljava/io/InputStream;Ljava/lang/String;)Landroid/graphics/drawable/Drawable;');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getAlpha', '()I');
  AddMethod('getBounds', '()Landroid/graphics/Rect;');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getColorFilter', '()Landroid/graphics/ColorFilter;');
  AddMethod('getCurrent', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('getDirtyBounds', '()Landroid/graphics/Rect;');
  AddMethod('getHotspotBounds', '(Landroid/graphics/Rect;)V');
  AddMethod('getIntrinsicHeight', '()I');
  AddMethod('getIntrinsicWidth', '()I');
  AddMethod('getLayoutDirection', '()I');
  AddMethod('getLevel', '()I');
  AddMethod('getMinimumHeight', '()I');
  AddMethod('getMinimumWidth', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getPadding', '(Landroid/graphics/Rect;)Z');
  AddMethod('getState', '()[I');
  AddMethod('invalidateSelf', '()V');
  AddMethod('isAutoMirrored', '()Z');
  AddMethod('isFilterBitmap', '()Z');
  AddMethod('isStateful', '()Z');
  AddMethod('isVisible', '()Z');
  AddMethod('jumpToCurrentState', '()V');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('onLayoutDirectionChanged', '(I)Z');
  AddStaticMethod('resolveOpacity', '(II)I');
  AddMethod('scheduleSelf', '(Ljava/lang/Runnable;J)V');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setAutoMirrored', '(Z)V');
  AddMethod('setBounds', '(Landroid/graphics/Rect;)V');
  AddMethod('setBounds', '(IIII)V');
  AddMethod('setChangingConfigurations', '(I)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)V');
  AddMethod('setColorFilter', '(ILandroid/graphics/PorterDuff$Mode;)V');
  AddMethod('setDither', '(Z)V');
  AddMethod('setFilterBitmap', '(Z)V');
  AddMethod('setHotspot', '(FF)V');
  AddMethod('setHotspotBounds', '(IIII)V');
  AddMethod('setLayoutDirection', '(I)Z');
  AddMethod('setLevel', '(I)Z');
  AddMethod('setState', '([I)Z');
  AddMethod('setTint', '(I)V');
  AddMethod('setTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
  AddMethod('setVisible', '(ZZ)Z');
  AddMethod('unscheduleSelf', '(Ljava/lang/Runnable;)V');
end;

class function TJDrawable.Wrap(const AObjectID: JNIObject): JDrawable;
begin
  Result := Wrap<TJDrawable, JDrawable>(AObjectId);
end;

class function TJDrawable.Wrap(const AObject: IJNIObject): JDrawable;
begin
  Result := Wrap<TJDrawable, JDrawable>(AObject);
end;

class function TJDrawable.Create: JDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJDrawable.canApplyTheme: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canApplyTheme', '()Z', []);
end;

procedure TJDrawable.clearColorFilter;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearColorFilter', '()V', []);
end;

function TJDrawable.copyBounds: JRect;
begin
  Result := CallObjectMethod<TJRect, JRect>('copyBounds', '()Landroid/graphics/Rect;', []);
end;

procedure TJDrawable.copyBounds(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'copyBounds', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

class function TJDrawable.createFromPath(const AArg0: JString): JDrawable;
begin
  Result := CallStaticObjectMethod<TJDrawable, JDrawable>('createFromPath', '(Ljava/lang/String;)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

class function TJDrawable.createFromResourceStream(const AArg0: JResources; const AArg1: JTypedValue; const AArg2: JInputStream; const AArg3: JString; const AArg4: JBitmapFactory_Options): JDrawable;
begin
  Result := CallStaticObjectMethod<TJDrawable, JDrawable>('createFromResourceStream', '(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Ljava/lang/String;Landroid/graphics/BitmapFactory$Options;)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

class function TJDrawable.createFromResourceStream(const AArg0: JResources; const AArg1: JTypedValue; const AArg2: JInputStream; const AArg3: JString): JDrawable;
begin
  Result := CallStaticObjectMethod<TJDrawable, JDrawable>('createFromResourceStream', '(Landroid/content/res/Resources;Landroid/util/TypedValue;Ljava/io/InputStream;Ljava/lang/String;)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJDrawable.createFromStream(const AArg0: JInputStream; const AArg1: JString): JDrawable;
begin
  Result := CallStaticObjectMethod<TJDrawable, JDrawable>('createFromStream', '(Ljava/io/InputStream;Ljava/lang/String;)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1]);
end;

procedure TJDrawable.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJDrawable.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJDrawable.getBounds: JRect;
begin
  Result := CallObjectMethod<TJRect, JRect>('getBounds', '()Landroid/graphics/Rect;', []);
end;

function TJDrawable.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJDrawable.getColorFilter: JColorFilter;
begin
  Result := CallObjectMethod<TJColorFilter, JColorFilter>('getColorFilter', '()Landroid/graphics/ColorFilter;', []);
end;

function TJDrawable.getCurrent: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getCurrent', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJDrawable.getDirtyBounds: JRect;
begin
  Result := CallObjectMethod<TJRect, JRect>('getDirtyBounds', '()Landroid/graphics/Rect;', []);
end;

procedure TJDrawable.getHotspotBounds(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getHotspotBounds', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJDrawable.getIntrinsicHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicHeight', '()I', []);
end;

function TJDrawable.getIntrinsicWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicWidth', '()I', []);
end;

function TJDrawable.getLayoutDirection: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayoutDirection', '()I', []);
end;

function TJDrawable.getLevel: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLevel', '()I', []);
end;

function TJDrawable.getMinimumHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMinimumHeight', '()I', []);
end;

function TJDrawable.getMinimumWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMinimumWidth', '()I', []);
end;

function TJDrawable.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJDrawable.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJDrawable.getPadding(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getPadding', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJDrawable.getState: IJavaArray<Integer>;
begin
  Result := CallArrayMethod<Integer>('getState', '()[I', []);
end;

procedure TJDrawable.invalidateSelf;
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateSelf', '()V', []);
end;

function TJDrawable.isAutoMirrored: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAutoMirrored', '()Z', []);
end;

function TJDrawable.isFilterBitmap: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFilterBitmap', '()Z', []);
end;

function TJDrawable.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

function TJDrawable.isVisible: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVisible', '()Z', []);
end;

procedure TJDrawable.jumpToCurrentState;
begin
  JavaType.CallVoidMethod(ObjectID, 'jumpToCurrentState', '()V', []);
end;

function TJDrawable.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJDrawable.onLayoutDirectionChanged(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onLayoutDirectionChanged', '(I)Z', [AArg0]);
end;

class function TJDrawable.resolveOpacity(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('resolveOpacity', '(II)I', [AArg0, AArg1]);
end;

procedure TJDrawable.scheduleSelf(const AArg0: JRunnable; const AArg1: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'scheduleSelf', '(Ljava/lang/Runnable;J)V', [AArg0, AArg1]);
end;

procedure TJDrawable.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJDrawable.setAutoMirrored(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAutoMirrored', '(Z)V', [AArg0]);
end;

procedure TJDrawable.setBounds(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBounds', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJDrawable.setBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBounds', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJDrawable.setChangingConfigurations(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setChangingConfigurations', '(I)V', [AArg0]);
end;

procedure TJDrawable.setColorFilter(const AArg0: JColorFilter);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(Landroid/graphics/ColorFilter;)V', [AArg0]);
end;

procedure TJDrawable.setColorFilter(const AArg0: Integer; const AArg1: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(ILandroid/graphics/PorterDuff$Mode;)V', [AArg0, AArg1]);
end;

procedure TJDrawable.setDither(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDither', '(Z)V', [AArg0]);
end;

procedure TJDrawable.setFilterBitmap(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFilterBitmap', '(Z)V', [AArg0]);
end;

procedure TJDrawable.setHotspot(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspot', '(FF)V', [AArg0, AArg1]);
end;

procedure TJDrawable.setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspotBounds', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJDrawable.setLayoutDirection(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setLayoutDirection', '(I)Z', [AArg0]);
end;

function TJDrawable.setLevel(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setLevel', '(I)Z', [AArg0]);
end;

function TJDrawable.setState(const AArg0: IJavaArray<Integer>): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setState', '([I)Z', [AArg0]);
end;

procedure TJDrawable.setTint(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTint', '(I)V', [AArg0]);
end;

procedure TJDrawable.setTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJDrawable.setTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

function TJDrawable.setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setVisible', '(ZZ)Z', [AArg0, AArg1]);
end;

procedure TJDrawable.unscheduleSelf(const AArg0: JRunnable);
begin
  JavaType.CallVoidMethod(ObjectID, 'unscheduleSelf', '(Ljava/lang/Runnable;)V', [AArg0]);
end;

{ TJBitmapDrawable }

class procedure TJBitmapDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/content/res/Resources;)V');
  AddMethod('<init>', '(Landroid/graphics/Bitmap;)V');
  AddMethod('<init>', '(Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V');
  AddMethod('<init>', '(Ljava/lang/String;)V');
  AddMethod('<init>', '(Landroid/content/res/Resources;Ljava/lang/String;)V');
  AddMethod('<init>', '(Ljava/io/InputStream;)V');
  AddMethod('<init>', '(Landroid/content/res/Resources;Ljava/io/InputStream;)V');
end;

class procedure TJBitmapDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('canApplyTheme', '()Z');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getAlpha', '()I');
  AddMethod('getBitmap', '()Landroid/graphics/Bitmap;');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getColorFilter', '()Landroid/graphics/ColorFilter;');
  AddMethod('getGravity', '()I');
  AddMethod('getIntrinsicHeight', '()I');
  AddMethod('getIntrinsicWidth', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getPaint', '()Landroid/graphics/Paint;');
  AddMethod('getTileModeX', '()Landroid/graphics/Shader$TileMode;');
  AddMethod('getTileModeY', '()Landroid/graphics/Shader$TileMode;');
  AddMethod('hasAntiAlias', '()Z');
  AddMethod('hasMipMap', '()Z');
  AddMethod('isAutoMirrored', '()Z');
  AddMethod('isFilterBitmap', '()Z');
  AddMethod('isStateful', '()Z');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setAntiAlias', '(Z)V');
  AddMethod('setAutoMirrored', '(Z)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)V');
  AddMethod('setDither', '(Z)V');
  AddMethod('setFilterBitmap', '(Z)V');
  AddMethod('setGravity', '(I)V');
  AddMethod('setMipMap', '(Z)V');
  AddMethod('setTargetDensity', '(Landroid/graphics/Canvas;)V');
  AddMethod('setTargetDensity', '(Landroid/util/DisplayMetrics;)V');
  AddMethod('setTargetDensity', '(I)V');
  AddMethod('setTileModeX', '(Landroid/graphics/Shader$TileMode;)V');
  AddMethod('setTileModeXY', '(Landroid/graphics/Shader$TileMode;Landroid/graphics/Shader$TileMode;)V');
  AddMethod('setTileModeY', '(Landroid/graphics/Shader$TileMode;)V');
  AddMethod('setTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
end;

class function TJBitmapDrawable.Wrap(const AObjectID: JNIObject): JBitmapDrawable;
begin
  Result := Wrap<TJBitmapDrawable, JBitmapDrawable>(AObjectId);
end;

class function TJBitmapDrawable.Wrap(const AObject: IJNIObject): JBitmapDrawable;
begin
  Result := Wrap<TJBitmapDrawable, JBitmapDrawable>(AObject);
end;

class function TJBitmapDrawable.Create: JBitmapDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJBitmapDrawable.Create(const AArg0: JResources): JBitmapDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/res/Resources;)V', [AArg0]);
  Result := O;
end;

class function TJBitmapDrawable.Create(const AArg0: JBitmap): JBitmapDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/Bitmap;)V', [AArg0]);
  Result := O;
end;

class function TJBitmapDrawable.Create(const AArg0: JResources; const AArg1: JBitmap): JBitmapDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/res/Resources;Landroid/graphics/Bitmap;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJBitmapDrawable.Create(const AArg0: JString): JBitmapDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

class function TJBitmapDrawable.Create(const AArg0: JResources; const AArg1: JString): JBitmapDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/res/Resources;Ljava/lang/String;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJBitmapDrawable.Create(const AArg0: JInputStream): JBitmapDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/io/InputStream;)V', [AArg0]);
  Result := O;
end;

class function TJBitmapDrawable.Create(const AArg0: JResources; const AArg1: JInputStream): JBitmapDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/res/Resources;Ljava/io/InputStream;)V', [AArg0, AArg1]);
  Result := O;
end;

procedure TJBitmapDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJBitmapDrawable.canApplyTheme: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canApplyTheme', '()Z', []);
end;

procedure TJBitmapDrawable.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJBitmapDrawable.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJBitmapDrawable.getBitmap: JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('getBitmap', '()Landroid/graphics/Bitmap;', []);
end;

function TJBitmapDrawable.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJBitmapDrawable.getColorFilter: JColorFilter;
begin
  Result := CallObjectMethod<TJColorFilter, JColorFilter>('getColorFilter', '()Landroid/graphics/ColorFilter;', []);
end;

function TJBitmapDrawable.getGravity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getGravity', '()I', []);
end;

function TJBitmapDrawable.getIntrinsicHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicHeight', '()I', []);
end;

function TJBitmapDrawable.getIntrinsicWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicWidth', '()I', []);
end;

function TJBitmapDrawable.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJBitmapDrawable.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJBitmapDrawable.getPaint: JPaint;
begin
  Result := CallObjectMethod<TJPaint, JPaint>('getPaint', '()Landroid/graphics/Paint;', []);
end;

function TJBitmapDrawable.getTileModeX: JShader_TileMode;
begin
  Result := CallObjectMethod<TJShader_TileMode, JShader_TileMode>('getTileModeX', '()Landroid/graphics/Shader$TileMode;', []);
end;

function TJBitmapDrawable.getTileModeY: JShader_TileMode;
begin
  Result := CallObjectMethod<TJShader_TileMode, JShader_TileMode>('getTileModeY', '()Landroid/graphics/Shader$TileMode;', []);
end;

function TJBitmapDrawable.hasAntiAlias: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasAntiAlias', '()Z', []);
end;

function TJBitmapDrawable.hasMipMap: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasMipMap', '()Z', []);
end;

function TJBitmapDrawable.isAutoMirrored: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAutoMirrored', '()Z', []);
end;

function TJBitmapDrawable.isFilterBitmap: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFilterBitmap', '()Z', []);
end;

function TJBitmapDrawable.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

function TJBitmapDrawable.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

procedure TJBitmapDrawable.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJBitmapDrawable.setAntiAlias(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAntiAlias', '(Z)V', [AArg0]);
end;

procedure TJBitmapDrawable.setAutoMirrored(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAutoMirrored', '(Z)V', [AArg0]);
end;

procedure TJBitmapDrawable.setColorFilter(const AArg0: JColorFilter);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(Landroid/graphics/ColorFilter;)V', [AArg0]);
end;

procedure TJBitmapDrawable.setDither(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDither', '(Z)V', [AArg0]);
end;

procedure TJBitmapDrawable.setFilterBitmap(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFilterBitmap', '(Z)V', [AArg0]);
end;

procedure TJBitmapDrawable.setGravity(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setGravity', '(I)V', [AArg0]);
end;

procedure TJBitmapDrawable.setMipMap(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setMipMap', '(Z)V', [AArg0]);
end;

procedure TJBitmapDrawable.setTargetDensity(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTargetDensity', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

procedure TJBitmapDrawable.setTargetDensity(const AArg0: JDisplayMetrics);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTargetDensity', '(Landroid/util/DisplayMetrics;)V', [AArg0]);
end;

procedure TJBitmapDrawable.setTargetDensity(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTargetDensity', '(I)V', [AArg0]);
end;

procedure TJBitmapDrawable.setTileModeX(const AArg0: JShader_TileMode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTileModeX', '(Landroid/graphics/Shader$TileMode;)V', [AArg0]);
end;

procedure TJBitmapDrawable.setTileModeXY(const AArg0: JShader_TileMode; const AArg1: JShader_TileMode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTileModeXY', '(Landroid/graphics/Shader$TileMode;Landroid/graphics/Shader$TileMode;)V', [AArg0, AArg1]);
end;

procedure TJBitmapDrawable.setTileModeY(const AArg0: JShader_TileMode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTileModeY', '(Landroid/graphics/Shader$TileMode;)V', [AArg0]);
end;

procedure TJBitmapDrawable.setTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJBitmapDrawable.setTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

{ TJColorDrawable }

class procedure TJColorDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(I)V');
end;

class procedure TJColorDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('canApplyTheme', '()Z');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getAlpha', '()I');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getColor', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('isStateful', '()Z');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setColor', '(I)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)V');
  AddMethod('setTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
end;

class function TJColorDrawable.Wrap(const AObjectID: JNIObject): JColorDrawable;
begin
  Result := Wrap<TJColorDrawable, JColorDrawable>(AObjectId);
end;

class function TJColorDrawable.Wrap(const AObject: IJNIObject): JColorDrawable;
begin
  Result := Wrap<TJColorDrawable, JColorDrawable>(AObject);
end;

class function TJColorDrawable.Create: JColorDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJColorDrawable.Create(const AArg0: Integer): JColorDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

procedure TJColorDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJColorDrawable.canApplyTheme: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canApplyTheme', '()Z', []);
end;

procedure TJColorDrawable.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJColorDrawable.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJColorDrawable.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJColorDrawable.getColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColor', '()I', []);
end;

function TJColorDrawable.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJColorDrawable.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJColorDrawable.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

function TJColorDrawable.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

procedure TJColorDrawable.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJColorDrawable.setColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColor', '(I)V', [AArg0]);
end;

procedure TJColorDrawable.setColorFilter(const AArg0: JColorFilter);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(Landroid/graphics/ColorFilter;)V', [AArg0]);
end;

procedure TJColorDrawable.setTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJColorDrawable.setTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

{ TJDrawableContainer }

class procedure TJDrawableContainer.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJDrawableContainer.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('canApplyTheme', '()Z');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getAlpha', '()I');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getCurrent', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('getHotspotBounds', '(Landroid/graphics/Rect;)V');
  AddMethod('getIntrinsicHeight', '()I');
  AddMethod('getIntrinsicWidth', '()I');
  AddMethod('getMinimumHeight', '()I');
  AddMethod('getMinimumWidth', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getPadding', '(Landroid/graphics/Rect;)Z');
  AddMethod('invalidateDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('isAutoMirrored', '()Z');
  AddMethod('isStateful', '()Z');
  AddMethod('jumpToCurrentState', '()V');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('onLayoutDirectionChanged', '(I)Z');
  AddMethod('scheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V');
  AddMethod('selectDrawable', '(I)Z');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setAutoMirrored', '(Z)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)V');
  AddMethod('setDither', '(Z)V');
  AddMethod('setEnterFadeDuration', '(I)V');
  AddMethod('setExitFadeDuration', '(I)V');
  AddMethod('setHotspot', '(FF)V');
  AddMethod('setHotspotBounds', '(IIII)V');
  AddMethod('setTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
  AddMethod('setVisible', '(ZZ)Z');
  AddMethod('unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V');
end;

class function TJDrawableContainer.Wrap(const AObjectID: JNIObject): JDrawableContainer;
begin
  Result := Wrap<TJDrawableContainer, JDrawableContainer>(AObjectId);
end;

class function TJDrawableContainer.Wrap(const AObject: IJNIObject): JDrawableContainer;
begin
  Result := Wrap<TJDrawableContainer, JDrawableContainer>(AObject);
end;

class function TJDrawableContainer.Create: JDrawableContainer;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJDrawableContainer.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJDrawableContainer.canApplyTheme: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canApplyTheme', '()Z', []);
end;

procedure TJDrawableContainer.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJDrawableContainer.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJDrawableContainer.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJDrawableContainer.getCurrent: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getCurrent', '()Landroid/graphics/drawable/Drawable;', []);
end;

procedure TJDrawableContainer.getHotspotBounds(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getHotspotBounds', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJDrawableContainer.getIntrinsicHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicHeight', '()I', []);
end;

function TJDrawableContainer.getIntrinsicWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicWidth', '()I', []);
end;

function TJDrawableContainer.getMinimumHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMinimumHeight', '()I', []);
end;

function TJDrawableContainer.getMinimumWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMinimumWidth', '()I', []);
end;

function TJDrawableContainer.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJDrawableContainer.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJDrawableContainer.getPadding(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getPadding', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

procedure TJDrawableContainer.invalidateDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

function TJDrawableContainer.isAutoMirrored: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAutoMirrored', '()Z', []);
end;

function TJDrawableContainer.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

procedure TJDrawableContainer.jumpToCurrentState;
begin
  JavaType.CallVoidMethod(ObjectID, 'jumpToCurrentState', '()V', []);
end;

function TJDrawableContainer.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJDrawableContainer.onLayoutDirectionChanged(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onLayoutDirectionChanged', '(I)Z', [AArg0]);
end;

procedure TJDrawableContainer.scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'scheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V', [AArg0, AArg1, AArg2]);
end;

function TJDrawableContainer.selectDrawable(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'selectDrawable', '(I)Z', [AArg0]);
end;

procedure TJDrawableContainer.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJDrawableContainer.setAutoMirrored(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAutoMirrored', '(Z)V', [AArg0]);
end;

procedure TJDrawableContainer.setColorFilter(const AArg0: JColorFilter);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(Landroid/graphics/ColorFilter;)V', [AArg0]);
end;

procedure TJDrawableContainer.setDither(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDither', '(Z)V', [AArg0]);
end;

procedure TJDrawableContainer.setEnterFadeDuration(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setEnterFadeDuration', '(I)V', [AArg0]);
end;

procedure TJDrawableContainer.setExitFadeDuration(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setExitFadeDuration', '(I)V', [AArg0]);
end;

procedure TJDrawableContainer.setHotspot(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspot', '(FF)V', [AArg0, AArg1]);
end;

procedure TJDrawableContainer.setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspotBounds', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJDrawableContainer.setTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJDrawableContainer.setTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

function TJDrawableContainer.setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setVisible', '(ZZ)Z', [AArg0, AArg1]);
end;

procedure TJDrawableContainer.unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
begin
  JavaType.CallVoidMethod(ObjectID, 'unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V', [AArg0, AArg1]);
end;

{ TJStateListDrawable }

class procedure TJStateListDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJStateListDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addState', '([ILandroid/graphics/drawable/Drawable;)V');
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('isStateful', '()Z');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
end;

class function TJStateListDrawable.Wrap(const AObjectID: JNIObject): JStateListDrawable;
begin
  Result := Wrap<TJStateListDrawable, JStateListDrawable>(AObjectId);
end;

class function TJStateListDrawable.Wrap(const AObject: IJNIObject): JStateListDrawable;
begin
  Result := Wrap<TJStateListDrawable, JStateListDrawable>(AObject);
end;

class function TJStateListDrawable.Create: JStateListDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJStateListDrawable.addState(const AArg0: IJavaArray<Integer>; const AArg1: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'addState', '([ILandroid/graphics/drawable/Drawable;)V', [AArg0, AArg1]);
end;

procedure TJStateListDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJStateListDrawable.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

function TJStateListDrawable.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

{ TJDrawableWrapper }

class procedure TJDrawableWrapper.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/graphics/drawable/Drawable;)V');
end;

class procedure TJDrawableWrapper.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('canApplyTheme', '()Z');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getAlpha', '()I');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getColorFilter', '()Landroid/graphics/ColorFilter;');
  AddMethod('getDrawable', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('getHotspotBounds', '(Landroid/graphics/Rect;)V');
  AddMethod('getIntrinsicHeight', '()I');
  AddMethod('getIntrinsicWidth', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getPadding', '(Landroid/graphics/Rect;)Z');
  AddMethod('invalidateDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('isStateful', '()Z');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('onLayoutDirectionChanged', '(I)Z');
  AddMethod('scheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)V');
  AddMethod('setDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('setHotspot', '(FF)V');
  AddMethod('setHotspotBounds', '(IIII)V');
  AddMethod('setTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
  AddMethod('setVisible', '(ZZ)Z');
  AddMethod('unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V');
end;

class function TJDrawableWrapper.Wrap(const AObjectID: JNIObject): JDrawableWrapper;
begin
  Result := Wrap<TJDrawableWrapper, JDrawableWrapper>(AObjectId);
end;

class function TJDrawableWrapper.Wrap(const AObject: IJNIObject): JDrawableWrapper;
begin
  Result := Wrap<TJDrawableWrapper, JDrawableWrapper>(AObject);
end;

class function TJDrawableWrapper.Create(const AArg0: JDrawable): JDrawableWrapper;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
  Result := O;
end;

procedure TJDrawableWrapper.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJDrawableWrapper.canApplyTheme: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canApplyTheme', '()Z', []);
end;

procedure TJDrawableWrapper.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJDrawableWrapper.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJDrawableWrapper.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJDrawableWrapper.getColorFilter: JColorFilter;
begin
  Result := CallObjectMethod<TJColorFilter, JColorFilter>('getColorFilter', '()Landroid/graphics/ColorFilter;', []);
end;

function TJDrawableWrapper.getDrawable: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDrawable', '()Landroid/graphics/drawable/Drawable;', []);
end;

procedure TJDrawableWrapper.getHotspotBounds(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getHotspotBounds', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJDrawableWrapper.getIntrinsicHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicHeight', '()I', []);
end;

function TJDrawableWrapper.getIntrinsicWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicWidth', '()I', []);
end;

function TJDrawableWrapper.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJDrawableWrapper.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJDrawableWrapper.getPadding(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getPadding', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

procedure TJDrawableWrapper.invalidateDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

function TJDrawableWrapper.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

function TJDrawableWrapper.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJDrawableWrapper.onLayoutDirectionChanged(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onLayoutDirectionChanged', '(I)Z', [AArg0]);
end;

procedure TJDrawableWrapper.scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'scheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V', [AArg0, AArg1, AArg2]);
end;

procedure TJDrawableWrapper.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJDrawableWrapper.setColorFilter(const AArg0: JColorFilter);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(Landroid/graphics/ColorFilter;)V', [AArg0]);
end;

procedure TJDrawableWrapper.setDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJDrawableWrapper.setHotspot(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspot', '(FF)V', [AArg0, AArg1]);
end;

procedure TJDrawableWrapper.setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspotBounds', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJDrawableWrapper.setTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJDrawableWrapper.setTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

function TJDrawableWrapper.setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setVisible', '(ZZ)Z', [AArg0, AArg1]);
end;

procedure TJDrawableWrapper.unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
begin
  JavaType.CallVoidMethod(ObjectID, 'unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V', [AArg0, AArg1]);
end;

{ TJInsetDrawable }

class procedure TJInsetDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/graphics/drawable/Drawable;I)V');
  AddMethod('<init>', '(Landroid/graphics/drawable/Drawable;F)V');
  AddMethod('<init>', '(Landroid/graphics/drawable/Drawable;IIII)V');
  AddMethod('<init>', '(Landroid/graphics/drawable/Drawable;FFFF)V');
end;

class procedure TJInsetDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('getIntrinsicHeight', '()I');
  AddMethod('getIntrinsicWidth', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getPadding', '(Landroid/graphics/Rect;)Z');
end;

class function TJInsetDrawable.Wrap(const AObjectID: JNIObject): JInsetDrawable;
begin
  Result := Wrap<TJInsetDrawable, JInsetDrawable>(AObjectId);
end;

class function TJInsetDrawable.Wrap(const AObject: IJNIObject): JInsetDrawable;
begin
  Result := Wrap<TJInsetDrawable, JInsetDrawable>(AObject);
end;

class function TJInsetDrawable.Create(const AArg0: JDrawable; const AArg1: Integer): JInsetDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/drawable/Drawable;I)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJInsetDrawable.Create(const AArg0: JDrawable; const AArg1: Single): JInsetDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/drawable/Drawable;F)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJInsetDrawable.Create(const AArg0: JDrawable; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer): JInsetDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/drawable/Drawable;IIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
  Result := O;
end;

class function TJInsetDrawable.Create(const AArg0: JDrawable; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single): JInsetDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/drawable/Drawable;FFFF)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
  Result := O;
end;

procedure TJInsetDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJInsetDrawable.getIntrinsicHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicHeight', '()I', []);
end;

function TJInsetDrawable.getIntrinsicWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicWidth', '()I', []);
end;

function TJInsetDrawable.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJInsetDrawable.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJInsetDrawable.getPadding(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getPadding', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

{ TJGradientDrawable }

class procedure TJGradientDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJGradientDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('canApplyTheme', '()Z');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getAlpha', '()I');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getColor', '()Landroid/content/res/ColorStateList;');
  AddMethod('getColorFilter', '()Landroid/graphics/ColorFilter;');
  AddMethod('getColors', '()[I');
  AddMethod('getCornerRadii', '()[F');
  AddMethod('getCornerRadius', '()F');
  AddMethod('getGradientCenterX', '()F');
  AddMethod('getGradientCenterY', '()F');
  AddMethod('getGradientRadius', '()F');
  AddMethod('getGradientType', '()I');
  AddMethod('getIntrinsicHeight', '()I');
  AddMethod('getIntrinsicWidth', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getPadding', '(Landroid/graphics/Rect;)Z');
  AddMethod('getShape', '()I');
  AddMethod('getUseLevel', '()Z');
  AddMethod('isStateful', '()Z');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setColor', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setColor', '(I)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)V');
  AddMethod('setColors', '([I)V');
  AddMethod('setCornerRadii', '([F)V');
  AddMethod('setCornerRadius', '(F)V');
  AddMethod('setDither', '(Z)V');
  AddMethod('setGradientCenter', '(FF)V');
  AddMethod('setGradientRadius', '(F)V');
  AddMethod('setGradientType', '(I)V');
  AddMethod('setShape', '(I)V');
  AddMethod('setSize', '(II)V');
  AddMethod('setStroke', '(II)V');
  AddMethod('setStroke', '(ILandroid/content/res/ColorStateList;)V');
  AddMethod('setStroke', '(IIFF)V');
  AddMethod('setStroke', '(ILandroid/content/res/ColorStateList;FF)V');
  AddMethod('setTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
  AddMethod('setUseLevel', '(Z)V');
end;

class procedure TJGradientDrawable.LoadFields;
begin
  inherited;
  AddStaticField('LINE', 'I');
  AddStaticField('LINEAR_GRADIENT', 'I');
  AddStaticField('OVAL', 'I');
  AddStaticField('RADIAL_GRADIENT', 'I');
  AddStaticField('RECTANGLE', 'I');
  AddStaticField('RING', 'I');
  AddStaticField('SWEEP_GRADIENT', 'I');
end;

class function TJGradientDrawable.Wrap(const AObjectID: JNIObject): JGradientDrawable;
begin
  Result := Wrap<TJGradientDrawable, JGradientDrawable>(AObjectId);
end;

class function TJGradientDrawable.Wrap(const AObject: IJNIObject): JGradientDrawable;
begin
  Result := Wrap<TJGradientDrawable, JGradientDrawable>(AObject);
end;

class function TJGradientDrawable.Create: JGradientDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJGradientDrawable.LINE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LINE');
end;

class function TJGradientDrawable.LINEAR_GRADIENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LINEAR_GRADIENT');
end;

class function TJGradientDrawable.OVAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('OVAL');
end;

class function TJGradientDrawable.RADIAL_GRADIENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RADIAL_GRADIENT');
end;

class function TJGradientDrawable.RECTANGLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RECTANGLE');
end;

class function TJGradientDrawable.RING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RING');
end;

class function TJGradientDrawable.SWEEP_GRADIENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SWEEP_GRADIENT');
end;

procedure TJGradientDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJGradientDrawable.canApplyTheme: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canApplyTheme', '()Z', []);
end;

procedure TJGradientDrawable.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJGradientDrawable.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJGradientDrawable.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJGradientDrawable.getColor: JColorStateList;
begin
  Result := CallObjectMethod<TJColorStateList, JColorStateList>('getColor', '()Landroid/content/res/ColorStateList;', []);
end;

function TJGradientDrawable.getColorFilter: JColorFilter;
begin
  Result := CallObjectMethod<TJColorFilter, JColorFilter>('getColorFilter', '()Landroid/graphics/ColorFilter;', []);
end;

function TJGradientDrawable.getColors: IJavaArray<Integer>;
begin
  Result := CallArrayMethod<Integer>('getColors', '()[I', []);
end;

function TJGradientDrawable.getCornerRadii: IJavaArray<Single>;
begin
  Result := CallArrayMethod<Single>('getCornerRadii', '()[F', []);
end;

function TJGradientDrawable.getCornerRadius: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getCornerRadius', '()F', []);
end;

function TJGradientDrawable.getGradientCenterX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getGradientCenterX', '()F', []);
end;

function TJGradientDrawable.getGradientCenterY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getGradientCenterY', '()F', []);
end;

function TJGradientDrawable.getGradientRadius: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getGradientRadius', '()F', []);
end;

function TJGradientDrawable.getGradientType: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getGradientType', '()I', []);
end;

function TJGradientDrawable.getIntrinsicHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicHeight', '()I', []);
end;

function TJGradientDrawable.getIntrinsicWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicWidth', '()I', []);
end;

function TJGradientDrawable.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJGradientDrawable.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJGradientDrawable.getPadding(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getPadding', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJGradientDrawable.getShape: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getShape', '()I', []);
end;

function TJGradientDrawable.getUseLevel: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getUseLevel', '()Z', []);
end;

function TJGradientDrawable.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

function TJGradientDrawable.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

procedure TJGradientDrawable.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJGradientDrawable.setColor(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColor', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJGradientDrawable.setColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColor', '(I)V', [AArg0]);
end;

procedure TJGradientDrawable.setColorFilter(const AArg0: JColorFilter);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(Landroid/graphics/ColorFilter;)V', [AArg0]);
end;

procedure TJGradientDrawable.setColors(const AArg0: IJavaArray<Integer>);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColors', '([I)V', [AArg0]);
end;

procedure TJGradientDrawable.setCornerRadii(const AArg0: IJavaArray<Single>);
begin
  JavaType.CallVoidMethod(ObjectID, 'setCornerRadii', '([F)V', [AArg0]);
end;

procedure TJGradientDrawable.setCornerRadius(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setCornerRadius', '(F)V', [AArg0]);
end;

procedure TJGradientDrawable.setDither(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDither', '(Z)V', [AArg0]);
end;

procedure TJGradientDrawable.setGradientCenter(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setGradientCenter', '(FF)V', [AArg0, AArg1]);
end;

procedure TJGradientDrawable.setGradientRadius(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setGradientRadius', '(F)V', [AArg0]);
end;

procedure TJGradientDrawable.setGradientType(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setGradientType', '(I)V', [AArg0]);
end;

procedure TJGradientDrawable.setShape(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setShape', '(I)V', [AArg0]);
end;

procedure TJGradientDrawable.setSize(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSize', '(II)V', [AArg0, AArg1]);
end;

procedure TJGradientDrawable.setStroke(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStroke', '(II)V', [AArg0, AArg1]);
end;

procedure TJGradientDrawable.setStroke(const AArg0: Integer; const AArg1: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStroke', '(ILandroid/content/res/ColorStateList;)V', [AArg0, AArg1]);
end;

procedure TJGradientDrawable.setStroke(const AArg0: Integer; const AArg1: Integer; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStroke', '(IIFF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJGradientDrawable.setStroke(const AArg0: Integer; const AArg1: JColorStateList; const AArg2: Single; const AArg3: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStroke', '(ILandroid/content/res/ColorStateList;FF)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJGradientDrawable.setTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJGradientDrawable.setTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

procedure TJGradientDrawable.setUseLevel(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setUseLevel', '(Z)V', [AArg0]);
end;

{ TJLayerDrawable }

class procedure TJLayerDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '([Landroid/graphics/drawable/Drawable;)V');
end;

class procedure TJLayerDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addLayer', '(Landroid/graphics/drawable/Drawable;)I');
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('canApplyTheme', '()Z');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('findDrawableByLayerId', '(I)Landroid/graphics/drawable/Drawable;');
  AddMethod('findIndexByLayerId', '(I)I');
  AddMethod('getAlpha', '()I');
  AddMethod('getBottomPadding', '()I');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getDrawable', '(I)Landroid/graphics/drawable/Drawable;');
  AddMethod('getEndPadding', '()I');
  AddMethod('getHotspotBounds', '(Landroid/graphics/Rect;)V');
  AddMethod('getId', '(I)I');
  AddMethod('getIntrinsicHeight', '()I');
  AddMethod('getIntrinsicWidth', '()I');
  AddMethod('getLayerGravity', '(I)I');
  AddMethod('getLayerHeight', '(I)I');
  AddMethod('getLayerInsetBottom', '(I)I');
  AddMethod('getLayerInsetEnd', '(I)I');
  AddMethod('getLayerInsetLeft', '(I)I');
  AddMethod('getLayerInsetRight', '(I)I');
  AddMethod('getLayerInsetStart', '(I)I');
  AddMethod('getLayerInsetTop', '(I)I');
  AddMethod('getLayerWidth', '(I)I');
  AddMethod('getLeftPadding', '()I');
  AddMethod('getNumberOfLayers', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getPadding', '(Landroid/graphics/Rect;)Z');
  AddMethod('getPaddingMode', '()I');
  AddMethod('getRightPadding', '()I');
  AddMethod('getStartPadding', '()I');
  AddMethod('getTopPadding', '()I');
  AddMethod('invalidateDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('isAutoMirrored', '()Z');
  AddMethod('isStateful', '()Z');
  AddMethod('jumpToCurrentState', '()V');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('onLayoutDirectionChanged', '(I)Z');
  AddMethod('scheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setAutoMirrored', '(Z)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)V');
  AddMethod('setDither', '(Z)V');
  AddMethod('setDrawable', '(ILandroid/graphics/drawable/Drawable;)V');
  AddMethod('setDrawableByLayerId', '(ILandroid/graphics/drawable/Drawable;)Z');
  AddMethod('setHotspot', '(FF)V');
  AddMethod('setHotspotBounds', '(IIII)V');
  AddMethod('setId', '(II)V');
  AddMethod('setLayerGravity', '(II)V');
  AddMethod('setLayerHeight', '(II)V');
  AddMethod('setLayerInset', '(IIIII)V');
  AddMethod('setLayerInsetBottom', '(II)V');
  AddMethod('setLayerInsetEnd', '(II)V');
  AddMethod('setLayerInsetLeft', '(II)V');
  AddMethod('setLayerInsetRelative', '(IIIII)V');
  AddMethod('setLayerInsetRight', '(II)V');
  AddMethod('setLayerInsetStart', '(II)V');
  AddMethod('setLayerInsetTop', '(II)V');
  AddMethod('setLayerSize', '(III)V');
  AddMethod('setLayerWidth', '(II)V');
  AddMethod('setOpacity', '(I)V');
  AddMethod('setPadding', '(IIII)V');
  AddMethod('setPaddingMode', '(I)V');
  AddMethod('setPaddingRelative', '(IIII)V');
  AddMethod('setTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
  AddMethod('setVisible', '(ZZ)Z');
  AddMethod('unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V');
end;

class procedure TJLayerDrawable.LoadFields;
begin
  inherited;
  AddStaticField('INSET_UNDEFINED', 'I');
  AddStaticField('PADDING_MODE_NEST', 'I');
  AddStaticField('PADDING_MODE_STACK', 'I');
end;

class function TJLayerDrawable.Wrap(const AObjectID: JNIObject): JLayerDrawable;
begin
  Result := Wrap<TJLayerDrawable, JLayerDrawable>(AObjectId);
end;

class function TJLayerDrawable.Wrap(const AObject: IJNIObject): JLayerDrawable;
begin
  Result := Wrap<TJLayerDrawable, JLayerDrawable>(AObject);
end;

class function TJLayerDrawable.Create(const AArg0: IJavaArray<JDrawable>): JLayerDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('([Landroid/graphics/drawable/Drawable;)V', [AArg0]);
  Result := O;
end;

class function TJLayerDrawable.INSET_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INSET_UNDEFINED');
end;

class function TJLayerDrawable.PADDING_MODE_NEST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PADDING_MODE_NEST');
end;

class function TJLayerDrawable.PADDING_MODE_STACK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PADDING_MODE_STACK');
end;

function TJLayerDrawable.addLayer(const AArg0: JDrawable): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'addLayer', '(Landroid/graphics/drawable/Drawable;)I', [AArg0]);
end;

procedure TJLayerDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJLayerDrawable.canApplyTheme: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canApplyTheme', '()Z', []);
end;

procedure TJLayerDrawable.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJLayerDrawable.findDrawableByLayerId(const AArg0: Integer): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('findDrawableByLayerId', '(I)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJLayerDrawable.findIndexByLayerId(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'findIndexByLayerId', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJLayerDrawable.getBottomPadding: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getBottomPadding', '()I', []);
end;

function TJLayerDrawable.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJLayerDrawable.getDrawable(const AArg0: Integer): JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getDrawable', '(I)Landroid/graphics/drawable/Drawable;', [AArg0]);
end;

function TJLayerDrawable.getEndPadding: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getEndPadding', '()I', []);
end;

procedure TJLayerDrawable.getHotspotBounds(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getHotspotBounds', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJLayerDrawable.getId(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getId', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getIntrinsicHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicHeight', '()I', []);
end;

function TJLayerDrawable.getIntrinsicWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicWidth', '()I', []);
end;

function TJLayerDrawable.getLayerGravity(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerGravity', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getLayerHeight(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerHeight', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getLayerInsetBottom(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerInsetBottom', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getLayerInsetEnd(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerInsetEnd', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getLayerInsetLeft(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerInsetLeft', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getLayerInsetRight(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerInsetRight', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getLayerInsetStart(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerInsetStart', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getLayerInsetTop(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerInsetTop', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getLayerWidth(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerWidth', '(I)I', [AArg0]);
end;

function TJLayerDrawable.getLeftPadding: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLeftPadding', '()I', []);
end;

function TJLayerDrawable.getNumberOfLayers: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNumberOfLayers', '()I', []);
end;

function TJLayerDrawable.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJLayerDrawable.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJLayerDrawable.getPadding(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getPadding', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJLayerDrawable.getPaddingMode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPaddingMode', '()I', []);
end;

function TJLayerDrawable.getRightPadding: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getRightPadding', '()I', []);
end;

function TJLayerDrawable.getStartPadding: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getStartPadding', '()I', []);
end;

function TJLayerDrawable.getTopPadding: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTopPadding', '()I', []);
end;

procedure TJLayerDrawable.invalidateDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

function TJLayerDrawable.isAutoMirrored: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAutoMirrored', '()Z', []);
end;

function TJLayerDrawable.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

procedure TJLayerDrawable.jumpToCurrentState;
begin
  JavaType.CallVoidMethod(ObjectID, 'jumpToCurrentState', '()V', []);
end;

function TJLayerDrawable.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJLayerDrawable.onLayoutDirectionChanged(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onLayoutDirectionChanged', '(I)Z', [AArg0]);
end;

procedure TJLayerDrawable.scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'scheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V', [AArg0, AArg1, AArg2]);
end;

procedure TJLayerDrawable.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJLayerDrawable.setAutoMirrored(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAutoMirrored', '(Z)V', [AArg0]);
end;

procedure TJLayerDrawable.setColorFilter(const AArg0: JColorFilter);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(Landroid/graphics/ColorFilter;)V', [AArg0]);
end;

procedure TJLayerDrawable.setDither(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDither', '(Z)V', [AArg0]);
end;

procedure TJLayerDrawable.setDrawable(const AArg0: Integer; const AArg1: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDrawable', '(ILandroid/graphics/drawable/Drawable;)V', [AArg0, AArg1]);
end;

function TJLayerDrawable.setDrawableByLayerId(const AArg0: Integer; const AArg1: JDrawable): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setDrawableByLayerId', '(ILandroid/graphics/drawable/Drawable;)Z', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setHotspot(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspot', '(FF)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspotBounds', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJLayerDrawable.setId(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setId', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setLayerGravity(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerGravity', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setLayerHeight(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerHeight', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setLayerInset(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerInset', '(IIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJLayerDrawable.setLayerInsetBottom(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerInsetBottom', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setLayerInsetEnd(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerInsetEnd', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setLayerInsetLeft(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerInsetLeft', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setLayerInsetRelative(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerInsetRelative', '(IIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJLayerDrawable.setLayerInsetRight(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerInsetRight', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setLayerInsetStart(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerInsetStart', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setLayerInsetTop(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerInsetTop', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setLayerSize(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerSize', '(III)V', [AArg0, AArg1, AArg2]);
end;

procedure TJLayerDrawable.setLayerWidth(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerWidth', '(II)V', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.setOpacity(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOpacity', '(I)V', [AArg0]);
end;

procedure TJLayerDrawable.setPadding(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPadding', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJLayerDrawable.setPaddingMode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPaddingMode', '(I)V', [AArg0]);
end;

procedure TJLayerDrawable.setPaddingRelative(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPaddingRelative', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJLayerDrawable.setTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJLayerDrawable.setTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

function TJLayerDrawable.setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setVisible', '(ZZ)Z', [AArg0, AArg1]);
end;

procedure TJLayerDrawable.unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
begin
  JavaType.CallVoidMethod(ObjectID, 'unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V', [AArg0, AArg1]);
end;

{ TJRippleDrawable }

class procedure TJRippleDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/res/ColorStateList;Landroid/graphics/drawable/Drawable;Landroid/graphics/drawable/Drawable;)V');
end;

class procedure TJRippleDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('canApplyTheme', '()Z');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getDirtyBounds', '()Landroid/graphics/Rect;');
  AddMethod('getHotspotBounds', '(Landroid/graphics/Rect;)V');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getRadius', '()I');
  AddMethod('invalidateSelf', '()V');
  AddMethod('isStateful', '()Z');
  AddMethod('jumpToCurrentState', '()V');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('setColor', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setDrawableByLayerId', '(ILandroid/graphics/drawable/Drawable;)Z');
  AddMethod('setHotspot', '(FF)V');
  AddMethod('setHotspotBounds', '(IIII)V');
  AddMethod('setPaddingMode', '(I)V');
  AddMethod('setRadius', '(I)V');
  AddMethod('setVisible', '(ZZ)Z');
end;

class procedure TJRippleDrawable.LoadFields;
begin
  inherited;
  AddStaticField('RADIUS_AUTO', 'I');
end;

class function TJRippleDrawable.Wrap(const AObjectID: JNIObject): JRippleDrawable;
begin
  Result := Wrap<TJRippleDrawable, JRippleDrawable>(AObjectId);
end;

class function TJRippleDrawable.Wrap(const AObject: IJNIObject): JRippleDrawable;
begin
  Result := Wrap<TJRippleDrawable, JRippleDrawable>(AObject);
end;

class function TJRippleDrawable.Create(const AArg0: JColorStateList; const AArg1: JDrawable; const AArg2: JDrawable): JRippleDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/res/ColorStateList;Landroid/graphics/drawable/Drawable;Landroid/graphics/drawable/Drawable;)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJRippleDrawable.RADIUS_AUTO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RADIUS_AUTO');
end;

procedure TJRippleDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJRippleDrawable.canApplyTheme: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canApplyTheme', '()Z', []);
end;

procedure TJRippleDrawable.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJRippleDrawable.getDirtyBounds: JRect;
begin
  Result := CallObjectMethod<TJRect, JRect>('getDirtyBounds', '()Landroid/graphics/Rect;', []);
end;

procedure TJRippleDrawable.getHotspotBounds(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getHotspotBounds', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJRippleDrawable.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJRippleDrawable.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJRippleDrawable.getRadius: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getRadius', '()I', []);
end;

procedure TJRippleDrawable.invalidateSelf;
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateSelf', '()V', []);
end;

function TJRippleDrawable.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

procedure TJRippleDrawable.jumpToCurrentState;
begin
  JavaType.CallVoidMethod(ObjectID, 'jumpToCurrentState', '()V', []);
end;

function TJRippleDrawable.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

procedure TJRippleDrawable.setColor(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColor', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

function TJRippleDrawable.setDrawableByLayerId(const AArg0: Integer; const AArg1: JDrawable): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setDrawableByLayerId', '(ILandroid/graphics/drawable/Drawable;)Z', [AArg0, AArg1]);
end;

procedure TJRippleDrawable.setHotspot(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspot', '(FF)V', [AArg0, AArg1]);
end;

procedure TJRippleDrawable.setHotspotBounds(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHotspotBounds', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJRippleDrawable.setPaddingMode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPaddingMode', '(I)V', [AArg0]);
end;

procedure TJRippleDrawable.setRadius(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRadius', '(I)V', [AArg0]);
end;

function TJRippleDrawable.setVisible(const AArg0: Boolean; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'setVisible', '(ZZ)Z', [AArg0, AArg1]);
end;

{ TJShapeDrawable }

class procedure TJShapeDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/graphics/drawable/shapes/Shape;)V');
end;

class procedure TJShapeDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getAlpha', '()I');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getIntrinsicHeight', '()I');
  AddMethod('getIntrinsicWidth', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getPadding', '(Landroid/graphics/Rect;)Z');
  AddMethod('getPaint', '()Landroid/graphics/Paint;');
  AddMethod('getShape', '()Landroid/graphics/drawable/shapes/Shape;');
  AddMethod('isStateful', '()Z');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)V');
  AddMethod('setDither', '(Z)V');
  AddMethod('setIntrinsicHeight', '(I)V');
  AddMethod('setIntrinsicWidth', '(I)V');
  AddMethod('setPadding', '(IIII)V');
  AddMethod('setPadding', '(Landroid/graphics/Rect;)V');
  AddMethod('setShape', '(Landroid/graphics/drawable/shapes/Shape;)V');
  AddMethod('setTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
end;

class function TJShapeDrawable.Wrap(const AObjectID: JNIObject): JShapeDrawable;
begin
  Result := Wrap<TJShapeDrawable, JShapeDrawable>(AObjectId);
end;

class function TJShapeDrawable.Wrap(const AObject: IJNIObject): JShapeDrawable;
begin
  Result := Wrap<TJShapeDrawable, JShapeDrawable>(AObject);
end;

class function TJShapeDrawable.Create: JShapeDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJShapeDrawable.Create(const AArg0: JShape): JShapeDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/drawable/shapes/Shape;)V', [AArg0]);
  Result := O;
end;

procedure TJShapeDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

procedure TJShapeDrawable.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJShapeDrawable.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJShapeDrawable.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJShapeDrawable.getIntrinsicHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicHeight', '()I', []);
end;

function TJShapeDrawable.getIntrinsicWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicWidth', '()I', []);
end;

function TJShapeDrawable.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

procedure TJShapeDrawable.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJShapeDrawable.getPadding(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getPadding', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJShapeDrawable.getPaint: JPaint;
begin
  Result := CallObjectMethod<TJPaint, JPaint>('getPaint', '()Landroid/graphics/Paint;', []);
end;

function TJShapeDrawable.getShape: JShape;
begin
  Result := CallObjectMethod<TJShape, JShape>('getShape', '()Landroid/graphics/drawable/shapes/Shape;', []);
end;

function TJShapeDrawable.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

function TJShapeDrawable.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

procedure TJShapeDrawable.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJShapeDrawable.setColorFilter(const AArg0: JColorFilter);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(Landroid/graphics/ColorFilter;)V', [AArg0]);
end;

procedure TJShapeDrawable.setDither(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDither', '(Z)V', [AArg0]);
end;

procedure TJShapeDrawable.setIntrinsicHeight(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setIntrinsicHeight', '(I)V', [AArg0]);
end;

procedure TJShapeDrawable.setIntrinsicWidth(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setIntrinsicWidth', '(I)V', [AArg0]);
end;

procedure TJShapeDrawable.setPadding(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPadding', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJShapeDrawable.setPadding(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPadding', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJShapeDrawable.setShape(const AArg0: JShape);
begin
  JavaType.CallVoidMethod(ObjectID, 'setShape', '(Landroid/graphics/drawable/shapes/Shape;)V', [AArg0]);
end;

procedure TJShapeDrawable.setTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJShapeDrawable.setTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

{ TJVectorDrawable }

class procedure TJVectorDrawable.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJVectorDrawable.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('applyTheme', '(Landroid/content/res/Resources$Theme;)V');
  AddMethod('canApplyTheme', '()Z');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getAlpha', '()I');
  AddMethod('getChangingConfigurations', '()I');
  AddMethod('getColorFilter', '()Landroid/graphics/ColorFilter;');
  AddMethod('getIntrinsicHeight', '()I');
  AddMethod('getIntrinsicWidth', '()I');
  AddMethod('getOpacity', '()I');
  AddMethod('isAutoMirrored', '()Z');
  AddMethod('isStateful', '()Z');
  AddMethod('mutate', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('setAlpha', '(I)V');
  AddMethod('setAutoMirrored', '(Z)V');
  AddMethod('setColorFilter', '(Landroid/graphics/ColorFilter;)V');
  AddMethod('setTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
end;

class function TJVectorDrawable.Wrap(const AObjectID: JNIObject): JVectorDrawable;
begin
  Result := Wrap<TJVectorDrawable, JVectorDrawable>(AObjectId);
end;

class function TJVectorDrawable.Wrap(const AObject: IJNIObject): JVectorDrawable;
begin
  Result := Wrap<TJVectorDrawable, JVectorDrawable>(AObject);
end;

class function TJVectorDrawable.Create: JVectorDrawable;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJVectorDrawable.applyTheme(const AArg0: JResources_Theme);
begin
  JavaType.CallVoidMethod(ObjectID, 'applyTheme', '(Landroid/content/res/Resources$Theme;)V', [AArg0]);
end;

function TJVectorDrawable.canApplyTheme: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canApplyTheme', '()Z', []);
end;

procedure TJVectorDrawable.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJVectorDrawable.getAlpha: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAlpha', '()I', []);
end;

function TJVectorDrawable.getChangingConfigurations: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChangingConfigurations', '()I', []);
end;

function TJVectorDrawable.getColorFilter: JColorFilter;
begin
  Result := CallObjectMethod<TJColorFilter, JColorFilter>('getColorFilter', '()Landroid/graphics/ColorFilter;', []);
end;

function TJVectorDrawable.getIntrinsicHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicHeight', '()I', []);
end;

function TJVectorDrawable.getIntrinsicWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIntrinsicWidth', '()I', []);
end;

function TJVectorDrawable.getOpacity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOpacity', '()I', []);
end;

function TJVectorDrawable.isAutoMirrored: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAutoMirrored', '()Z', []);
end;

function TJVectorDrawable.isStateful: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateful', '()Z', []);
end;

function TJVectorDrawable.mutate: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('mutate', '()Landroid/graphics/drawable/Drawable;', []);
end;

procedure TJVectorDrawable.setAlpha(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(I)V', [AArg0]);
end;

procedure TJVectorDrawable.setAutoMirrored(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAutoMirrored', '(Z)V', [AArg0]);
end;

procedure TJVectorDrawable.setColorFilter(const AArg0: JColorFilter);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorFilter', '(Landroid/graphics/ColorFilter;)V', [AArg0]);
end;

procedure TJVectorDrawable.setTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJVectorDrawable.setTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

{ TJShape }

class procedure TJShape.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJShape.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clone', '()Ljava/lang/Object;');
  AddMethod('draw', '(Landroid/graphics/Canvas;Landroid/graphics/Paint;)V');
  AddMethod('getHeight', '()F');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
  AddMethod('getWidth', '()F');
  AddMethod('hasAlpha', '()Z');
  AddMethod('resize', '(FF)V');
end;

class function TJShape.Wrap(const AObjectID: JNIObject): JShape;
begin
  Result := Wrap<TJShape, JShape>(AObjectId);
end;

class function TJShape.Wrap(const AObject: IJNIObject): JShape;
begin
  Result := Wrap<TJShape, JShape>(AObject);
end;

class function TJShape.Create: JShape;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJShape.clone: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('clone', '()Ljava/lang/Object;', []);
end;

procedure TJShape.draw(const AArg0: JCanvas; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;Landroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

function TJShape.getHeight: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHeight', '()F', []);
end;

procedure TJShape.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

function TJShape.getWidth: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getWidth', '()F', []);
end;

function TJShape.hasAlpha: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasAlpha', '()Z', []);
end;

procedure TJShape.resize(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'resize', '(FF)V', [AArg0, AArg1]);
end;

{ TJRectShape }

class procedure TJRectShape.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJRectShape.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clone', '()Landroid/graphics/drawable/shapes/RectShape;');
  AddMethod('draw', '(Landroid/graphics/Canvas;Landroid/graphics/Paint;)V');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
end;

class function TJRectShape.Wrap(const AObjectID: JNIObject): JRectShape;
begin
  Result := Wrap<TJRectShape, JRectShape>(AObjectId);
end;

class function TJRectShape.Wrap(const AObject: IJNIObject): JRectShape;
begin
  Result := Wrap<TJRectShape, JRectShape>(AObject);
end;

class function TJRectShape.Create: JRectShape;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJRectShape.clone: JRectShape;
begin
  Result := CallObjectMethod<TJRectShape, JRectShape>('clone', '()Landroid/graphics/drawable/shapes/RectShape;', []);
end;

procedure TJRectShape.draw(const AArg0: JCanvas; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;Landroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJRectShape.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

{ TJRoundRectShape }

class procedure TJRoundRectShape.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '([FLandroid/graphics/RectF;[F)V');
end;

class procedure TJRoundRectShape.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clone', '()Landroid/graphics/drawable/shapes/RoundRectShape;');
  AddMethod('draw', '(Landroid/graphics/Canvas;Landroid/graphics/Paint;)V');
  AddMethod('getOutline', '(Landroid/graphics/Outline;)V');
end;

class function TJRoundRectShape.Wrap(const AObjectID: JNIObject): JRoundRectShape;
begin
  Result := Wrap<TJRoundRectShape, JRoundRectShape>(AObjectId);
end;

class function TJRoundRectShape.Wrap(const AObject: IJNIObject): JRoundRectShape;
begin
  Result := Wrap<TJRoundRectShape, JRoundRectShape>(AObject);
end;

class function TJRoundRectShape.Create(const AArg0: IJavaArray<Single>; const AArg1: JRectF; const AArg2: IJavaArray<Single>): JRoundRectShape;
begin
  var O := CreateForWrap;
  O.NewObject('([FLandroid/graphics/RectF;[F)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

function TJRoundRectShape.clone: JRoundRectShape;
begin
  Result := CallObjectMethod<TJRoundRectShape, JRoundRectShape>('clone', '()Landroid/graphics/drawable/shapes/RoundRectShape;', []);
end;

procedure TJRoundRectShape.draw(const AArg0: JCanvas; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;Landroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJRoundRectShape.getOutline(const AArg0: JOutline);
begin
  JavaType.CallVoidMethod(ObjectID, 'getOutline', '(Landroid/graphics/Outline;)V', [AArg0]);
end;

{ TJDisplay }

class procedure TJDisplay.LoadConstructors;
begin
end;

class procedure TJDisplay.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getAppVsyncOffsetNanos', '()J');
  AddMethod('getCurrentSizeRange', '(Landroid/graphics/Point;Landroid/graphics/Point;)V');
  AddMethod('getDisplayId', '()I');
  AddMethod('getFlags', '()I');
  AddMethod('getHeight', '()I');
  AddMethod('getMetrics', '(Landroid/util/DisplayMetrics;)V');
  AddMethod('getMode', '()Landroid/view/Display$Mode;');
  AddMethod('getName', '()Ljava/lang/String;');
  AddMethod('getOrientation', '()I');
  AddMethod('getPixelFormat', '()I');
  AddMethod('getPresentationDeadlineNanos', '()J');
  AddMethod('getRealMetrics', '(Landroid/util/DisplayMetrics;)V');
  AddMethod('getRealSize', '(Landroid/graphics/Point;)V');
  AddMethod('getRectSize', '(Landroid/graphics/Rect;)V');
  AddMethod('getRefreshRate', '()F');
  AddMethod('getRotation', '()I');
  AddMethod('getSize', '(Landroid/graphics/Point;)V');
  AddMethod('getState', '()I');
  AddMethod('getSupportedModes', '()[Landroid/view/Display$Mode;');
  AddMethod('getSupportedRefreshRates', '()[F');
  AddMethod('getWidth', '()I');
  AddMethod('isHdr', '()Z');
  AddMethod('isValid', '()Z');
  AddMethod('isWideColorGamut', '()Z');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJDisplay.LoadFields;
begin
  inherited;
  AddStaticField('DEFAULT_DISPLAY', 'I');
  AddStaticField('FLAG_PRESENTATION', 'I');
  AddStaticField('FLAG_PRIVATE', 'I');
  AddStaticField('FLAG_ROUND', 'I');
  AddStaticField('FLAG_SECURE', 'I');
  AddStaticField('FLAG_SUPPORTS_PROTECTED_BUFFERS', 'I');
  AddStaticField('INVALID_DISPLAY', 'I');
  AddStaticField('STATE_DOZE', 'I');
  AddStaticField('STATE_DOZE_SUSPEND', 'I');
  AddStaticField('STATE_OFF', 'I');
  AddStaticField('STATE_ON', 'I');
  AddStaticField('STATE_ON_SUSPEND', 'I');
  AddStaticField('STATE_UNKNOWN', 'I');
  AddStaticField('STATE_VR', 'I');
end;

class function TJDisplay.Wrap(const AObjectID: JNIObject): JDisplay;
begin
  Result := Wrap<TJDisplay, JDisplay>(AObjectId);
end;

class function TJDisplay.Wrap(const AObject: IJNIObject): JDisplay;
begin
  Result := Wrap<TJDisplay, JDisplay>(AObject);
end;

class function TJDisplay.DEFAULT_DISPLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DEFAULT_DISPLAY');
end;

class function TJDisplay.FLAG_PRESENTATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_PRESENTATION');
end;

class function TJDisplay.FLAG_PRIVATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_PRIVATE');
end;

class function TJDisplay.FLAG_ROUND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ROUND');
end;

class function TJDisplay.FLAG_SECURE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SECURE');
end;

class function TJDisplay.FLAG_SUPPORTS_PROTECTED_BUFFERS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SUPPORTS_PROTECTED_BUFFERS');
end;

class function TJDisplay.INVALID_DISPLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INVALID_DISPLAY');
end;

class function TJDisplay.STATE_DOZE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STATE_DOZE');
end;

class function TJDisplay.STATE_DOZE_SUSPEND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STATE_DOZE_SUSPEND');
end;

class function TJDisplay.STATE_OFF: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STATE_OFF');
end;

class function TJDisplay.STATE_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STATE_ON');
end;

class function TJDisplay.STATE_ON_SUSPEND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STATE_ON_SUSPEND');
end;

class function TJDisplay.STATE_UNKNOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STATE_UNKNOWN');
end;

class function TJDisplay.STATE_VR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STATE_VR');
end;

function TJDisplay.getAppVsyncOffsetNanos: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getAppVsyncOffsetNanos', '()J', []);
end;

procedure TJDisplay.getCurrentSizeRange(const AArg0: JPoint; const AArg1: JPoint);
begin
  JavaType.CallVoidMethod(ObjectID, 'getCurrentSizeRange', '(Landroid/graphics/Point;Landroid/graphics/Point;)V', [AArg0, AArg1]);
end;

function TJDisplay.getDisplayId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDisplayId', '()I', []);
end;

function TJDisplay.getFlags: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getFlags', '()I', []);
end;

function TJDisplay.getHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getHeight', '()I', []);
end;

procedure TJDisplay.getMetrics(const AArg0: JDisplayMetrics);
begin
  JavaType.CallVoidMethod(ObjectID, 'getMetrics', '(Landroid/util/DisplayMetrics;)V', [AArg0]);
end;

function TJDisplay.getMode: JDisplay_Mode;
begin
  Result := CallObjectMethod<TJDisplay_Mode, JDisplay_Mode>('getMode', '()Landroid/view/Display$Mode;', []);
end;

function TJDisplay.getName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getName', '()Ljava/lang/String;', []);
end;

function TJDisplay.getOrientation: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOrientation', '()I', []);
end;

function TJDisplay.getPixelFormat: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPixelFormat', '()I', []);
end;

function TJDisplay.getPresentationDeadlineNanos: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getPresentationDeadlineNanos', '()J', []);
end;

procedure TJDisplay.getRealMetrics(const AArg0: JDisplayMetrics);
begin
  JavaType.CallVoidMethod(ObjectID, 'getRealMetrics', '(Landroid/util/DisplayMetrics;)V', [AArg0]);
end;

procedure TJDisplay.getRealSize(const AArg0: JPoint);
begin
  JavaType.CallVoidMethod(ObjectID, 'getRealSize', '(Landroid/graphics/Point;)V', [AArg0]);
end;

procedure TJDisplay.getRectSize(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getRectSize', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJDisplay.getRefreshRate: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRefreshRate', '()F', []);
end;

function TJDisplay.getRotation: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getRotation', '()I', []);
end;

procedure TJDisplay.getSize(const AArg0: JPoint);
begin
  JavaType.CallVoidMethod(ObjectID, 'getSize', '(Landroid/graphics/Point;)V', [AArg0]);
end;

function TJDisplay.getState: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getState', '()I', []);
end;

function TJDisplay.getSupportedModes: IJavaArray<JDisplay_Mode>;
begin
  Result := CallArrayMethod<TJDisplay_Mode, JDisplay_Mode>('getSupportedModes', '()[Landroid/view/Display$Mode;', []);
end;

function TJDisplay.getSupportedRefreshRates: IJavaArray<Single>;
begin
  Result := CallArrayMethod<Single>('getSupportedRefreshRates', '()[F', []);
end;

function TJDisplay.getWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWidth', '()I', []);
end;

function TJDisplay.isHdr: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isHdr', '()Z', []);
end;

function TJDisplay.isValid: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isValid', '()Z', []);
end;

function TJDisplay.isWideColorGamut: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isWideColorGamut', '()Z', []);
end;

function TJDisplay.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJDisplay_Mode }

class procedure TJDisplay_Mode.LoadConstructors;
begin
end;

class procedure TJDisplay_Mode.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('getModeId', '()I');
  AddMethod('getPhysicalHeight', '()I');
  AddMethod('getPhysicalWidth', '()I');
  AddMethod('getRefreshRate', '()F');
  AddMethod('hashCode', '()I');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJDisplay_Mode.Wrap(const AObjectID: JNIObject): JDisplay_Mode;
begin
  Result := Wrap<TJDisplay_Mode, JDisplay_Mode>(AObjectId);
end;

class function TJDisplay_Mode.Wrap(const AObject: IJNIObject): JDisplay_Mode;
begin
  Result := Wrap<TJDisplay_Mode, JDisplay_Mode>(AObject);
end;

function TJDisplay_Mode.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJDisplay_Mode.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJDisplay_Mode.getModeId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getModeId', '()I', []);
end;

function TJDisplay_Mode.getPhysicalHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPhysicalHeight', '()I', []);
end;

function TJDisplay_Mode.getPhysicalWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPhysicalWidth', '()I', []);
end;

function TJDisplay_Mode.getRefreshRate: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRefreshRate', '()F', []);
end;

function TJDisplay_Mode.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

function TJDisplay_Mode.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJDragAndDropPermissions }

class procedure TJDragAndDropPermissions.LoadConstructors;
begin
end;

class procedure TJDragAndDropPermissions.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('release', '()V');
end;

class function TJDragAndDropPermissions.Wrap(const AObjectID: JNIObject): JDragAndDropPermissions;
begin
  Result := Wrap<TJDragAndDropPermissions, JDragAndDropPermissions>(AObjectId);
end;

class function TJDragAndDropPermissions.Wrap(const AObject: IJNIObject): JDragAndDropPermissions;
begin
  Result := Wrap<TJDragAndDropPermissions, JDragAndDropPermissions>(AObject);
end;

function TJDragAndDropPermissions.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

procedure TJDragAndDropPermissions.release;
begin
  JavaType.CallVoidMethod(ObjectID, 'release', '()V', []);
end;

{ TJDragEvent }

class procedure TJDragEvent.LoadConstructors;
begin
end;

class procedure TJDragEvent.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('getAction', '()I');
  AddMethod('getClipData', '()Landroid/content/ClipData;');
  AddMethod('getClipDescription', '()Landroid/content/ClipDescription;');
  AddMethod('getLocalState', '()Ljava/lang/Object;');
  AddMethod('getResult', '()Z');
  AddMethod('getX', '()F');
  AddMethod('getY', '()F');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJDragEvent.LoadFields;
begin
  inherited;
  AddStaticField('ACTION_DRAG_ENDED', 'I');
  AddStaticField('ACTION_DRAG_ENTERED', 'I');
  AddStaticField('ACTION_DRAG_EXITED', 'I');
  AddStaticField('ACTION_DRAG_LOCATION', 'I');
  AddStaticField('ACTION_DRAG_STARTED', 'I');
  AddStaticField('ACTION_DROP', 'I');
end;

class function TJDragEvent.Wrap(const AObjectID: JNIObject): JDragEvent;
begin
  Result := Wrap<TJDragEvent, JDragEvent>(AObjectId);
end;

class function TJDragEvent.Wrap(const AObject: IJNIObject): JDragEvent;
begin
  Result := Wrap<TJDragEvent, JDragEvent>(AObject);
end;

class function TJDragEvent.ACTION_DRAG_ENDED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_DRAG_ENDED');
end;

class function TJDragEvent.ACTION_DRAG_ENTERED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_DRAG_ENTERED');
end;

class function TJDragEvent.ACTION_DRAG_EXITED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_DRAG_EXITED');
end;

class function TJDragEvent.ACTION_DRAG_LOCATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_DRAG_LOCATION');
end;

class function TJDragEvent.ACTION_DRAG_STARTED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_DRAG_STARTED');
end;

class function TJDragEvent.ACTION_DROP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_DROP');
end;

function TJDragEvent.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJDragEvent.getAction: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAction', '()I', []);
end;

function TJDragEvent.getClipData: JClipData;
begin
  Result := CallObjectMethod<TJClipData, JClipData>('getClipData', '()Landroid/content/ClipData;', []);
end;

function TJDragEvent.getClipDescription: JClipDescription;
begin
  Result := CallObjectMethod<TJClipDescription, JClipDescription>('getClipDescription', '()Landroid/content/ClipDescription;', []);
end;

function TJDragEvent.getLocalState: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getLocalState', '()Ljava/lang/Object;', []);
end;

function TJDragEvent.getResult: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getResult', '()Z', []);
end;

function TJDragEvent.getX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getX', '()F', []);
end;

function TJDragEvent.getY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getY', '()F', []);
end;

function TJDragEvent.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJGestureDetector }

class procedure TJGestureDetector.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;)V');
  AddMethod('<init>', '(Landroid/view/GestureDetector$OnGestureListener;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;Z)V');
end;

class procedure TJGestureDetector.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('isLongpressEnabled', '()Z');
  AddMethod('onGenericMotionEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onTouchEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('setContextClickListener', '(Landroid/view/GestureDetector$OnContextClickListener;)V');
  AddMethod('setIsLongpressEnabled', '(Z)V');
  AddMethod('setOnDoubleTapListener', '(Landroid/view/GestureDetector$OnDoubleTapListener;)V');
end;

class function TJGestureDetector.Wrap(const AObjectID: JNIObject): JGestureDetector;
begin
  Result := Wrap<TJGestureDetector, JGestureDetector>(AObjectId);
end;

class function TJGestureDetector.Wrap(const AObject: IJNIObject): JGestureDetector;
begin
  Result := Wrap<TJGestureDetector, JGestureDetector>(AObject);
end;

class function TJGestureDetector.Create(const AArg0: JGestureDetector_OnGestureListener; const AArg1: JHandler): JGestureDetector;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJGestureDetector.Create(const AArg0: JGestureDetector_OnGestureListener): JGestureDetector;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/view/GestureDetector$OnGestureListener;)V', [AArg0]);
  Result := O;
end;

class function TJGestureDetector.Create(const AArg0: JContext; const AArg1: JGestureDetector_OnGestureListener): JGestureDetector;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJGestureDetector.Create(const AArg0: JContext; const AArg1: JGestureDetector_OnGestureListener; const AArg2: JHandler): JGestureDetector;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJGestureDetector.Create(const AArg0: JContext; const AArg1: JGestureDetector_OnGestureListener; const AArg2: JHandler; const AArg3: Boolean): JGestureDetector;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/view/GestureDetector$OnGestureListener;Landroid/os/Handler;Z)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

function TJGestureDetector.isLongpressEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLongpressEnabled', '()Z', []);
end;

function TJGestureDetector.onGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onGenericMotionEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJGestureDetector.onTouchEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onTouchEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJGestureDetector.setContextClickListener(const AArg0: JGestureDetector_OnContextClickListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContextClickListener', '(Landroid/view/GestureDetector$OnContextClickListener;)V', [AArg0]);
end;

procedure TJGestureDetector.setIsLongpressEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setIsLongpressEnabled', '(Z)V', [AArg0]);
end;

procedure TJGestureDetector.setOnDoubleTapListener(const AArg0: JGestureDetector_OnDoubleTapListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOnDoubleTapListener', '(Landroid/view/GestureDetector$OnDoubleTapListener;)V', [AArg0]);
end;

{ TJGestureDetector_OnContextClickListener }

class procedure TJGestureDetector_OnContextClickListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onContextClick', '(Landroid/view/MotionEvent;)Z');
end;

class function TJGestureDetector_OnContextClickListener.Wrap(const AObjectID: JNIObject): JGestureDetector_OnContextClickListener;
begin
  Result := Wrap<TJGestureDetector_OnContextClickListener, JGestureDetector_OnContextClickListener>(AObjectId);
end;

class function TJGestureDetector_OnContextClickListener.Wrap(const AObject: IJNIObject): JGestureDetector_OnContextClickListener;
begin
  Result := Wrap<TJGestureDetector_OnContextClickListener, JGestureDetector_OnContextClickListener>(AObject);
end;

function TJGestureDetector_OnContextClickListener.onContextClick(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onContextClick', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

{ TJGestureDetector_OnDoubleTapListener }

class procedure TJGestureDetector_OnDoubleTapListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onDoubleTap', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onDoubleTapEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onSingleTapConfirmed', '(Landroid/view/MotionEvent;)Z');
end;

class function TJGestureDetector_OnDoubleTapListener.Wrap(const AObjectID: JNIObject): JGestureDetector_OnDoubleTapListener;
begin
  Result := Wrap<TJGestureDetector_OnDoubleTapListener, JGestureDetector_OnDoubleTapListener>(AObjectId);
end;

class function TJGestureDetector_OnDoubleTapListener.Wrap(const AObject: IJNIObject): JGestureDetector_OnDoubleTapListener;
begin
  Result := Wrap<TJGestureDetector_OnDoubleTapListener, JGestureDetector_OnDoubleTapListener>(AObject);
end;

function TJGestureDetector_OnDoubleTapListener.onDoubleTap(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onDoubleTap', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJGestureDetector_OnDoubleTapListener.onDoubleTapEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onDoubleTapEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJGestureDetector_OnDoubleTapListener.onSingleTapConfirmed(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onSingleTapConfirmed', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

{ TJGestureDetector_OnGestureListener }

class procedure TJGestureDetector_OnGestureListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onDown', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onFling', '(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z');
  AddMethod('onLongPress', '(Landroid/view/MotionEvent;)V');
  AddMethod('onScroll', '(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z');
  AddMethod('onShowPress', '(Landroid/view/MotionEvent;)V');
  AddMethod('onSingleTapUp', '(Landroid/view/MotionEvent;)Z');
end;

class function TJGestureDetector_OnGestureListener.Wrap(const AObjectID: JNIObject): JGestureDetector_OnGestureListener;
begin
  Result := Wrap<TJGestureDetector_OnGestureListener, JGestureDetector_OnGestureListener>(AObjectId);
end;

class function TJGestureDetector_OnGestureListener.Wrap(const AObject: IJNIObject): JGestureDetector_OnGestureListener;
begin
  Result := Wrap<TJGestureDetector_OnGestureListener, JGestureDetector_OnGestureListener>(AObject);
end;

function TJGestureDetector_OnGestureListener.onDown(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onDown', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJGestureDetector_OnGestureListener.onFling(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onFling', '(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJGestureDetector_OnGestureListener.onLongPress(const AArg0: JMotionEvent);
begin
  JavaType.CallVoidMethod(ObjectID, 'onLongPress', '(Landroid/view/MotionEvent;)V', [AArg0]);
end;

function TJGestureDetector_OnGestureListener.onScroll(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onScroll', '(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJGestureDetector_OnGestureListener.onShowPress(const AArg0: JMotionEvent);
begin
  JavaType.CallVoidMethod(ObjectID, 'onShowPress', '(Landroid/view/MotionEvent;)V', [AArg0]);
end;

function TJGestureDetector_OnGestureListener.onSingleTapUp(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onSingleTapUp', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

{ TJGestureDetector_SimpleOnGestureListener }

class procedure TJGestureDetector_SimpleOnGestureListener.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJGestureDetector_SimpleOnGestureListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onContextClick', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onDoubleTap', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onDoubleTapEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onDown', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onFling', '(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z');
  AddMethod('onLongPress', '(Landroid/view/MotionEvent;)V');
  AddMethod('onScroll', '(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z');
  AddMethod('onShowPress', '(Landroid/view/MotionEvent;)V');
  AddMethod('onSingleTapConfirmed', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onSingleTapUp', '(Landroid/view/MotionEvent;)Z');
end;

class function TJGestureDetector_SimpleOnGestureListener.Wrap(const AObjectID: JNIObject): JGestureDetector_SimpleOnGestureListener;
begin
  Result := Wrap<TJGestureDetector_SimpleOnGestureListener, JGestureDetector_SimpleOnGestureListener>(AObjectId);
end;

class function TJGestureDetector_SimpleOnGestureListener.Wrap(const AObject: IJNIObject): JGestureDetector_SimpleOnGestureListener;
begin
  Result := Wrap<TJGestureDetector_SimpleOnGestureListener, JGestureDetector_SimpleOnGestureListener>(AObject);
end;

class function TJGestureDetector_SimpleOnGestureListener.Create: JGestureDetector_SimpleOnGestureListener;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJGestureDetector_SimpleOnGestureListener.onContextClick(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onContextClick', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJGestureDetector_SimpleOnGestureListener.onDoubleTap(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onDoubleTap', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJGestureDetector_SimpleOnGestureListener.onDoubleTapEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onDoubleTapEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJGestureDetector_SimpleOnGestureListener.onDown(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onDown', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJGestureDetector_SimpleOnGestureListener.onFling(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onFling', '(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJGestureDetector_SimpleOnGestureListener.onLongPress(const AArg0: JMotionEvent);
begin
  JavaType.CallVoidMethod(ObjectID, 'onLongPress', '(Landroid/view/MotionEvent;)V', [AArg0]);
end;

function TJGestureDetector_SimpleOnGestureListener.onScroll(const AArg0: JMotionEvent; const AArg1: JMotionEvent; const AArg2: Single; const AArg3: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onScroll', '(Landroid/view/MotionEvent;Landroid/view/MotionEvent;FF)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJGestureDetector_SimpleOnGestureListener.onShowPress(const AArg0: JMotionEvent);
begin
  JavaType.CallVoidMethod(ObjectID, 'onShowPress', '(Landroid/view/MotionEvent;)V', [AArg0]);
end;

function TJGestureDetector_SimpleOnGestureListener.onSingleTapConfirmed(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onSingleTapConfirmed', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJGestureDetector_SimpleOnGestureListener.onSingleTapUp(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onSingleTapUp', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

{ TJGravity }

class procedure TJGravity.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJGravity.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('apply', '(IIILandroid/graphics/Rect;IILandroid/graphics/Rect;I)V');
  AddStaticMethod('apply', '(IIILandroid/graphics/Rect;IILandroid/graphics/Rect;)V');
  AddStaticMethod('apply', '(IIILandroid/graphics/Rect;Landroid/graphics/Rect;)V');
  AddStaticMethod('apply', '(IIILandroid/graphics/Rect;Landroid/graphics/Rect;I)V');
  AddStaticMethod('applyDisplay', '(ILandroid/graphics/Rect;Landroid/graphics/Rect;I)V');
  AddStaticMethod('applyDisplay', '(ILandroid/graphics/Rect;Landroid/graphics/Rect;)V');
  AddStaticMethod('getAbsoluteGravity', '(II)I');
  AddStaticMethod('isHorizontal', '(I)Z');
  AddStaticMethod('isVertical', '(I)Z');
end;

class procedure TJGravity.LoadFields;
begin
  inherited;
  AddStaticField('AXIS_CLIP', 'I');
  AddStaticField('AXIS_PULL_AFTER', 'I');
  AddStaticField('AXIS_PULL_BEFORE', 'I');
  AddStaticField('AXIS_SPECIFIED', 'I');
  AddStaticField('AXIS_X_SHIFT', 'I');
  AddStaticField('AXIS_Y_SHIFT', 'I');
  AddStaticField('BOTTOM', 'I');
  AddStaticField('CENTER', 'I');
  AddStaticField('CENTER_HORIZONTAL', 'I');
  AddStaticField('CENTER_VERTICAL', 'I');
  AddStaticField('CLIP_HORIZONTAL', 'I');
  AddStaticField('CLIP_VERTICAL', 'I');
  AddStaticField('DISPLAY_CLIP_HORIZONTAL', 'I');
  AddStaticField('DISPLAY_CLIP_VERTICAL', 'I');
  AddStaticField('END', 'I');
  AddStaticField('FILL', 'I');
  AddStaticField('FILL_HORIZONTAL', 'I');
  AddStaticField('FILL_VERTICAL', 'I');
  AddStaticField('HORIZONTAL_GRAVITY_MASK', 'I');
  AddStaticField('LEFT', 'I');
  AddStaticField('NO_GRAVITY', 'I');
  AddStaticField('RELATIVE_HORIZONTAL_GRAVITY_MASK', 'I');
  AddStaticField('RELATIVE_LAYOUT_DIRECTION', 'I');
  AddStaticField('RIGHT', 'I');
  AddStaticField('START', 'I');
  AddStaticField('TOP', 'I');
  AddStaticField('VERTICAL_GRAVITY_MASK', 'I');
end;

class function TJGravity.Wrap(const AObjectID: JNIObject): JGravity;
begin
  Result := Wrap<TJGravity, JGravity>(AObjectId);
end;

class function TJGravity.Wrap(const AObject: IJNIObject): JGravity;
begin
  Result := Wrap<TJGravity, JGravity>(AObject);
end;

class function TJGravity.Create: JGravity;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJGravity.AXIS_CLIP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_CLIP');
end;

class function TJGravity.AXIS_PULL_AFTER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_PULL_AFTER');
end;

class function TJGravity.AXIS_PULL_BEFORE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_PULL_BEFORE');
end;

class function TJGravity.AXIS_SPECIFIED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_SPECIFIED');
end;

class function TJGravity.AXIS_X_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_X_SHIFT');
end;

class function TJGravity.AXIS_Y_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_Y_SHIFT');
end;

class function TJGravity.BOTTOM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BOTTOM');
end;

class function TJGravity.CENTER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CENTER');
end;

class function TJGravity.CENTER_HORIZONTAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CENTER_HORIZONTAL');
end;

class function TJGravity.CENTER_VERTICAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CENTER_VERTICAL');
end;

class function TJGravity.CLIP_HORIZONTAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CLIP_HORIZONTAL');
end;

class function TJGravity.CLIP_VERTICAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CLIP_VERTICAL');
end;

class function TJGravity.DISPLAY_CLIP_HORIZONTAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DISPLAY_CLIP_HORIZONTAL');
end;

class function TJGravity.DISPLAY_CLIP_VERTICAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DISPLAY_CLIP_VERTICAL');
end;

class function TJGravity.&END: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('END');
end;

class function TJGravity.FILL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL');
end;

class function TJGravity.FILL_HORIZONTAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_HORIZONTAL');
end;

class function TJGravity.FILL_VERTICAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_VERTICAL');
end;

class function TJGravity.HORIZONTAL_GRAVITY_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HORIZONTAL_GRAVITY_MASK');
end;

class function TJGravity.LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LEFT');
end;

class function TJGravity.NO_GRAVITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NO_GRAVITY');
end;

class function TJGravity.RELATIVE_HORIZONTAL_GRAVITY_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RELATIVE_HORIZONTAL_GRAVITY_MASK');
end;

class function TJGravity.RELATIVE_LAYOUT_DIRECTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RELATIVE_LAYOUT_DIRECTION');
end;

class function TJGravity.RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RIGHT');
end;

class function TJGravity.START: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('START');
end;

class function TJGravity.TOP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOP');
end;

class function TJGravity.VERTICAL_GRAVITY_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VERTICAL_GRAVITY_MASK');
end;

class procedure TJGravity.apply(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect; const AArg4: Integer; const AArg5: Integer; const AArg6: JRect; const AArg7: Integer);
begin
  StaticJavaType[Self].CallStaticVoidMethod('apply', '(IIILandroid/graphics/Rect;IILandroid/graphics/Rect;I)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
end;

class procedure TJGravity.apply(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect; const AArg4: Integer; const AArg5: Integer; const AArg6: JRect);
begin
  StaticJavaType[Self].CallStaticVoidMethod('apply', '(IIILandroid/graphics/Rect;IILandroid/graphics/Rect;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

class procedure TJGravity.apply(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect; const AArg4: JRect);
begin
  StaticJavaType[Self].CallStaticVoidMethod('apply', '(IIILandroid/graphics/Rect;Landroid/graphics/Rect;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

class procedure TJGravity.apply(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JRect; const AArg4: JRect; const AArg5: Integer);
begin
  StaticJavaType[Self].CallStaticVoidMethod('apply', '(IIILandroid/graphics/Rect;Landroid/graphics/Rect;I)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

class procedure TJGravity.applyDisplay(const AArg0: Integer; const AArg1: JRect; const AArg2: JRect; const AArg3: Integer);
begin
  StaticJavaType[Self].CallStaticVoidMethod('applyDisplay', '(ILandroid/graphics/Rect;Landroid/graphics/Rect;I)V', [AArg0, AArg1, AArg2, AArg3]);
end;

class procedure TJGravity.applyDisplay(const AArg0: Integer; const AArg1: JRect; const AArg2: JRect);
begin
  StaticJavaType[Self].CallStaticVoidMethod('applyDisplay', '(ILandroid/graphics/Rect;Landroid/graphics/Rect;)V', [AArg0, AArg1, AArg2]);
end;

class function TJGravity.getAbsoluteGravity(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getAbsoluteGravity', '(II)I', [AArg0, AArg1]);
end;

class function TJGravity.isHorizontal(const AArg0: Integer): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('isHorizontal', '(I)Z', [AArg0]);
end;

class function TJGravity.isVertical(const AArg0: Integer): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('isVertical', '(I)Z', [AArg0]);
end;

{ TJInputDevice }

class procedure TJInputDevice.LoadConstructors;
begin
end;

class procedure TJInputDevice.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('getControllerNumber', '()I');
  AddMethod('getDescriptor', '()Ljava/lang/String;');
  AddStaticMethod('getDevice', '(I)Landroid/view/InputDevice;');
  AddStaticMethod('getDeviceIds', '()[I');
  AddMethod('getId', '()I');
  AddMethod('getKeyboardType', '()I');
  AddMethod('getMotionRanges', '()Ljava/util/List;');
  AddMethod('getName', '()Ljava/lang/String;');
  AddMethod('getProductId', '()I');
  AddMethod('getSources', '()I');
  AddMethod('getVendorId', '()I');
  AddMethod('hasKeys', '([I)[Z');
  AddMethod('hasMicrophone', '()Z');
  AddMethod('isEnabled', '()Z');
  AddMethod('isVirtual', '()Z');
  AddMethod('supportsSource', '(I)Z');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJInputDevice.LoadFields;
begin
  inherited;
  AddStaticField('KEYBOARD_TYPE_ALPHABETIC', 'I');
  AddStaticField('KEYBOARD_TYPE_NONE', 'I');
  AddStaticField('KEYBOARD_TYPE_NON_ALPHABETIC', 'I');
  AddStaticField('MOTION_RANGE_ORIENTATION', 'I');
  AddStaticField('MOTION_RANGE_PRESSURE', 'I');
  AddStaticField('MOTION_RANGE_SIZE', 'I');
  AddStaticField('MOTION_RANGE_TOOL_MAJOR', 'I');
  AddStaticField('MOTION_RANGE_TOOL_MINOR', 'I');
  AddStaticField('MOTION_RANGE_TOUCH_MAJOR', 'I');
  AddStaticField('MOTION_RANGE_TOUCH_MINOR', 'I');
  AddStaticField('MOTION_RANGE_X', 'I');
  AddStaticField('MOTION_RANGE_Y', 'I');
  AddStaticField('SOURCE_ANY', 'I');
  AddStaticField('SOURCE_BLUETOOTH_STYLUS', 'I');
  AddStaticField('SOURCE_CLASS_BUTTON', 'I');
  AddStaticField('SOURCE_CLASS_JOYSTICK', 'I');
  AddStaticField('SOURCE_CLASS_MASK', 'I');
  AddStaticField('SOURCE_CLASS_NONE', 'I');
  AddStaticField('SOURCE_CLASS_POINTER', 'I');
  AddStaticField('SOURCE_CLASS_POSITION', 'I');
  AddStaticField('SOURCE_CLASS_TRACKBALL', 'I');
  AddStaticField('SOURCE_DPAD', 'I');
  AddStaticField('SOURCE_GAMEPAD', 'I');
  AddStaticField('SOURCE_HDMI', 'I');
  AddStaticField('SOURCE_JOYSTICK', 'I');
  AddStaticField('SOURCE_KEYBOARD', 'I');
  AddStaticField('SOURCE_MOUSE', 'I');
  AddStaticField('SOURCE_MOUSE_RELATIVE', 'I');
  AddStaticField('SOURCE_ROTARY_ENCODER', 'I');
  AddStaticField('SOURCE_STYLUS', 'I');
  AddStaticField('SOURCE_TOUCHPAD', 'I');
  AddStaticField('SOURCE_TOUCHSCREEN', 'I');
  AddStaticField('SOURCE_TOUCH_NAVIGATION', 'I');
  AddStaticField('SOURCE_TRACKBALL', 'I');
  AddStaticField('SOURCE_UNKNOWN', 'I');
end;

class function TJInputDevice.Wrap(const AObjectID: JNIObject): JInputDevice;
begin
  Result := Wrap<TJInputDevice, JInputDevice>(AObjectId);
end;

class function TJInputDevice.Wrap(const AObject: IJNIObject): JInputDevice;
begin
  Result := Wrap<TJInputDevice, JInputDevice>(AObject);
end;

class function TJInputDevice.KEYBOARD_TYPE_ALPHABETIC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARD_TYPE_ALPHABETIC');
end;

class function TJInputDevice.KEYBOARD_TYPE_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARD_TYPE_NONE');
end;

class function TJInputDevice.KEYBOARD_TYPE_NON_ALPHABETIC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYBOARD_TYPE_NON_ALPHABETIC');
end;

class function TJInputDevice.MOTION_RANGE_ORIENTATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MOTION_RANGE_ORIENTATION');
end;

class function TJInputDevice.MOTION_RANGE_PRESSURE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MOTION_RANGE_PRESSURE');
end;

class function TJInputDevice.MOTION_RANGE_SIZE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MOTION_RANGE_SIZE');
end;

class function TJInputDevice.MOTION_RANGE_TOOL_MAJOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MOTION_RANGE_TOOL_MAJOR');
end;

class function TJInputDevice.MOTION_RANGE_TOOL_MINOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MOTION_RANGE_TOOL_MINOR');
end;

class function TJInputDevice.MOTION_RANGE_TOUCH_MAJOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MOTION_RANGE_TOUCH_MAJOR');
end;

class function TJInputDevice.MOTION_RANGE_TOUCH_MINOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MOTION_RANGE_TOUCH_MINOR');
end;

class function TJInputDevice.MOTION_RANGE_X: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MOTION_RANGE_X');
end;

class function TJInputDevice.MOTION_RANGE_Y: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MOTION_RANGE_Y');
end;

class function TJInputDevice.SOURCE_ANY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_ANY');
end;

class function TJInputDevice.SOURCE_BLUETOOTH_STYLUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_BLUETOOTH_STYLUS');
end;

class function TJInputDevice.SOURCE_CLASS_BUTTON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_CLASS_BUTTON');
end;

class function TJInputDevice.SOURCE_CLASS_JOYSTICK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_CLASS_JOYSTICK');
end;

class function TJInputDevice.SOURCE_CLASS_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_CLASS_MASK');
end;

class function TJInputDevice.SOURCE_CLASS_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_CLASS_NONE');
end;

class function TJInputDevice.SOURCE_CLASS_POINTER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_CLASS_POINTER');
end;

class function TJInputDevice.SOURCE_CLASS_POSITION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_CLASS_POSITION');
end;

class function TJInputDevice.SOURCE_CLASS_TRACKBALL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_CLASS_TRACKBALL');
end;

class function TJInputDevice.SOURCE_DPAD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_DPAD');
end;

class function TJInputDevice.SOURCE_GAMEPAD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_GAMEPAD');
end;

class function TJInputDevice.SOURCE_HDMI: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_HDMI');
end;

class function TJInputDevice.SOURCE_JOYSTICK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_JOYSTICK');
end;

class function TJInputDevice.SOURCE_KEYBOARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_KEYBOARD');
end;

class function TJInputDevice.SOURCE_MOUSE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_MOUSE');
end;

class function TJInputDevice.SOURCE_MOUSE_RELATIVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_MOUSE_RELATIVE');
end;

class function TJInputDevice.SOURCE_ROTARY_ENCODER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_ROTARY_ENCODER');
end;

class function TJInputDevice.SOURCE_STYLUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_STYLUS');
end;

class function TJInputDevice.SOURCE_TOUCHPAD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_TOUCHPAD');
end;

class function TJInputDevice.SOURCE_TOUCHSCREEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_TOUCHSCREEN');
end;

class function TJInputDevice.SOURCE_TOUCH_NAVIGATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_TOUCH_NAVIGATION');
end;

class function TJInputDevice.SOURCE_TRACKBALL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_TRACKBALL');
end;

class function TJInputDevice.SOURCE_UNKNOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOURCE_UNKNOWN');
end;

function TJInputDevice.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJInputDevice.getControllerNumber: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getControllerNumber', '()I', []);
end;

function TJInputDevice.getDescriptor: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getDescriptor', '()Ljava/lang/String;', []);
end;

class function TJInputDevice.getDevice(const AArg0: Integer): JInputDevice;
begin
  Result := CallStaticObjectMethod<TJInputDevice, JInputDevice>('getDevice', '(I)Landroid/view/InputDevice;', [AArg0]);
end;

class function TJInputDevice.getDeviceIds: IJavaArray<Integer>;
begin
  Result := CallStaticArrayMethod<Integer>('getDeviceIds', '()[I', []);
end;

function TJInputDevice.getId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getId', '()I', []);
end;

function TJInputDevice.getKeyboardType: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getKeyboardType', '()I', []);
end;

function TJInputDevice.getMotionRanges: JList;
begin
  Result := CallObjectMethod<TJList, JList>('getMotionRanges', '()Ljava/util/List;', []);
end;

function TJInputDevice.getName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getName', '()Ljava/lang/String;', []);
end;

function TJInputDevice.getProductId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getProductId', '()I', []);
end;

function TJInputDevice.getSources: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getSources', '()I', []);
end;

function TJInputDevice.getVendorId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getVendorId', '()I', []);
end;

function TJInputDevice.hasKeys(const AArg0: IJavaArray<Integer>): IJavaArray<Boolean>;
begin
  Result := CallArrayMethod<Boolean>('hasKeys', '([I)[Z', [AArg0]);
end;

function TJInputDevice.hasMicrophone: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasMicrophone', '()Z', []);
end;

function TJInputDevice.isEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEnabled', '()Z', []);
end;

function TJInputDevice.isVirtual: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVirtual', '()Z', []);
end;

function TJInputDevice.supportsSource(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'supportsSource', '(I)Z', [AArg0]);
end;

function TJInputDevice.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJInputEvent }

class procedure TJInputEvent.LoadConstructors;
begin
end;

class procedure TJInputEvent.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('getDevice', '()Landroid/view/InputDevice;');
  AddMethod('getDeviceId', '()I');
  AddMethod('getEventTime', '()J');
  AddMethod('getSource', '()I');
  AddMethod('isFromSource', '(I)Z');
end;

class function TJInputEvent.Wrap(const AObjectID: JNIObject): JInputEvent;
begin
  Result := Wrap<TJInputEvent, JInputEvent>(AObjectId);
end;

class function TJInputEvent.Wrap(const AObject: IJNIObject): JInputEvent;
begin
  Result := Wrap<TJInputEvent, JInputEvent>(AObject);
end;

function TJInputEvent.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJInputEvent.getDevice: JInputDevice;
begin
  Result := CallObjectMethod<TJInputDevice, JInputDevice>('getDevice', '()Landroid/view/InputDevice;', []);
end;

function TJInputEvent.getDeviceId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDeviceId', '()I', []);
end;

function TJInputEvent.getEventTime: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getEventTime', '()J', []);
end;

function TJInputEvent.getSource: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getSource', '()I', []);
end;

function TJInputEvent.isFromSource(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFromSource', '(I)Z', [AArg0]);
end;

{ TJKeyEvent }

class procedure TJKeyEvent.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(II)V');
  AddMethod('<init>', '(JJIII)V');
  AddMethod('<init>', '(JJIIII)V');
  AddMethod('<init>', '(JJIIIIII)V');
  AddMethod('<init>', '(JJIIIIIII)V');
  AddMethod('<init>', '(JJIIIIIIII)V');
  AddMethod('<init>', '(JLjava/lang/String;II)V');
  AddMethod('<init>', '(Landroid/view/KeyEvent;)V');
  AddMethod('<init>', '(Landroid/view/KeyEvent;JI)V');
end;

class procedure TJKeyEvent.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('changeAction', '(Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;');
  AddStaticMethod('changeFlags', '(Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;');
  AddStaticMethod('changeTimeRepeat', '(Landroid/view/KeyEvent;JII)Landroid/view/KeyEvent;');
  AddStaticMethod('changeTimeRepeat', '(Landroid/view/KeyEvent;JI)Landroid/view/KeyEvent;');
  AddMethod('getAction', '()I');
  AddMethod('getCharacters', '()Ljava/lang/String;');
  AddStaticMethod('getDeadChar', '(II)I');
  AddMethod('getDeviceId', '()I');
  AddMethod('getDisplayLabel', '()C');
  AddMethod('getDownTime', '()J');
  AddMethod('getEventTime', '()J');
  AddMethod('getFlags', '()I');
  AddMethod('getKeyCode', '()I');
  AddMethod('getMatch', '([C)C');
  AddMethod('getMatch', '([CI)C');
  AddStaticMethod('getMaxKeyCode', '()I');
  AddMethod('getMetaState', '()I');
  AddStaticMethod('getModifierMetaStateMask', '()I');
  AddMethod('getModifiers', '()I');
  AddMethod('getNumber', '()C');
  AddMethod('getRepeatCount', '()I');
  AddMethod('getScanCode', '()I');
  AddMethod('getSource', '()I');
  AddMethod('getUnicodeChar', '(I)I');
  AddMethod('getUnicodeChar', '()I');
  AddMethod('hasModifiers', '(I)Z');
  AddMethod('hasNoModifiers', '()Z');
  AddMethod('isAltPressed', '()Z');
  AddMethod('isCanceled', '()Z');
  AddMethod('isCapsLockOn', '()Z');
  AddMethod('isCtrlPressed', '()Z');
  AddMethod('isFunctionPressed', '()Z');
  AddStaticMethod('isGamepadButton', '(I)Z');
  AddMethod('isLongPress', '()Z');
  AddMethod('isMetaPressed', '()Z');
  AddStaticMethod('isModifierKey', '(I)Z');
  AddMethod('isNumLockOn', '()Z');
  AddMethod('isPrintingKey', '()Z');
  AddMethod('isScrollLockOn', '()Z');
  AddMethod('isShiftPressed', '()Z');
  AddMethod('isSymPressed', '()Z');
  AddMethod('isSystem', '()Z');
  AddMethod('isTracking', '()Z');
  AddStaticMethod('keyCodeFromString', '(Ljava/lang/String;)I');
  AddStaticMethod('keyCodeToString', '(I)Ljava/lang/String;');
  AddStaticMethod('metaStateHasModifiers', '(II)Z');
  AddStaticMethod('metaStateHasNoModifiers', '(I)Z');
  AddStaticMethod('normalizeMetaState', '(I)I');
  AddMethod('setSource', '(I)V');
  AddMethod('startTracking', '()V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJKeyEvent.LoadFields;
begin
  inherited;
  AddStaticField('ACTION_DOWN', 'I');
  AddStaticField('ACTION_MULTIPLE', 'I');
  AddStaticField('ACTION_UP', 'I');
  AddStaticField('FLAG_CANCELED', 'I');
  AddStaticField('FLAG_CANCELED_LONG_PRESS', 'I');
  AddStaticField('FLAG_EDITOR_ACTION', 'I');
  AddStaticField('FLAG_FALLBACK', 'I');
  AddStaticField('FLAG_FROM_SYSTEM', 'I');
  AddStaticField('FLAG_KEEP_TOUCH_MODE', 'I');
  AddStaticField('FLAG_LONG_PRESS', 'I');
  AddStaticField('FLAG_SOFT_KEYBOARD', 'I');
  AddStaticField('FLAG_TRACKING', 'I');
  AddStaticField('FLAG_VIRTUAL_HARD_KEY', 'I');
  AddStaticField('FLAG_WOKE_HERE', 'I');
  AddStaticField('KEYCODE_0', 'I');
  AddStaticField('KEYCODE_1', 'I');
  AddStaticField('KEYCODE_11', 'I');
  AddStaticField('KEYCODE_12', 'I');
  AddStaticField('KEYCODE_2', 'I');
  AddStaticField('KEYCODE_3', 'I');
  AddStaticField('KEYCODE_3D_MODE', 'I');
  AddStaticField('KEYCODE_4', 'I');
  AddStaticField('KEYCODE_5', 'I');
  AddStaticField('KEYCODE_6', 'I');
  AddStaticField('KEYCODE_7', 'I');
  AddStaticField('KEYCODE_8', 'I');
  AddStaticField('KEYCODE_9', 'I');
  AddStaticField('KEYCODE_A', 'I');
  AddStaticField('KEYCODE_ALL_APPS', 'I');
  AddStaticField('KEYCODE_ALT_LEFT', 'I');
  AddStaticField('KEYCODE_ALT_RIGHT', 'I');
  AddStaticField('KEYCODE_APOSTROPHE', 'I');
  AddStaticField('KEYCODE_APP_SWITCH', 'I');
  AddStaticField('KEYCODE_ASSIST', 'I');
  AddStaticField('KEYCODE_AT', 'I');
  AddStaticField('KEYCODE_AVR_INPUT', 'I');
  AddStaticField('KEYCODE_AVR_POWER', 'I');
  AddStaticField('KEYCODE_B', 'I');
  AddStaticField('KEYCODE_BACK', 'I');
  AddStaticField('KEYCODE_BACKSLASH', 'I');
  AddStaticField('KEYCODE_BOOKMARK', 'I');
  AddStaticField('KEYCODE_BREAK', 'I');
  AddStaticField('KEYCODE_BRIGHTNESS_DOWN', 'I');
  AddStaticField('KEYCODE_BRIGHTNESS_UP', 'I');
  AddStaticField('KEYCODE_BUTTON_1', 'I');
  AddStaticField('KEYCODE_BUTTON_10', 'I');
  AddStaticField('KEYCODE_BUTTON_11', 'I');
  AddStaticField('KEYCODE_BUTTON_12', 'I');
  AddStaticField('KEYCODE_BUTTON_13', 'I');
  AddStaticField('KEYCODE_BUTTON_14', 'I');
  AddStaticField('KEYCODE_BUTTON_15', 'I');
  AddStaticField('KEYCODE_BUTTON_16', 'I');
  AddStaticField('KEYCODE_BUTTON_2', 'I');
  AddStaticField('KEYCODE_BUTTON_3', 'I');
  AddStaticField('KEYCODE_BUTTON_4', 'I');
  AddStaticField('KEYCODE_BUTTON_5', 'I');
  AddStaticField('KEYCODE_BUTTON_6', 'I');
  AddStaticField('KEYCODE_BUTTON_7', 'I');
  AddStaticField('KEYCODE_BUTTON_8', 'I');
  AddStaticField('KEYCODE_BUTTON_9', 'I');
  AddStaticField('KEYCODE_BUTTON_A', 'I');
  AddStaticField('KEYCODE_BUTTON_B', 'I');
  AddStaticField('KEYCODE_BUTTON_C', 'I');
  AddStaticField('KEYCODE_BUTTON_L1', 'I');
  AddStaticField('KEYCODE_BUTTON_L2', 'I');
  AddStaticField('KEYCODE_BUTTON_MODE', 'I');
  AddStaticField('KEYCODE_BUTTON_R1', 'I');
  AddStaticField('KEYCODE_BUTTON_R2', 'I');
  AddStaticField('KEYCODE_BUTTON_SELECT', 'I');
  AddStaticField('KEYCODE_BUTTON_START', 'I');
  AddStaticField('KEYCODE_BUTTON_THUMBL', 'I');
  AddStaticField('KEYCODE_BUTTON_THUMBR', 'I');
  AddStaticField('KEYCODE_BUTTON_X', 'I');
  AddStaticField('KEYCODE_BUTTON_Y', 'I');
  AddStaticField('KEYCODE_BUTTON_Z', 'I');
  AddStaticField('KEYCODE_C', 'I');
  AddStaticField('KEYCODE_CALCULATOR', 'I');
  AddStaticField('KEYCODE_CALENDAR', 'I');
  AddStaticField('KEYCODE_CALL', 'I');
  AddStaticField('KEYCODE_CAMERA', 'I');
  AddStaticField('KEYCODE_CAPS_LOCK', 'I');
  AddStaticField('KEYCODE_CAPTIONS', 'I');
  AddStaticField('KEYCODE_CHANNEL_DOWN', 'I');
  AddStaticField('KEYCODE_CHANNEL_UP', 'I');
  AddStaticField('KEYCODE_CLEAR', 'I');
  AddStaticField('KEYCODE_COMMA', 'I');
  AddStaticField('KEYCODE_CONTACTS', 'I');
  AddStaticField('KEYCODE_COPY', 'I');
  AddStaticField('KEYCODE_CTRL_LEFT', 'I');
  AddStaticField('KEYCODE_CTRL_RIGHT', 'I');
  AddStaticField('KEYCODE_CUT', 'I');
  AddStaticField('KEYCODE_D', 'I');
  AddStaticField('KEYCODE_DEL', 'I');
  AddStaticField('KEYCODE_DPAD_CENTER', 'I');
  AddStaticField('KEYCODE_DPAD_DOWN', 'I');
  AddStaticField('KEYCODE_DPAD_DOWN_LEFT', 'I');
  AddStaticField('KEYCODE_DPAD_DOWN_RIGHT', 'I');
  AddStaticField('KEYCODE_DPAD_LEFT', 'I');
  AddStaticField('KEYCODE_DPAD_RIGHT', 'I');
  AddStaticField('KEYCODE_DPAD_UP', 'I');
  AddStaticField('KEYCODE_DPAD_UP_LEFT', 'I');
  AddStaticField('KEYCODE_DPAD_UP_RIGHT', 'I');
  AddStaticField('KEYCODE_DVR', 'I');
  AddStaticField('KEYCODE_E', 'I');
  AddStaticField('KEYCODE_EISU', 'I');
  AddStaticField('KEYCODE_ENDCALL', 'I');
  AddStaticField('KEYCODE_ENTER', 'I');
  AddStaticField('KEYCODE_ENVELOPE', 'I');
  AddStaticField('KEYCODE_EQUALS', 'I');
  AddStaticField('KEYCODE_ESCAPE', 'I');
  AddStaticField('KEYCODE_EXPLORER', 'I');
  AddStaticField('KEYCODE_F', 'I');
  AddStaticField('KEYCODE_F1', 'I');
  AddStaticField('KEYCODE_F10', 'I');
  AddStaticField('KEYCODE_F11', 'I');
  AddStaticField('KEYCODE_F12', 'I');
  AddStaticField('KEYCODE_F2', 'I');
  AddStaticField('KEYCODE_F3', 'I');
  AddStaticField('KEYCODE_F4', 'I');
  AddStaticField('KEYCODE_F5', 'I');
  AddStaticField('KEYCODE_F6', 'I');
  AddStaticField('KEYCODE_F7', 'I');
  AddStaticField('KEYCODE_F8', 'I');
  AddStaticField('KEYCODE_F9', 'I');
  AddStaticField('KEYCODE_FOCUS', 'I');
  AddStaticField('KEYCODE_FORWARD', 'I');
  AddStaticField('KEYCODE_FORWARD_DEL', 'I');
  AddStaticField('KEYCODE_FUNCTION', 'I');
  AddStaticField('KEYCODE_G', 'I');
  AddStaticField('KEYCODE_GRAVE', 'I');
  AddStaticField('KEYCODE_GUIDE', 'I');
  AddStaticField('KEYCODE_H', 'I');
  AddStaticField('KEYCODE_HEADSETHOOK', 'I');
  AddStaticField('KEYCODE_HELP', 'I');
  AddStaticField('KEYCODE_HENKAN', 'I');
  AddStaticField('KEYCODE_HOME', 'I');
  AddStaticField('KEYCODE_I', 'I');
  AddStaticField('KEYCODE_INFO', 'I');
  AddStaticField('KEYCODE_INSERT', 'I');
  AddStaticField('KEYCODE_J', 'I');
  AddStaticField('KEYCODE_K', 'I');
  AddStaticField('KEYCODE_KANA', 'I');
  AddStaticField('KEYCODE_KATAKANA_HIRAGANA', 'I');
  AddStaticField('KEYCODE_L', 'I');
  AddStaticField('KEYCODE_LANGUAGE_SWITCH', 'I');
  AddStaticField('KEYCODE_LAST_CHANNEL', 'I');
  AddStaticField('KEYCODE_LEFT_BRACKET', 'I');
  AddStaticField('KEYCODE_M', 'I');
  AddStaticField('KEYCODE_MANNER_MODE', 'I');
  AddStaticField('KEYCODE_MEDIA_AUDIO_TRACK', 'I');
  AddStaticField('KEYCODE_MEDIA_CLOSE', 'I');
  AddStaticField('KEYCODE_MEDIA_EJECT', 'I');
  AddStaticField('KEYCODE_MEDIA_FAST_FORWARD', 'I');
  AddStaticField('KEYCODE_MEDIA_NEXT', 'I');
  AddStaticField('KEYCODE_MEDIA_PAUSE', 'I');
  AddStaticField('KEYCODE_MEDIA_PLAY', 'I');
  AddStaticField('KEYCODE_MEDIA_PLAY_PAUSE', 'I');
  AddStaticField('KEYCODE_MEDIA_PREVIOUS', 'I');
  AddStaticField('KEYCODE_MEDIA_RECORD', 'I');
  AddStaticField('KEYCODE_MEDIA_REWIND', 'I');
  AddStaticField('KEYCODE_MEDIA_SKIP_BACKWARD', 'I');
  AddStaticField('KEYCODE_MEDIA_SKIP_FORWARD', 'I');
  AddStaticField('KEYCODE_MEDIA_STEP_BACKWARD', 'I');
  AddStaticField('KEYCODE_MEDIA_STEP_FORWARD', 'I');
  AddStaticField('KEYCODE_MEDIA_STOP', 'I');
  AddStaticField('KEYCODE_MEDIA_TOP_MENU', 'I');
  AddStaticField('KEYCODE_MENU', 'I');
  AddStaticField('KEYCODE_META_LEFT', 'I');
  AddStaticField('KEYCODE_META_RIGHT', 'I');
  AddStaticField('KEYCODE_MINUS', 'I');
  AddStaticField('KEYCODE_MOVE_END', 'I');
  AddStaticField('KEYCODE_MOVE_HOME', 'I');
  AddStaticField('KEYCODE_MUHENKAN', 'I');
  AddStaticField('KEYCODE_MUSIC', 'I');
  AddStaticField('KEYCODE_MUTE', 'I');
  AddStaticField('KEYCODE_N', 'I');
  AddStaticField('KEYCODE_NAVIGATE_IN', 'I');
  AddStaticField('KEYCODE_NAVIGATE_NEXT', 'I');
  AddStaticField('KEYCODE_NAVIGATE_OUT', 'I');
  AddStaticField('KEYCODE_NAVIGATE_PREVIOUS', 'I');
  AddStaticField('KEYCODE_NOTIFICATION', 'I');
  AddStaticField('KEYCODE_NUM', 'I');
  AddStaticField('KEYCODE_NUMPAD_0', 'I');
  AddStaticField('KEYCODE_NUMPAD_1', 'I');
  AddStaticField('KEYCODE_NUMPAD_2', 'I');
  AddStaticField('KEYCODE_NUMPAD_3', 'I');
  AddStaticField('KEYCODE_NUMPAD_4', 'I');
  AddStaticField('KEYCODE_NUMPAD_5', 'I');
  AddStaticField('KEYCODE_NUMPAD_6', 'I');
  AddStaticField('KEYCODE_NUMPAD_7', 'I');
  AddStaticField('KEYCODE_NUMPAD_8', 'I');
  AddStaticField('KEYCODE_NUMPAD_9', 'I');
  AddStaticField('KEYCODE_NUMPAD_ADD', 'I');
  AddStaticField('KEYCODE_NUMPAD_COMMA', 'I');
  AddStaticField('KEYCODE_NUMPAD_DIVIDE', 'I');
  AddStaticField('KEYCODE_NUMPAD_DOT', 'I');
  AddStaticField('KEYCODE_NUMPAD_ENTER', 'I');
  AddStaticField('KEYCODE_NUMPAD_EQUALS', 'I');
  AddStaticField('KEYCODE_NUMPAD_LEFT_PAREN', 'I');
  AddStaticField('KEYCODE_NUMPAD_MULTIPLY', 'I');
  AddStaticField('KEYCODE_NUMPAD_RIGHT_PAREN', 'I');
  AddStaticField('KEYCODE_NUMPAD_SUBTRACT', 'I');
  AddStaticField('KEYCODE_NUM_LOCK', 'I');
  AddStaticField('KEYCODE_O', 'I');
  AddStaticField('KEYCODE_P', 'I');
  AddStaticField('KEYCODE_PAGE_DOWN', 'I');
  AddStaticField('KEYCODE_PAGE_UP', 'I');
  AddStaticField('KEYCODE_PAIRING', 'I');
  AddStaticField('KEYCODE_PASTE', 'I');
  AddStaticField('KEYCODE_PERIOD', 'I');
  AddStaticField('KEYCODE_PICTSYMBOLS', 'I');
  AddStaticField('KEYCODE_PLUS', 'I');
  AddStaticField('KEYCODE_POUND', 'I');
  AddStaticField('KEYCODE_POWER', 'I');
  AddStaticField('KEYCODE_PROG_BLUE', 'I');
  AddStaticField('KEYCODE_PROG_GREEN', 'I');
  AddStaticField('KEYCODE_PROG_RED', 'I');
  AddStaticField('KEYCODE_PROG_YELLOW', 'I');
  AddStaticField('KEYCODE_Q', 'I');
  AddStaticField('KEYCODE_R', 'I');
  AddStaticField('KEYCODE_REFRESH', 'I');
  AddStaticField('KEYCODE_RIGHT_BRACKET', 'I');
  AddStaticField('KEYCODE_RO', 'I');
  AddStaticField('KEYCODE_S', 'I');
  AddStaticField('KEYCODE_SCROLL_LOCK', 'I');
  AddStaticField('KEYCODE_SEARCH', 'I');
  AddStaticField('KEYCODE_SEMICOLON', 'I');
  AddStaticField('KEYCODE_SETTINGS', 'I');
  AddStaticField('KEYCODE_SHIFT_LEFT', 'I');
  AddStaticField('KEYCODE_SHIFT_RIGHT', 'I');
  AddStaticField('KEYCODE_SLASH', 'I');
  AddStaticField('KEYCODE_SLEEP', 'I');
  AddStaticField('KEYCODE_SOFT_LEFT', 'I');
  AddStaticField('KEYCODE_SOFT_RIGHT', 'I');
  AddStaticField('KEYCODE_SOFT_SLEEP', 'I');
  AddStaticField('KEYCODE_SPACE', 'I');
  AddStaticField('KEYCODE_STAR', 'I');
  AddStaticField('KEYCODE_STB_INPUT', 'I');
  AddStaticField('KEYCODE_STB_POWER', 'I');
  AddStaticField('KEYCODE_STEM_1', 'I');
  AddStaticField('KEYCODE_STEM_2', 'I');
  AddStaticField('KEYCODE_STEM_3', 'I');
  AddStaticField('KEYCODE_STEM_PRIMARY', 'I');
  AddStaticField('KEYCODE_SWITCH_CHARSET', 'I');
  AddStaticField('KEYCODE_SYM', 'I');
  AddStaticField('KEYCODE_SYSRQ', 'I');
  AddStaticField('KEYCODE_SYSTEM_NAVIGATION_DOWN', 'I');
  AddStaticField('KEYCODE_SYSTEM_NAVIGATION_LEFT', 'I');
  AddStaticField('KEYCODE_SYSTEM_NAVIGATION_RIGHT', 'I');
  AddStaticField('KEYCODE_SYSTEM_NAVIGATION_UP', 'I');
  AddStaticField('KEYCODE_T', 'I');
  AddStaticField('KEYCODE_TAB', 'I');
  AddStaticField('KEYCODE_TV', 'I');
  AddStaticField('KEYCODE_TV_ANTENNA_CABLE', 'I');
  AddStaticField('KEYCODE_TV_AUDIO_DESCRIPTION', 'I');
  AddStaticField('KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN', 'I');
  AddStaticField('KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP', 'I');
  AddStaticField('KEYCODE_TV_CONTENTS_MENU', 'I');
  AddStaticField('KEYCODE_TV_DATA_SERVICE', 'I');
  AddStaticField('KEYCODE_TV_INPUT', 'I');
  AddStaticField('KEYCODE_TV_INPUT_COMPONENT_1', 'I');
  AddStaticField('KEYCODE_TV_INPUT_COMPONENT_2', 'I');
  AddStaticField('KEYCODE_TV_INPUT_COMPOSITE_1', 'I');
  AddStaticField('KEYCODE_TV_INPUT_COMPOSITE_2', 'I');
  AddStaticField('KEYCODE_TV_INPUT_HDMI_1', 'I');
  AddStaticField('KEYCODE_TV_INPUT_HDMI_2', 'I');
  AddStaticField('KEYCODE_TV_INPUT_HDMI_3', 'I');
  AddStaticField('KEYCODE_TV_INPUT_HDMI_4', 'I');
  AddStaticField('KEYCODE_TV_INPUT_VGA_1', 'I');
  AddStaticField('KEYCODE_TV_MEDIA_CONTEXT_MENU', 'I');
  AddStaticField('KEYCODE_TV_NETWORK', 'I');
  AddStaticField('KEYCODE_TV_NUMBER_ENTRY', 'I');
  AddStaticField('KEYCODE_TV_POWER', 'I');
  AddStaticField('KEYCODE_TV_RADIO_SERVICE', 'I');
  AddStaticField('KEYCODE_TV_SATELLITE', 'I');
  AddStaticField('KEYCODE_TV_SATELLITE_BS', 'I');
  AddStaticField('KEYCODE_TV_SATELLITE_CS', 'I');
  AddStaticField('KEYCODE_TV_SATELLITE_SERVICE', 'I');
  AddStaticField('KEYCODE_TV_TELETEXT', 'I');
  AddStaticField('KEYCODE_TV_TERRESTRIAL_ANALOG', 'I');
  AddStaticField('KEYCODE_TV_TERRESTRIAL_DIGITAL', 'I');
  AddStaticField('KEYCODE_TV_TIMER_PROGRAMMING', 'I');
  AddStaticField('KEYCODE_TV_ZOOM_MODE', 'I');
  AddStaticField('KEYCODE_U', 'I');
  AddStaticField('KEYCODE_UNKNOWN', 'I');
  AddStaticField('KEYCODE_V', 'I');
  AddStaticField('KEYCODE_VOICE_ASSIST', 'I');
  AddStaticField('KEYCODE_VOLUME_DOWN', 'I');
  AddStaticField('KEYCODE_VOLUME_MUTE', 'I');
  AddStaticField('KEYCODE_VOLUME_UP', 'I');
  AddStaticField('KEYCODE_W', 'I');
  AddStaticField('KEYCODE_WAKEUP', 'I');
  AddStaticField('KEYCODE_WINDOW', 'I');
  AddStaticField('KEYCODE_X', 'I');
  AddStaticField('KEYCODE_Y', 'I');
  AddStaticField('KEYCODE_YEN', 'I');
  AddStaticField('KEYCODE_Z', 'I');
  AddStaticField('KEYCODE_ZENKAKU_HANKAKU', 'I');
  AddStaticField('KEYCODE_ZOOM_IN', 'I');
  AddStaticField('KEYCODE_ZOOM_OUT', 'I');
  AddStaticField('MAX_KEYCODE', 'I');
  AddStaticField('META_ALT_LEFT_ON', 'I');
  AddStaticField('META_ALT_MASK', 'I');
  AddStaticField('META_ALT_ON', 'I');
  AddStaticField('META_ALT_RIGHT_ON', 'I');
  AddStaticField('META_CAPS_LOCK_ON', 'I');
  AddStaticField('META_CTRL_LEFT_ON', 'I');
  AddStaticField('META_CTRL_MASK', 'I');
  AddStaticField('META_CTRL_ON', 'I');
  AddStaticField('META_CTRL_RIGHT_ON', 'I');
  AddStaticField('META_FUNCTION_ON', 'I');
  AddStaticField('META_META_LEFT_ON', 'I');
  AddStaticField('META_META_MASK', 'I');
  AddStaticField('META_META_ON', 'I');
  AddStaticField('META_META_RIGHT_ON', 'I');
  AddStaticField('META_NUM_LOCK_ON', 'I');
  AddStaticField('META_SCROLL_LOCK_ON', 'I');
  AddStaticField('META_SHIFT_LEFT_ON', 'I');
  AddStaticField('META_SHIFT_MASK', 'I');
  AddStaticField('META_SHIFT_ON', 'I');
  AddStaticField('META_SHIFT_RIGHT_ON', 'I');
  AddStaticField('META_SYM_ON', 'I');
end;

class function TJKeyEvent.Wrap(const AObjectID: JNIObject): JKeyEvent;
begin
  Result := Wrap<TJKeyEvent, JKeyEvent>(AObjectId);
end;

class function TJKeyEvent.Wrap(const AObject: IJNIObject): JKeyEvent;
begin
  Result := Wrap<TJKeyEvent, JKeyEvent>(AObject);
end;

class function TJKeyEvent.Create(const AArg0: Integer; const AArg1: Integer): JKeyEvent;
begin
  var O := CreateForWrap;
  O.NewObject('(II)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJKeyEvent.Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer): JKeyEvent;
begin
  var O := CreateForWrap;
  O.NewObject('(JJIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
  Result := O;
end;

class function TJKeyEvent.Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer): JKeyEvent;
begin
  var O := CreateForWrap;
  O.NewObject('(JJIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
  Result := O;
end;

class function TJKeyEvent.Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Integer): JKeyEvent;
begin
  var O := CreateForWrap;
  O.NewObject('(JJIIIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
  Result := O;
end;

class function TJKeyEvent.Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Integer; const AArg8: Integer): JKeyEvent;
begin
  var O := CreateForWrap;
  O.NewObject('(JJIIIIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7, AArg8]);
  Result := O;
end;

class function TJKeyEvent.Create(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Integer; const AArg8: Integer; const AArg9: Integer): JKeyEvent;
begin
  var O := CreateForWrap;
  O.NewObject('(JJIIIIIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7, AArg8, AArg9]);
  Result := O;
end;

class function TJKeyEvent.Create(const AArg0: Int64; const AArg1: JString; const AArg2: Integer; const AArg3: Integer): JKeyEvent;
begin
  var O := CreateForWrap;
  O.NewObject('(JLjava/lang/String;II)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

class function TJKeyEvent.Create(const AArg0: JKeyEvent): JKeyEvent;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/view/KeyEvent;)V', [AArg0]);
  Result := O;
end;

class function TJKeyEvent.Create(const AArg0: JKeyEvent; const AArg1: Int64; const AArg2: Integer): JKeyEvent;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/view/KeyEvent;JI)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJKeyEvent.ACTION_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_DOWN');
end;

class function TJKeyEvent.ACTION_MULTIPLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_MULTIPLE');
end;

class function TJKeyEvent.ACTION_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_UP');
end;

class function TJKeyEvent.FLAG_CANCELED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_CANCELED');
end;

class function TJKeyEvent.FLAG_CANCELED_LONG_PRESS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_CANCELED_LONG_PRESS');
end;

class function TJKeyEvent.FLAG_EDITOR_ACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_EDITOR_ACTION');
end;

class function TJKeyEvent.FLAG_FALLBACK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_FALLBACK');
end;

class function TJKeyEvent.FLAG_FROM_SYSTEM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_FROM_SYSTEM');
end;

class function TJKeyEvent.FLAG_KEEP_TOUCH_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_KEEP_TOUCH_MODE');
end;

class function TJKeyEvent.FLAG_LONG_PRESS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_LONG_PRESS');
end;

class function TJKeyEvent.FLAG_SOFT_KEYBOARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SOFT_KEYBOARD');
end;

class function TJKeyEvent.FLAG_TRACKING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_TRACKING');
end;

class function TJKeyEvent.FLAG_VIRTUAL_HARD_KEY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_VIRTUAL_HARD_KEY');
end;

class function TJKeyEvent.FLAG_WOKE_HERE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_WOKE_HERE');
end;

class function TJKeyEvent.KEYCODE_0: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_0');
end;

class function TJKeyEvent.KEYCODE_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_1');
end;

class function TJKeyEvent.KEYCODE_11: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_11');
end;

class function TJKeyEvent.KEYCODE_12: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_12');
end;

class function TJKeyEvent.KEYCODE_2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_2');
end;

class function TJKeyEvent.KEYCODE_3: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_3');
end;

class function TJKeyEvent.KEYCODE_3D_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_3D_MODE');
end;

class function TJKeyEvent.KEYCODE_4: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_4');
end;

class function TJKeyEvent.KEYCODE_5: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_5');
end;

class function TJKeyEvent.KEYCODE_6: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_6');
end;

class function TJKeyEvent.KEYCODE_7: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_7');
end;

class function TJKeyEvent.KEYCODE_8: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_8');
end;

class function TJKeyEvent.KEYCODE_9: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_9');
end;

class function TJKeyEvent.KEYCODE_A: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_A');
end;

class function TJKeyEvent.KEYCODE_ALL_APPS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ALL_APPS');
end;

class function TJKeyEvent.KEYCODE_ALT_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ALT_LEFT');
end;

class function TJKeyEvent.KEYCODE_ALT_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ALT_RIGHT');
end;

class function TJKeyEvent.KEYCODE_APOSTROPHE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_APOSTROPHE');
end;

class function TJKeyEvent.KEYCODE_APP_SWITCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_APP_SWITCH');
end;

class function TJKeyEvent.KEYCODE_ASSIST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ASSIST');
end;

class function TJKeyEvent.KEYCODE_AT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_AT');
end;

class function TJKeyEvent.KEYCODE_AVR_INPUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_AVR_INPUT');
end;

class function TJKeyEvent.KEYCODE_AVR_POWER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_AVR_POWER');
end;

class function TJKeyEvent.KEYCODE_B: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_B');
end;

class function TJKeyEvent.KEYCODE_BACK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BACK');
end;

class function TJKeyEvent.KEYCODE_BACKSLASH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BACKSLASH');
end;

class function TJKeyEvent.KEYCODE_BOOKMARK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BOOKMARK');
end;

class function TJKeyEvent.KEYCODE_BREAK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BREAK');
end;

class function TJKeyEvent.KEYCODE_BRIGHTNESS_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BRIGHTNESS_DOWN');
end;

class function TJKeyEvent.KEYCODE_BRIGHTNESS_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BRIGHTNESS_UP');
end;

class function TJKeyEvent.KEYCODE_BUTTON_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_1');
end;

class function TJKeyEvent.KEYCODE_BUTTON_10: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_10');
end;

class function TJKeyEvent.KEYCODE_BUTTON_11: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_11');
end;

class function TJKeyEvent.KEYCODE_BUTTON_12: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_12');
end;

class function TJKeyEvent.KEYCODE_BUTTON_13: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_13');
end;

class function TJKeyEvent.KEYCODE_BUTTON_14: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_14');
end;

class function TJKeyEvent.KEYCODE_BUTTON_15: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_15');
end;

class function TJKeyEvent.KEYCODE_BUTTON_16: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_16');
end;

class function TJKeyEvent.KEYCODE_BUTTON_2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_2');
end;

class function TJKeyEvent.KEYCODE_BUTTON_3: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_3');
end;

class function TJKeyEvent.KEYCODE_BUTTON_4: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_4');
end;

class function TJKeyEvent.KEYCODE_BUTTON_5: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_5');
end;

class function TJKeyEvent.KEYCODE_BUTTON_6: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_6');
end;

class function TJKeyEvent.KEYCODE_BUTTON_7: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_7');
end;

class function TJKeyEvent.KEYCODE_BUTTON_8: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_8');
end;

class function TJKeyEvent.KEYCODE_BUTTON_9: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_9');
end;

class function TJKeyEvent.KEYCODE_BUTTON_A: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_A');
end;

class function TJKeyEvent.KEYCODE_BUTTON_B: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_B');
end;

class function TJKeyEvent.KEYCODE_BUTTON_C: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_C');
end;

class function TJKeyEvent.KEYCODE_BUTTON_L1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_L1');
end;

class function TJKeyEvent.KEYCODE_BUTTON_L2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_L2');
end;

class function TJKeyEvent.KEYCODE_BUTTON_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_MODE');
end;

class function TJKeyEvent.KEYCODE_BUTTON_R1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_R1');
end;

class function TJKeyEvent.KEYCODE_BUTTON_R2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_R2');
end;

class function TJKeyEvent.KEYCODE_BUTTON_SELECT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_SELECT');
end;

class function TJKeyEvent.KEYCODE_BUTTON_START: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_START');
end;

class function TJKeyEvent.KEYCODE_BUTTON_THUMBL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_THUMBL');
end;

class function TJKeyEvent.KEYCODE_BUTTON_THUMBR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_THUMBR');
end;

class function TJKeyEvent.KEYCODE_BUTTON_X: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_X');
end;

class function TJKeyEvent.KEYCODE_BUTTON_Y: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_Y');
end;

class function TJKeyEvent.KEYCODE_BUTTON_Z: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_BUTTON_Z');
end;

class function TJKeyEvent.KEYCODE_C: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_C');
end;

class function TJKeyEvent.KEYCODE_CALCULATOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CALCULATOR');
end;

class function TJKeyEvent.KEYCODE_CALENDAR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CALENDAR');
end;

class function TJKeyEvent.KEYCODE_CALL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CALL');
end;

class function TJKeyEvent.KEYCODE_CAMERA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CAMERA');
end;

class function TJKeyEvent.KEYCODE_CAPS_LOCK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CAPS_LOCK');
end;

class function TJKeyEvent.KEYCODE_CAPTIONS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CAPTIONS');
end;

class function TJKeyEvent.KEYCODE_CHANNEL_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CHANNEL_DOWN');
end;

class function TJKeyEvent.KEYCODE_CHANNEL_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CHANNEL_UP');
end;

class function TJKeyEvent.KEYCODE_CLEAR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CLEAR');
end;

class function TJKeyEvent.KEYCODE_COMMA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_COMMA');
end;

class function TJKeyEvent.KEYCODE_CONTACTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CONTACTS');
end;

class function TJKeyEvent.KEYCODE_COPY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_COPY');
end;

class function TJKeyEvent.KEYCODE_CTRL_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CTRL_LEFT');
end;

class function TJKeyEvent.KEYCODE_CTRL_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CTRL_RIGHT');
end;

class function TJKeyEvent.KEYCODE_CUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_CUT');
end;

class function TJKeyEvent.KEYCODE_D: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_D');
end;

class function TJKeyEvent.KEYCODE_DEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DEL');
end;

class function TJKeyEvent.KEYCODE_DPAD_CENTER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DPAD_CENTER');
end;

class function TJKeyEvent.KEYCODE_DPAD_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DPAD_DOWN');
end;

class function TJKeyEvent.KEYCODE_DPAD_DOWN_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DPAD_DOWN_LEFT');
end;

class function TJKeyEvent.KEYCODE_DPAD_DOWN_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DPAD_DOWN_RIGHT');
end;

class function TJKeyEvent.KEYCODE_DPAD_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DPAD_LEFT');
end;

class function TJKeyEvent.KEYCODE_DPAD_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DPAD_RIGHT');
end;

class function TJKeyEvent.KEYCODE_DPAD_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DPAD_UP');
end;

class function TJKeyEvent.KEYCODE_DPAD_UP_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DPAD_UP_LEFT');
end;

class function TJKeyEvent.KEYCODE_DPAD_UP_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DPAD_UP_RIGHT');
end;

class function TJKeyEvent.KEYCODE_DVR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_DVR');
end;

class function TJKeyEvent.KEYCODE_E: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_E');
end;

class function TJKeyEvent.KEYCODE_EISU: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_EISU');
end;

class function TJKeyEvent.KEYCODE_ENDCALL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ENDCALL');
end;

class function TJKeyEvent.KEYCODE_ENTER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ENTER');
end;

class function TJKeyEvent.KEYCODE_ENVELOPE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ENVELOPE');
end;

class function TJKeyEvent.KEYCODE_EQUALS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_EQUALS');
end;

class function TJKeyEvent.KEYCODE_ESCAPE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ESCAPE');
end;

class function TJKeyEvent.KEYCODE_EXPLORER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_EXPLORER');
end;

class function TJKeyEvent.KEYCODE_F: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F');
end;

class function TJKeyEvent.KEYCODE_F1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F1');
end;

class function TJKeyEvent.KEYCODE_F10: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F10');
end;

class function TJKeyEvent.KEYCODE_F11: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F11');
end;

class function TJKeyEvent.KEYCODE_F12: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F12');
end;

class function TJKeyEvent.KEYCODE_F2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F2');
end;

class function TJKeyEvent.KEYCODE_F3: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F3');
end;

class function TJKeyEvent.KEYCODE_F4: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F4');
end;

class function TJKeyEvent.KEYCODE_F5: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F5');
end;

class function TJKeyEvent.KEYCODE_F6: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F6');
end;

class function TJKeyEvent.KEYCODE_F7: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F7');
end;

class function TJKeyEvent.KEYCODE_F8: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F8');
end;

class function TJKeyEvent.KEYCODE_F9: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_F9');
end;

class function TJKeyEvent.KEYCODE_FOCUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_FOCUS');
end;

class function TJKeyEvent.KEYCODE_FORWARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_FORWARD');
end;

class function TJKeyEvent.KEYCODE_FORWARD_DEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_FORWARD_DEL');
end;

class function TJKeyEvent.KEYCODE_FUNCTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_FUNCTION');
end;

class function TJKeyEvent.KEYCODE_G: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_G');
end;

class function TJKeyEvent.KEYCODE_GRAVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_GRAVE');
end;

class function TJKeyEvent.KEYCODE_GUIDE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_GUIDE');
end;

class function TJKeyEvent.KEYCODE_H: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_H');
end;

class function TJKeyEvent.KEYCODE_HEADSETHOOK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_HEADSETHOOK');
end;

class function TJKeyEvent.KEYCODE_HELP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_HELP');
end;

class function TJKeyEvent.KEYCODE_HENKAN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_HENKAN');
end;

class function TJKeyEvent.KEYCODE_HOME: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_HOME');
end;

class function TJKeyEvent.KEYCODE_I: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_I');
end;

class function TJKeyEvent.KEYCODE_INFO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_INFO');
end;

class function TJKeyEvent.KEYCODE_INSERT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_INSERT');
end;

class function TJKeyEvent.KEYCODE_J: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_J');
end;

class function TJKeyEvent.KEYCODE_K: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_K');
end;

class function TJKeyEvent.KEYCODE_KANA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_KANA');
end;

class function TJKeyEvent.KEYCODE_KATAKANA_HIRAGANA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_KATAKANA_HIRAGANA');
end;

class function TJKeyEvent.KEYCODE_L: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_L');
end;

class function TJKeyEvent.KEYCODE_LANGUAGE_SWITCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_LANGUAGE_SWITCH');
end;

class function TJKeyEvent.KEYCODE_LAST_CHANNEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_LAST_CHANNEL');
end;

class function TJKeyEvent.KEYCODE_LEFT_BRACKET: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_LEFT_BRACKET');
end;

class function TJKeyEvent.KEYCODE_M: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_M');
end;

class function TJKeyEvent.KEYCODE_MANNER_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MANNER_MODE');
end;

class function TJKeyEvent.KEYCODE_MEDIA_AUDIO_TRACK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_AUDIO_TRACK');
end;

class function TJKeyEvent.KEYCODE_MEDIA_CLOSE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_CLOSE');
end;

class function TJKeyEvent.KEYCODE_MEDIA_EJECT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_EJECT');
end;

class function TJKeyEvent.KEYCODE_MEDIA_FAST_FORWARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_FAST_FORWARD');
end;

class function TJKeyEvent.KEYCODE_MEDIA_NEXT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_NEXT');
end;

class function TJKeyEvent.KEYCODE_MEDIA_PAUSE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_PAUSE');
end;

class function TJKeyEvent.KEYCODE_MEDIA_PLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_PLAY');
end;

class function TJKeyEvent.KEYCODE_MEDIA_PLAY_PAUSE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_PLAY_PAUSE');
end;

class function TJKeyEvent.KEYCODE_MEDIA_PREVIOUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_PREVIOUS');
end;

class function TJKeyEvent.KEYCODE_MEDIA_RECORD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_RECORD');
end;

class function TJKeyEvent.KEYCODE_MEDIA_REWIND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_REWIND');
end;

class function TJKeyEvent.KEYCODE_MEDIA_SKIP_BACKWARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_SKIP_BACKWARD');
end;

class function TJKeyEvent.KEYCODE_MEDIA_SKIP_FORWARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_SKIP_FORWARD');
end;

class function TJKeyEvent.KEYCODE_MEDIA_STEP_BACKWARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_STEP_BACKWARD');
end;

class function TJKeyEvent.KEYCODE_MEDIA_STEP_FORWARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_STEP_FORWARD');
end;

class function TJKeyEvent.KEYCODE_MEDIA_STOP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_STOP');
end;

class function TJKeyEvent.KEYCODE_MEDIA_TOP_MENU: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MEDIA_TOP_MENU');
end;

class function TJKeyEvent.KEYCODE_MENU: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MENU');
end;

class function TJKeyEvent.KEYCODE_META_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_META_LEFT');
end;

class function TJKeyEvent.KEYCODE_META_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_META_RIGHT');
end;

class function TJKeyEvent.KEYCODE_MINUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MINUS');
end;

class function TJKeyEvent.KEYCODE_MOVE_END: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MOVE_END');
end;

class function TJKeyEvent.KEYCODE_MOVE_HOME: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MOVE_HOME');
end;

class function TJKeyEvent.KEYCODE_MUHENKAN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MUHENKAN');
end;

class function TJKeyEvent.KEYCODE_MUSIC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MUSIC');
end;

class function TJKeyEvent.KEYCODE_MUTE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_MUTE');
end;

class function TJKeyEvent.KEYCODE_N: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_N');
end;

class function TJKeyEvent.KEYCODE_NAVIGATE_IN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NAVIGATE_IN');
end;

class function TJKeyEvent.KEYCODE_NAVIGATE_NEXT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NAVIGATE_NEXT');
end;

class function TJKeyEvent.KEYCODE_NAVIGATE_OUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NAVIGATE_OUT');
end;

class function TJKeyEvent.KEYCODE_NAVIGATE_PREVIOUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NAVIGATE_PREVIOUS');
end;

class function TJKeyEvent.KEYCODE_NOTIFICATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NOTIFICATION');
end;

class function TJKeyEvent.KEYCODE_NUM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUM');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_0: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_0');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_1');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_2');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_3: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_3');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_4: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_4');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_5: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_5');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_6: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_6');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_7: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_7');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_8: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_8');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_9: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_9');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_ADD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_ADD');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_COMMA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_COMMA');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_DIVIDE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_DIVIDE');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_DOT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_DOT');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_ENTER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_ENTER');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_EQUALS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_EQUALS');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_LEFT_PAREN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_LEFT_PAREN');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_MULTIPLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_MULTIPLY');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_RIGHT_PAREN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_RIGHT_PAREN');
end;

class function TJKeyEvent.KEYCODE_NUMPAD_SUBTRACT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUMPAD_SUBTRACT');
end;

class function TJKeyEvent.KEYCODE_NUM_LOCK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_NUM_LOCK');
end;

class function TJKeyEvent.KEYCODE_O: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_O');
end;

class function TJKeyEvent.KEYCODE_P: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_P');
end;

class function TJKeyEvent.KEYCODE_PAGE_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PAGE_DOWN');
end;

class function TJKeyEvent.KEYCODE_PAGE_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PAGE_UP');
end;

class function TJKeyEvent.KEYCODE_PAIRING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PAIRING');
end;

class function TJKeyEvent.KEYCODE_PASTE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PASTE');
end;

class function TJKeyEvent.KEYCODE_PERIOD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PERIOD');
end;

class function TJKeyEvent.KEYCODE_PICTSYMBOLS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PICTSYMBOLS');
end;

class function TJKeyEvent.KEYCODE_PLUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PLUS');
end;

class function TJKeyEvent.KEYCODE_POUND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_POUND');
end;

class function TJKeyEvent.KEYCODE_POWER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_POWER');
end;

class function TJKeyEvent.KEYCODE_PROG_BLUE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PROG_BLUE');
end;

class function TJKeyEvent.KEYCODE_PROG_GREEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PROG_GREEN');
end;

class function TJKeyEvent.KEYCODE_PROG_RED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PROG_RED');
end;

class function TJKeyEvent.KEYCODE_PROG_YELLOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_PROG_YELLOW');
end;

class function TJKeyEvent.KEYCODE_Q: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_Q');
end;

class function TJKeyEvent.KEYCODE_R: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_R');
end;

class function TJKeyEvent.KEYCODE_REFRESH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_REFRESH');
end;

class function TJKeyEvent.KEYCODE_RIGHT_BRACKET: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_RIGHT_BRACKET');
end;

class function TJKeyEvent.KEYCODE_RO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_RO');
end;

class function TJKeyEvent.KEYCODE_S: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_S');
end;

class function TJKeyEvent.KEYCODE_SCROLL_LOCK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SCROLL_LOCK');
end;

class function TJKeyEvent.KEYCODE_SEARCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SEARCH');
end;

class function TJKeyEvent.KEYCODE_SEMICOLON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SEMICOLON');
end;

class function TJKeyEvent.KEYCODE_SETTINGS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SETTINGS');
end;

class function TJKeyEvent.KEYCODE_SHIFT_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SHIFT_LEFT');
end;

class function TJKeyEvent.KEYCODE_SHIFT_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SHIFT_RIGHT');
end;

class function TJKeyEvent.KEYCODE_SLASH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SLASH');
end;

class function TJKeyEvent.KEYCODE_SLEEP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SLEEP');
end;

class function TJKeyEvent.KEYCODE_SOFT_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SOFT_LEFT');
end;

class function TJKeyEvent.KEYCODE_SOFT_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SOFT_RIGHT');
end;

class function TJKeyEvent.KEYCODE_SOFT_SLEEP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SOFT_SLEEP');
end;

class function TJKeyEvent.KEYCODE_SPACE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SPACE');
end;

class function TJKeyEvent.KEYCODE_STAR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_STAR');
end;

class function TJKeyEvent.KEYCODE_STB_INPUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_STB_INPUT');
end;

class function TJKeyEvent.KEYCODE_STB_POWER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_STB_POWER');
end;

class function TJKeyEvent.KEYCODE_STEM_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_STEM_1');
end;

class function TJKeyEvent.KEYCODE_STEM_2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_STEM_2');
end;

class function TJKeyEvent.KEYCODE_STEM_3: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_STEM_3');
end;

class function TJKeyEvent.KEYCODE_STEM_PRIMARY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_STEM_PRIMARY');
end;

class function TJKeyEvent.KEYCODE_SWITCH_CHARSET: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SWITCH_CHARSET');
end;

class function TJKeyEvent.KEYCODE_SYM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SYM');
end;

class function TJKeyEvent.KEYCODE_SYSRQ: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SYSRQ');
end;

class function TJKeyEvent.KEYCODE_SYSTEM_NAVIGATION_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SYSTEM_NAVIGATION_DOWN');
end;

class function TJKeyEvent.KEYCODE_SYSTEM_NAVIGATION_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SYSTEM_NAVIGATION_LEFT');
end;

class function TJKeyEvent.KEYCODE_SYSTEM_NAVIGATION_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SYSTEM_NAVIGATION_RIGHT');
end;

class function TJKeyEvent.KEYCODE_SYSTEM_NAVIGATION_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_SYSTEM_NAVIGATION_UP');
end;

class function TJKeyEvent.KEYCODE_T: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_T');
end;

class function TJKeyEvent.KEYCODE_TAB: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TAB');
end;

class function TJKeyEvent.KEYCODE_TV: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV');
end;

class function TJKeyEvent.KEYCODE_TV_ANTENNA_CABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_ANTENNA_CABLE');
end;

class function TJKeyEvent.KEYCODE_TV_AUDIO_DESCRIPTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_AUDIO_DESCRIPTION');
end;

class function TJKeyEvent.KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN');
end;

class function TJKeyEvent.KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP');
end;

class function TJKeyEvent.KEYCODE_TV_CONTENTS_MENU: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_CONTENTS_MENU');
end;

class function TJKeyEvent.KEYCODE_TV_DATA_SERVICE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_DATA_SERVICE');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT_COMPONENT_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT_COMPONENT_1');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT_COMPONENT_2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT_COMPONENT_2');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT_COMPOSITE_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT_COMPOSITE_1');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT_COMPOSITE_2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT_COMPOSITE_2');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT_HDMI_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT_HDMI_1');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT_HDMI_2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT_HDMI_2');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT_HDMI_3: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT_HDMI_3');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT_HDMI_4: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT_HDMI_4');
end;

class function TJKeyEvent.KEYCODE_TV_INPUT_VGA_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_INPUT_VGA_1');
end;

class function TJKeyEvent.KEYCODE_TV_MEDIA_CONTEXT_MENU: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_MEDIA_CONTEXT_MENU');
end;

class function TJKeyEvent.KEYCODE_TV_NETWORK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_NETWORK');
end;

class function TJKeyEvent.KEYCODE_TV_NUMBER_ENTRY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_NUMBER_ENTRY');
end;

class function TJKeyEvent.KEYCODE_TV_POWER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_POWER');
end;

class function TJKeyEvent.KEYCODE_TV_RADIO_SERVICE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_RADIO_SERVICE');
end;

class function TJKeyEvent.KEYCODE_TV_SATELLITE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_SATELLITE');
end;

class function TJKeyEvent.KEYCODE_TV_SATELLITE_BS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_SATELLITE_BS');
end;

class function TJKeyEvent.KEYCODE_TV_SATELLITE_CS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_SATELLITE_CS');
end;

class function TJKeyEvent.KEYCODE_TV_SATELLITE_SERVICE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_SATELLITE_SERVICE');
end;

class function TJKeyEvent.KEYCODE_TV_TELETEXT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_TELETEXT');
end;

class function TJKeyEvent.KEYCODE_TV_TERRESTRIAL_ANALOG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_TERRESTRIAL_ANALOG');
end;

class function TJKeyEvent.KEYCODE_TV_TERRESTRIAL_DIGITAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_TERRESTRIAL_DIGITAL');
end;

class function TJKeyEvent.KEYCODE_TV_TIMER_PROGRAMMING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_TIMER_PROGRAMMING');
end;

class function TJKeyEvent.KEYCODE_TV_ZOOM_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_TV_ZOOM_MODE');
end;

class function TJKeyEvent.KEYCODE_U: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_U');
end;

class function TJKeyEvent.KEYCODE_UNKNOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_UNKNOWN');
end;

class function TJKeyEvent.KEYCODE_V: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_V');
end;

class function TJKeyEvent.KEYCODE_VOICE_ASSIST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_VOICE_ASSIST');
end;

class function TJKeyEvent.KEYCODE_VOLUME_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_VOLUME_DOWN');
end;

class function TJKeyEvent.KEYCODE_VOLUME_MUTE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_VOLUME_MUTE');
end;

class function TJKeyEvent.KEYCODE_VOLUME_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_VOLUME_UP');
end;

class function TJKeyEvent.KEYCODE_W: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_W');
end;

class function TJKeyEvent.KEYCODE_WAKEUP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_WAKEUP');
end;

class function TJKeyEvent.KEYCODE_WINDOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_WINDOW');
end;

class function TJKeyEvent.KEYCODE_X: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_X');
end;

class function TJKeyEvent.KEYCODE_Y: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_Y');
end;

class function TJKeyEvent.KEYCODE_YEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_YEN');
end;

class function TJKeyEvent.KEYCODE_Z: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_Z');
end;

class function TJKeyEvent.KEYCODE_ZENKAKU_HANKAKU: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ZENKAKU_HANKAKU');
end;

class function TJKeyEvent.KEYCODE_ZOOM_IN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ZOOM_IN');
end;

class function TJKeyEvent.KEYCODE_ZOOM_OUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEYCODE_ZOOM_OUT');
end;

class function TJKeyEvent.MAX_KEYCODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MAX_KEYCODE');
end;

class function TJKeyEvent.META_ALT_LEFT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_ALT_LEFT_ON');
end;

class function TJKeyEvent.META_ALT_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_ALT_MASK');
end;

class function TJKeyEvent.META_ALT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_ALT_ON');
end;

class function TJKeyEvent.META_ALT_RIGHT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_ALT_RIGHT_ON');
end;

class function TJKeyEvent.META_CAPS_LOCK_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_CAPS_LOCK_ON');
end;

class function TJKeyEvent.META_CTRL_LEFT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_CTRL_LEFT_ON');
end;

class function TJKeyEvent.META_CTRL_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_CTRL_MASK');
end;

class function TJKeyEvent.META_CTRL_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_CTRL_ON');
end;

class function TJKeyEvent.META_CTRL_RIGHT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_CTRL_RIGHT_ON');
end;

class function TJKeyEvent.META_FUNCTION_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_FUNCTION_ON');
end;

class function TJKeyEvent.META_META_LEFT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_META_LEFT_ON');
end;

class function TJKeyEvent.META_META_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_META_MASK');
end;

class function TJKeyEvent.META_META_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_META_ON');
end;

class function TJKeyEvent.META_META_RIGHT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_META_RIGHT_ON');
end;

class function TJKeyEvent.META_NUM_LOCK_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_NUM_LOCK_ON');
end;

class function TJKeyEvent.META_SCROLL_LOCK_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_SCROLL_LOCK_ON');
end;

class function TJKeyEvent.META_SHIFT_LEFT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_SHIFT_LEFT_ON');
end;

class function TJKeyEvent.META_SHIFT_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_SHIFT_MASK');
end;

class function TJKeyEvent.META_SHIFT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_SHIFT_ON');
end;

class function TJKeyEvent.META_SHIFT_RIGHT_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_SHIFT_RIGHT_ON');
end;

class function TJKeyEvent.META_SYM_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('META_SYM_ON');
end;

class function TJKeyEvent.changeAction(const AArg0: JKeyEvent; const AArg1: Integer): JKeyEvent;
begin
  Result := CallStaticObjectMethod<TJKeyEvent, JKeyEvent>('changeAction', '(Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;', [AArg0, AArg1]);
end;

class function TJKeyEvent.changeFlags(const AArg0: JKeyEvent; const AArg1: Integer): JKeyEvent;
begin
  Result := CallStaticObjectMethod<TJKeyEvent, JKeyEvent>('changeFlags', '(Landroid/view/KeyEvent;I)Landroid/view/KeyEvent;', [AArg0, AArg1]);
end;

class function TJKeyEvent.changeTimeRepeat(const AArg0: JKeyEvent; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer): JKeyEvent;
begin
  Result := CallStaticObjectMethod<TJKeyEvent, JKeyEvent>('changeTimeRepeat', '(Landroid/view/KeyEvent;JII)Landroid/view/KeyEvent;', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJKeyEvent.changeTimeRepeat(const AArg0: JKeyEvent; const AArg1: Int64; const AArg2: Integer): JKeyEvent;
begin
  Result := CallStaticObjectMethod<TJKeyEvent, JKeyEvent>('changeTimeRepeat', '(Landroid/view/KeyEvent;JI)Landroid/view/KeyEvent;', [AArg0, AArg1, AArg2]);
end;

function TJKeyEvent.getAction: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAction', '()I', []);
end;

function TJKeyEvent.getCharacters: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getCharacters', '()Ljava/lang/String;', []);
end;

class function TJKeyEvent.getDeadChar(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getDeadChar', '(II)I', [AArg0, AArg1]);
end;

function TJKeyEvent.getDeviceId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDeviceId', '()I', []);
end;

function TJKeyEvent.getDisplayLabel: Char;
begin
  Result := JavaType.CallCharMethod(ObjectID, 'getDisplayLabel', '()C', []);
end;

function TJKeyEvent.getDownTime: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getDownTime', '()J', []);
end;

function TJKeyEvent.getEventTime: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getEventTime', '()J', []);
end;

function TJKeyEvent.getFlags: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getFlags', '()I', []);
end;

function TJKeyEvent.getKeyCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getKeyCode', '()I', []);
end;

function TJKeyEvent.getMatch(const AArg0: IJavaArray<Char>): Char;
begin
  Result := JavaType.CallCharMethod(ObjectID, 'getMatch', '([C)C', [AArg0]);
end;

function TJKeyEvent.getMatch(const AArg0: IJavaArray<Char>; const AArg1: Integer): Char;
begin
  Result := JavaType.CallCharMethod(ObjectID, 'getMatch', '([CI)C', [AArg0, AArg1]);
end;

class function TJKeyEvent.getMaxKeyCode: Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getMaxKeyCode', '()I', []);
end;

function TJKeyEvent.getMetaState: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMetaState', '()I', []);
end;

class function TJKeyEvent.getModifierMetaStateMask: Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getModifierMetaStateMask', '()I', []);
end;

function TJKeyEvent.getModifiers: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getModifiers', '()I', []);
end;

function TJKeyEvent.getNumber: Char;
begin
  Result := JavaType.CallCharMethod(ObjectID, 'getNumber', '()C', []);
end;

function TJKeyEvent.getRepeatCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getRepeatCount', '()I', []);
end;

function TJKeyEvent.getScanCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScanCode', '()I', []);
end;

function TJKeyEvent.getSource: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getSource', '()I', []);
end;

function TJKeyEvent.getUnicodeChar(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getUnicodeChar', '(I)I', [AArg0]);
end;

function TJKeyEvent.getUnicodeChar: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getUnicodeChar', '()I', []);
end;

function TJKeyEvent.hasModifiers(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasModifiers', '(I)Z', [AArg0]);
end;

function TJKeyEvent.hasNoModifiers: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasNoModifiers', '()Z', []);
end;

function TJKeyEvent.isAltPressed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAltPressed', '()Z', []);
end;

function TJKeyEvent.isCanceled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isCanceled', '()Z', []);
end;

function TJKeyEvent.isCapsLockOn: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isCapsLockOn', '()Z', []);
end;

function TJKeyEvent.isCtrlPressed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isCtrlPressed', '()Z', []);
end;

function TJKeyEvent.isFunctionPressed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFunctionPressed', '()Z', []);
end;

class function TJKeyEvent.isGamepadButton(const AArg0: Integer): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('isGamepadButton', '(I)Z', [AArg0]);
end;

function TJKeyEvent.isLongPress: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLongPress', '()Z', []);
end;

function TJKeyEvent.isMetaPressed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isMetaPressed', '()Z', []);
end;

class function TJKeyEvent.isModifierKey(const AArg0: Integer): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('isModifierKey', '(I)Z', [AArg0]);
end;

function TJKeyEvent.isNumLockOn: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isNumLockOn', '()Z', []);
end;

function TJKeyEvent.isPrintingKey: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isPrintingKey', '()Z', []);
end;

function TJKeyEvent.isScrollLockOn: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isScrollLockOn', '()Z', []);
end;

function TJKeyEvent.isShiftPressed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isShiftPressed', '()Z', []);
end;

function TJKeyEvent.isSymPressed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isSymPressed', '()Z', []);
end;

function TJKeyEvent.isSystem: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isSystem', '()Z', []);
end;

function TJKeyEvent.isTracking: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isTracking', '()Z', []);
end;

class function TJKeyEvent.keyCodeFromString(const AArg0: JString): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('keyCodeFromString', '(Ljava/lang/String;)I', [AArg0]);
end;

class function TJKeyEvent.keyCodeToString(const AArg0: Integer): JString;
begin
  Result := CallStaticObjectMethod<TJString, JString>('keyCodeToString', '(I)Ljava/lang/String;', [AArg0]);
end;

class function TJKeyEvent.metaStateHasModifiers(const AArg0: Integer; const AArg1: Integer): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('metaStateHasModifiers', '(II)Z', [AArg0, AArg1]);
end;

class function TJKeyEvent.metaStateHasNoModifiers(const AArg0: Integer): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('metaStateHasNoModifiers', '(I)Z', [AArg0]);
end;

class function TJKeyEvent.normalizeMetaState(const AArg0: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('normalizeMetaState', '(I)I', [AArg0]);
end;

procedure TJKeyEvent.setSource(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSource', '(I)V', [AArg0]);
end;

procedure TJKeyEvent.startTracking;
begin
  JavaType.CallVoidMethod(ObjectID, 'startTracking', '()V', []);
end;

function TJKeyEvent.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJMotionEvent }

class procedure TJMotionEvent.LoadConstructors;
begin
end;

class procedure TJMotionEvent.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('actionToString', '(I)Ljava/lang/String;');
  AddMethod('addBatch', '(JFFFFI)V');
  AddStaticMethod('axisFromString', '(Ljava/lang/String;)I');
  AddStaticMethod('axisToString', '(I)Ljava/lang/String;');
  AddMethod('findPointerIndex', '(I)I');
  AddMethod('getAction', '()I');
  AddMethod('getActionButton', '()I');
  AddMethod('getActionIndex', '()I');
  AddMethod('getActionMasked', '()I');
  AddMethod('getAxisValue', '(II)F');
  AddMethod('getAxisValue', '(I)F');
  AddMethod('getButtonState', '()I');
  AddMethod('getDeviceId', '()I');
  AddMethod('getDownTime', '()J');
  AddMethod('getEdgeFlags', '()I');
  AddMethod('getEventTime', '()J');
  AddMethod('getFlags', '()I');
  AddMethod('getHistoricalAxisValue', '(III)F');
  AddMethod('getHistoricalAxisValue', '(II)F');
  AddMethod('getHistoricalEventTime', '(I)J');
  AddMethod('getHistoricalOrientation', '(I)F');
  AddMethod('getHistoricalOrientation', '(II)F');
  AddMethod('getHistoricalPressure', '(I)F');
  AddMethod('getHistoricalPressure', '(II)F');
  AddMethod('getHistoricalSize', '(I)F');
  AddMethod('getHistoricalSize', '(II)F');
  AddMethod('getHistoricalToolMajor', '(I)F');
  AddMethod('getHistoricalToolMajor', '(II)F');
  AddMethod('getHistoricalToolMinor', '(II)F');
  AddMethod('getHistoricalToolMinor', '(I)F');
  AddMethod('getHistoricalTouchMajor', '(II)F');
  AddMethod('getHistoricalTouchMajor', '(I)F');
  AddMethod('getHistoricalTouchMinor', '(I)F');
  AddMethod('getHistoricalTouchMinor', '(II)F');
  AddMethod('getHistoricalX', '(II)F');
  AddMethod('getHistoricalX', '(I)F');
  AddMethod('getHistoricalY', '(II)F');
  AddMethod('getHistoricalY', '(I)F');
  AddMethod('getHistorySize', '()I');
  AddMethod('getMetaState', '()I');
  AddMethod('getOrientation', '()F');
  AddMethod('getOrientation', '(I)F');
  AddMethod('getPointerCount', '()I');
  AddMethod('getPointerId', '(I)I');
  AddMethod('getPressure', '(I)F');
  AddMethod('getPressure', '()F');
  AddMethod('getRawX', '()F');
  AddMethod('getRawY', '()F');
  AddMethod('getSize', '(I)F');
  AddMethod('getSize', '()F');
  AddMethod('getSource', '()I');
  AddMethod('getToolMajor', '(I)F');
  AddMethod('getToolMajor', '()F');
  AddMethod('getToolMinor', '(I)F');
  AddMethod('getToolMinor', '()F');
  AddMethod('getToolType', '(I)I');
  AddMethod('getTouchMajor', '()F');
  AddMethod('getTouchMajor', '(I)F');
  AddMethod('getTouchMinor', '()F');
  AddMethod('getTouchMinor', '(I)F');
  AddMethod('getX', '()F');
  AddMethod('getX', '(I)F');
  AddMethod('getXPrecision', '()F');
  AddMethod('getY', '()F');
  AddMethod('getY', '(I)F');
  AddMethod('getYPrecision', '()F');
  AddMethod('isButtonPressed', '(I)Z');
  AddStaticMethod('obtain', '(JJIIFFFFIFFII)Landroid/view/MotionEvent;');
  AddStaticMethod('obtain', '(JJIFFI)Landroid/view/MotionEvent;');
  AddStaticMethod('obtain', '(JJIFFFFIFFII)Landroid/view/MotionEvent;');
  AddStaticMethod('obtain', '(Landroid/view/MotionEvent;)Landroid/view/MotionEvent;');
  AddStaticMethod('obtainNoHistory', '(Landroid/view/MotionEvent;)Landroid/view/MotionEvent;');
  AddMethod('offsetLocation', '(FF)V');
  AddMethod('recycle', '()V');
  AddMethod('setAction', '(I)V');
  AddMethod('setEdgeFlags', '(I)V');
  AddMethod('setLocation', '(FF)V');
  AddMethod('setSource', '(I)V');
  AddMethod('toString', '()Ljava/lang/String;');
  AddMethod('transform', '(Landroid/graphics/Matrix;)V');
end;

class procedure TJMotionEvent.LoadFields;
begin
  inherited;
  AddStaticField('ACTION_BUTTON_PRESS', 'I');
  AddStaticField('ACTION_BUTTON_RELEASE', 'I');
  AddStaticField('ACTION_CANCEL', 'I');
  AddStaticField('ACTION_DOWN', 'I');
  AddStaticField('ACTION_HOVER_ENTER', 'I');
  AddStaticField('ACTION_HOVER_EXIT', 'I');
  AddStaticField('ACTION_HOVER_MOVE', 'I');
  AddStaticField('ACTION_MASK', 'I');
  AddStaticField('ACTION_MOVE', 'I');
  AddStaticField('ACTION_OUTSIDE', 'I');
  AddStaticField('ACTION_POINTER_1_DOWN', 'I');
  AddStaticField('ACTION_POINTER_1_UP', 'I');
  AddStaticField('ACTION_POINTER_2_DOWN', 'I');
  AddStaticField('ACTION_POINTER_2_UP', 'I');
  AddStaticField('ACTION_POINTER_3_DOWN', 'I');
  AddStaticField('ACTION_POINTER_3_UP', 'I');
  AddStaticField('ACTION_POINTER_DOWN', 'I');
  AddStaticField('ACTION_POINTER_ID_MASK', 'I');
  AddStaticField('ACTION_POINTER_ID_SHIFT', 'I');
  AddStaticField('ACTION_POINTER_INDEX_MASK', 'I');
  AddStaticField('ACTION_POINTER_INDEX_SHIFT', 'I');
  AddStaticField('ACTION_POINTER_UP', 'I');
  AddStaticField('ACTION_SCROLL', 'I');
  AddStaticField('ACTION_UP', 'I');
  AddStaticField('AXIS_BRAKE', 'I');
  AddStaticField('AXIS_DISTANCE', 'I');
  AddStaticField('AXIS_GAS', 'I');
  AddStaticField('AXIS_GENERIC_1', 'I');
  AddStaticField('AXIS_GENERIC_10', 'I');
  AddStaticField('AXIS_GENERIC_11', 'I');
  AddStaticField('AXIS_GENERIC_12', 'I');
  AddStaticField('AXIS_GENERIC_13', 'I');
  AddStaticField('AXIS_GENERIC_14', 'I');
  AddStaticField('AXIS_GENERIC_15', 'I');
  AddStaticField('AXIS_GENERIC_16', 'I');
  AddStaticField('AXIS_GENERIC_2', 'I');
  AddStaticField('AXIS_GENERIC_3', 'I');
  AddStaticField('AXIS_GENERIC_4', 'I');
  AddStaticField('AXIS_GENERIC_5', 'I');
  AddStaticField('AXIS_GENERIC_6', 'I');
  AddStaticField('AXIS_GENERIC_7', 'I');
  AddStaticField('AXIS_GENERIC_8', 'I');
  AddStaticField('AXIS_GENERIC_9', 'I');
  AddStaticField('AXIS_HAT_X', 'I');
  AddStaticField('AXIS_HAT_Y', 'I');
  AddStaticField('AXIS_HSCROLL', 'I');
  AddStaticField('AXIS_LTRIGGER', 'I');
  AddStaticField('AXIS_ORIENTATION', 'I');
  AddStaticField('AXIS_PRESSURE', 'I');
  AddStaticField('AXIS_RELATIVE_X', 'I');
  AddStaticField('AXIS_RELATIVE_Y', 'I');
  AddStaticField('AXIS_RTRIGGER', 'I');
  AddStaticField('AXIS_RUDDER', 'I');
  AddStaticField('AXIS_RX', 'I');
  AddStaticField('AXIS_RY', 'I');
  AddStaticField('AXIS_RZ', 'I');
  AddStaticField('AXIS_SCROLL', 'I');
  AddStaticField('AXIS_SIZE', 'I');
  AddStaticField('AXIS_THROTTLE', 'I');
  AddStaticField('AXIS_TILT', 'I');
  AddStaticField('AXIS_TOOL_MAJOR', 'I');
  AddStaticField('AXIS_TOOL_MINOR', 'I');
  AddStaticField('AXIS_TOUCH_MAJOR', 'I');
  AddStaticField('AXIS_TOUCH_MINOR', 'I');
  AddStaticField('AXIS_VSCROLL', 'I');
  AddStaticField('AXIS_WHEEL', 'I');
  AddStaticField('AXIS_X', 'I');
  AddStaticField('AXIS_Y', 'I');
  AddStaticField('AXIS_Z', 'I');
  AddStaticField('BUTTON_BACK', 'I');
  AddStaticField('BUTTON_FORWARD', 'I');
  AddStaticField('BUTTON_PRIMARY', 'I');
  AddStaticField('BUTTON_SECONDARY', 'I');
  AddStaticField('BUTTON_STYLUS_PRIMARY', 'I');
  AddStaticField('BUTTON_STYLUS_SECONDARY', 'I');
  AddStaticField('BUTTON_TERTIARY', 'I');
  AddStaticField('EDGE_BOTTOM', 'I');
  AddStaticField('EDGE_LEFT', 'I');
  AddStaticField('EDGE_RIGHT', 'I');
  AddStaticField('EDGE_TOP', 'I');
  AddStaticField('FLAG_WINDOW_IS_OBSCURED', 'I');
  AddStaticField('INVALID_POINTER_ID', 'I');
  AddStaticField('TOOL_TYPE_ERASER', 'I');
  AddStaticField('TOOL_TYPE_FINGER', 'I');
  AddStaticField('TOOL_TYPE_MOUSE', 'I');
  AddStaticField('TOOL_TYPE_STYLUS', 'I');
  AddStaticField('TOOL_TYPE_UNKNOWN', 'I');
end;

class function TJMotionEvent.Wrap(const AObjectID: JNIObject): JMotionEvent;
begin
  Result := Wrap<TJMotionEvent, JMotionEvent>(AObjectId);
end;

class function TJMotionEvent.Wrap(const AObject: IJNIObject): JMotionEvent;
begin
  Result := Wrap<TJMotionEvent, JMotionEvent>(AObject);
end;

class function TJMotionEvent.ACTION_BUTTON_PRESS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_BUTTON_PRESS');
end;

class function TJMotionEvent.ACTION_BUTTON_RELEASE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_BUTTON_RELEASE');
end;

class function TJMotionEvent.ACTION_CANCEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_CANCEL');
end;

class function TJMotionEvent.ACTION_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_DOWN');
end;

class function TJMotionEvent.ACTION_HOVER_ENTER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_HOVER_ENTER');
end;

class function TJMotionEvent.ACTION_HOVER_EXIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_HOVER_EXIT');
end;

class function TJMotionEvent.ACTION_HOVER_MOVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_HOVER_MOVE');
end;

class function TJMotionEvent.ACTION_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_MASK');
end;

class function TJMotionEvent.ACTION_MOVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_MOVE');
end;

class function TJMotionEvent.ACTION_OUTSIDE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_OUTSIDE');
end;

class function TJMotionEvent.ACTION_POINTER_1_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_1_DOWN');
end;

class function TJMotionEvent.ACTION_POINTER_1_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_1_UP');
end;

class function TJMotionEvent.ACTION_POINTER_2_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_2_DOWN');
end;

class function TJMotionEvent.ACTION_POINTER_2_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_2_UP');
end;

class function TJMotionEvent.ACTION_POINTER_3_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_3_DOWN');
end;

class function TJMotionEvent.ACTION_POINTER_3_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_3_UP');
end;

class function TJMotionEvent.ACTION_POINTER_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_DOWN');
end;

class function TJMotionEvent.ACTION_POINTER_ID_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_ID_MASK');
end;

class function TJMotionEvent.ACTION_POINTER_ID_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_ID_SHIFT');
end;

class function TJMotionEvent.ACTION_POINTER_INDEX_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_INDEX_MASK');
end;

class function TJMotionEvent.ACTION_POINTER_INDEX_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_INDEX_SHIFT');
end;

class function TJMotionEvent.ACTION_POINTER_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_POINTER_UP');
end;

class function TJMotionEvent.ACTION_SCROLL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_SCROLL');
end;

class function TJMotionEvent.ACTION_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACTION_UP');
end;

class function TJMotionEvent.AXIS_BRAKE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_BRAKE');
end;

class function TJMotionEvent.AXIS_DISTANCE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_DISTANCE');
end;

class function TJMotionEvent.AXIS_GAS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GAS');
end;

class function TJMotionEvent.AXIS_GENERIC_1: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_1');
end;

class function TJMotionEvent.AXIS_GENERIC_10: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_10');
end;

class function TJMotionEvent.AXIS_GENERIC_11: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_11');
end;

class function TJMotionEvent.AXIS_GENERIC_12: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_12');
end;

class function TJMotionEvent.AXIS_GENERIC_13: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_13');
end;

class function TJMotionEvent.AXIS_GENERIC_14: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_14');
end;

class function TJMotionEvent.AXIS_GENERIC_15: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_15');
end;

class function TJMotionEvent.AXIS_GENERIC_16: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_16');
end;

class function TJMotionEvent.AXIS_GENERIC_2: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_2');
end;

class function TJMotionEvent.AXIS_GENERIC_3: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_3');
end;

class function TJMotionEvent.AXIS_GENERIC_4: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_4');
end;

class function TJMotionEvent.AXIS_GENERIC_5: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_5');
end;

class function TJMotionEvent.AXIS_GENERIC_6: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_6');
end;

class function TJMotionEvent.AXIS_GENERIC_7: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_7');
end;

class function TJMotionEvent.AXIS_GENERIC_8: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_8');
end;

class function TJMotionEvent.AXIS_GENERIC_9: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_GENERIC_9');
end;

class function TJMotionEvent.AXIS_HAT_X: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_HAT_X');
end;

class function TJMotionEvent.AXIS_HAT_Y: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_HAT_Y');
end;

class function TJMotionEvent.AXIS_HSCROLL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_HSCROLL');
end;

class function TJMotionEvent.AXIS_LTRIGGER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_LTRIGGER');
end;

class function TJMotionEvent.AXIS_ORIENTATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_ORIENTATION');
end;

class function TJMotionEvent.AXIS_PRESSURE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_PRESSURE');
end;

class function TJMotionEvent.AXIS_RELATIVE_X: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_RELATIVE_X');
end;

class function TJMotionEvent.AXIS_RELATIVE_Y: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_RELATIVE_Y');
end;

class function TJMotionEvent.AXIS_RTRIGGER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_RTRIGGER');
end;

class function TJMotionEvent.AXIS_RUDDER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_RUDDER');
end;

class function TJMotionEvent.AXIS_RX: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_RX');
end;

class function TJMotionEvent.AXIS_RY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_RY');
end;

class function TJMotionEvent.AXIS_RZ: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_RZ');
end;

class function TJMotionEvent.AXIS_SCROLL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_SCROLL');
end;

class function TJMotionEvent.AXIS_SIZE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_SIZE');
end;

class function TJMotionEvent.AXIS_THROTTLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_THROTTLE');
end;

class function TJMotionEvent.AXIS_TILT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_TILT');
end;

class function TJMotionEvent.AXIS_TOOL_MAJOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_TOOL_MAJOR');
end;

class function TJMotionEvent.AXIS_TOOL_MINOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_TOOL_MINOR');
end;

class function TJMotionEvent.AXIS_TOUCH_MAJOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_TOUCH_MAJOR');
end;

class function TJMotionEvent.AXIS_TOUCH_MINOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_TOUCH_MINOR');
end;

class function TJMotionEvent.AXIS_VSCROLL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_VSCROLL');
end;

class function TJMotionEvent.AXIS_WHEEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_WHEEL');
end;

class function TJMotionEvent.AXIS_X: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_X');
end;

class function TJMotionEvent.AXIS_Y: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_Y');
end;

class function TJMotionEvent.AXIS_Z: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AXIS_Z');
end;

class function TJMotionEvent.BUTTON_BACK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BUTTON_BACK');
end;

class function TJMotionEvent.BUTTON_FORWARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BUTTON_FORWARD');
end;

class function TJMotionEvent.BUTTON_PRIMARY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BUTTON_PRIMARY');
end;

class function TJMotionEvent.BUTTON_SECONDARY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BUTTON_SECONDARY');
end;

class function TJMotionEvent.BUTTON_STYLUS_PRIMARY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BUTTON_STYLUS_PRIMARY');
end;

class function TJMotionEvent.BUTTON_STYLUS_SECONDARY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BUTTON_STYLUS_SECONDARY');
end;

class function TJMotionEvent.BUTTON_TERTIARY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('BUTTON_TERTIARY');
end;

class function TJMotionEvent.EDGE_BOTTOM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EDGE_BOTTOM');
end;

class function TJMotionEvent.EDGE_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EDGE_LEFT');
end;

class function TJMotionEvent.EDGE_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EDGE_RIGHT');
end;

class function TJMotionEvent.EDGE_TOP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EDGE_TOP');
end;

class function TJMotionEvent.FLAG_WINDOW_IS_OBSCURED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_WINDOW_IS_OBSCURED');
end;

class function TJMotionEvent.INVALID_POINTER_ID: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INVALID_POINTER_ID');
end;

class function TJMotionEvent.TOOL_TYPE_ERASER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOOL_TYPE_ERASER');
end;

class function TJMotionEvent.TOOL_TYPE_FINGER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOOL_TYPE_FINGER');
end;

class function TJMotionEvent.TOOL_TYPE_MOUSE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOOL_TYPE_MOUSE');
end;

class function TJMotionEvent.TOOL_TYPE_STYLUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOOL_TYPE_STYLUS');
end;

class function TJMotionEvent.TOOL_TYPE_UNKNOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TOOL_TYPE_UNKNOWN');
end;

class function TJMotionEvent.actionToString(const AArg0: Integer): JString;
begin
  Result := CallStaticObjectMethod<TJString, JString>('actionToString', '(I)Ljava/lang/String;', [AArg0]);
end;

procedure TJMotionEvent.addBatch(const AArg0: Int64; const AArg1: Single; const AArg2: Single; const AArg3: Single; const AArg4: Single; const AArg5: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addBatch', '(JFFFFI)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

class function TJMotionEvent.axisFromString(const AArg0: JString): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('axisFromString', '(Ljava/lang/String;)I', [AArg0]);
end;

class function TJMotionEvent.axisToString(const AArg0: Integer): JString;
begin
  Result := CallStaticObjectMethod<TJString, JString>('axisToString', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJMotionEvent.findPointerIndex(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'findPointerIndex', '(I)I', [AArg0]);
end;

function TJMotionEvent.getAction: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAction', '()I', []);
end;

function TJMotionEvent.getActionButton: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getActionButton', '()I', []);
end;

function TJMotionEvent.getActionIndex: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getActionIndex', '()I', []);
end;

function TJMotionEvent.getActionMasked: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getActionMasked', '()I', []);
end;

function TJMotionEvent.getAxisValue(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getAxisValue', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getAxisValue(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getAxisValue', '(I)F', [AArg0]);
end;

function TJMotionEvent.getButtonState: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getButtonState', '()I', []);
end;

function TJMotionEvent.getDeviceId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDeviceId', '()I', []);
end;

function TJMotionEvent.getDownTime: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getDownTime', '()J', []);
end;

function TJMotionEvent.getEdgeFlags: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getEdgeFlags', '()I', []);
end;

function TJMotionEvent.getEventTime: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getEventTime', '()J', []);
end;

function TJMotionEvent.getFlags: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getFlags', '()I', []);
end;

function TJMotionEvent.getHistoricalAxisValue(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalAxisValue', '(III)F', [AArg0, AArg1, AArg2]);
end;

function TJMotionEvent.getHistoricalAxisValue(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalAxisValue', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalEventTime(const AArg0: Integer): Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getHistoricalEventTime', '(I)J', [AArg0]);
end;

function TJMotionEvent.getHistoricalOrientation(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalOrientation', '(I)F', [AArg0]);
end;

function TJMotionEvent.getHistoricalOrientation(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalOrientation', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalPressure(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalPressure', '(I)F', [AArg0]);
end;

function TJMotionEvent.getHistoricalPressure(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalPressure', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalSize(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalSize', '(I)F', [AArg0]);
end;

function TJMotionEvent.getHistoricalSize(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalSize', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalToolMajor(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalToolMajor', '(I)F', [AArg0]);
end;

function TJMotionEvent.getHistoricalToolMajor(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalToolMajor', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalToolMinor(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalToolMinor', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalToolMinor(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalToolMinor', '(I)F', [AArg0]);
end;

function TJMotionEvent.getHistoricalTouchMajor(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalTouchMajor', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalTouchMajor(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalTouchMajor', '(I)F', [AArg0]);
end;

function TJMotionEvent.getHistoricalTouchMinor(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalTouchMinor', '(I)F', [AArg0]);
end;

function TJMotionEvent.getHistoricalTouchMinor(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalTouchMinor', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalX(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalX', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalX(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalX', '(I)F', [AArg0]);
end;

function TJMotionEvent.getHistoricalY(const AArg0: Integer; const AArg1: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalY', '(II)F', [AArg0, AArg1]);
end;

function TJMotionEvent.getHistoricalY(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getHistoricalY', '(I)F', [AArg0]);
end;

function TJMotionEvent.getHistorySize: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getHistorySize', '()I', []);
end;

function TJMotionEvent.getMetaState: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMetaState', '()I', []);
end;

function TJMotionEvent.getOrientation: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getOrientation', '()F', []);
end;

function TJMotionEvent.getOrientation(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getOrientation', '(I)F', [AArg0]);
end;

function TJMotionEvent.getPointerCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPointerCount', '()I', []);
end;

function TJMotionEvent.getPointerId(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPointerId', '(I)I', [AArg0]);
end;

function TJMotionEvent.getPressure(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getPressure', '(I)F', [AArg0]);
end;

function TJMotionEvent.getPressure: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getPressure', '()F', []);
end;

function TJMotionEvent.getRawX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRawX', '()F', []);
end;

function TJMotionEvent.getRawY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRawY', '()F', []);
end;

function TJMotionEvent.getSize(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getSize', '(I)F', [AArg0]);
end;

function TJMotionEvent.getSize: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getSize', '()F', []);
end;

function TJMotionEvent.getSource: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getSource', '()I', []);
end;

function TJMotionEvent.getToolMajor(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getToolMajor', '(I)F', [AArg0]);
end;

function TJMotionEvent.getToolMajor: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getToolMajor', '()F', []);
end;

function TJMotionEvent.getToolMinor(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getToolMinor', '(I)F', [AArg0]);
end;

function TJMotionEvent.getToolMinor: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getToolMinor', '()F', []);
end;

function TJMotionEvent.getToolType(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getToolType', '(I)I', [AArg0]);
end;

function TJMotionEvent.getTouchMajor: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTouchMajor', '()F', []);
end;

function TJMotionEvent.getTouchMajor(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTouchMajor', '(I)F', [AArg0]);
end;

function TJMotionEvent.getTouchMinor: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTouchMinor', '()F', []);
end;

function TJMotionEvent.getTouchMinor(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTouchMinor', '(I)F', [AArg0]);
end;

function TJMotionEvent.getX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getX', '()F', []);
end;

function TJMotionEvent.getX(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getX', '(I)F', [AArg0]);
end;

function TJMotionEvent.getXPrecision: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getXPrecision', '()F', []);
end;

function TJMotionEvent.getY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getY', '()F', []);
end;

function TJMotionEvent.getY(const AArg0: Integer): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getY', '(I)F', [AArg0]);
end;

function TJMotionEvent.getYPrecision: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getYPrecision', '()F', []);
end;

function TJMotionEvent.isButtonPressed(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isButtonPressed', '(I)Z', [AArg0]);
end;

class function TJMotionEvent.obtain(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Integer; const AArg4: Single; const AArg5: Single; const AArg6: Single; const AArg7: Single; const AArg8: Integer; const AArg9: Single; const AArg10: Single; const AArg11: Integer; const AArg12: Integer): JMotionEvent;
begin
  Result := CallStaticObjectMethod<TJMotionEvent, JMotionEvent>('obtain', '(JJIIFFFFIFFII)Landroid/view/MotionEvent;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7, AArg8, AArg9, AArg10, AArg11, AArg12]);
end;

class function TJMotionEvent.obtain(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: Integer): JMotionEvent;
begin
  Result := CallStaticObjectMethod<TJMotionEvent, JMotionEvent>('obtain', '(JJIFFI)Landroid/view/MotionEvent;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

class function TJMotionEvent.obtain(const AArg0: Int64; const AArg1: Int64; const AArg2: Integer; const AArg3: Single; const AArg4: Single; const AArg5: Single; const AArg6: Single; const AArg7: Integer; const AArg8: Single; const AArg9: Single; const AArg10: Integer; const AArg11: Integer): JMotionEvent;
begin
  Result := CallStaticObjectMethod<TJMotionEvent, JMotionEvent>('obtain', '(JJIFFFFIFFII)Landroid/view/MotionEvent;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7, AArg8, AArg9, AArg10, AArg11]);
end;

class function TJMotionEvent.obtain(const AArg0: JMotionEvent): JMotionEvent;
begin
  Result := CallStaticObjectMethod<TJMotionEvent, JMotionEvent>('obtain', '(Landroid/view/MotionEvent;)Landroid/view/MotionEvent;', [AArg0]);
end;

class function TJMotionEvent.obtainNoHistory(const AArg0: JMotionEvent): JMotionEvent;
begin
  Result := CallStaticObjectMethod<TJMotionEvent, JMotionEvent>('obtainNoHistory', '(Landroid/view/MotionEvent;)Landroid/view/MotionEvent;', [AArg0]);
end;

procedure TJMotionEvent.offsetLocation(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'offsetLocation', '(FF)V', [AArg0, AArg1]);
end;

procedure TJMotionEvent.recycle;
begin
  JavaType.CallVoidMethod(ObjectID, 'recycle', '()V', []);
end;

procedure TJMotionEvent.setAction(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAction', '(I)V', [AArg0]);
end;

procedure TJMotionEvent.setEdgeFlags(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setEdgeFlags', '(I)V', [AArg0]);
end;

procedure TJMotionEvent.setLocation(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLocation', '(FF)V', [AArg0, AArg1]);
end;

procedure TJMotionEvent.setSource(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSource', '(I)V', [AArg0]);
end;

function TJMotionEvent.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

procedure TJMotionEvent.transform(const AArg0: JMatrix);
begin
  JavaType.CallVoidMethod(ObjectID, 'transform', '(Landroid/graphics/Matrix;)V', [AArg0]);
end;

{ TJLayoutInflater }

class procedure TJLayoutInflater.LoadConstructors;
begin
end;

class procedure TJLayoutInflater.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('cloneInContext', '(Landroid/content/Context;)Landroid/view/LayoutInflater;');
  AddMethod('createView', '(Ljava/lang/String;Ljava/lang/String;Landroid/util/AttributeSet;)Landroid/view/View;');
  AddStaticMethod('from', '(Landroid/content/Context;)Landroid/view/LayoutInflater;');
  AddMethod('getContext', '()Landroid/content/Context;');
  AddMethod('inflate', '(ILandroid/view/ViewGroup;)Landroid/view/View;');
  AddMethod('inflate', '(ILandroid/view/ViewGroup;Z)Landroid/view/View;');
end;

class function TJLayoutInflater.Wrap(const AObjectID: JNIObject): JLayoutInflater;
begin
  Result := Wrap<TJLayoutInflater, JLayoutInflater>(AObjectId);
end;

class function TJLayoutInflater.Wrap(const AObject: IJNIObject): JLayoutInflater;
begin
  Result := Wrap<TJLayoutInflater, JLayoutInflater>(AObject);
end;

function TJLayoutInflater.cloneInContext(const AArg0: JContext): JLayoutInflater;
begin
  Result := CallObjectMethod<TJLayoutInflater, JLayoutInflater>('cloneInContext', '(Landroid/content/Context;)Landroid/view/LayoutInflater;', [AArg0]);
end;

function TJLayoutInflater.createView(const AArg0: JString; const AArg1: JString; const AArg2: JAttributeSet): JView;
begin
  Result := CallObjectMethod<TJView, JView>('createView', '(Ljava/lang/String;Ljava/lang/String;Landroid/util/AttributeSet;)Landroid/view/View;', [AArg0, AArg1, AArg2]);
end;

class function TJLayoutInflater.from(const AArg0: JContext): JLayoutInflater;
begin
  Result := CallStaticObjectMethod<TJLayoutInflater, JLayoutInflater>('from', '(Landroid/content/Context;)Landroid/view/LayoutInflater;', [AArg0]);
end;

function TJLayoutInflater.getContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('getContext', '()Landroid/content/Context;', []);
end;

function TJLayoutInflater.inflate(const AArg0: Integer; const AArg1: JViewGroup): JView;
begin
  Result := CallObjectMethod<TJView, JView>('inflate', '(ILandroid/view/ViewGroup;)Landroid/view/View;', [AArg0, AArg1]);
end;

function TJLayoutInflater.inflate(const AArg0: Integer; const AArg1: JViewGroup; const AArg2: Boolean): JView;
begin
  Result := CallObjectMethod<TJView, JView>('inflate', '(ILandroid/view/ViewGroup;Z)Landroid/view/View;', [AArg0, AArg1, AArg2]);
end;

{ TJMenu }

class procedure TJMenu.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('add', '(IIII)Landroid/view/MenuItem;');
  AddMethod('add', '(IIILjava/lang/CharSequence;)Landroid/view/MenuItem;');
  AddMethod('add', '(Ljava/lang/CharSequence;)Landroid/view/MenuItem;');
  AddMethod('add', '(I)Landroid/view/MenuItem;');
  AddMethod('addIntentOptions', '(IIILandroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I[Landroid/view/MenuItem;)I');
  AddMethod('addSubMenu', '(IIII)Landroid/view/SubMenu;');
  AddMethod('addSubMenu', '(IIILjava/lang/CharSequence;)Landroid/view/SubMenu;');
  AddMethod('addSubMenu', '(Ljava/lang/CharSequence;)Landroid/view/SubMenu;');
  AddMethod('addSubMenu', '(I)Landroid/view/SubMenu;');
  AddMethod('clear', '()V');
  AddMethod('close', '()V');
  AddMethod('findItem', '(I)Landroid/view/MenuItem;');
  AddMethod('getItem', '(I)Landroid/view/MenuItem;');
  AddMethod('hasVisibleItems', '()Z');
  AddMethod('isShortcutKey', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('performIdentifierAction', '(II)Z');
  AddMethod('performShortcut', '(ILandroid/view/KeyEvent;I)Z');
  AddMethod('removeGroup', '(I)V');
  AddMethod('removeItem', '(I)V');
  AddMethod('setGroupCheckable', '(IZZ)V');
  AddMethod('setGroupEnabled', '(IZ)V');
  AddMethod('setGroupVisible', '(IZ)V');
  AddMethod('setQwertyMode', '(Z)V');
  AddMethod('size', '()I');
end;

class procedure TJMenu.LoadFields;
begin
  inherited;
  AddStaticField('CATEGORY_ALTERNATIVE', 'I');
  AddStaticField('CATEGORY_CONTAINER', 'I');
  AddStaticField('CATEGORY_SECONDARY', 'I');
  AddStaticField('CATEGORY_SYSTEM', 'I');
  AddStaticField('FIRST', 'I');
  AddStaticField('FLAG_ALWAYS_PERFORM_CLOSE', 'I');
  AddStaticField('FLAG_APPEND_TO_GROUP', 'I');
  AddStaticField('FLAG_PERFORM_NO_CLOSE', 'I');
  AddStaticField('NONE', 'I');
  AddStaticField('SUPPORTED_MODIFIERS_MASK', 'I');
end;

class function TJMenu.Wrap(const AObjectID: JNIObject): JMenu;
begin
  Result := Wrap<TJMenu, JMenu>(AObjectId);
end;

class function TJMenu.Wrap(const AObject: IJNIObject): JMenu;
begin
  Result := Wrap<TJMenu, JMenu>(AObject);
end;

class function TJMenu.CATEGORY_ALTERNATIVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_ALTERNATIVE');
end;

class function TJMenu.CATEGORY_CONTAINER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_CONTAINER');
end;

class function TJMenu.CATEGORY_SECONDARY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_SECONDARY');
end;

class function TJMenu.CATEGORY_SYSTEM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('CATEGORY_SYSTEM');
end;

class function TJMenu.FIRST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIRST');
end;

class function TJMenu.FLAG_ALWAYS_PERFORM_CLOSE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ALWAYS_PERFORM_CLOSE');
end;

class function TJMenu.FLAG_APPEND_TO_GROUP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_APPEND_TO_GROUP');
end;

class function TJMenu.FLAG_PERFORM_NO_CLOSE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_PERFORM_NO_CLOSE');
end;

class function TJMenu.NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NONE');
end;

class function TJMenu.SUPPORTED_MODIFIERS_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SUPPORTED_MODIFIERS_MASK');
end;

function TJMenu.add(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('add', '(IIII)Landroid/view/MenuItem;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJMenu.add(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JCharSequence): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('add', '(IIILjava/lang/CharSequence;)Landroid/view/MenuItem;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJMenu.add(const AArg0: JCharSequence): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('add', '(Ljava/lang/CharSequence;)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenu.add(const AArg0: Integer): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('add', '(I)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenu.addIntentOptions(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JComponentName; const AArg4: IJavaArray<JIntent>; const AArg5: JIntent; const AArg6: Integer; const AArg7: IJavaArray<JMenuItem>): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'addIntentOptions', '(IIILandroid/content/ComponentName;[Landroid/content/Intent;Landroid/content/Intent;I[Landroid/view/MenuItem;)I', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
end;

function TJMenu.addSubMenu(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('addSubMenu', '(IIII)Landroid/view/SubMenu;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJMenu.addSubMenu(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: JCharSequence): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('addSubMenu', '(IIILjava/lang/CharSequence;)Landroid/view/SubMenu;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJMenu.addSubMenu(const AArg0: JCharSequence): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('addSubMenu', '(Ljava/lang/CharSequence;)Landroid/view/SubMenu;', [AArg0]);
end;

function TJMenu.addSubMenu(const AArg0: Integer): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('addSubMenu', '(I)Landroid/view/SubMenu;', [AArg0]);
end;

procedure TJMenu.clear;
begin
  JavaType.CallVoidMethod(ObjectID, 'clear', '()V', []);
end;

procedure TJMenu.close;
begin
  JavaType.CallVoidMethod(ObjectID, 'close', '()V', []);
end;

function TJMenu.findItem(const AArg0: Integer): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('findItem', '(I)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenu.getItem(const AArg0: Integer): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('getItem', '(I)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenu.hasVisibleItems: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasVisibleItems', '()Z', []);
end;

function TJMenu.isShortcutKey(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isShortcutKey', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

function TJMenu.performIdentifierAction(const AArg0: Integer; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performIdentifierAction', '(II)Z', [AArg0, AArg1]);
end;

function TJMenu.performShortcut(const AArg0: Integer; const AArg1: JKeyEvent; const AArg2: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performShortcut', '(ILandroid/view/KeyEvent;I)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJMenu.removeGroup(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeGroup', '(I)V', [AArg0]);
end;

procedure TJMenu.removeItem(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeItem', '(I)V', [AArg0]);
end;

procedure TJMenu.setGroupCheckable(const AArg0: Integer; const AArg1: Boolean; const AArg2: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setGroupCheckable', '(IZZ)V', [AArg0, AArg1, AArg2]);
end;

procedure TJMenu.setGroupEnabled(const AArg0: Integer; const AArg1: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setGroupEnabled', '(IZ)V', [AArg0, AArg1]);
end;

procedure TJMenu.setGroupVisible(const AArg0: Integer; const AArg1: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setGroupVisible', '(IZ)V', [AArg0, AArg1]);
end;

procedure TJMenu.setQwertyMode(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setQwertyMode', '(Z)V', [AArg0]);
end;

function TJMenu.size: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'size', '()I', []);
end;

{ TJSubMenu }

class procedure TJSubMenu.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('clearHeader', '()V');
  AddMethod('getItem', '()Landroid/view/MenuItem;');
  AddMethod('setHeaderIcon', '(Landroid/graphics/drawable/Drawable;)Landroid/view/SubMenu;');
  AddMethod('setHeaderIcon', '(I)Landroid/view/SubMenu;');
  AddMethod('setHeaderTitle', '(I)Landroid/view/SubMenu;');
  AddMethod('setHeaderTitle', '(Ljava/lang/CharSequence;)Landroid/view/SubMenu;');
  AddMethod('setHeaderView', '(Landroid/view/View;)Landroid/view/SubMenu;');
  AddMethod('setIcon', '(Landroid/graphics/drawable/Drawable;)Landroid/view/SubMenu;');
  AddMethod('setIcon', '(I)Landroid/view/SubMenu;');
end;

class function TJSubMenu.Wrap(const AObjectID: JNIObject): JSubMenu;
begin
  Result := Wrap<TJSubMenu, JSubMenu>(AObjectId);
end;

class function TJSubMenu.Wrap(const AObject: IJNIObject): JSubMenu;
begin
  Result := Wrap<TJSubMenu, JSubMenu>(AObject);
end;

procedure TJSubMenu.clearHeader;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearHeader', '()V', []);
end;

function TJSubMenu.getItem: JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('getItem', '()Landroid/view/MenuItem;', []);
end;

function TJSubMenu.setHeaderIcon(const AArg0: JDrawable): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('setHeaderIcon', '(Landroid/graphics/drawable/Drawable;)Landroid/view/SubMenu;', [AArg0]);
end;

function TJSubMenu.setHeaderIcon(const AArg0: Integer): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('setHeaderIcon', '(I)Landroid/view/SubMenu;', [AArg0]);
end;

function TJSubMenu.setHeaderTitle(const AArg0: Integer): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('setHeaderTitle', '(I)Landroid/view/SubMenu;', [AArg0]);
end;

function TJSubMenu.setHeaderTitle(const AArg0: JCharSequence): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('setHeaderTitle', '(Ljava/lang/CharSequence;)Landroid/view/SubMenu;', [AArg0]);
end;

function TJSubMenu.setHeaderView(const AArg0: JView): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('setHeaderView', '(Landroid/view/View;)Landroid/view/SubMenu;', [AArg0]);
end;

function TJSubMenu.setIcon(const AArg0: JDrawable): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('setIcon', '(Landroid/graphics/drawable/Drawable;)Landroid/view/SubMenu;', [AArg0]);
end;

function TJSubMenu.setIcon(const AArg0: Integer): JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('setIcon', '(I)Landroid/view/SubMenu;', [AArg0]);
end;

{ TJMenuItem }

class procedure TJMenuItem.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('collapseActionView', '()Z');
  AddMethod('expandActionView', '()Z');
  AddMethod('getActionView', '()Landroid/view/View;');
  AddMethod('getAlphabeticShortcut', '()C');
  AddMethod('getGroupId', '()I');
  AddMethod('getIcon', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('getIntent', '()Landroid/content/Intent;');
  AddMethod('getItemId', '()I');
  AddMethod('getNumericShortcut', '()C');
  AddMethod('getOrder', '()I');
  AddMethod('getSubMenu', '()Landroid/view/SubMenu;');
  AddMethod('getTitle', '()Ljava/lang/CharSequence;');
  AddMethod('getTitleCondensed', '()Ljava/lang/CharSequence;');
  AddMethod('hasSubMenu', '()Z');
  AddMethod('isActionViewExpanded', '()Z');
  AddMethod('isCheckable', '()Z');
  AddMethod('isChecked', '()Z');
  AddMethod('isEnabled', '()Z');
  AddMethod('isVisible', '()Z');
  AddMethod('setActionView', '(I)Landroid/view/MenuItem;');
  AddMethod('setActionView', '(Landroid/view/View;)Landroid/view/MenuItem;');
  AddMethod('setAlphabeticShortcut', '(C)Landroid/view/MenuItem;');
  AddMethod('setCheckable', '(Z)Landroid/view/MenuItem;');
  AddMethod('setChecked', '(Z)Landroid/view/MenuItem;');
  AddMethod('setEnabled', '(Z)Landroid/view/MenuItem;');
  AddMethod('setIcon', '(Landroid/graphics/drawable/Drawable;)Landroid/view/MenuItem;');
  AddMethod('setIcon', '(I)Landroid/view/MenuItem;');
  AddMethod('setIntent', '(Landroid/content/Intent;)Landroid/view/MenuItem;');
  AddMethod('setNumericShortcut', '(C)Landroid/view/MenuItem;');
  AddMethod('setOnActionExpandListener', '(Landroid/view/MenuItem$OnActionExpandListener;)Landroid/view/MenuItem;');
  AddMethod('setOnMenuItemClickListener', '(Landroid/view/MenuItem$OnMenuItemClickListener;)Landroid/view/MenuItem;');
  AddMethod('setShortcut', '(CC)Landroid/view/MenuItem;');
  AddMethod('setShowAsAction', '(I)V');
  AddMethod('setShowAsActionFlags', '(I)Landroid/view/MenuItem;');
  AddMethod('setTitle', '(I)Landroid/view/MenuItem;');
  AddMethod('setTitle', '(Ljava/lang/CharSequence;)Landroid/view/MenuItem;');
  AddMethod('setTitleCondensed', '(Ljava/lang/CharSequence;)Landroid/view/MenuItem;');
  AddMethod('setVisible', '(Z)Landroid/view/MenuItem;');
end;

class procedure TJMenuItem.LoadFields;
begin
  inherited;
  AddStaticField('SHOW_AS_ACTION_ALWAYS', 'I');
  AddStaticField('SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW', 'I');
  AddStaticField('SHOW_AS_ACTION_IF_ROOM', 'I');
  AddStaticField('SHOW_AS_ACTION_NEVER', 'I');
  AddStaticField('SHOW_AS_ACTION_WITH_TEXT', 'I');
end;

class function TJMenuItem.Wrap(const AObjectID: JNIObject): JMenuItem;
begin
  Result := Wrap<TJMenuItem, JMenuItem>(AObjectId);
end;

class function TJMenuItem.Wrap(const AObject: IJNIObject): JMenuItem;
begin
  Result := Wrap<TJMenuItem, JMenuItem>(AObject);
end;

class function TJMenuItem.SHOW_AS_ACTION_ALWAYS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SHOW_AS_ACTION_ALWAYS');
end;

class function TJMenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW');
end;

class function TJMenuItem.SHOW_AS_ACTION_IF_ROOM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SHOW_AS_ACTION_IF_ROOM');
end;

class function TJMenuItem.SHOW_AS_ACTION_NEVER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SHOW_AS_ACTION_NEVER');
end;

class function TJMenuItem.SHOW_AS_ACTION_WITH_TEXT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SHOW_AS_ACTION_WITH_TEXT');
end;

function TJMenuItem.collapseActionView: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'collapseActionView', '()Z', []);
end;

function TJMenuItem.expandActionView: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'expandActionView', '()Z', []);
end;

function TJMenuItem.getActionView: JView;
begin
  Result := CallObjectMethod<TJView, JView>('getActionView', '()Landroid/view/View;', []);
end;

function TJMenuItem.getAlphabeticShortcut: Char;
begin
  Result := JavaType.CallCharMethod(ObjectID, 'getAlphabeticShortcut', '()C', []);
end;

function TJMenuItem.getGroupId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getGroupId', '()I', []);
end;

function TJMenuItem.getIcon: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getIcon', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJMenuItem.getIntent: JIntent;
begin
  Result := CallObjectMethod<TJIntent, JIntent>('getIntent', '()Landroid/content/Intent;', []);
end;

function TJMenuItem.getItemId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getItemId', '()I', []);
end;

function TJMenuItem.getNumericShortcut: Char;
begin
  Result := JavaType.CallCharMethod(ObjectID, 'getNumericShortcut', '()C', []);
end;

function TJMenuItem.getOrder: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOrder', '()I', []);
end;

function TJMenuItem.getSubMenu: JSubMenu;
begin
  Result := CallObjectMethod<TJSubMenu, JSubMenu>('getSubMenu', '()Landroid/view/SubMenu;', []);
end;

function TJMenuItem.getTitle: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getTitle', '()Ljava/lang/CharSequence;', []);
end;

function TJMenuItem.getTitleCondensed: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getTitleCondensed', '()Ljava/lang/CharSequence;', []);
end;

function TJMenuItem.hasSubMenu: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasSubMenu', '()Z', []);
end;

function TJMenuItem.isActionViewExpanded: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isActionViewExpanded', '()Z', []);
end;

function TJMenuItem.isCheckable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isCheckable', '()Z', []);
end;

function TJMenuItem.isChecked: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isChecked', '()Z', []);
end;

function TJMenuItem.isEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEnabled', '()Z', []);
end;

function TJMenuItem.isVisible: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVisible', '()Z', []);
end;

function TJMenuItem.setActionView(const AArg0: Integer): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setActionView', '(I)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setActionView(const AArg0: JView): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setActionView', '(Landroid/view/View;)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setAlphabeticShortcut(const AArg0: Char): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setAlphabeticShortcut', '(C)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setCheckable(const AArg0: Boolean): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setCheckable', '(Z)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setChecked(const AArg0: Boolean): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setChecked', '(Z)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setEnabled(const AArg0: Boolean): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setEnabled', '(Z)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setIcon(const AArg0: JDrawable): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setIcon', '(Landroid/graphics/drawable/Drawable;)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setIcon(const AArg0: Integer): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setIcon', '(I)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setIntent(const AArg0: JIntent): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setIntent', '(Landroid/content/Intent;)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setNumericShortcut(const AArg0: Char): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setNumericShortcut', '(C)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setOnActionExpandListener(const AArg0: JMenuItem_OnActionExpandListener): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setOnActionExpandListener', '(Landroid/view/MenuItem$OnActionExpandListener;)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setOnMenuItemClickListener(const AArg0: JMenuItem_OnMenuItemClickListener): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setOnMenuItemClickListener', '(Landroid/view/MenuItem$OnMenuItemClickListener;)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setShortcut(const AArg0: Char; const AArg1: Char): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setShortcut', '(CC)Landroid/view/MenuItem;', [AArg0, AArg1]);
end;

procedure TJMenuItem.setShowAsAction(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setShowAsAction', '(I)V', [AArg0]);
end;

function TJMenuItem.setShowAsActionFlags(const AArg0: Integer): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setShowAsActionFlags', '(I)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setTitle(const AArg0: Integer): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setTitle', '(I)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setTitle(const AArg0: JCharSequence): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setTitle', '(Ljava/lang/CharSequence;)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setTitleCondensed(const AArg0: JCharSequence): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setTitleCondensed', '(Ljava/lang/CharSequence;)Landroid/view/MenuItem;', [AArg0]);
end;

function TJMenuItem.setVisible(const AArg0: Boolean): JMenuItem;
begin
  Result := CallObjectMethod<TJMenuItem, JMenuItem>('setVisible', '(Z)Landroid/view/MenuItem;', [AArg0]);
end;

{ TJMenuItem_OnActionExpandListener }

class procedure TJMenuItem_OnActionExpandListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onMenuItemActionCollapse', '(Landroid/view/MenuItem;)Z');
  AddMethod('onMenuItemActionExpand', '(Landroid/view/MenuItem;)Z');
end;

class function TJMenuItem_OnActionExpandListener.Wrap(const AObjectID: JNIObject): JMenuItem_OnActionExpandListener;
begin
  Result := Wrap<TJMenuItem_OnActionExpandListener, JMenuItem_OnActionExpandListener>(AObjectId);
end;

class function TJMenuItem_OnActionExpandListener.Wrap(const AObject: IJNIObject): JMenuItem_OnActionExpandListener;
begin
  Result := Wrap<TJMenuItem_OnActionExpandListener, JMenuItem_OnActionExpandListener>(AObject);
end;

function TJMenuItem_OnActionExpandListener.onMenuItemActionCollapse(const AArg0: JMenuItem): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onMenuItemActionCollapse', '(Landroid/view/MenuItem;)Z', [AArg0]);
end;

function TJMenuItem_OnActionExpandListener.onMenuItemActionExpand(const AArg0: JMenuItem): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onMenuItemActionExpand', '(Landroid/view/MenuItem;)Z', [AArg0]);
end;

{ TJMenuItem_OnMenuItemClickListener }

class procedure TJMenuItem_OnMenuItemClickListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onMenuItemClick', '(Landroid/view/MenuItem;)Z');
end;

class function TJMenuItem_OnMenuItemClickListener.Wrap(const AObjectID: JNIObject): JMenuItem_OnMenuItemClickListener;
begin
  Result := Wrap<TJMenuItem_OnMenuItemClickListener, JMenuItem_OnMenuItemClickListener>(AObjectId);
end;

class function TJMenuItem_OnMenuItemClickListener.Wrap(const AObject: IJNIObject): JMenuItem_OnMenuItemClickListener;
begin
  Result := Wrap<TJMenuItem_OnMenuItemClickListener, JMenuItem_OnMenuItemClickListener>(AObject);
end;

function TJMenuItem_OnMenuItemClickListener.onMenuItemClick(const AArg0: JMenuItem): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onMenuItemClick', '(Landroid/view/MenuItem;)Z', [AArg0]);
end;

{ TJScaleGestureDetector }

class procedure TJScaleGestureDetector.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;Landroid/view/ScaleGestureDetector$OnScaleGestureListener;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/view/ScaleGestureDetector$OnScaleGestureListener;Landroid/os/Handler;)V');
end;

class procedure TJScaleGestureDetector.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getCurrentSpan', '()F');
  AddMethod('getCurrentSpanX', '()F');
  AddMethod('getCurrentSpanY', '()F');
  AddMethod('getEventTime', '()J');
  AddMethod('getFocusX', '()F');
  AddMethod('getFocusY', '()F');
  AddMethod('getPreviousSpan', '()F');
  AddMethod('getPreviousSpanX', '()F');
  AddMethod('getPreviousSpanY', '()F');
  AddMethod('getScaleFactor', '()F');
  AddMethod('getTimeDelta', '()J');
  AddMethod('isInProgress', '()Z');
  AddMethod('isQuickScaleEnabled', '()Z');
  AddMethod('isStylusScaleEnabled', '()Z');
  AddMethod('onTouchEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('setQuickScaleEnabled', '(Z)V');
  AddMethod('setStylusScaleEnabled', '(Z)V');
end;

class function TJScaleGestureDetector.Wrap(const AObjectID: JNIObject): JScaleGestureDetector;
begin
  Result := Wrap<TJScaleGestureDetector, JScaleGestureDetector>(AObjectId);
end;

class function TJScaleGestureDetector.Wrap(const AObject: IJNIObject): JScaleGestureDetector;
begin
  Result := Wrap<TJScaleGestureDetector, JScaleGestureDetector>(AObject);
end;

class function TJScaleGestureDetector.Create(const AArg0: JContext; const AArg1: JScaleGestureDetector_OnScaleGestureListener): JScaleGestureDetector;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/view/ScaleGestureDetector$OnScaleGestureListener;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJScaleGestureDetector.Create(const AArg0: JContext; const AArg1: JScaleGestureDetector_OnScaleGestureListener; const AArg2: JHandler): JScaleGestureDetector;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/view/ScaleGestureDetector$OnScaleGestureListener;Landroid/os/Handler;)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

function TJScaleGestureDetector.getCurrentSpan: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getCurrentSpan', '()F', []);
end;

function TJScaleGestureDetector.getCurrentSpanX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getCurrentSpanX', '()F', []);
end;

function TJScaleGestureDetector.getCurrentSpanY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getCurrentSpanY', '()F', []);
end;

function TJScaleGestureDetector.getEventTime: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getEventTime', '()J', []);
end;

function TJScaleGestureDetector.getFocusX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFocusX', '()F', []);
end;

function TJScaleGestureDetector.getFocusY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFocusY', '()F', []);
end;

function TJScaleGestureDetector.getPreviousSpan: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getPreviousSpan', '()F', []);
end;

function TJScaleGestureDetector.getPreviousSpanX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getPreviousSpanX', '()F', []);
end;

function TJScaleGestureDetector.getPreviousSpanY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getPreviousSpanY', '()F', []);
end;

function TJScaleGestureDetector.getScaleFactor: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getScaleFactor', '()F', []);
end;

function TJScaleGestureDetector.getTimeDelta: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getTimeDelta', '()J', []);
end;

function TJScaleGestureDetector.isInProgress: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInProgress', '()Z', []);
end;

function TJScaleGestureDetector.isQuickScaleEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isQuickScaleEnabled', '()Z', []);
end;

function TJScaleGestureDetector.isStylusScaleEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStylusScaleEnabled', '()Z', []);
end;

function TJScaleGestureDetector.onTouchEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onTouchEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJScaleGestureDetector.setQuickScaleEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setQuickScaleEnabled', '(Z)V', [AArg0]);
end;

procedure TJScaleGestureDetector.setStylusScaleEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStylusScaleEnabled', '(Z)V', [AArg0]);
end;

{ TJScaleGestureDetector_OnScaleGestureListener }

class procedure TJScaleGestureDetector_OnScaleGestureListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onScale', '(Landroid/view/ScaleGestureDetector;)Z');
  AddMethod('onScaleBegin', '(Landroid/view/ScaleGestureDetector;)Z');
  AddMethod('onScaleEnd', '(Landroid/view/ScaleGestureDetector;)V');
end;

class function TJScaleGestureDetector_OnScaleGestureListener.Wrap(const AObjectID: JNIObject): JScaleGestureDetector_OnScaleGestureListener;
begin
  Result := Wrap<TJScaleGestureDetector_OnScaleGestureListener, JScaleGestureDetector_OnScaleGestureListener>(AObjectId);
end;

class function TJScaleGestureDetector_OnScaleGestureListener.Wrap(const AObject: IJNIObject): JScaleGestureDetector_OnScaleGestureListener;
begin
  Result := Wrap<TJScaleGestureDetector_OnScaleGestureListener, JScaleGestureDetector_OnScaleGestureListener>(AObject);
end;

function TJScaleGestureDetector_OnScaleGestureListener.onScale(const AArg0: JScaleGestureDetector): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onScale', '(Landroid/view/ScaleGestureDetector;)Z', [AArg0]);
end;

function TJScaleGestureDetector_OnScaleGestureListener.onScaleBegin(const AArg0: JScaleGestureDetector): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onScaleBegin', '(Landroid/view/ScaleGestureDetector;)Z', [AArg0]);
end;

procedure TJScaleGestureDetector_OnScaleGestureListener.onScaleEnd(const AArg0: JScaleGestureDetector);
begin
  JavaType.CallVoidMethod(ObjectID, 'onScaleEnd', '(Landroid/view/ScaleGestureDetector;)V', [AArg0]);
end;

{ TJScaleGestureDetector_SimpleOnScaleGestureListener }

class procedure TJScaleGestureDetector_SimpleOnScaleGestureListener.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJScaleGestureDetector_SimpleOnScaleGestureListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onScale', '(Landroid/view/ScaleGestureDetector;)Z');
  AddMethod('onScaleBegin', '(Landroid/view/ScaleGestureDetector;)Z');
  AddMethod('onScaleEnd', '(Landroid/view/ScaleGestureDetector;)V');
end;

class function TJScaleGestureDetector_SimpleOnScaleGestureListener.Wrap(const AObjectID: JNIObject): JScaleGestureDetector_SimpleOnScaleGestureListener;
begin
  Result := Wrap<TJScaleGestureDetector_SimpleOnScaleGestureListener, JScaleGestureDetector_SimpleOnScaleGestureListener>(AObjectId);
end;

class function TJScaleGestureDetector_SimpleOnScaleGestureListener.Wrap(const AObject: IJNIObject): JScaleGestureDetector_SimpleOnScaleGestureListener;
begin
  Result := Wrap<TJScaleGestureDetector_SimpleOnScaleGestureListener, JScaleGestureDetector_SimpleOnScaleGestureListener>(AObject);
end;

class function TJScaleGestureDetector_SimpleOnScaleGestureListener.Create: JScaleGestureDetector_SimpleOnScaleGestureListener;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJScaleGestureDetector_SimpleOnScaleGestureListener.onScale(const AArg0: JScaleGestureDetector): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onScale', '(Landroid/view/ScaleGestureDetector;)Z', [AArg0]);
end;

function TJScaleGestureDetector_SimpleOnScaleGestureListener.onScaleBegin(const AArg0: JScaleGestureDetector): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onScaleBegin', '(Landroid/view/ScaleGestureDetector;)Z', [AArg0]);
end;

procedure TJScaleGestureDetector_SimpleOnScaleGestureListener.onScaleEnd(const AArg0: JScaleGestureDetector);
begin
  JavaType.CallVoidMethod(ObjectID, 'onScaleEnd', '(Landroid/view/ScaleGestureDetector;)V', [AArg0]);
end;

{ TJSurface }

class procedure TJSurface.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/graphics/SurfaceTexture;)V');
end;

class procedure TJSurface.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('isValid', '()Z');
  AddMethod('lockCanvas', '(Landroid/graphics/Rect;)Landroid/graphics/Canvas;');
  AddMethod('lockHardwareCanvas', '()Landroid/graphics/Canvas;');
  AddMethod('release', '()V');
  AddMethod('toString', '()Ljava/lang/String;');
  AddMethod('unlockCanvas', '(Landroid/graphics/Canvas;)V');
  AddMethod('unlockCanvasAndPost', '(Landroid/graphics/Canvas;)V');
end;

class procedure TJSurface.LoadFields;
begin
  inherited;
  AddStaticField('ROTATION_0', 'I');
  AddStaticField('ROTATION_180', 'I');
  AddStaticField('ROTATION_270', 'I');
  AddStaticField('ROTATION_90', 'I');
end;

class function TJSurface.Wrap(const AObjectID: JNIObject): JSurface;
begin
  Result := Wrap<TJSurface, JSurface>(AObjectId);
end;

class function TJSurface.Wrap(const AObject: IJNIObject): JSurface;
begin
  Result := Wrap<TJSurface, JSurface>(AObject);
end;

class function TJSurface.Create(const AArg0: JSurfaceTexture): JSurface;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/graphics/SurfaceTexture;)V', [AArg0]);
  Result := O;
end;

class function TJSurface.ROTATION_0: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ROTATION_0');
end;

class function TJSurface.ROTATION_180: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ROTATION_180');
end;

class function TJSurface.ROTATION_270: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ROTATION_270');
end;

class function TJSurface.ROTATION_90: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ROTATION_90');
end;

function TJSurface.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJSurface.isValid: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isValid', '()Z', []);
end;

function TJSurface.lockCanvas(const AArg0: JRect): JCanvas;
begin
  Result := CallObjectMethod<TJCanvas, JCanvas>('lockCanvas', '(Landroid/graphics/Rect;)Landroid/graphics/Canvas;', [AArg0]);
end;

function TJSurface.lockHardwareCanvas: JCanvas;
begin
  Result := CallObjectMethod<TJCanvas, JCanvas>('lockHardwareCanvas', '()Landroid/graphics/Canvas;', []);
end;

procedure TJSurface.release;
begin
  JavaType.CallVoidMethod(ObjectID, 'release', '()V', []);
end;

function TJSurface.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

procedure TJSurface.unlockCanvas(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'unlockCanvas', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

procedure TJSurface.unlockCanvasAndPost(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'unlockCanvasAndPost', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

{ TJSurfaceHolder }

class procedure TJSurfaceHolder.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addCallback', '(Landroid/view/SurfaceHolder$Callback;)V');
  AddMethod('getSurface', '()Landroid/view/Surface;');
  AddMethod('getSurfaceFrame', '()Landroid/graphics/Rect;');
  AddMethod('isCreating', '()Z');
  AddMethod('lockCanvas', '(Landroid/graphics/Rect;)Landroid/graphics/Canvas;');
  AddMethod('lockCanvas', '()Landroid/graphics/Canvas;');
  AddMethod('removeCallback', '(Landroid/view/SurfaceHolder$Callback;)V');
  AddMethod('setFixedSize', '(II)V');
  AddMethod('setFormat', '(I)V');
  AddMethod('setKeepScreenOn', '(Z)V');
  AddMethod('setSizeFromLayout', '()V');
  AddMethod('setType', '(I)V');
  AddMethod('unlockCanvasAndPost', '(Landroid/graphics/Canvas;)V');
end;

class procedure TJSurfaceHolder.LoadFields;
begin
  inherited;
  AddStaticField('SURFACE_TYPE_GPU', 'I');
  AddStaticField('SURFACE_TYPE_HARDWARE', 'I');
  AddStaticField('SURFACE_TYPE_NORMAL', 'I');
  AddStaticField('SURFACE_TYPE_PUSH_BUFFERS', 'I');
end;

class function TJSurfaceHolder.Wrap(const AObjectID: JNIObject): JSurfaceHolder;
begin
  Result := Wrap<TJSurfaceHolder, JSurfaceHolder>(AObjectId);
end;

class function TJSurfaceHolder.Wrap(const AObject: IJNIObject): JSurfaceHolder;
begin
  Result := Wrap<TJSurfaceHolder, JSurfaceHolder>(AObject);
end;

class function TJSurfaceHolder.SURFACE_TYPE_GPU: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SURFACE_TYPE_GPU');
end;

class function TJSurfaceHolder.SURFACE_TYPE_HARDWARE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SURFACE_TYPE_HARDWARE');
end;

class function TJSurfaceHolder.SURFACE_TYPE_NORMAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SURFACE_TYPE_NORMAL');
end;

class function TJSurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SURFACE_TYPE_PUSH_BUFFERS');
end;

procedure TJSurfaceHolder.addCallback(const AArg0: JSurfaceHolder_Callback);
begin
  JavaType.CallVoidMethod(ObjectID, 'addCallback', '(Landroid/view/SurfaceHolder$Callback;)V', [AArg0]);
end;

function TJSurfaceHolder.getSurface: JSurface;
begin
  Result := CallObjectMethod<TJSurface, JSurface>('getSurface', '()Landroid/view/Surface;', []);
end;

function TJSurfaceHolder.getSurfaceFrame: JRect;
begin
  Result := CallObjectMethod<TJRect, JRect>('getSurfaceFrame', '()Landroid/graphics/Rect;', []);
end;

function TJSurfaceHolder.isCreating: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isCreating', '()Z', []);
end;

function TJSurfaceHolder.lockCanvas(const AArg0: JRect): JCanvas;
begin
  Result := CallObjectMethod<TJCanvas, JCanvas>('lockCanvas', '(Landroid/graphics/Rect;)Landroid/graphics/Canvas;', [AArg0]);
end;

function TJSurfaceHolder.lockCanvas: JCanvas;
begin
  Result := CallObjectMethod<TJCanvas, JCanvas>('lockCanvas', '()Landroid/graphics/Canvas;', []);
end;

procedure TJSurfaceHolder.removeCallback(const AArg0: JSurfaceHolder_Callback);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeCallback', '(Landroid/view/SurfaceHolder$Callback;)V', [AArg0]);
end;

procedure TJSurfaceHolder.setFixedSize(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFixedSize', '(II)V', [AArg0, AArg1]);
end;

procedure TJSurfaceHolder.setFormat(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFormat', '(I)V', [AArg0]);
end;

procedure TJSurfaceHolder.setKeepScreenOn(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setKeepScreenOn', '(Z)V', [AArg0]);
end;

procedure TJSurfaceHolder.setSizeFromLayout;
begin
  JavaType.CallVoidMethod(ObjectID, 'setSizeFromLayout', '()V', []);
end;

procedure TJSurfaceHolder.setType(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setType', '(I)V', [AArg0]);
end;

procedure TJSurfaceHolder.unlockCanvasAndPost(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'unlockCanvasAndPost', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

{ TJSurfaceHolder_BadSurfaceTypeException }

class procedure TJSurfaceHolder_BadSurfaceTypeException.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Ljava/lang/String;)V');
end;

class procedure TJSurfaceHolder_BadSurfaceTypeException.LoadMethods;
begin
  inherited;
end;

class function TJSurfaceHolder_BadSurfaceTypeException.Wrap(const AObjectID: JNIObject): JSurfaceHolder_BadSurfaceTypeException;
begin
  Result := Wrap<TJSurfaceHolder_BadSurfaceTypeException, JSurfaceHolder_BadSurfaceTypeException>(AObjectId);
end;

class function TJSurfaceHolder_BadSurfaceTypeException.Wrap(const AObject: IJNIObject): JSurfaceHolder_BadSurfaceTypeException;
begin
  Result := Wrap<TJSurfaceHolder_BadSurfaceTypeException, JSurfaceHolder_BadSurfaceTypeException>(AObject);
end;

class function TJSurfaceHolder_BadSurfaceTypeException.Create: JSurfaceHolder_BadSurfaceTypeException;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJSurfaceHolder_BadSurfaceTypeException.Create(const AArg0: JString): JSurfaceHolder_BadSurfaceTypeException;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

{ TJSurfaceHolder_Callback }

class procedure TJSurfaceHolder_Callback.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('surfaceChanged', '(Landroid/view/SurfaceHolder;III)V');
  AddMethod('surfaceCreated', '(Landroid/view/SurfaceHolder;)V');
  AddMethod('surfaceDestroyed', '(Landroid/view/SurfaceHolder;)V');
end;

class function TJSurfaceHolder_Callback.Wrap(const AObjectID: JNIObject): JSurfaceHolder_Callback;
begin
  Result := Wrap<TJSurfaceHolder_Callback, JSurfaceHolder_Callback>(AObjectId);
end;

class function TJSurfaceHolder_Callback.Wrap(const AObject: IJNIObject): JSurfaceHolder_Callback;
begin
  Result := Wrap<TJSurfaceHolder_Callback, JSurfaceHolder_Callback>(AObject);
end;

procedure TJSurfaceHolder_Callback.surfaceChanged(const AArg0: JSurfaceHolder; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'surfaceChanged', '(Landroid/view/SurfaceHolder;III)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJSurfaceHolder_Callback.surfaceCreated(const AArg0: JSurfaceHolder);
begin
  JavaType.CallVoidMethod(ObjectID, 'surfaceCreated', '(Landroid/view/SurfaceHolder;)V', [AArg0]);
end;

procedure TJSurfaceHolder_Callback.surfaceDestroyed(const AArg0: JSurfaceHolder);
begin
  JavaType.CallVoidMethod(ObjectID, 'surfaceDestroyed', '(Landroid/view/SurfaceHolder;)V', [AArg0]);
end;

{ TJSurfaceHolder_Callback2 }

class procedure TJSurfaceHolder_Callback2.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('surfaceRedrawNeeded', '(Landroid/view/SurfaceHolder;)V');
end;

class function TJSurfaceHolder_Callback2.Wrap(const AObjectID: JNIObject): JSurfaceHolder_Callback2;
begin
  Result := Wrap<TJSurfaceHolder_Callback2, JSurfaceHolder_Callback2>(AObjectId);
end;

class function TJSurfaceHolder_Callback2.Wrap(const AObject: IJNIObject): JSurfaceHolder_Callback2;
begin
  Result := Wrap<TJSurfaceHolder_Callback2, JSurfaceHolder_Callback2>(AObject);
end;

procedure TJSurfaceHolder_Callback2.surfaceRedrawNeeded(const AArg0: JSurfaceHolder);
begin
  JavaType.CallVoidMethod(ObjectID, 'surfaceRedrawNeeded', '(Landroid/view/SurfaceHolder;)V', [AArg0]);
end;

{ TJTextureView_SurfaceTextureListener }

class procedure TJTextureView_SurfaceTextureListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onSurfaceTextureAvailable', '(Landroid/graphics/SurfaceTexture;II)V');
  AddMethod('onSurfaceTextureDestroyed', '(Landroid/graphics/SurfaceTexture;)Z');
  AddMethod('onSurfaceTextureSizeChanged', '(Landroid/graphics/SurfaceTexture;II)V');
  AddMethod('onSurfaceTextureUpdated', '(Landroid/graphics/SurfaceTexture;)V');
end;

class function TJTextureView_SurfaceTextureListener.Wrap(const AObjectID: JNIObject): JTextureView_SurfaceTextureListener;
begin
  Result := Wrap<TJTextureView_SurfaceTextureListener, JTextureView_SurfaceTextureListener>(AObjectId);
end;

class function TJTextureView_SurfaceTextureListener.Wrap(const AObject: IJNIObject): JTextureView_SurfaceTextureListener;
begin
  Result := Wrap<TJTextureView_SurfaceTextureListener, JTextureView_SurfaceTextureListener>(AObject);
end;

procedure TJTextureView_SurfaceTextureListener.onSurfaceTextureAvailable(const AArg0: JSurfaceTexture; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onSurfaceTextureAvailable', '(Landroid/graphics/SurfaceTexture;II)V', [AArg0, AArg1, AArg2]);
end;

function TJTextureView_SurfaceTextureListener.onSurfaceTextureDestroyed(const AArg0: JSurfaceTexture): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onSurfaceTextureDestroyed', '(Landroid/graphics/SurfaceTexture;)Z', [AArg0]);
end;

procedure TJTextureView_SurfaceTextureListener.onSurfaceTextureSizeChanged(const AArg0: JSurfaceTexture; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onSurfaceTextureSizeChanged', '(Landroid/graphics/SurfaceTexture;II)V', [AArg0, AArg1, AArg2]);
end;

procedure TJTextureView_SurfaceTextureListener.onSurfaceTextureUpdated(const AArg0: JSurfaceTexture);
begin
  JavaType.CallVoidMethod(ObjectID, 'onSurfaceTextureUpdated', '(Landroid/graphics/SurfaceTexture;)V', [AArg0]);
end;

{ TJView }

class procedure TJView.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;I)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;II)V');
end;

class procedure TJView.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addChildrenForAccessibility', '(Ljava/util/ArrayList;)V');
  AddMethod('addFocusables', '(Ljava/util/ArrayList;I)V');
  AddMethod('addFocusables', '(Ljava/util/ArrayList;II)V');
  AddMethod('addKeyboardNavigationClusters', '(Ljava/util/Collection;I)V');
  AddMethod('addOnLayoutChangeListener', '(Landroid/view/View$OnLayoutChangeListener;)V');
  AddMethod('addTouchables', '(Ljava/util/ArrayList;)V');
  AddMethod('announceForAccessibility', '(Ljava/lang/CharSequence;)V');
  AddMethod('autofill', '(Landroid/util/SparseArray;)V');
  AddMethod('bringToFront', '()V');
  AddMethod('buildDrawingCache', '(Z)V');
  AddMethod('buildDrawingCache', '()V');
  AddMethod('buildLayer', '()V');
  AddMethod('callOnClick', '()Z');
  AddMethod('canResolveLayoutDirection', '()Z');
  AddMethod('canResolveTextAlignment', '()Z');
  AddMethod('canResolveTextDirection', '()Z');
  AddMethod('canScrollHorizontally', '(I)Z');
  AddMethod('canScrollVertically', '(I)Z');
  AddMethod('cancelDragAndDrop', '()V');
  AddMethod('cancelLongPress', '()V');
  AddMethod('cancelPendingInputEvents', '()V');
  AddMethod('checkInputConnectionProxy', '(Landroid/view/View;)Z');
  AddMethod('clearAnimation', '()V');
  AddMethod('clearFocus', '()V');
  AddStaticMethod('combineMeasuredStates', '(II)I');
  AddMethod('computeScroll', '()V');
  AddMethod('destroyDrawingCache', '()V');
  AddMethod('dispatchCapturedPointerEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('dispatchConfigurationChanged', '(Landroid/content/res/Configuration;)V');
  AddMethod('dispatchDisplayHint', '(I)V');
  AddMethod('dispatchDragEvent', '(Landroid/view/DragEvent;)Z');
  AddMethod('dispatchDrawableHotspotChanged', '(FF)V');
  AddMethod('dispatchFinishTemporaryDetach', '()V');
  AddMethod('dispatchGenericMotionEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('dispatchKeyEvent', '(Landroid/view/KeyEvent;)Z');
  AddMethod('dispatchKeyEventPreIme', '(Landroid/view/KeyEvent;)Z');
  AddMethod('dispatchKeyShortcutEvent', '(Landroid/view/KeyEvent;)Z');
  AddMethod('dispatchNestedFling', '(FFZ)Z');
  AddMethod('dispatchNestedPreFling', '(FF)Z');
  AddMethod('dispatchNestedPrePerformAccessibilityAction', '(ILandroid/os/Bundle;)Z');
  AddMethod('dispatchNestedPreScroll', '(II[I[I)Z');
  AddMethod('dispatchNestedScroll', '(IIII[I)Z');
  AddMethod('dispatchPointerCaptureChanged', '(Z)V');
  AddMethod('dispatchStartTemporaryDetach', '()V');
  AddMethod('dispatchSystemUiVisibilityChanged', '(I)V');
  AddMethod('dispatchTouchEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('dispatchTrackballEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('dispatchUnhandledMove', '(Landroid/view/View;I)Z');
  AddMethod('dispatchWindowFocusChanged', '(Z)V');
  AddMethod('dispatchWindowSystemUiVisiblityChanged', '(I)V');
  AddMethod('dispatchWindowVisibilityChanged', '(I)V');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('drawableHotspotChanged', '(FF)V');
  AddMethod('findFocus', '()Landroid/view/View;');
  AddMethod('findViewById', '(I)Landroid/view/View;');
  AddMethod('findViewWithTag', '(Ljava/lang/Object;)Landroid/view/View;');
  AddMethod('findViewsWithText', '(Ljava/util/ArrayList;Ljava/lang/CharSequence;I)V');
  AddMethod('focusSearch', '(I)Landroid/view/View;');
  AddMethod('forceHasOverlappingRendering', '(Z)V');
  AddMethod('forceLayout', '()V');
  AddStaticMethod('generateViewId', '()I');
  AddMethod('getAccessibilityClassName', '()Ljava/lang/CharSequence;');
  AddMethod('getAccessibilityLiveRegion', '()I');
  AddMethod('getAccessibilityPaneTitle', '()Ljava/lang/CharSequence;');
  AddMethod('getAccessibilityTraversalAfter', '()I');
  AddMethod('getAccessibilityTraversalBefore', '()I');
  AddMethod('getAlpha', '()F');
  AddMethod('getAnimation', '()Landroid/view/animation/Animation;');
  AddMethod('getApplicationWindowToken', '()Landroid/os/IBinder;');
  AddMethod('getAutofillHints', '()[Ljava/lang/String;');
  AddMethod('getAutofillType', '()I');
  AddMethod('getBackground', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('getBackgroundTintList', '()Landroid/content/res/ColorStateList;');
  AddMethod('getBackgroundTintMode', '()Landroid/graphics/PorterDuff$Mode;');
  AddMethod('getBaseline', '()I');
  AddMethod('getBottom', '()I');
  AddMethod('getCameraDistance', '()F');
  AddMethod('getClipBounds', '(Landroid/graphics/Rect;)Z');
  AddMethod('getClipBounds', '()Landroid/graphics/Rect;');
  AddMethod('getClipToOutline', '()Z');
  AddMethod('getContentDescription', '()Ljava/lang/CharSequence;');
  AddMethod('getContext', '()Landroid/content/Context;');
  AddMethod('getDefaultFocusHighlightEnabled', '()Z');
  AddStaticMethod('getDefaultSize', '(II)I');
  AddMethod('getDisplay', '()Landroid/view/Display;');
  AddMethod('getDrawableState', '()[I');
  AddMethod('getDrawingCache', '(Z)Landroid/graphics/Bitmap;');
  AddMethod('getDrawingCache', '()Landroid/graphics/Bitmap;');
  AddMethod('getDrawingCacheBackgroundColor', '()I');
  AddMethod('getDrawingCacheQuality', '()I');
  AddMethod('getDrawingRect', '(Landroid/graphics/Rect;)V');
  AddMethod('getDrawingTime', '()J');
  AddMethod('getElevation', '()F');
  AddMethod('getFilterTouchesWhenObscured', '()Z');
  AddMethod('getFitsSystemWindows', '()Z');
  AddMethod('getFocusable', '()I');
  AddMethod('getFocusables', '(I)Ljava/util/ArrayList;');
  AddMethod('getFocusedRect', '(Landroid/graphics/Rect;)V');
  AddMethod('getForeground', '()Landroid/graphics/drawable/Drawable;');
  AddMethod('getForegroundGravity', '()I');
  AddMethod('getForegroundTintList', '()Landroid/content/res/ColorStateList;');
  AddMethod('getForegroundTintMode', '()Landroid/graphics/PorterDuff$Mode;');
  AddMethod('getGlobalVisibleRect', '(Landroid/graphics/Rect;)Z');
  AddMethod('getGlobalVisibleRect', '(Landroid/graphics/Rect;Landroid/graphics/Point;)Z');
  AddMethod('getHandler', '()Landroid/os/Handler;');
  AddMethod('getHasOverlappingRendering', '()Z');
  AddMethod('getHeight', '()I');
  AddMethod('getHitRect', '(Landroid/graphics/Rect;)V');
  AddMethod('getHorizontalFadingEdgeLength', '()I');
  AddMethod('getId', '()I');
  AddMethod('getImportantForAccessibility', '()I');
  AddMethod('getImportantForAutofill', '()I');
  AddMethod('getKeepScreenOn', '()Z');
  AddMethod('getLabelFor', '()I');
  AddMethod('getLayerType', '()I');
  AddMethod('getLayoutDirection', '()I');
  AddMethod('getLayoutParams', '()Landroid/view/ViewGroup$LayoutParams;');
  AddMethod('getLeft', '()I');
  AddMethod('getLocalVisibleRect', '(Landroid/graphics/Rect;)Z');
  AddMethod('getLocationInWindow', '([I)V');
  AddMethod('getLocationOnScreen', '([I)V');
  AddMethod('getMatrix', '()Landroid/graphics/Matrix;');
  AddMethod('getMeasuredHeight', '()I');
  AddMethod('getMeasuredHeightAndState', '()I');
  AddMethod('getMeasuredState', '()I');
  AddMethod('getMeasuredWidth', '()I');
  AddMethod('getMeasuredWidthAndState', '()I');
  AddMethod('getMinimumHeight', '()I');
  AddMethod('getMinimumWidth', '()I');
  AddMethod('getNextClusterForwardId', '()I');
  AddMethod('getNextFocusDownId', '()I');
  AddMethod('getNextFocusForwardId', '()I');
  AddMethod('getNextFocusLeftId', '()I');
  AddMethod('getNextFocusRightId', '()I');
  AddMethod('getNextFocusUpId', '()I');
  AddMethod('getOnFocusChangeListener', '()Landroid/view/View$OnFocusChangeListener;');
  AddMethod('getOutlineAmbientShadowColor', '()I');
  AddMethod('getOutlineSpotShadowColor', '()I');
  AddMethod('getOverScrollMode', '()I');
  AddMethod('getPaddingBottom', '()I');
  AddMethod('getPaddingEnd', '()I');
  AddMethod('getPaddingLeft', '()I');
  AddMethod('getPaddingRight', '()I');
  AddMethod('getPaddingStart', '()I');
  AddMethod('getPaddingTop', '()I');
  AddMethod('getParent', '()Landroid/view/ViewParent;');
  AddMethod('getParentForAccessibility', '()Landroid/view/ViewParent;');
  AddMethod('getPivotX', '()F');
  AddMethod('getPivotY', '()F');
  AddMethod('getResources', '()Landroid/content/res/Resources;');
  AddMethod('getRevealOnFocusHint', '()Z');
  AddMethod('getRight', '()I');
  AddMethod('getRootView', '()Landroid/view/View;');
  AddMethod('getRotation', '()F');
  AddMethod('getRotationX', '()F');
  AddMethod('getRotationY', '()F');
  AddMethod('getScaleX', '()F');
  AddMethod('getScaleY', '()F');
  AddMethod('getScrollBarDefaultDelayBeforeFade', '()I');
  AddMethod('getScrollBarFadeDuration', '()I');
  AddMethod('getScrollBarSize', '()I');
  AddMethod('getScrollBarStyle', '()I');
  AddMethod('getScrollIndicators', '()I');
  AddMethod('getScrollX', '()I');
  AddMethod('getScrollY', '()I');
  AddMethod('getSolidColor', '()I');
  AddMethod('getSystemUiVisibility', '()I');
  AddMethod('getTag', '()Ljava/lang/Object;');
  AddMethod('getTag', '(I)Ljava/lang/Object;');
  AddMethod('getTextAlignment', '()I');
  AddMethod('getTextDirection', '()I');
  AddMethod('getTooltipText', '()Ljava/lang/CharSequence;');
  AddMethod('getTop', '()I');
  AddMethod('getTouchables', '()Ljava/util/ArrayList;');
  AddMethod('getTransitionName', '()Ljava/lang/String;');
  AddMethod('getTranslationX', '()F');
  AddMethod('getTranslationY', '()F');
  AddMethod('getTranslationZ', '()F');
  AddMethod('getVerticalFadingEdgeLength', '()I');
  AddMethod('getVerticalScrollbarPosition', '()I');
  AddMethod('getVerticalScrollbarWidth', '()I');
  AddMethod('getViewTreeObserver', '()Landroid/view/ViewTreeObserver;');
  AddMethod('getVisibility', '()I');
  AddMethod('getWidth', '()I');
  AddMethod('getWindowSystemUiVisibility', '()I');
  AddMethod('getWindowToken', '()Landroid/os/IBinder;');
  AddMethod('getWindowVisibility', '()I');
  AddMethod('getWindowVisibleDisplayFrame', '(Landroid/graphics/Rect;)V');
  AddMethod('getX', '()F');
  AddMethod('getY', '()F');
  AddMethod('getZ', '()F');
  AddMethod('hasExplicitFocusable', '()Z');
  AddMethod('hasFocus', '()Z');
  AddMethod('hasFocusable', '()Z');
  AddMethod('hasNestedScrollingParent', '()Z');
  AddMethod('hasOnClickListeners', '()Z');
  AddMethod('hasOverlappingRendering', '()Z');
  AddMethod('hasPointerCapture', '()Z');
  AddMethod('hasTransientState', '()Z');
  AddMethod('hasWindowFocus', '()Z');
  AddStaticMethod('inflate', '(Landroid/content/Context;ILandroid/view/ViewGroup;)Landroid/view/View;');
  AddMethod('invalidate', '()V');
  AddMethod('invalidate', '(IIII)V');
  AddMethod('invalidate', '(Landroid/graphics/Rect;)V');
  AddMethod('invalidateDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('invalidateOutline', '()V');
  AddMethod('isAccessibilityFocused', '()Z');
  AddMethod('isAccessibilityHeading', '()Z');
  AddMethod('isActivated', '()Z');
  AddMethod('isAttachedToWindow', '()Z');
  AddMethod('isClickable', '()Z');
  AddMethod('isContextClickable', '()Z');
  AddMethod('isDirty', '()Z');
  AddMethod('isDrawingCacheEnabled', '()Z');
  AddMethod('isDuplicateParentStateEnabled', '()Z');
  AddMethod('isEnabled', '()Z');
  AddMethod('isFocusable', '()Z');
  AddMethod('isFocusableInTouchMode', '()Z');
  AddMethod('isFocused', '()Z');
  AddMethod('isFocusedByDefault', '()Z');
  AddMethod('isHapticFeedbackEnabled', '()Z');
  AddMethod('isHardwareAccelerated', '()Z');
  AddMethod('isHorizontalFadingEdgeEnabled', '()Z');
  AddMethod('isHorizontalScrollBarEnabled', '()Z');
  AddMethod('isHovered', '()Z');
  AddMethod('isImportantForAccessibility', '()Z');
  AddMethod('isImportantForAutofill', '()Z');
  AddMethod('isInEditMode', '()Z');
  AddMethod('isInLayout', '()Z');
  AddMethod('isInTouchMode', '()Z');
  AddMethod('isKeyboardNavigationCluster', '()Z');
  AddMethod('isLaidOut', '()Z');
  AddMethod('isLayoutDirectionResolved', '()Z');
  AddMethod('isLayoutRequested', '()Z');
  AddMethod('isLongClickable', '()Z');
  AddMethod('isNestedScrollingEnabled', '()Z');
  AddMethod('isOpaque', '()Z');
  AddMethod('isPaddingRelative', '()Z');
  AddMethod('isPivotSet', '()Z');
  AddMethod('isPressed', '()Z');
  AddMethod('isSaveEnabled', '()Z');
  AddMethod('isSaveFromParentEnabled', '()Z');
  AddMethod('isScreenReaderFocusable', '()Z');
  AddMethod('isScrollContainer', '()Z');
  AddMethod('isScrollbarFadingEnabled', '()Z');
  AddMethod('isSelected', '()Z');
  AddMethod('isShown', '()Z');
  AddMethod('isSoundEffectsEnabled', '()Z');
  AddMethod('isTemporarilyDetached', '()Z');
  AddMethod('isTextAlignmentResolved', '()Z');
  AddMethod('isTextDirectionResolved', '()Z');
  AddMethod('isVerticalFadingEdgeEnabled', '()Z');
  AddMethod('isVerticalScrollBarEnabled', '()Z');
  AddMethod('isVisibleToUserForAutofill', '(I)Z');
  AddMethod('jumpDrawablesToCurrentState', '()V');
  AddMethod('keyboardNavigationClusterSearch', '(Landroid/view/View;I)Landroid/view/View;');
  AddMethod('layout', '(IIII)V');
  AddMethod('measure', '(II)V');
  AddMethod('offsetLeftAndRight', '(I)V');
  AddMethod('offsetTopAndBottom', '(I)V');
  AddMethod('onCancelPendingInputEvents', '()V');
  AddMethod('onCapturedPointerEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onCheckIsTextEditor', '()Z');
  AddMethod('onDragEvent', '(Landroid/view/DragEvent;)Z');
  AddMethod('onDrawForeground', '(Landroid/graphics/Canvas;)V');
  AddMethod('onFilterTouchEventForSecurity', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onFinishTemporaryDetach', '()V');
  AddMethod('onGenericMotionEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onHoverChanged', '(Z)V');
  AddMethod('onHoverEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onKeyDown', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('onKeyLongPress', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('onKeyMultiple', '(IILandroid/view/KeyEvent;)Z');
  AddMethod('onKeyPreIme', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('onKeyShortcut', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('onKeyUp', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('onPointerCaptureChange', '(Z)V');
  AddMethod('onRtlPropertiesChanged', '(I)V');
  AddMethod('onScreenStateChanged', '(I)V');
  AddMethod('onStartTemporaryDetach', '()V');
  AddMethod('onTouchEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onTrackballEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onVisibilityAggregated', '(Z)V');
  AddMethod('onWindowFocusChanged', '(Z)V');
  AddMethod('onWindowSystemUiVisibilityChanged', '(I)V');
  AddMethod('performAccessibilityAction', '(ILandroid/os/Bundle;)Z');
  AddMethod('performClick', '()Z');
  AddMethod('performContextClick', '(FF)Z');
  AddMethod('performContextClick', '()Z');
  AddMethod('performHapticFeedback', '(I)Z');
  AddMethod('performHapticFeedback', '(II)Z');
  AddMethod('performLongClick', '()Z');
  AddMethod('performLongClick', '(FF)Z');
  AddMethod('playSoundEffect', '(I)V');
  AddMethod('post', '(Ljava/lang/Runnable;)Z');
  AddMethod('postDelayed', '(Ljava/lang/Runnable;J)Z');
  AddMethod('postInvalidate', '()V');
  AddMethod('postInvalidate', '(IIII)V');
  AddMethod('postInvalidateDelayed', '(J)V');
  AddMethod('postInvalidateDelayed', '(JIIII)V');
  AddMethod('postInvalidateOnAnimation', '()V');
  AddMethod('postInvalidateOnAnimation', '(IIII)V');
  AddMethod('postOnAnimation', '(Ljava/lang/Runnable;)V');
  AddMethod('postOnAnimationDelayed', '(Ljava/lang/Runnable;J)V');
  AddMethod('refreshDrawableState', '()V');
  AddMethod('releasePointerCapture', '()V');
  AddMethod('removeCallbacks', '(Ljava/lang/Runnable;)Z');
  AddMethod('removeOnLayoutChangeListener', '(Landroid/view/View$OnLayoutChangeListener;)V');
  AddMethod('requestApplyInsets', '()V');
  AddMethod('requestFitSystemWindows', '()V');
  AddMethod('requestFocus', '(ILandroid/graphics/Rect;)Z');
  AddMethod('requestFocus', '(I)Z');
  AddMethod('requestFocus', '()Z');
  AddMethod('requestFocusFromTouch', '()Z');
  AddMethod('requestLayout', '()V');
  AddMethod('requestPointerCapture', '()V');
  AddMethod('requestRectangleOnScreen', '(Landroid/graphics/Rect;)Z');
  AddMethod('requestRectangleOnScreen', '(Landroid/graphics/Rect;Z)Z');
  AddMethod('requestUnbufferedDispatch', '(Landroid/view/MotionEvent;)V');
  AddMethod('requireViewById', '(I)Landroid/view/View;');
  AddMethod('resetPivot', '()V');
  AddStaticMethod('resolveSize', '(II)I');
  AddStaticMethod('resolveSizeAndState', '(III)I');
  AddMethod('restoreDefaultFocus', '()Z');
  AddMethod('restoreHierarchyState', '(Landroid/util/SparseArray;)V');
  AddMethod('saveHierarchyState', '(Landroid/util/SparseArray;)V');
  AddMethod('scheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V');
  AddMethod('scrollBy', '(II)V');
  AddMethod('scrollTo', '(II)V');
  AddMethod('sendAccessibilityEvent', '(I)V');
  AddMethod('setAccessibilityHeading', '(Z)V');
  AddMethod('setAccessibilityLiveRegion', '(I)V');
  AddMethod('setAccessibilityPaneTitle', '(Ljava/lang/CharSequence;)V');
  AddMethod('setAccessibilityTraversalAfter', '(I)V');
  AddMethod('setAccessibilityTraversalBefore', '(I)V');
  AddMethod('setActivated', '(Z)V');
  AddMethod('setAlpha', '(F)V');
  AddMethod('setAnimation', '(Landroid/view/animation/Animation;)V');
  AddMethod('setAutofillHints', '([Ljava/lang/String;)V');
  AddMethod('setBackground', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('setBackgroundColor', '(I)V');
  AddMethod('setBackgroundDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('setBackgroundResource', '(I)V');
  AddMethod('setBackgroundTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setBackgroundTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
  AddMethod('setBottom', '(I)V');
  AddMethod('setCameraDistance', '(F)V');
  AddMethod('setClickable', '(Z)V');
  AddMethod('setClipBounds', '(Landroid/graphics/Rect;)V');
  AddMethod('setClipToOutline', '(Z)V');
  AddMethod('setContentDescription', '(Ljava/lang/CharSequence;)V');
  AddMethod('setContextClickable', '(Z)V');
  AddMethod('setDefaultFocusHighlightEnabled', '(Z)V');
  AddMethod('setDrawingCacheBackgroundColor', '(I)V');
  AddMethod('setDrawingCacheEnabled', '(Z)V');
  AddMethod('setDrawingCacheQuality', '(I)V');
  AddMethod('setDuplicateParentStateEnabled', '(Z)V');
  AddMethod('setElevation', '(F)V');
  AddMethod('setEnabled', '(Z)V');
  AddMethod('setFadingEdgeLength', '(I)V');
  AddMethod('setFilterTouchesWhenObscured', '(Z)V');
  AddMethod('setFitsSystemWindows', '(Z)V');
  AddMethod('setFocusable', '(Z)V');
  AddMethod('setFocusable', '(I)V');
  AddMethod('setFocusableInTouchMode', '(Z)V');
  AddMethod('setFocusedByDefault', '(Z)V');
  AddMethod('setForeground', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('setForegroundGravity', '(I)V');
  AddMethod('setForegroundTintList', '(Landroid/content/res/ColorStateList;)V');
  AddMethod('setForegroundTintMode', '(Landroid/graphics/PorterDuff$Mode;)V');
  AddMethod('setHapticFeedbackEnabled', '(Z)V');
  AddMethod('setHasTransientState', '(Z)V');
  AddMethod('setHorizontalFadingEdgeEnabled', '(Z)V');
  AddMethod('setHorizontalScrollBarEnabled', '(Z)V');
  AddMethod('setHovered', '(Z)V');
  AddMethod('setId', '(I)V');
  AddMethod('setImportantForAccessibility', '(I)V');
  AddMethod('setImportantForAutofill', '(I)V');
  AddMethod('setKeepScreenOn', '(Z)V');
  AddMethod('setKeyboardNavigationCluster', '(Z)V');
  AddMethod('setLabelFor', '(I)V');
  AddMethod('setLayerPaint', '(Landroid/graphics/Paint;)V');
  AddMethod('setLayerType', '(ILandroid/graphics/Paint;)V');
  AddMethod('setLayoutDirection', '(I)V');
  AddMethod('setLayoutParams', '(Landroid/view/ViewGroup$LayoutParams;)V');
  AddMethod('setLeft', '(I)V');
  AddMethod('setLongClickable', '(Z)V');
  AddMethod('setMinimumHeight', '(I)V');
  AddMethod('setMinimumWidth', '(I)V');
  AddMethod('setNestedScrollingEnabled', '(Z)V');
  AddMethod('setNextClusterForwardId', '(I)V');
  AddMethod('setNextFocusDownId', '(I)V');
  AddMethod('setNextFocusForwardId', '(I)V');
  AddMethod('setNextFocusLeftId', '(I)V');
  AddMethod('setNextFocusRightId', '(I)V');
  AddMethod('setNextFocusUpId', '(I)V');
  AddMethod('setOnClickListener', '(Landroid/view/View$OnClickListener;)V');
  AddMethod('setOnDragListener', '(Landroid/view/View$OnDragListener;)V');
  AddMethod('setOnFocusChangeListener', '(Landroid/view/View$OnFocusChangeListener;)V');
  AddMethod('setOnKeyListener', '(Landroid/view/View$OnKeyListener;)V');
  AddMethod('setOnLongClickListener', '(Landroid/view/View$OnLongClickListener;)V');
  AddMethod('setOnTouchListener', '(Landroid/view/View$OnTouchListener;)V');
  AddMethod('setOutlineAmbientShadowColor', '(I)V');
  AddMethod('setOutlineSpotShadowColor', '(I)V');
  AddMethod('setOverScrollMode', '(I)V');
  AddMethod('setPadding', '(IIII)V');
  AddMethod('setPaddingRelative', '(IIII)V');
  AddMethod('setPivotX', '(F)V');
  AddMethod('setPivotY', '(F)V');
  AddMethod('setPressed', '(Z)V');
  AddMethod('setRevealOnFocusHint', '(Z)V');
  AddMethod('setRight', '(I)V');
  AddMethod('setRotation', '(F)V');
  AddMethod('setRotationX', '(F)V');
  AddMethod('setRotationY', '(F)V');
  AddMethod('setSaveEnabled', '(Z)V');
  AddMethod('setSaveFromParentEnabled', '(Z)V');
  AddMethod('setScaleX', '(F)V');
  AddMethod('setScaleY', '(F)V');
  AddMethod('setScreenReaderFocusable', '(Z)V');
  AddMethod('setScrollBarDefaultDelayBeforeFade', '(I)V');
  AddMethod('setScrollBarFadeDuration', '(I)V');
  AddMethod('setScrollBarSize', '(I)V');
  AddMethod('setScrollBarStyle', '(I)V');
  AddMethod('setScrollContainer', '(Z)V');
  AddMethod('setScrollIndicators', '(II)V');
  AddMethod('setScrollIndicators', '(I)V');
  AddMethod('setScrollX', '(I)V');
  AddMethod('setScrollY', '(I)V');
  AddMethod('setScrollbarFadingEnabled', '(Z)V');
  AddMethod('setSelected', '(Z)V');
  AddMethod('setSoundEffectsEnabled', '(Z)V');
  AddMethod('setSystemUiVisibility', '(I)V');
  AddMethod('setTag', '(Ljava/lang/Object;)V');
  AddMethod('setTag', '(ILjava/lang/Object;)V');
  AddMethod('setTextAlignment', '(I)V');
  AddMethod('setTextDirection', '(I)V');
  AddMethod('setTooltipText', '(Ljava/lang/CharSequence;)V');
  AddMethod('setTop', '(I)V');
  AddMethod('setTransitionName', '(Ljava/lang/String;)V');
  AddMethod('setTranslationX', '(F)V');
  AddMethod('setTranslationY', '(F)V');
  AddMethod('setTranslationZ', '(F)V');
  AddMethod('setVerticalFadingEdgeEnabled', '(Z)V');
  AddMethod('setVerticalScrollBarEnabled', '(Z)V');
  AddMethod('setVerticalScrollbarPosition', '(I)V');
  AddMethod('setVisibility', '(I)V');
  AddMethod('setWillNotCacheDrawing', '(Z)V');
  AddMethod('setWillNotDraw', '(Z)V');
  AddMethod('setX', '(F)V');
  AddMethod('setY', '(F)V');
  AddMethod('setZ', '(F)V');
  AddMethod('showContextMenu', '(FF)Z');
  AddMethod('showContextMenu', '()Z');
  AddMethod('startAnimation', '(Landroid/view/animation/Animation;)V');
  AddMethod('startDrag', '(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z');
  AddMethod('startDragAndDrop', '(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z');
  AddMethod('startNestedScroll', '(I)Z');
  AddMethod('stopNestedScroll', '()V');
  AddMethod('toString', '()Ljava/lang/String;');
  AddMethod('unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V');
  AddMethod('updateDragShadow', '(Landroid/view/View$DragShadowBuilder;)V');
  AddMethod('willNotCacheDrawing', '()Z');
  AddMethod('willNotDraw', '()Z');
end;

class procedure TJView.LoadFields;
begin
  inherited;
  AddStaticField('ACCESSIBILITY_LIVE_REGION_ASSERTIVE', 'I');
  AddStaticField('ACCESSIBILITY_LIVE_REGION_NONE', 'I');
  AddStaticField('ACCESSIBILITY_LIVE_REGION_POLITE', 'I');
  AddStaticField('ALPHA', 'Landroid/util/Property;');
  AddStaticField('AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS', 'I');
  AddStaticField('AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_CREDIT_CARD_NUMBER', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_EMAIL_ADDRESS', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_NAME', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_PASSWORD', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_PHONE', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_POSTAL_ADDRESS', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_POSTAL_CODE', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_HINT_USERNAME', 'Ljava/lang/String;');
  AddStaticField('AUTOFILL_TYPE_DATE', 'I');
  AddStaticField('AUTOFILL_TYPE_LIST', 'I');
  AddStaticField('AUTOFILL_TYPE_NONE', 'I');
  AddStaticField('AUTOFILL_TYPE_TEXT', 'I');
  AddStaticField('AUTOFILL_TYPE_TOGGLE', 'I');
  AddStaticField('DRAG_FLAG_GLOBAL', 'I');
  AddStaticField('DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION', 'I');
  AddStaticField('DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION', 'I');
  AddStaticField('DRAG_FLAG_GLOBAL_URI_READ', 'I');
  AddStaticField('DRAG_FLAG_GLOBAL_URI_WRITE', 'I');
  AddStaticField('DRAG_FLAG_OPAQUE', 'I');
  AddStaticField('DRAWING_CACHE_QUALITY_AUTO', 'I');
  AddStaticField('DRAWING_CACHE_QUALITY_HIGH', 'I');
  AddStaticField('DRAWING_CACHE_QUALITY_LOW', 'I');
  AddStaticField('FIND_VIEWS_WITH_CONTENT_DESCRIPTION', 'I');
  AddStaticField('FIND_VIEWS_WITH_TEXT', 'I');
  AddStaticField('FOCUSABLE', 'I');
  AddStaticField('FOCUSABLES_ALL', 'I');
  AddStaticField('FOCUSABLES_TOUCH_MODE', 'I');
  AddStaticField('FOCUSABLE_AUTO', 'I');
  AddStaticField('FOCUS_BACKWARD', 'I');
  AddStaticField('FOCUS_DOWN', 'I');
  AddStaticField('FOCUS_FORWARD', 'I');
  AddStaticField('FOCUS_LEFT', 'I');
  AddStaticField('FOCUS_RIGHT', 'I');
  AddStaticField('FOCUS_UP', 'I');
  AddStaticField('GONE', 'I');
  AddStaticField('HAPTIC_FEEDBACK_ENABLED', 'I');
  AddStaticField('IMPORTANT_FOR_ACCESSIBILITY_AUTO', 'I');
  AddStaticField('IMPORTANT_FOR_ACCESSIBILITY_NO', 'I');
  AddStaticField('IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS', 'I');
  AddStaticField('IMPORTANT_FOR_ACCESSIBILITY_YES', 'I');
  AddStaticField('IMPORTANT_FOR_AUTOFILL_AUTO', 'I');
  AddStaticField('IMPORTANT_FOR_AUTOFILL_NO', 'I');
  AddStaticField('IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS', 'I');
  AddStaticField('IMPORTANT_FOR_AUTOFILL_YES', 'I');
  AddStaticField('IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS', 'I');
  AddStaticField('INVISIBLE', 'I');
  AddStaticField('KEEP_SCREEN_ON', 'I');
  AddStaticField('LAYER_TYPE_HARDWARE', 'I');
  AddStaticField('LAYER_TYPE_NONE', 'I');
  AddStaticField('LAYER_TYPE_SOFTWARE', 'I');
  AddStaticField('LAYOUT_DIRECTION_INHERIT', 'I');
  AddStaticField('LAYOUT_DIRECTION_LOCALE', 'I');
  AddStaticField('LAYOUT_DIRECTION_LTR', 'I');
  AddStaticField('LAYOUT_DIRECTION_RTL', 'I');
  AddStaticField('MEASURED_HEIGHT_STATE_SHIFT', 'I');
  AddStaticField('MEASURED_SIZE_MASK', 'I');
  AddStaticField('MEASURED_STATE_MASK', 'I');
  AddStaticField('MEASURED_STATE_TOO_SMALL', 'I');
  AddStaticField('NOT_FOCUSABLE', 'I');
  AddStaticField('NO_ID', 'I');
  AddStaticField('OVER_SCROLL_ALWAYS', 'I');
  AddStaticField('OVER_SCROLL_IF_CONTENT_SCROLLS', 'I');
  AddStaticField('OVER_SCROLL_NEVER', 'I');
  AddStaticField('ROTATION', 'Landroid/util/Property;');
  AddStaticField('ROTATION_X', 'Landroid/util/Property;');
  AddStaticField('ROTATION_Y', 'Landroid/util/Property;');
  AddStaticField('SCALE_X', 'Landroid/util/Property;');
  AddStaticField('SCALE_Y', 'Landroid/util/Property;');
  AddStaticField('SCREEN_STATE_OFF', 'I');
  AddStaticField('SCREEN_STATE_ON', 'I');
  AddStaticField('SCROLLBARS_INSIDE_INSET', 'I');
  AddStaticField('SCROLLBARS_INSIDE_OVERLAY', 'I');
  AddStaticField('SCROLLBARS_OUTSIDE_INSET', 'I');
  AddStaticField('SCROLLBARS_OUTSIDE_OVERLAY', 'I');
  AddStaticField('SCROLLBAR_POSITION_DEFAULT', 'I');
  AddStaticField('SCROLLBAR_POSITION_LEFT', 'I');
  AddStaticField('SCROLLBAR_POSITION_RIGHT', 'I');
  AddStaticField('SCROLL_AXIS_HORIZONTAL', 'I');
  AddStaticField('SCROLL_AXIS_NONE', 'I');
  AddStaticField('SCROLL_AXIS_VERTICAL', 'I');
  AddStaticField('SCROLL_INDICATOR_BOTTOM', 'I');
  AddStaticField('SCROLL_INDICATOR_END', 'I');
  AddStaticField('SCROLL_INDICATOR_LEFT', 'I');
  AddStaticField('SCROLL_INDICATOR_RIGHT', 'I');
  AddStaticField('SCROLL_INDICATOR_START', 'I');
  AddStaticField('SCROLL_INDICATOR_TOP', 'I');
  AddStaticField('SOUND_EFFECTS_ENABLED', 'I');
  AddStaticField('STATUS_BAR_HIDDEN', 'I');
  AddStaticField('STATUS_BAR_VISIBLE', 'I');
  AddStaticField('SYSTEM_UI_FLAG_FULLSCREEN', 'I');
  AddStaticField('SYSTEM_UI_FLAG_HIDE_NAVIGATION', 'I');
  AddStaticField('SYSTEM_UI_FLAG_IMMERSIVE', 'I');
  AddStaticField('SYSTEM_UI_FLAG_IMMERSIVE_STICKY', 'I');
  AddStaticField('SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN', 'I');
  AddStaticField('SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION', 'I');
  AddStaticField('SYSTEM_UI_FLAG_LAYOUT_STABLE', 'I');
  AddStaticField('SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR', 'I');
  AddStaticField('SYSTEM_UI_FLAG_LIGHT_STATUS_BAR', 'I');
  AddStaticField('SYSTEM_UI_FLAG_LOW_PROFILE', 'I');
  AddStaticField('SYSTEM_UI_FLAG_VISIBLE', 'I');
  AddStaticField('SYSTEM_UI_LAYOUT_FLAGS', 'I');
  AddStaticField('TEXT_ALIGNMENT_CENTER', 'I');
  AddStaticField('TEXT_ALIGNMENT_GRAVITY', 'I');
  AddStaticField('TEXT_ALIGNMENT_INHERIT', 'I');
  AddStaticField('TEXT_ALIGNMENT_TEXT_END', 'I');
  AddStaticField('TEXT_ALIGNMENT_TEXT_START', 'I');
  AddStaticField('TEXT_ALIGNMENT_VIEW_END', 'I');
  AddStaticField('TEXT_ALIGNMENT_VIEW_START', 'I');
  AddStaticField('TEXT_DIRECTION_ANY_RTL', 'I');
  AddStaticField('TEXT_DIRECTION_FIRST_STRONG', 'I');
  AddStaticField('TEXT_DIRECTION_FIRST_STRONG_LTR', 'I');
  AddStaticField('TEXT_DIRECTION_FIRST_STRONG_RTL', 'I');
  AddStaticField('TEXT_DIRECTION_INHERIT', 'I');
  AddStaticField('TEXT_DIRECTION_LOCALE', 'I');
  AddStaticField('TEXT_DIRECTION_LTR', 'I');
  AddStaticField('TEXT_DIRECTION_RTL', 'I');
  AddStaticField('TRANSLATION_X', 'Landroid/util/Property;');
  AddStaticField('TRANSLATION_Y', 'Landroid/util/Property;');
  AddStaticField('TRANSLATION_Z', 'Landroid/util/Property;');
  AddStaticField('VISIBLE', 'I');
  AddStaticField('X', 'Landroid/util/Property;');
  AddStaticField('Y', 'Landroid/util/Property;');
  AddStaticField('Z', 'Landroid/util/Property;');
end;

class function TJView.Wrap(const AObjectID: JNIObject): JView;
begin
  Result := Wrap<TJView, JView>(AObjectId);
end;

class function TJView.Wrap(const AObject: IJNIObject): JView;
begin
  Result := Wrap<TJView, JView>(AObject);
end;

class function TJView.Create(const AArg0: JContext): JView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;)V', [AArg0]);
  Result := O;
end;

class function TJView.Create(const AArg0: JContext; const AArg1: JAttributeSet): JView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJView.Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer): JView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;I)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJView.Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer; const AArg3: Integer): JView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;II)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

class function TJView.ACCESSIBILITY_LIVE_REGION_ASSERTIVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACCESSIBILITY_LIVE_REGION_ASSERTIVE');
end;

class function TJView.ACCESSIBILITY_LIVE_REGION_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACCESSIBILITY_LIVE_REGION_NONE');
end;

class function TJView.ACCESSIBILITY_LIVE_REGION_POLITE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ACCESSIBILITY_LIVE_REGION_POLITE');
end;

class function TJView.ALPHA: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('ALPHA');
end;

class function TJView.AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS');
end;

class function TJView.AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE');
end;

class function TJView.AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY');
end;

class function TJView.AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH');
end;

class function TJView.AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR');
end;

class function TJView.AUTOFILL_HINT_CREDIT_CARD_NUMBER: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_CREDIT_CARD_NUMBER');
end;

class function TJView.AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE');
end;

class function TJView.AUTOFILL_HINT_EMAIL_ADDRESS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_EMAIL_ADDRESS');
end;

class function TJView.AUTOFILL_HINT_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_NAME');
end;

class function TJView.AUTOFILL_HINT_PASSWORD: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_PASSWORD');
end;

class function TJView.AUTOFILL_HINT_PHONE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_PHONE');
end;

class function TJView.AUTOFILL_HINT_POSTAL_ADDRESS: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_POSTAL_ADDRESS');
end;

class function TJView.AUTOFILL_HINT_POSTAL_CODE: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_POSTAL_CODE');
end;

class function TJView.AUTOFILL_HINT_USERNAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('AUTOFILL_HINT_USERNAME');
end;

class function TJView.AUTOFILL_TYPE_DATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AUTOFILL_TYPE_DATE');
end;

class function TJView.AUTOFILL_TYPE_LIST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AUTOFILL_TYPE_LIST');
end;

class function TJView.AUTOFILL_TYPE_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AUTOFILL_TYPE_NONE');
end;

class function TJView.AUTOFILL_TYPE_TEXT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AUTOFILL_TYPE_TEXT');
end;

class function TJView.AUTOFILL_TYPE_TOGGLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AUTOFILL_TYPE_TOGGLE');
end;

class function TJView.DRAG_FLAG_GLOBAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DRAG_FLAG_GLOBAL');
end;

class function TJView.DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION');
end;

class function TJView.DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION');
end;

class function TJView.DRAG_FLAG_GLOBAL_URI_READ: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DRAG_FLAG_GLOBAL_URI_READ');
end;

class function TJView.DRAG_FLAG_GLOBAL_URI_WRITE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DRAG_FLAG_GLOBAL_URI_WRITE');
end;

class function TJView.DRAG_FLAG_OPAQUE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DRAG_FLAG_OPAQUE');
end;

class function TJView.DRAWING_CACHE_QUALITY_AUTO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DRAWING_CACHE_QUALITY_AUTO');
end;

class function TJView.DRAWING_CACHE_QUALITY_HIGH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DRAWING_CACHE_QUALITY_HIGH');
end;

class function TJView.DRAWING_CACHE_QUALITY_LOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DRAWING_CACHE_QUALITY_LOW');
end;

class function TJView.FIND_VIEWS_WITH_CONTENT_DESCRIPTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIND_VIEWS_WITH_CONTENT_DESCRIPTION');
end;

class function TJView.FIND_VIEWS_WITH_TEXT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIND_VIEWS_WITH_TEXT');
end;

class function TJView.FOCUSABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUSABLE');
end;

class function TJView.FOCUSABLES_ALL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUSABLES_ALL');
end;

class function TJView.FOCUSABLES_TOUCH_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUSABLES_TOUCH_MODE');
end;

class function TJView.FOCUSABLE_AUTO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUSABLE_AUTO');
end;

class function TJView.FOCUS_BACKWARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUS_BACKWARD');
end;

class function TJView.FOCUS_DOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUS_DOWN');
end;

class function TJView.FOCUS_FORWARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUS_FORWARD');
end;

class function TJView.FOCUS_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUS_LEFT');
end;

class function TJView.FOCUS_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUS_RIGHT');
end;

class function TJView.FOCUS_UP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUS_UP');
end;

class function TJView.GONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('GONE');
end;

class function TJView.HAPTIC_FEEDBACK_ENABLED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HAPTIC_FEEDBACK_ENABLED');
end;

class function TJView.IMPORTANT_FOR_ACCESSIBILITY_AUTO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IMPORTANT_FOR_ACCESSIBILITY_AUTO');
end;

class function TJView.IMPORTANT_FOR_ACCESSIBILITY_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IMPORTANT_FOR_ACCESSIBILITY_NO');
end;

class function TJView.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS');
end;

class function TJView.IMPORTANT_FOR_ACCESSIBILITY_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IMPORTANT_FOR_ACCESSIBILITY_YES');
end;

class function TJView.IMPORTANT_FOR_AUTOFILL_AUTO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IMPORTANT_FOR_AUTOFILL_AUTO');
end;

class function TJView.IMPORTANT_FOR_AUTOFILL_NO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IMPORTANT_FOR_AUTOFILL_NO');
end;

class function TJView.IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS');
end;

class function TJView.IMPORTANT_FOR_AUTOFILL_YES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IMPORTANT_FOR_AUTOFILL_YES');
end;

class function TJView.IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS');
end;

class function TJView.INVISIBLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('INVISIBLE');
end;

class function TJView.KEEP_SCREEN_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('KEEP_SCREEN_ON');
end;

class function TJView.LAYER_TYPE_HARDWARE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYER_TYPE_HARDWARE');
end;

class function TJView.LAYER_TYPE_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYER_TYPE_NONE');
end;

class function TJView.LAYER_TYPE_SOFTWARE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYER_TYPE_SOFTWARE');
end;

class function TJView.LAYOUT_DIRECTION_INHERIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_DIRECTION_INHERIT');
end;

class function TJView.LAYOUT_DIRECTION_LOCALE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_DIRECTION_LOCALE');
end;

class function TJView.LAYOUT_DIRECTION_LTR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_DIRECTION_LTR');
end;

class function TJView.LAYOUT_DIRECTION_RTL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_DIRECTION_RTL');
end;

class function TJView.MEASURED_HEIGHT_STATE_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MEASURED_HEIGHT_STATE_SHIFT');
end;

class function TJView.MEASURED_SIZE_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MEASURED_SIZE_MASK');
end;

class function TJView.MEASURED_STATE_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MEASURED_STATE_MASK');
end;

class function TJView.MEASURED_STATE_TOO_SMALL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MEASURED_STATE_TOO_SMALL');
end;

class function TJView.NOT_FOCUSABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NOT_FOCUSABLE');
end;

class function TJView.NO_ID: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('NO_ID');
end;

class function TJView.OVER_SCROLL_ALWAYS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('OVER_SCROLL_ALWAYS');
end;

class function TJView.OVER_SCROLL_IF_CONTENT_SCROLLS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('OVER_SCROLL_IF_CONTENT_SCROLLS');
end;

class function TJView.OVER_SCROLL_NEVER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('OVER_SCROLL_NEVER');
end;

class function TJView.ROTATION: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('ROTATION');
end;

class function TJView.ROTATION_X: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('ROTATION_X');
end;

class function TJView.ROTATION_Y: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('ROTATION_Y');
end;

class function TJView.SCALE_X: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('SCALE_X');
end;

class function TJView.SCALE_Y: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('SCALE_Y');
end;

class function TJView.SCREEN_STATE_OFF: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_STATE_OFF');
end;

class function TJView.SCREEN_STATE_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_STATE_ON');
end;

class function TJView.SCROLLBARS_INSIDE_INSET: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLLBARS_INSIDE_INSET');
end;

class function TJView.SCROLLBARS_INSIDE_OVERLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLLBARS_INSIDE_OVERLAY');
end;

class function TJView.SCROLLBARS_OUTSIDE_INSET: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLLBARS_OUTSIDE_INSET');
end;

class function TJView.SCROLLBARS_OUTSIDE_OVERLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLLBARS_OUTSIDE_OVERLAY');
end;

class function TJView.SCROLLBAR_POSITION_DEFAULT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLLBAR_POSITION_DEFAULT');
end;

class function TJView.SCROLLBAR_POSITION_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLLBAR_POSITION_LEFT');
end;

class function TJView.SCROLLBAR_POSITION_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLLBAR_POSITION_RIGHT');
end;

class function TJView.SCROLL_AXIS_HORIZONTAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLL_AXIS_HORIZONTAL');
end;

class function TJView.SCROLL_AXIS_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLL_AXIS_NONE');
end;

class function TJView.SCROLL_AXIS_VERTICAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLL_AXIS_VERTICAL');
end;

class function TJView.SCROLL_INDICATOR_BOTTOM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLL_INDICATOR_BOTTOM');
end;

class function TJView.SCROLL_INDICATOR_END: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLL_INDICATOR_END');
end;

class function TJView.SCROLL_INDICATOR_LEFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLL_INDICATOR_LEFT');
end;

class function TJView.SCROLL_INDICATOR_RIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLL_INDICATOR_RIGHT');
end;

class function TJView.SCROLL_INDICATOR_START: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLL_INDICATOR_START');
end;

class function TJView.SCROLL_INDICATOR_TOP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCROLL_INDICATOR_TOP');
end;

class function TJView.SOUND_EFFECTS_ENABLED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOUND_EFFECTS_ENABLED');
end;

class function TJView.STATUS_BAR_HIDDEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STATUS_BAR_HIDDEN');
end;

class function TJView.STATUS_BAR_VISIBLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('STATUS_BAR_VISIBLE');
end;

class function TJView.SYSTEM_UI_FLAG_FULLSCREEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_FULLSCREEN');
end;

class function TJView.SYSTEM_UI_FLAG_HIDE_NAVIGATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_HIDE_NAVIGATION');
end;

class function TJView.SYSTEM_UI_FLAG_IMMERSIVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_IMMERSIVE');
end;

class function TJView.SYSTEM_UI_FLAG_IMMERSIVE_STICKY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_IMMERSIVE_STICKY');
end;

class function TJView.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN');
end;

class function TJView.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION');
end;

class function TJView.SYSTEM_UI_FLAG_LAYOUT_STABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_LAYOUT_STABLE');
end;

class function TJView.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR');
end;

class function TJView.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR: Integer;
begin
  // Android 5 support
  Result :=8192; // Stas

  // Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_LIGHT_STATUS_BAR'); // Stas
end;

class function TJView.SYSTEM_UI_FLAG_LOW_PROFILE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_LOW_PROFILE');
end;

class function TJView.SYSTEM_UI_FLAG_VISIBLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_FLAG_VISIBLE');
end;

class function TJView.SYSTEM_UI_LAYOUT_FLAGS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SYSTEM_UI_LAYOUT_FLAGS');
end;

class function TJView.TEXT_ALIGNMENT_CENTER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_ALIGNMENT_CENTER');
end;

class function TJView.TEXT_ALIGNMENT_GRAVITY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_ALIGNMENT_GRAVITY');
end;

class function TJView.TEXT_ALIGNMENT_INHERIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_ALIGNMENT_INHERIT');
end;

class function TJView.TEXT_ALIGNMENT_TEXT_END: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_ALIGNMENT_TEXT_END');
end;

class function TJView.TEXT_ALIGNMENT_TEXT_START: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_ALIGNMENT_TEXT_START');
end;

class function TJView.TEXT_ALIGNMENT_VIEW_END: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_ALIGNMENT_VIEW_END');
end;

class function TJView.TEXT_ALIGNMENT_VIEW_START: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_ALIGNMENT_VIEW_START');
end;

class function TJView.TEXT_DIRECTION_ANY_RTL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_DIRECTION_ANY_RTL');
end;

class function TJView.TEXT_DIRECTION_FIRST_STRONG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_DIRECTION_FIRST_STRONG');
end;

class function TJView.TEXT_DIRECTION_FIRST_STRONG_LTR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_DIRECTION_FIRST_STRONG_LTR');
end;

class function TJView.TEXT_DIRECTION_FIRST_STRONG_RTL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_DIRECTION_FIRST_STRONG_RTL');
end;

class function TJView.TEXT_DIRECTION_INHERIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_DIRECTION_INHERIT');
end;

class function TJView.TEXT_DIRECTION_LOCALE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_DIRECTION_LOCALE');
end;

class function TJView.TEXT_DIRECTION_LTR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_DIRECTION_LTR');
end;

class function TJView.TEXT_DIRECTION_RTL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TEXT_DIRECTION_RTL');
end;

class function TJView.TRANSLATION_X: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('TRANSLATION_X');
end;

class function TJView.TRANSLATION_Y: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('TRANSLATION_Y');
end;

class function TJView.TRANSLATION_Z: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('TRANSLATION_Z');
end;

class function TJView.VISIBLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VISIBLE');
end;

class function TJView.X: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('X');
end;

class function TJView.Y: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('Y');
end;

class function TJView.Z: JProperty;
begin
  Result := GetStaticObjectField<TJProperty, JProperty>('Z');
end;

procedure TJView.addChildrenForAccessibility(const AArg0: JArrayList);
begin
  JavaType.CallVoidMethod(ObjectID, 'addChildrenForAccessibility', '(Ljava/util/ArrayList;)V', [AArg0]);
end;

procedure TJView.addFocusables(const AArg0: JArrayList; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addFocusables', '(Ljava/util/ArrayList;I)V', [AArg0, AArg1]);
end;

procedure TJView.addFocusables(const AArg0: JArrayList; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addFocusables', '(Ljava/util/ArrayList;II)V', [AArg0, AArg1, AArg2]);
end;

procedure TJView.addKeyboardNavigationClusters(const AArg0: JCollection; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addKeyboardNavigationClusters', '(Ljava/util/Collection;I)V', [AArg0, AArg1]);
end;

procedure TJView.addOnLayoutChangeListener(const AArg0: JView_OnLayoutChangeListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'addOnLayoutChangeListener', '(Landroid/view/View$OnLayoutChangeListener;)V', [AArg0]);
end;

procedure TJView.addTouchables(const AArg0: JArrayList);
begin
  JavaType.CallVoidMethod(ObjectID, 'addTouchables', '(Ljava/util/ArrayList;)V', [AArg0]);
end;

procedure TJView.announceForAccessibility(const AArg0: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'announceForAccessibility', '(Ljava/lang/CharSequence;)V', [AArg0]);
end;

procedure TJView.autofill(const AArg0: JSparseArray);
begin
  JavaType.CallVoidMethod(ObjectID, 'autofill', '(Landroid/util/SparseArray;)V', [AArg0]);
end;

procedure TJView.bringToFront;
begin
  JavaType.CallVoidMethod(ObjectID, 'bringToFront', '()V', []);
end;

procedure TJView.buildDrawingCache(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'buildDrawingCache', '(Z)V', [AArg0]);
end;

procedure TJView.buildDrawingCache;
begin
  JavaType.CallVoidMethod(ObjectID, 'buildDrawingCache', '()V', []);
end;

procedure TJView.buildLayer;
begin
  JavaType.CallVoidMethod(ObjectID, 'buildLayer', '()V', []);
end;

function TJView.callOnClick: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'callOnClick', '()Z', []);
end;

function TJView.canResolveLayoutDirection: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canResolveLayoutDirection', '()Z', []);
end;

function TJView.canResolveTextAlignment: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canResolveTextAlignment', '()Z', []);
end;

function TJView.canResolveTextDirection: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canResolveTextDirection', '()Z', []);
end;

function TJView.canScrollHorizontally(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canScrollHorizontally', '(I)Z', [AArg0]);
end;

function TJView.canScrollVertically(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canScrollVertically', '(I)Z', [AArg0]);
end;

procedure TJView.cancelDragAndDrop;
begin
  JavaType.CallVoidMethod(ObjectID, 'cancelDragAndDrop', '()V', []);
end;

procedure TJView.cancelLongPress;
begin
  JavaType.CallVoidMethod(ObjectID, 'cancelLongPress', '()V', []);
end;

procedure TJView.cancelPendingInputEvents;
begin
  JavaType.CallVoidMethod(ObjectID, 'cancelPendingInputEvents', '()V', []);
end;

function TJView.checkInputConnectionProxy(const AArg0: JView): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'checkInputConnectionProxy', '(Landroid/view/View;)Z', [AArg0]);
end;

procedure TJView.clearAnimation;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearAnimation', '()V', []);
end;

procedure TJView.clearFocus;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearFocus', '()V', []);
end;

class function TJView.combineMeasuredStates(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('combineMeasuredStates', '(II)I', [AArg0, AArg1]);
end;

procedure TJView.computeScroll;
begin
  JavaType.CallVoidMethod(ObjectID, 'computeScroll', '()V', []);
end;

procedure TJView.destroyDrawingCache;
begin
  JavaType.CallVoidMethod(ObjectID, 'destroyDrawingCache', '()V', []);
end;

function TJView.dispatchCapturedPointerEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchCapturedPointerEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJView.dispatchConfigurationChanged(const AArg0: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchConfigurationChanged', '(Landroid/content/res/Configuration;)V', [AArg0]);
end;

procedure TJView.dispatchDisplayHint(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchDisplayHint', '(I)V', [AArg0]);
end;

function TJView.dispatchDragEvent(const AArg0: JDragEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchDragEvent', '(Landroid/view/DragEvent;)Z', [AArg0]);
end;

procedure TJView.dispatchDrawableHotspotChanged(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchDrawableHotspotChanged', '(FF)V', [AArg0, AArg1]);
end;

procedure TJView.dispatchFinishTemporaryDetach;
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchFinishTemporaryDetach', '()V', []);
end;

function TJView.dispatchGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchGenericMotionEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJView.dispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchKeyEvent', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

function TJView.dispatchKeyEventPreIme(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchKeyEventPreIme', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

function TJView.dispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchKeyShortcutEvent', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

function TJView.dispatchNestedFling(const AArg0: Single; const AArg1: Single; const AArg2: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchNestedFling', '(FFZ)Z', [AArg0, AArg1, AArg2]);
end;

function TJView.dispatchNestedPreFling(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchNestedPreFling', '(FF)Z', [AArg0, AArg1]);
end;

function TJView.dispatchNestedPrePerformAccessibilityAction(const AArg0: Integer; const AArg1: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchNestedPrePerformAccessibilityAction', '(ILandroid/os/Bundle;)Z', [AArg0, AArg1]);
end;

function TJView.dispatchNestedPreScroll(const AArg0: Integer; const AArg1: Integer; const AArg2: IJavaArray<Integer>; const AArg3: IJavaArray<Integer>): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchNestedPreScroll', '(II[I[I)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJView.dispatchNestedScroll(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: IJavaArray<Integer>): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchNestedScroll', '(IIII[I)Z', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJView.dispatchPointerCaptureChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchPointerCaptureChanged', '(Z)V', [AArg0]);
end;

procedure TJView.dispatchStartTemporaryDetach;
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchStartTemporaryDetach', '()V', []);
end;

procedure TJView.dispatchSystemUiVisibilityChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchSystemUiVisibilityChanged', '(I)V', [AArg0]);
end;

function TJView.dispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchTouchEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJView.dispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchTrackballEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJView.dispatchUnhandledMove(const AArg0: JView; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchUnhandledMove', '(Landroid/view/View;I)Z', [AArg0, AArg1]);
end;

procedure TJView.dispatchWindowFocusChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchWindowFocusChanged', '(Z)V', [AArg0]);
end;

procedure TJView.dispatchWindowSystemUiVisiblityChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchWindowSystemUiVisiblityChanged', '(I)V', [AArg0]);
end;

procedure TJView.dispatchWindowVisibilityChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchWindowVisibilityChanged', '(I)V', [AArg0]);
end;

procedure TJView.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

procedure TJView.drawableHotspotChanged(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'drawableHotspotChanged', '(FF)V', [AArg0, AArg1]);
end;

function TJView.findFocus: JView;
begin
  Result := CallObjectMethod<TJView, JView>('findFocus', '()Landroid/view/View;', []);
end;

function TJView.findViewById(const AArg0: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('findViewById', '(I)Landroid/view/View;', [AArg0]);
end;

function TJView.findViewWithTag(const AArg0: JObject): JView;
begin
  Result := CallObjectMethod<TJView, JView>('findViewWithTag', '(Ljava/lang/Object;)Landroid/view/View;', [AArg0]);
end;

procedure TJView.findViewsWithText(const AArg0: JArrayList; const AArg1: JCharSequence; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'findViewsWithText', '(Ljava/util/ArrayList;Ljava/lang/CharSequence;I)V', [AArg0, AArg1, AArg2]);
end;

function TJView.focusSearch(const AArg0: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('focusSearch', '(I)Landroid/view/View;', [AArg0]);
end;

procedure TJView.forceHasOverlappingRendering(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'forceHasOverlappingRendering', '(Z)V', [AArg0]);
end;

procedure TJView.forceLayout;
begin
  JavaType.CallVoidMethod(ObjectID, 'forceLayout', '()V', []);
end;

class function TJView.generateViewId: Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('generateViewId', '()I', []);
end;

function TJView.getAccessibilityClassName: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getAccessibilityClassName', '()Ljava/lang/CharSequence;', []);
end;

function TJView.getAccessibilityLiveRegion: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAccessibilityLiveRegion', '()I', []);
end;

function TJView.getAccessibilityPaneTitle: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getAccessibilityPaneTitle', '()Ljava/lang/CharSequence;', []);
end;

function TJView.getAccessibilityTraversalAfter: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAccessibilityTraversalAfter', '()I', []);
end;

function TJView.getAccessibilityTraversalBefore: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAccessibilityTraversalBefore', '()I', []);
end;

function TJView.getAlpha: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getAlpha', '()F', []);
end;

function TJView.getAnimation: JObject {JAnimation};
begin
  Result := CallObjectMethod<TJObject {TJAnimation}, JObject {JAnimation}>('getAnimation', '()Landroid/view/animation/Animation;', []);
end;

function TJView.getApplicationWindowToken: JIBinder;
begin
  Result := CallObjectMethod<TJIBinder, JIBinder>('getApplicationWindowToken', '()Landroid/os/IBinder;', []);
end;

function TJView.getAutofillHints: IJavaArray<JString>;
begin
  Result := CallArrayMethod<TJString, JString>('getAutofillHints', '()[Ljava/lang/String;', []);
end;

function TJView.getAutofillType: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAutofillType', '()I', []);
end;

function TJView.getBackground: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getBackground', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJView.getBackgroundTintList: JColorStateList;
begin
  Result := CallObjectMethod<TJColorStateList, JColorStateList>('getBackgroundTintList', '()Landroid/content/res/ColorStateList;', []);
end;

function TJView.getBackgroundTintMode: JPorterDuff_Mode;
begin
  Result := CallObjectMethod<TJPorterDuff_Mode, JPorterDuff_Mode>('getBackgroundTintMode', '()Landroid/graphics/PorterDuff$Mode;', []);
end;

function TJView.getBaseline: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getBaseline', '()I', []);
end;

function TJView.getBottom: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getBottom', '()I', []);
end;

function TJView.getCameraDistance: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getCameraDistance', '()F', []);
end;

function TJView.getClipBounds(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getClipBounds', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJView.getClipBounds: JRect;
begin
  Result := CallObjectMethod<TJRect, JRect>('getClipBounds', '()Landroid/graphics/Rect;', []);
end;

function TJView.getClipToOutline: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getClipToOutline', '()Z', []);
end;

function TJView.getContentDescription: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getContentDescription', '()Ljava/lang/CharSequence;', []);
end;

function TJView.getContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('getContext', '()Landroid/content/Context;', []);
end;

function TJView.getDefaultFocusHighlightEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getDefaultFocusHighlightEnabled', '()Z', []);
end;

class function TJView.getDefaultSize(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getDefaultSize', '(II)I', [AArg0, AArg1]);
end;

function TJView.getDisplay: JDisplay;
begin
  Result := CallObjectMethod<TJDisplay, JDisplay>('getDisplay', '()Landroid/view/Display;', []);
end;

function TJView.getDrawableState: IJavaArray<Integer>;
begin
  Result := CallArrayMethod<Integer>('getDrawableState', '()[I', []);
end;

function TJView.getDrawingCache(const AArg0: Boolean): JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('getDrawingCache', '(Z)Landroid/graphics/Bitmap;', [AArg0]);
end;

function TJView.getDrawingCache: JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('getDrawingCache', '()Landroid/graphics/Bitmap;', []);
end;

function TJView.getDrawingCacheBackgroundColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDrawingCacheBackgroundColor', '()I', []);
end;

function TJView.getDrawingCacheQuality: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDrawingCacheQuality', '()I', []);
end;

procedure TJView.getDrawingRect(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getDrawingRect', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJView.getDrawingTime: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getDrawingTime', '()J', []);
end;

function TJView.getElevation: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getElevation', '()F', []);
end;

function TJView.getFilterTouchesWhenObscured: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getFilterTouchesWhenObscured', '()Z', []);
end;

function TJView.getFitsSystemWindows: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getFitsSystemWindows', '()Z', []);
end;

function TJView.getFocusable: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getFocusable', '()I', []);
end;

function TJView.getFocusables(const AArg0: Integer): JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getFocusables', '(I)Ljava/util/ArrayList;', [AArg0]);
end;

procedure TJView.getFocusedRect(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getFocusedRect', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJView.getForeground: JDrawable;
begin
  Result := CallObjectMethod<TJDrawable, JDrawable>('getForeground', '()Landroid/graphics/drawable/Drawable;', []);
end;

function TJView.getForegroundGravity: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getForegroundGravity', '()I', []);
end;

function TJView.getForegroundTintList: JColorStateList;
begin
  Result := CallObjectMethod<TJColorStateList, JColorStateList>('getForegroundTintList', '()Landroid/content/res/ColorStateList;', []);
end;

function TJView.getForegroundTintMode: JPorterDuff_Mode;
begin
  Result := CallObjectMethod<TJPorterDuff_Mode, JPorterDuff_Mode>('getForegroundTintMode', '()Landroid/graphics/PorterDuff$Mode;', []);
end;

function TJView.getGlobalVisibleRect(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getGlobalVisibleRect', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJView.getGlobalVisibleRect(const AArg0: JRect; const AArg1: JPoint): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getGlobalVisibleRect', '(Landroid/graphics/Rect;Landroid/graphics/Point;)Z', [AArg0, AArg1]);
end;

function TJView.getHandler: JHandler;
begin
  Result := CallObjectMethod<TJHandler, JHandler>('getHandler', '()Landroid/os/Handler;', []);
end;

function TJView.getHasOverlappingRendering: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getHasOverlappingRendering', '()Z', []);
end;

function TJView.getHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getHeight', '()I', []);
end;

procedure TJView.getHitRect(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getHitRect', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJView.getHorizontalFadingEdgeLength: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getHorizontalFadingEdgeLength', '()I', []);
end;

function TJView.getId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getId', '()I', []);
end;

function TJView.getImportantForAccessibility: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getImportantForAccessibility', '()I', []);
end;

function TJView.getImportantForAutofill: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getImportantForAutofill', '()I', []);
end;

function TJView.getKeepScreenOn: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getKeepScreenOn', '()Z', []);
end;

function TJView.getLabelFor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLabelFor', '()I', []);
end;

function TJView.getLayerType: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerType', '()I', []);
end;

function TJView.getLayoutDirection: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayoutDirection', '()I', []);
end;

function TJView.getLayoutParams: JViewGroup_LayoutParams;
begin
  Result := CallObjectMethod<TJViewGroup_LayoutParams, JViewGroup_LayoutParams>('getLayoutParams', '()Landroid/view/ViewGroup$LayoutParams;', []);
end;

function TJView.getLeft: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLeft', '()I', []);
end;

function TJView.getLocalVisibleRect(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getLocalVisibleRect', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

procedure TJView.getLocationInWindow(const AArg0: IJavaArray<Integer>);
begin
  JavaType.CallVoidMethod(ObjectID, 'getLocationInWindow', '([I)V', [AArg0]);
end;

procedure TJView.getLocationOnScreen(const AArg0: IJavaArray<Integer>);
begin
  JavaType.CallVoidMethod(ObjectID, 'getLocationOnScreen', '([I)V', [AArg0]);
end;

function TJView.getMatrix: JMatrix;
begin
  Result := CallObjectMethod<TJMatrix, JMatrix>('getMatrix', '()Landroid/graphics/Matrix;', []);
end;

function TJView.getMeasuredHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMeasuredHeight', '()I', []);
end;

function TJView.getMeasuredHeightAndState: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMeasuredHeightAndState', '()I', []);
end;

function TJView.getMeasuredState: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMeasuredState', '()I', []);
end;

function TJView.getMeasuredWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMeasuredWidth', '()I', []);
end;

function TJView.getMeasuredWidthAndState: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMeasuredWidthAndState', '()I', []);
end;

function TJView.getMinimumHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMinimumHeight', '()I', []);
end;

function TJView.getMinimumWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMinimumWidth', '()I', []);
end;

function TJView.getNextClusterForwardId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNextClusterForwardId', '()I', []);
end;

function TJView.getNextFocusDownId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNextFocusDownId', '()I', []);
end;

function TJView.getNextFocusForwardId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNextFocusForwardId', '()I', []);
end;

function TJView.getNextFocusLeftId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNextFocusLeftId', '()I', []);
end;

function TJView.getNextFocusRightId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNextFocusRightId', '()I', []);
end;

function TJView.getNextFocusUpId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNextFocusUpId', '()I', []);
end;

function TJView.getOnFocusChangeListener: JView_OnFocusChangeListener;
begin
  Result := CallObjectMethod<TJView_OnFocusChangeListener, JView_OnFocusChangeListener>('getOnFocusChangeListener', '()Landroid/view/View$OnFocusChangeListener;', []);
end;

function TJView.getOutlineAmbientShadowColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOutlineAmbientShadowColor', '()I', []);
end;

function TJView.getOutlineSpotShadowColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOutlineSpotShadowColor', '()I', []);
end;

function TJView.getOverScrollMode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getOverScrollMode', '()I', []);
end;

function TJView.getPaddingBottom: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPaddingBottom', '()I', []);
end;

function TJView.getPaddingEnd: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPaddingEnd', '()I', []);
end;

function TJView.getPaddingLeft: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPaddingLeft', '()I', []);
end;

function TJView.getPaddingRight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPaddingRight', '()I', []);
end;

function TJView.getPaddingStart: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPaddingStart', '()I', []);
end;

function TJView.getPaddingTop: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPaddingTop', '()I', []);
end;

function TJView.getParent: JViewParent;
begin
  Result := CallObjectMethod<TJViewParent, JViewParent>('getParent', '()Landroid/view/ViewParent;', []);
end;

function TJView.getParentForAccessibility: JViewParent;
begin
  Result := CallObjectMethod<TJViewParent, JViewParent>('getParentForAccessibility', '()Landroid/view/ViewParent;', []);
end;

function TJView.getPivotX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getPivotX', '()F', []);
end;

function TJView.getPivotY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getPivotY', '()F', []);
end;

function TJView.getResources: JResources;
begin
  Result := CallObjectMethod<TJResources, JResources>('getResources', '()Landroid/content/res/Resources;', []);
end;

function TJView.getRevealOnFocusHint: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getRevealOnFocusHint', '()Z', []);
end;

function TJView.getRight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getRight', '()I', []);
end;

function TJView.getRootView: JView;
begin
  Result := CallObjectMethod<TJView, JView>('getRootView', '()Landroid/view/View;', []);
end;

function TJView.getRotation: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRotation', '()F', []);
end;

function TJView.getRotationX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRotationX', '()F', []);
end;

function TJView.getRotationY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getRotationY', '()F', []);
end;

function TJView.getScaleX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getScaleX', '()F', []);
end;

function TJView.getScaleY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getScaleY', '()F', []);
end;

function TJView.getScrollBarDefaultDelayBeforeFade: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScrollBarDefaultDelayBeforeFade', '()I', []);
end;

function TJView.getScrollBarFadeDuration: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScrollBarFadeDuration', '()I', []);
end;

function TJView.getScrollBarSize: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScrollBarSize', '()I', []);
end;

function TJView.getScrollBarStyle: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScrollBarStyle', '()I', []);
end;

function TJView.getScrollIndicators: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScrollIndicators', '()I', []);
end;

function TJView.getScrollX: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScrollX', '()I', []);
end;

function TJView.getScrollY: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getScrollY', '()I', []);
end;

function TJView.getSolidColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getSolidColor', '()I', []);
end;

function TJView.getSystemUiVisibility: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getSystemUiVisibility', '()I', []);
end;

function TJView.getTag: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getTag', '()Ljava/lang/Object;', []);
end;

function TJView.getTag(const AArg0: Integer): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getTag', '(I)Ljava/lang/Object;', [AArg0]);
end;

function TJView.getTextAlignment: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTextAlignment', '()I', []);
end;

function TJView.getTextDirection: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTextDirection', '()I', []);
end;

function TJView.getTooltipText: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getTooltipText', '()Ljava/lang/CharSequence;', []);
end;

function TJView.getTop: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTop', '()I', []);
end;

function TJView.getTouchables: JArrayList;
begin
  Result := CallObjectMethod<TJArrayList, JArrayList>('getTouchables', '()Ljava/util/ArrayList;', []);
end;

function TJView.getTransitionName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getTransitionName', '()Ljava/lang/String;', []);
end;

function TJView.getTranslationX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTranslationX', '()F', []);
end;

function TJView.getTranslationY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTranslationY', '()F', []);
end;

function TJView.getTranslationZ: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getTranslationZ', '()F', []);
end;

function TJView.getVerticalFadingEdgeLength: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getVerticalFadingEdgeLength', '()I', []);
end;

function TJView.getVerticalScrollbarPosition: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getVerticalScrollbarPosition', '()I', []);
end;

function TJView.getVerticalScrollbarWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getVerticalScrollbarWidth', '()I', []);
end;

function TJView.getViewTreeObserver: JViewTreeObserver;
begin
  Result := CallObjectMethod<TJViewTreeObserver, JViewTreeObserver>('getViewTreeObserver', '()Landroid/view/ViewTreeObserver;', []);
end;

function TJView.getVisibility: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getVisibility', '()I', []);
end;

function TJView.getWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWidth', '()I', []);
end;

function TJView.getWindowSystemUiVisibility: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWindowSystemUiVisibility', '()I', []);
end;

function TJView.getWindowToken: JIBinder;
begin
  Result := CallObjectMethod<TJIBinder, JIBinder>('getWindowToken', '()Landroid/os/IBinder;', []);
end;

function TJView.getWindowVisibility: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWindowVisibility', '()I', []);
end;

procedure TJView.getWindowVisibleDisplayFrame(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'getWindowVisibleDisplayFrame', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

function TJView.getX: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getX', '()F', []);
end;

function TJView.getY: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getY', '()F', []);
end;

function TJView.getZ: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getZ', '()F', []);
end;

function TJView.hasExplicitFocusable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasExplicitFocusable', '()Z', []);
end;

function TJView.hasFocus: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasFocus', '()Z', []);
end;

function TJView.hasFocusable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasFocusable', '()Z', []);
end;

function TJView.hasNestedScrollingParent: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasNestedScrollingParent', '()Z', []);
end;

function TJView.hasOnClickListeners: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasOnClickListeners', '()Z', []);
end;

function TJView.hasOverlappingRendering: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasOverlappingRendering', '()Z', []);
end;

function TJView.hasPointerCapture: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasPointerCapture', '()Z', []);
end;

function TJView.hasTransientState: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasTransientState', '()Z', []);
end;

function TJView.hasWindowFocus: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasWindowFocus', '()Z', []);
end;

class function TJView.inflate(const AArg0: JContext; const AArg1: Integer; const AArg2: JViewGroup): JView;
begin
  Result := CallStaticObjectMethod<TJView, JView>('inflate', '(Landroid/content/Context;ILandroid/view/ViewGroup;)Landroid/view/View;', [AArg0, AArg1, AArg2]);
end;

procedure TJView.invalidate;
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidate', '()V', []);
end;

procedure TJView.invalidate(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidate', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJView.invalidate(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidate', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJView.invalidateDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJView.invalidateOutline;
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateOutline', '()V', []);
end;

function TJView.isAccessibilityFocused: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAccessibilityFocused', '()Z', []);
end;

function TJView.isAccessibilityHeading: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAccessibilityHeading', '()Z', []);
end;

function TJView.isActivated: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isActivated', '()Z', []);
end;

function TJView.isAttachedToWindow: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAttachedToWindow', '()Z', []);
end;

function TJView.isClickable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isClickable', '()Z', []);
end;

function TJView.isContextClickable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isContextClickable', '()Z', []);
end;

function TJView.isDirty: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isDirty', '()Z', []);
end;

function TJView.isDrawingCacheEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isDrawingCacheEnabled', '()Z', []);
end;

function TJView.isDuplicateParentStateEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isDuplicateParentStateEnabled', '()Z', []);
end;

function TJView.isEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEnabled', '()Z', []);
end;

function TJView.isFocusable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFocusable', '()Z', []);
end;

function TJView.isFocusableInTouchMode: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFocusableInTouchMode', '()Z', []);
end;

function TJView.isFocused: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFocused', '()Z', []);
end;

function TJView.isFocusedByDefault: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFocusedByDefault', '()Z', []);
end;

function TJView.isHapticFeedbackEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isHapticFeedbackEnabled', '()Z', []);
end;

function TJView.isHardwareAccelerated: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isHardwareAccelerated', '()Z', []);
end;

function TJView.isHorizontalFadingEdgeEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isHorizontalFadingEdgeEnabled', '()Z', []);
end;

function TJView.isHorizontalScrollBarEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isHorizontalScrollBarEnabled', '()Z', []);
end;

function TJView.isHovered: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isHovered', '()Z', []);
end;

function TJView.isImportantForAccessibility: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isImportantForAccessibility', '()Z', []);
end;

function TJView.isImportantForAutofill: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isImportantForAutofill', '()Z', []);
end;

function TJView.isInEditMode: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInEditMode', '()Z', []);
end;

function TJView.isInLayout: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInLayout', '()Z', []);
end;

function TJView.isInTouchMode: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInTouchMode', '()Z', []);
end;

function TJView.isKeyboardNavigationCluster: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isKeyboardNavigationCluster', '()Z', []);
end;

function TJView.isLaidOut: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLaidOut', '()Z', []);
end;

function TJView.isLayoutDirectionResolved: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLayoutDirectionResolved', '()Z', []);
end;

function TJView.isLayoutRequested: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLayoutRequested', '()Z', []);
end;

function TJView.isLongClickable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLongClickable', '()Z', []);
end;

function TJView.isNestedScrollingEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isNestedScrollingEnabled', '()Z', []);
end;

function TJView.isOpaque: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isOpaque', '()Z', []);
end;

function TJView.isPaddingRelative: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isPaddingRelative', '()Z', []);
end;

function TJView.isPivotSet: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isPivotSet', '()Z', []);
end;

function TJView.isPressed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isPressed', '()Z', []);
end;

function TJView.isSaveEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isSaveEnabled', '()Z', []);
end;

function TJView.isSaveFromParentEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isSaveFromParentEnabled', '()Z', []);
end;

function TJView.isScreenReaderFocusable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isScreenReaderFocusable', '()Z', []);
end;

function TJView.isScrollContainer: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isScrollContainer', '()Z', []);
end;

function TJView.isScrollbarFadingEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isScrollbarFadingEnabled', '()Z', []);
end;

function TJView.isSelected: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isSelected', '()Z', []);
end;

function TJView.isShown: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isShown', '()Z', []);
end;

function TJView.isSoundEffectsEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isSoundEffectsEnabled', '()Z', []);
end;

function TJView.isTemporarilyDetached: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isTemporarilyDetached', '()Z', []);
end;

function TJView.isTextAlignmentResolved: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isTextAlignmentResolved', '()Z', []);
end;

function TJView.isTextDirectionResolved: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isTextDirectionResolved', '()Z', []);
end;

function TJView.isVerticalFadingEdgeEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVerticalFadingEdgeEnabled', '()Z', []);
end;

function TJView.isVerticalScrollBarEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVerticalScrollBarEnabled', '()Z', []);
end;

function TJView.isVisibleToUserForAutofill(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVisibleToUserForAutofill', '(I)Z', [AArg0]);
end;

procedure TJView.jumpDrawablesToCurrentState;
begin
  JavaType.CallVoidMethod(ObjectID, 'jumpDrawablesToCurrentState', '()V', []);
end;

function TJView.keyboardNavigationClusterSearch(const AArg0: JView; const AArg1: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('keyboardNavigationClusterSearch', '(Landroid/view/View;I)Landroid/view/View;', [AArg0, AArg1]);
end;

procedure TJView.layout(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'layout', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJView.measure(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'measure', '(II)V', [AArg0, AArg1]);
end;

procedure TJView.offsetLeftAndRight(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'offsetLeftAndRight', '(I)V', [AArg0]);
end;

procedure TJView.offsetTopAndBottom(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'offsetTopAndBottom', '(I)V', [AArg0]);
end;

procedure TJView.onCancelPendingInputEvents;
begin
  JavaType.CallVoidMethod(ObjectID, 'onCancelPendingInputEvents', '()V', []);
end;

function TJView.onCapturedPointerEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onCapturedPointerEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJView.onCheckIsTextEditor: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onCheckIsTextEditor', '()Z', []);
end;

function TJView.onDragEvent(const AArg0: JDragEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onDragEvent', '(Landroid/view/DragEvent;)Z', [AArg0]);
end;

procedure TJView.onDrawForeground(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'onDrawForeground', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJView.onFilterTouchEventForSecurity(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onFilterTouchEventForSecurity', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJView.onFinishTemporaryDetach;
begin
  JavaType.CallVoidMethod(ObjectID, 'onFinishTemporaryDetach', '()V', []);
end;

function TJView.onGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onGenericMotionEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJView.onHoverChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onHoverChanged', '(Z)V', [AArg0]);
end;

function TJView.onHoverEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onHoverEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJView.onKeyDown(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyDown', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

function TJView.onKeyLongPress(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyLongPress', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

function TJView.onKeyMultiple(const AArg0: Integer; const AArg1: Integer; const AArg2: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyMultiple', '(IILandroid/view/KeyEvent;)Z', [AArg0, AArg1, AArg2]);
end;

function TJView.onKeyPreIme(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyPreIme', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

function TJView.onKeyShortcut(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyShortcut', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

function TJView.onKeyUp(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKeyUp', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

procedure TJView.onPointerCaptureChange(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onPointerCaptureChange', '(Z)V', [AArg0]);
end;

procedure TJView.onRtlPropertiesChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onRtlPropertiesChanged', '(I)V', [AArg0]);
end;

procedure TJView.onScreenStateChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onScreenStateChanged', '(I)V', [AArg0]);
end;

procedure TJView.onStartTemporaryDetach;
begin
  JavaType.CallVoidMethod(ObjectID, 'onStartTemporaryDetach', '()V', []);
end;

function TJView.onTouchEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onTouchEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJView.onTrackballEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onTrackballEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJView.onVisibilityAggregated(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onVisibilityAggregated', '(Z)V', [AArg0]);
end;

procedure TJView.onWindowFocusChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onWindowFocusChanged', '(Z)V', [AArg0]);
end;

procedure TJView.onWindowSystemUiVisibilityChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onWindowSystemUiVisibilityChanged', '(I)V', [AArg0]);
end;

function TJView.performAccessibilityAction(const AArg0: Integer; const AArg1: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performAccessibilityAction', '(ILandroid/os/Bundle;)Z', [AArg0, AArg1]);
end;

function TJView.performClick: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performClick', '()Z', []);
end;

function TJView.performContextClick(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performContextClick', '(FF)Z', [AArg0, AArg1]);
end;

function TJView.performContextClick: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performContextClick', '()Z', []);
end;

function TJView.performHapticFeedback(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performHapticFeedback', '(I)Z', [AArg0]);
end;

function TJView.performHapticFeedback(const AArg0: Integer; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performHapticFeedback', '(II)Z', [AArg0, AArg1]);
end;

function TJView.performLongClick: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performLongClick', '()Z', []);
end;

function TJView.performLongClick(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performLongClick', '(FF)Z', [AArg0, AArg1]);
end;

procedure TJView.playSoundEffect(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'playSoundEffect', '(I)V', [AArg0]);
end;

function TJView.post(const AArg0: JRunnable): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'post', '(Ljava/lang/Runnable;)Z', [AArg0]);
end;

function TJView.postDelayed(const AArg0: JRunnable; const AArg1: Int64): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'postDelayed', '(Ljava/lang/Runnable;J)Z', [AArg0, AArg1]);
end;

procedure TJView.postInvalidate;
begin
  JavaType.CallVoidMethod(ObjectID, 'postInvalidate', '()V', []);
end;

procedure TJView.postInvalidate(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'postInvalidate', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJView.postInvalidateDelayed(const AArg0: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'postInvalidateDelayed', '(J)V', [AArg0]);
end;

procedure TJView.postInvalidateDelayed(const AArg0: Int64; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'postInvalidateDelayed', '(JIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJView.postInvalidateOnAnimation;
begin
  JavaType.CallVoidMethod(ObjectID, 'postInvalidateOnAnimation', '()V', []);
end;

procedure TJView.postInvalidateOnAnimation(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'postInvalidateOnAnimation', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJView.postOnAnimation(const AArg0: JRunnable);
begin
  JavaType.CallVoidMethod(ObjectID, 'postOnAnimation', '(Ljava/lang/Runnable;)V', [AArg0]);
end;

procedure TJView.postOnAnimationDelayed(const AArg0: JRunnable; const AArg1: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'postOnAnimationDelayed', '(Ljava/lang/Runnable;J)V', [AArg0, AArg1]);
end;

procedure TJView.refreshDrawableState;
begin
  JavaType.CallVoidMethod(ObjectID, 'refreshDrawableState', '()V', []);
end;

procedure TJView.releasePointerCapture;
begin
  JavaType.CallVoidMethod(ObjectID, 'releasePointerCapture', '()V', []);
end;

function TJView.removeCallbacks(const AArg0: JRunnable): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'removeCallbacks', '(Ljava/lang/Runnable;)Z', [AArg0]);
end;

procedure TJView.removeOnLayoutChangeListener(const AArg0: JView_OnLayoutChangeListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeOnLayoutChangeListener', '(Landroid/view/View$OnLayoutChangeListener;)V', [AArg0]);
end;

procedure TJView.requestApplyInsets;
begin
  JavaType.CallVoidMethod(ObjectID, 'requestApplyInsets', '()V', []);
end;

procedure TJView.requestFitSystemWindows;
begin
  JavaType.CallVoidMethod(ObjectID, 'requestFitSystemWindows', '()V', []);
end;

function TJView.requestFocus(const AArg0: Integer; const AArg1: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestFocus', '(ILandroid/graphics/Rect;)Z', [AArg0, AArg1]);
end;

function TJView.requestFocus(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestFocus', '(I)Z', [AArg0]);
end;

function TJView.requestFocus: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestFocus', '()Z', []);
end;

function TJView.requestFocusFromTouch: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestFocusFromTouch', '()Z', []);
end;

procedure TJView.requestLayout;
begin
  JavaType.CallVoidMethod(ObjectID, 'requestLayout', '()V', []);
end;

procedure TJView.requestPointerCapture;
begin
  JavaType.CallVoidMethod(ObjectID, 'requestPointerCapture', '()V', []);
end;

function TJView.requestRectangleOnScreen(const AArg0: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestRectangleOnScreen', '(Landroid/graphics/Rect;)Z', [AArg0]);
end;

function TJView.requestRectangleOnScreen(const AArg0: JRect; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestRectangleOnScreen', '(Landroid/graphics/Rect;Z)Z', [AArg0, AArg1]);
end;

procedure TJView.requestUnbufferedDispatch(const AArg0: JMotionEvent);
begin
  JavaType.CallVoidMethod(ObjectID, 'requestUnbufferedDispatch', '(Landroid/view/MotionEvent;)V', [AArg0]);
end;

function TJView.requireViewById(const AArg0: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('requireViewById', '(I)Landroid/view/View;', [AArg0]);
end;

procedure TJView.resetPivot;
begin
  JavaType.CallVoidMethod(ObjectID, 'resetPivot', '()V', []);
end;

class function TJView.resolveSize(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('resolveSize', '(II)I', [AArg0, AArg1]);
end;

class function TJView.resolveSizeAndState(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('resolveSizeAndState', '(III)I', [AArg0, AArg1, AArg2]);
end;

function TJView.restoreDefaultFocus: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'restoreDefaultFocus', '()Z', []);
end;

procedure TJView.restoreHierarchyState(const AArg0: JSparseArray);
begin
  JavaType.CallVoidMethod(ObjectID, 'restoreHierarchyState', '(Landroid/util/SparseArray;)V', [AArg0]);
end;

procedure TJView.saveHierarchyState(const AArg0: JSparseArray);
begin
  JavaType.CallVoidMethod(ObjectID, 'saveHierarchyState', '(Landroid/util/SparseArray;)V', [AArg0]);
end;

procedure TJView.scheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable; const AArg2: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'scheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;J)V', [AArg0, AArg1, AArg2]);
end;

procedure TJView.scrollBy(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'scrollBy', '(II)V', [AArg0, AArg1]);
end;

procedure TJView.scrollTo(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'scrollTo', '(II)V', [AArg0, AArg1]);
end;

procedure TJView.sendAccessibilityEvent(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendAccessibilityEvent', '(I)V', [AArg0]);
end;

procedure TJView.setAccessibilityHeading(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAccessibilityHeading', '(Z)V', [AArg0]);
end;

procedure TJView.setAccessibilityLiveRegion(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAccessibilityLiveRegion', '(I)V', [AArg0]);
end;

procedure TJView.setAccessibilityPaneTitle(const AArg0: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAccessibilityPaneTitle', '(Ljava/lang/CharSequence;)V', [AArg0]);
end;

procedure TJView.setAccessibilityTraversalAfter(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAccessibilityTraversalAfter', '(I)V', [AArg0]);
end;

procedure TJView.setAccessibilityTraversalBefore(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAccessibilityTraversalBefore', '(I)V', [AArg0]);
end;

procedure TJView.setActivated(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setActivated', '(Z)V', [AArg0]);
end;

procedure TJView.setAlpha(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlpha', '(F)V', [AArg0]);
end;

procedure TJView.setAnimation(const AArg0: JObject {JAnimation});
begin
  JavaType.CallVoidMethod(ObjectID, 'setAnimation', '(Landroid/view/animation/Animation;)V', [AArg0]);
end;

procedure TJView.setAutofillHints(const AArg0: IJavaArray<JString>);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAutofillHints', '([Ljava/lang/String;)V', [AArg0]);
end;

procedure TJView.setBackground(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBackground', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJView.setBackgroundColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBackgroundColor', '(I)V', [AArg0]);
end;

procedure TJView.setBackgroundDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBackgroundDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJView.setBackgroundResource(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBackgroundResource', '(I)V', [AArg0]);
end;

procedure TJView.setBackgroundTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBackgroundTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJView.setBackgroundTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBackgroundTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

procedure TJView.setBottom(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBottom', '(I)V', [AArg0]);
end;

procedure TJView.setCameraDistance(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setCameraDistance', '(F)V', [AArg0]);
end;

procedure TJView.setClickable(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setClickable', '(Z)V', [AArg0]);
end;

procedure TJView.setClipBounds(const AArg0: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'setClipBounds', '(Landroid/graphics/Rect;)V', [AArg0]);
end;

procedure TJView.setClipToOutline(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setClipToOutline', '(Z)V', [AArg0]);
end;

procedure TJView.setContentDescription(const AArg0: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContentDescription', '(Ljava/lang/CharSequence;)V', [AArg0]);
end;

procedure TJView.setContextClickable(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContextClickable', '(Z)V', [AArg0]);
end;

procedure TJView.setDefaultFocusHighlightEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDefaultFocusHighlightEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setDrawingCacheBackgroundColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDrawingCacheBackgroundColor', '(I)V', [AArg0]);
end;

procedure TJView.setDrawingCacheEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDrawingCacheEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setDrawingCacheQuality(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDrawingCacheQuality', '(I)V', [AArg0]);
end;

procedure TJView.setDuplicateParentStateEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDuplicateParentStateEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setElevation(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setElevation', '(F)V', [AArg0]);
end;

procedure TJView.setEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setFadingEdgeLength(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFadingEdgeLength', '(I)V', [AArg0]);
end;

procedure TJView.setFilterTouchesWhenObscured(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFilterTouchesWhenObscured', '(Z)V', [AArg0]);
end;

procedure TJView.setFitsSystemWindows(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFitsSystemWindows', '(Z)V', [AArg0]);
end;

procedure TJView.setFocusable(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFocusable', '(Z)V', [AArg0]);
end;

procedure TJView.setFocusable(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFocusable', '(I)V', [AArg0]);
end;

procedure TJView.setFocusableInTouchMode(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFocusableInTouchMode', '(Z)V', [AArg0]);
end;

procedure TJView.setFocusedByDefault(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFocusedByDefault', '(Z)V', [AArg0]);
end;

procedure TJView.setForeground(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setForeground', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJView.setForegroundGravity(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setForegroundGravity', '(I)V', [AArg0]);
end;

procedure TJView.setForegroundTintList(const AArg0: JColorStateList);
begin
  JavaType.CallVoidMethod(ObjectID, 'setForegroundTintList', '(Landroid/content/res/ColorStateList;)V', [AArg0]);
end;

procedure TJView.setForegroundTintMode(const AArg0: JPorterDuff_Mode);
begin
  JavaType.CallVoidMethod(ObjectID, 'setForegroundTintMode', '(Landroid/graphics/PorterDuff$Mode;)V', [AArg0]);
end;

procedure TJView.setHapticFeedbackEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHapticFeedbackEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setHasTransientState(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHasTransientState', '(Z)V', [AArg0]);
end;

procedure TJView.setHorizontalFadingEdgeEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHorizontalFadingEdgeEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setHorizontalScrollBarEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHorizontalScrollBarEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setHovered(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHovered', '(Z)V', [AArg0]);
end;

procedure TJView.setId(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setId', '(I)V', [AArg0]);
end;

procedure TJView.setImportantForAccessibility(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setImportantForAccessibility', '(I)V', [AArg0]);
end;

procedure TJView.setImportantForAutofill(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setImportantForAutofill', '(I)V', [AArg0]);
end;

procedure TJView.setKeepScreenOn(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setKeepScreenOn', '(Z)V', [AArg0]);
end;

procedure TJView.setKeyboardNavigationCluster(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setKeyboardNavigationCluster', '(Z)V', [AArg0]);
end;

procedure TJView.setLabelFor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLabelFor', '(I)V', [AArg0]);
end;

procedure TJView.setLayerPaint(const AArg0: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerPaint', '(Landroid/graphics/Paint;)V', [AArg0]);
end;

procedure TJView.setLayerType(const AArg0: Integer; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerType', '(ILandroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJView.setLayoutDirection(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayoutDirection', '(I)V', [AArg0]);
end;

procedure TJView.setLayoutParams(const AArg0: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayoutParams', '(Landroid/view/ViewGroup$LayoutParams;)V', [AArg0]);
end;

procedure TJView.setLeft(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLeft', '(I)V', [AArg0]);
end;

procedure TJView.setLongClickable(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLongClickable', '(Z)V', [AArg0]);
end;

procedure TJView.setMinimumHeight(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setMinimumHeight', '(I)V', [AArg0]);
end;

procedure TJView.setMinimumWidth(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setMinimumWidth', '(I)V', [AArg0]);
end;

procedure TJView.setNestedScrollingEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNestedScrollingEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setNextClusterForwardId(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNextClusterForwardId', '(I)V', [AArg0]);
end;

procedure TJView.setNextFocusDownId(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNextFocusDownId', '(I)V', [AArg0]);
end;

procedure TJView.setNextFocusForwardId(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNextFocusForwardId', '(I)V', [AArg0]);
end;

procedure TJView.setNextFocusLeftId(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNextFocusLeftId', '(I)V', [AArg0]);
end;

procedure TJView.setNextFocusRightId(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNextFocusRightId', '(I)V', [AArg0]);
end;

procedure TJView.setNextFocusUpId(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNextFocusUpId', '(I)V', [AArg0]);
end;

procedure TJView.setOnClickListener(const AArg0: JView_OnClickListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOnClickListener', '(Landroid/view/View$OnClickListener;)V', [AArg0]);
end;

procedure TJView.setOnDragListener(const AArg0: JView_OnDragListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOnDragListener', '(Landroid/view/View$OnDragListener;)V', [AArg0]);
end;

procedure TJView.setOnFocusChangeListener(const AArg0: JView_OnFocusChangeListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOnFocusChangeListener', '(Landroid/view/View$OnFocusChangeListener;)V', [AArg0]);
end;

procedure TJView.setOnKeyListener(const AArg0: JView_OnKeyListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOnKeyListener', '(Landroid/view/View$OnKeyListener;)V', [AArg0]);
end;

procedure TJView.setOnLongClickListener(const AArg0: JView_OnLongClickListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOnLongClickListener', '(Landroid/view/View$OnLongClickListener;)V', [AArg0]);
end;

procedure TJView.setOnTouchListener(const AArg0: JView_OnTouchListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOnTouchListener', '(Landroid/view/View$OnTouchListener;)V', [AArg0]);
end;

procedure TJView.setOutlineAmbientShadowColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOutlineAmbientShadowColor', '(I)V', [AArg0]);
end;

procedure TJView.setOutlineSpotShadowColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOutlineSpotShadowColor', '(I)V', [AArg0]);
end;

procedure TJView.setOverScrollMode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOverScrollMode', '(I)V', [AArg0]);
end;

procedure TJView.setPadding(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPadding', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJView.setPaddingRelative(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPaddingRelative', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJView.setPivotX(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPivotX', '(F)V', [AArg0]);
end;

procedure TJView.setPivotY(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPivotY', '(F)V', [AArg0]);
end;

procedure TJView.setPressed(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPressed', '(Z)V', [AArg0]);
end;

procedure TJView.setRevealOnFocusHint(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRevealOnFocusHint', '(Z)V', [AArg0]);
end;

procedure TJView.setRight(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRight', '(I)V', [AArg0]);
end;

procedure TJView.setRotation(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRotation', '(F)V', [AArg0]);
end;

procedure TJView.setRotationX(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRotationX', '(F)V', [AArg0]);
end;

procedure TJView.setRotationY(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRotationY', '(F)V', [AArg0]);
end;

procedure TJView.setSaveEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSaveEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setSaveFromParentEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSaveFromParentEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setScaleX(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScaleX', '(F)V', [AArg0]);
end;

procedure TJView.setScaleY(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScaleY', '(F)V', [AArg0]);
end;

procedure TJView.setScreenReaderFocusable(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScreenReaderFocusable', '(Z)V', [AArg0]);
end;

procedure TJView.setScrollBarDefaultDelayBeforeFade(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollBarDefaultDelayBeforeFade', '(I)V', [AArg0]);
end;

procedure TJView.setScrollBarFadeDuration(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollBarFadeDuration', '(I)V', [AArg0]);
end;

procedure TJView.setScrollBarSize(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollBarSize', '(I)V', [AArg0]);
end;

procedure TJView.setScrollBarStyle(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollBarStyle', '(I)V', [AArg0]);
end;

procedure TJView.setScrollContainer(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollContainer', '(Z)V', [AArg0]);
end;

procedure TJView.setScrollIndicators(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollIndicators', '(II)V', [AArg0, AArg1]);
end;

procedure TJView.setScrollIndicators(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollIndicators', '(I)V', [AArg0]);
end;

procedure TJView.setScrollX(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollX', '(I)V', [AArg0]);
end;

procedure TJView.setScrollY(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollY', '(I)V', [AArg0]);
end;

procedure TJView.setScrollbarFadingEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setScrollbarFadingEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setSelected(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSelected', '(Z)V', [AArg0]);
end;

procedure TJView.setSoundEffectsEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSoundEffectsEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setSystemUiVisibility(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSystemUiVisibility', '(I)V', [AArg0]);
end;

procedure TJView.setTag(const AArg0: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTag', '(Ljava/lang/Object;)V', [AArg0]);
end;

procedure TJView.setTag(const AArg0: Integer; const AArg1: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTag', '(ILjava/lang/Object;)V', [AArg0, AArg1]);
end;

procedure TJView.setTextAlignment(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTextAlignment', '(I)V', [AArg0]);
end;

procedure TJView.setTextDirection(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTextDirection', '(I)V', [AArg0]);
end;

procedure TJView.setTooltipText(const AArg0: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTooltipText', '(Ljava/lang/CharSequence;)V', [AArg0]);
end;

procedure TJView.setTop(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTop', '(I)V', [AArg0]);
end;

procedure TJView.setTransitionName(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTransitionName', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJView.setTranslationX(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTranslationX', '(F)V', [AArg0]);
end;

procedure TJView.setTranslationY(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTranslationY', '(F)V', [AArg0]);
end;

procedure TJView.setTranslationZ(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTranslationZ', '(F)V', [AArg0]);
end;

procedure TJView.setVerticalFadingEdgeEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setVerticalFadingEdgeEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setVerticalScrollBarEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setVerticalScrollBarEnabled', '(Z)V', [AArg0]);
end;

procedure TJView.setVerticalScrollbarPosition(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setVerticalScrollbarPosition', '(I)V', [AArg0]);
end;

procedure TJView.setVisibility(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setVisibility', '(I)V', [AArg0]);
end;

procedure TJView.setWillNotCacheDrawing(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWillNotCacheDrawing', '(Z)V', [AArg0]);
end;

procedure TJView.setWillNotDraw(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWillNotDraw', '(Z)V', [AArg0]);
end;

procedure TJView.setX(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setX', '(F)V', [AArg0]);
end;

procedure TJView.setY(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setY', '(F)V', [AArg0]);
end;

procedure TJView.setZ(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setZ', '(F)V', [AArg0]);
end;

function TJView.showContextMenu(const AArg0: Single; const AArg1: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'showContextMenu', '(FF)Z', [AArg0, AArg1]);
end;

function TJView.showContextMenu: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'showContextMenu', '()Z', []);
end;

procedure TJView.startAnimation(const AArg0: JObject {JAnimation});
begin
  JavaType.CallVoidMethod(ObjectID, 'startAnimation', '(Landroid/view/animation/Animation;)V', [AArg0]);
end;

function TJView.startDrag(const AArg0: JClipData; const AArg1: JView_DragShadowBuilder; const AArg2: JObject; const AArg3: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'startDrag', '(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJView.startDragAndDrop(const AArg0: JClipData; const AArg1: JView_DragShadowBuilder; const AArg2: JObject; const AArg3: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'startDragAndDrop', '(Landroid/content/ClipData;Landroid/view/View$DragShadowBuilder;Ljava/lang/Object;I)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJView.startNestedScroll(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'startNestedScroll', '(I)Z', [AArg0]);
end;

procedure TJView.stopNestedScroll;
begin
  JavaType.CallVoidMethod(ObjectID, 'stopNestedScroll', '()V', []);
end;

function TJView.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

procedure TJView.unscheduleDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJView.unscheduleDrawable(const AArg0: JDrawable; const AArg1: JRunnable);
begin
  JavaType.CallVoidMethod(ObjectID, 'unscheduleDrawable', '(Landroid/graphics/drawable/Drawable;Ljava/lang/Runnable;)V', [AArg0, AArg1]);
end;

procedure TJView.updateDragShadow(const AArg0: JView_DragShadowBuilder);
begin
  JavaType.CallVoidMethod(ObjectID, 'updateDragShadow', '(Landroid/view/View$DragShadowBuilder;)V', [AArg0]);
end;

function TJView.willNotCacheDrawing: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'willNotCacheDrawing', '()Z', []);
end;

function TJView.willNotDraw: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'willNotDraw', '()Z', []);
end;

{ TJSurfaceView }

class procedure TJSurfaceView.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;I)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;II)V');
end;

class procedure TJSurfaceView.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getHolder', '()Landroid/view/SurfaceHolder;');
  AddMethod('setSecure', '(Z)V');
  AddMethod('setVisibility', '(I)V');
  AddMethod('setZOrderMediaOverlay', '(Z)V');
  AddMethod('setZOrderOnTop', '(Z)V');
end;

class function TJSurfaceView.Wrap(const AObjectID: JNIObject): JSurfaceView;
begin
  Result := Wrap<TJSurfaceView, JSurfaceView>(AObjectId);
end;

class function TJSurfaceView.Wrap(const AObject: IJNIObject): JSurfaceView;
begin
  Result := Wrap<TJSurfaceView, JSurfaceView>(AObject);
end;

class function TJSurfaceView.Create(const AArg0: JContext): JSurfaceView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;)V', [AArg0]);
  Result := O;
end;

class function TJSurfaceView.Create(const AArg0: JContext; const AArg1: JAttributeSet): JSurfaceView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJSurfaceView.Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer): JSurfaceView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;I)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJSurfaceView.Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer; const AArg3: Integer): JSurfaceView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;II)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

procedure TJSurfaceView.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJSurfaceView.getHolder: JSurfaceHolder;
begin
  Result := CallObjectMethod<TJSurfaceHolder, JSurfaceHolder>('getHolder', '()Landroid/view/SurfaceHolder;', []);
end;

procedure TJSurfaceView.setSecure(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSecure', '(Z)V', [AArg0]);
end;

procedure TJSurfaceView.setVisibility(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setVisibility', '(I)V', [AArg0]);
end;

procedure TJSurfaceView.setZOrderMediaOverlay(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setZOrderMediaOverlay', '(Z)V', [AArg0]);
end;

procedure TJSurfaceView.setZOrderOnTop(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setZOrderOnTop', '(Z)V', [AArg0]);
end;

{ TJTextureView }

class procedure TJTextureView.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;I)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;II)V');
end;

class procedure TJTextureView.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('buildLayer', '()V');
  AddMethod('draw', '(Landroid/graphics/Canvas;)V');
  AddMethod('getBitmap', '(II)Landroid/graphics/Bitmap;');
  AddMethod('getBitmap', '(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;');
  AddMethod('getBitmap', '()Landroid/graphics/Bitmap;');
  AddMethod('getLayerType', '()I');
  AddMethod('getSurfaceTexture', '()Landroid/graphics/SurfaceTexture;');
  AddMethod('getSurfaceTextureListener', '()Landroid/view/TextureView$SurfaceTextureListener;');
  AddMethod('getTransform', '(Landroid/graphics/Matrix;)Landroid/graphics/Matrix;');
  AddMethod('isAvailable', '()Z');
  AddMethod('isOpaque', '()Z');
  AddMethod('lockCanvas', '()Landroid/graphics/Canvas;');
  AddMethod('lockCanvas', '(Landroid/graphics/Rect;)Landroid/graphics/Canvas;');
  AddMethod('setBackgroundDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('setForeground', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('setLayerPaint', '(Landroid/graphics/Paint;)V');
  AddMethod('setLayerType', '(ILandroid/graphics/Paint;)V');
  AddMethod('setOpaque', '(Z)V');
  AddMethod('setSurfaceTexture', '(Landroid/graphics/SurfaceTexture;)V');
  AddMethod('setSurfaceTextureListener', '(Landroid/view/TextureView$SurfaceTextureListener;)V');
  AddMethod('setTransform', '(Landroid/graphics/Matrix;)V');
  AddMethod('unlockCanvasAndPost', '(Landroid/graphics/Canvas;)V');
end;

class function TJTextureView.Wrap(const AObjectID: JNIObject): JTextureView;
begin
  Result := Wrap<TJTextureView, JTextureView>(AObjectId);
end;

class function TJTextureView.Wrap(const AObject: IJNIObject): JTextureView;
begin
  Result := Wrap<TJTextureView, JTextureView>(AObject);
end;

class function TJTextureView.Create(const AArg0: JContext): JTextureView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;)V', [AArg0]);
  Result := O;
end;

class function TJTextureView.Create(const AArg0: JContext; const AArg1: JAttributeSet): JTextureView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJTextureView.Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer): JTextureView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;I)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJTextureView.Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer; const AArg3: Integer): JTextureView;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;II)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

procedure TJTextureView.buildLayer;
begin
  JavaType.CallVoidMethod(ObjectID, 'buildLayer', '()V', []);
end;

procedure TJTextureView.draw(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'draw', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

function TJTextureView.getBitmap(const AArg0: Integer; const AArg1: Integer): JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('getBitmap', '(II)Landroid/graphics/Bitmap;', [AArg0, AArg1]);
end;

function TJTextureView.getBitmap(const AArg0: JBitmap): JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('getBitmap', '(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;', [AArg0]);
end;

function TJTextureView.getBitmap: JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('getBitmap', '()Landroid/graphics/Bitmap;', []);
end;

function TJTextureView.getLayerType: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayerType', '()I', []);
end;

function TJTextureView.getSurfaceTexture: JSurfaceTexture;
begin
  Result := CallObjectMethod<TJSurfaceTexture, JSurfaceTexture>('getSurfaceTexture', '()Landroid/graphics/SurfaceTexture;', []);
end;

function TJTextureView.getSurfaceTextureListener: JTextureView_SurfaceTextureListener;
begin
  Result := CallObjectMethod<TJTextureView_SurfaceTextureListener, JTextureView_SurfaceTextureListener>('getSurfaceTextureListener', '()Landroid/view/TextureView$SurfaceTextureListener;', []);
end;

function TJTextureView.getTransform(const AArg0: JMatrix): JMatrix;
begin
  Result := CallObjectMethod<TJMatrix, JMatrix>('getTransform', '(Landroid/graphics/Matrix;)Landroid/graphics/Matrix;', [AArg0]);
end;

function TJTextureView.isAvailable: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAvailable', '()Z', []);
end;

function TJTextureView.isOpaque: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isOpaque', '()Z', []);
end;

function TJTextureView.lockCanvas: JCanvas;
begin
  Result := CallObjectMethod<TJCanvas, JCanvas>('lockCanvas', '()Landroid/graphics/Canvas;', []);
end;

function TJTextureView.lockCanvas(const AArg0: JRect): JCanvas;
begin
  Result := CallObjectMethod<TJCanvas, JCanvas>('lockCanvas', '(Landroid/graphics/Rect;)Landroid/graphics/Canvas;', [AArg0]);
end;

procedure TJTextureView.setBackgroundDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBackgroundDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJTextureView.setForeground(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setForeground', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJTextureView.setLayerPaint(const AArg0: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerPaint', '(Landroid/graphics/Paint;)V', [AArg0]);
end;

procedure TJTextureView.setLayerType(const AArg0: Integer; const AArg1: JPaint);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayerType', '(ILandroid/graphics/Paint;)V', [AArg0, AArg1]);
end;

procedure TJTextureView.setOpaque(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setOpaque', '(Z)V', [AArg0]);
end;

procedure TJTextureView.setSurfaceTexture(const AArg0: JSurfaceTexture);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSurfaceTexture', '(Landroid/graphics/SurfaceTexture;)V', [AArg0]);
end;

procedure TJTextureView.setSurfaceTextureListener(const AArg0: JTextureView_SurfaceTextureListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSurfaceTextureListener', '(Landroid/view/TextureView$SurfaceTextureListener;)V', [AArg0]);
end;

procedure TJTextureView.setTransform(const AArg0: JMatrix);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTransform', '(Landroid/graphics/Matrix;)V', [AArg0]);
end;

procedure TJTextureView.unlockCanvasAndPost(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'unlockCanvasAndPost', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

{ TJViewGroup }

class procedure TJViewGroup.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;I)V');
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;II)V');
end;

class procedure TJViewGroup.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addChildrenForAccessibility', '(Ljava/util/ArrayList;)V');
  AddMethod('addFocusables', '(Ljava/util/ArrayList;II)V');
  AddMethod('addKeyboardNavigationClusters', '(Ljava/util/Collection;I)V');
  AddMethod('addStatesFromChildren', '()Z');
  AddMethod('addTouchables', '(Ljava/util/ArrayList;)V');
  AddMethod('addView', '(Landroid/view/View;I)V');
  AddMethod('addView', '(Landroid/view/View;)V');
  AddMethod('addView', '(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V');
  AddMethod('addView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V');
  AddMethod('addView', '(Landroid/view/View;II)V');
  AddMethod('bringChildToFront', '(Landroid/view/View;)V');
  AddMethod('childDrawableStateChanged', '(Landroid/view/View;)V');
  AddMethod('childHasTransientStateChanged', '(Landroid/view/View;Z)V');
  AddMethod('clearChildFocus', '(Landroid/view/View;)V');
  AddMethod('clearDisappearingChildren', '()V');
  AddMethod('clearFocus', '()V');
  AddMethod('dispatchCapturedPointerEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('dispatchConfigurationChanged', '(Landroid/content/res/Configuration;)V');
  AddMethod('dispatchDisplayHint', '(I)V');
  AddMethod('dispatchDragEvent', '(Landroid/view/DragEvent;)Z');
  AddMethod('dispatchDrawableHotspotChanged', '(FF)V');
  AddMethod('dispatchFinishTemporaryDetach', '()V');
  AddMethod('dispatchKeyEvent', '(Landroid/view/KeyEvent;)Z');
  AddMethod('dispatchKeyEventPreIme', '(Landroid/view/KeyEvent;)Z');
  AddMethod('dispatchKeyShortcutEvent', '(Landroid/view/KeyEvent;)Z');
  AddMethod('dispatchPointerCaptureChanged', '(Z)V');
  AddMethod('dispatchSetActivated', '(Z)V');
  AddMethod('dispatchSetSelected', '(Z)V');
  AddMethod('dispatchStartTemporaryDetach', '()V');
  AddMethod('dispatchSystemUiVisibilityChanged', '(I)V');
  AddMethod('dispatchTouchEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('dispatchTrackballEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('dispatchUnhandledMove', '(Landroid/view/View;I)Z');
  AddMethod('dispatchWindowFocusChanged', '(Z)V');
  AddMethod('dispatchWindowSystemUiVisiblityChanged', '(I)V');
  AddMethod('dispatchWindowVisibilityChanged', '(I)V');
  AddMethod('endViewTransition', '(Landroid/view/View;)V');
  AddMethod('findFocus', '()Landroid/view/View;');
  AddMethod('findViewsWithText', '(Ljava/util/ArrayList;Ljava/lang/CharSequence;I)V');
  AddMethod('focusSearch', '(Landroid/view/View;I)Landroid/view/View;');
  AddMethod('focusableViewAvailable', '(Landroid/view/View;)V');
  AddMethod('generateLayoutParams', '(Landroid/util/AttributeSet;)Landroid/view/ViewGroup$LayoutParams;');
  AddMethod('getAccessibilityClassName', '()Ljava/lang/CharSequence;');
  AddMethod('getChildAt', '(I)Landroid/view/View;');
  AddMethod('getChildCount', '()I');
  AddStaticMethod('getChildMeasureSpec', '(III)I');
  AddMethod('getChildVisibleRect', '(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z');
  AddMethod('getClipChildren', '()Z');
  AddMethod('getClipToPadding', '()Z');
  AddMethod('getDescendantFocusability', '()I');
  AddMethod('getFocusedChild', '()Landroid/view/View;');
  AddMethod('getLayoutAnimationListener', '()Landroid/view/animation/Animation$AnimationListener;');
  AddMethod('getLayoutMode', '()I');
  AddMethod('getNestedScrollAxes', '()I');
  AddMethod('getPersistentDrawingCache', '()I');
  AddMethod('getTouchscreenBlocksFocus', '()Z');
  AddMethod('hasFocus', '()Z');
  AddMethod('hasTransientState', '()Z');
  AddMethod('indexOfChild', '(Landroid/view/View;)I');
  AddMethod('invalidateChild', '(Landroid/view/View;Landroid/graphics/Rect;)V');
  AddMethod('invalidateChildInParent', '([ILandroid/graphics/Rect;)Landroid/view/ViewParent;');
  AddMethod('isAlwaysDrawnWithCacheEnabled', '()Z');
  AddMethod('isAnimationCacheEnabled', '()Z');
  AddMethod('isMotionEventSplittingEnabled', '()Z');
  AddMethod('isTransitionGroup', '()Z');
  AddMethod('jumpDrawablesToCurrentState', '()V');
  AddMethod('layout', '(IIII)V');
  AddMethod('notifySubtreeAccessibilityStateChanged', '(Landroid/view/View;Landroid/view/View;I)V');
  AddMethod('offsetDescendantRectToMyCoords', '(Landroid/view/View;Landroid/graphics/Rect;)V');
  AddMethod('offsetRectIntoDescendantCoords', '(Landroid/view/View;Landroid/graphics/Rect;)V');
  AddMethod('onDescendantInvalidated', '(Landroid/view/View;Landroid/view/View;)V');
  AddMethod('onInterceptHoverEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onInterceptTouchEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('onNestedFling', '(Landroid/view/View;FFZ)Z');
  AddMethod('onNestedPreFling', '(Landroid/view/View;FF)Z');
  AddMethod('onNestedPrePerformAccessibilityAction', '(Landroid/view/View;ILandroid/os/Bundle;)Z');
  AddMethod('onNestedPreScroll', '(Landroid/view/View;II[I)V');
  AddMethod('onNestedScroll', '(Landroid/view/View;IIII)V');
  AddMethod('onNestedScrollAccepted', '(Landroid/view/View;Landroid/view/View;I)V');
  AddMethod('onStartNestedScroll', '(Landroid/view/View;Landroid/view/View;I)Z');
  AddMethod('onStopNestedScroll', '(Landroid/view/View;)V');
  AddMethod('onViewAdded', '(Landroid/view/View;)V');
  AddMethod('onViewRemoved', '(Landroid/view/View;)V');
  AddMethod('recomputeViewAttributes', '(Landroid/view/View;)V');
  AddMethod('removeAllViews', '()V');
  AddMethod('removeAllViewsInLayout', '()V');
  AddMethod('removeView', '(Landroid/view/View;)V');
  AddMethod('removeViewAt', '(I)V');
  AddMethod('removeViewInLayout', '(Landroid/view/View;)V');
  AddMethod('removeViews', '(II)V');
  AddMethod('removeViewsInLayout', '(II)V');
  AddMethod('requestChildFocus', '(Landroid/view/View;Landroid/view/View;)V');
  AddMethod('requestChildRectangleOnScreen', '(Landroid/view/View;Landroid/graphics/Rect;Z)Z');
  AddMethod('requestDisallowInterceptTouchEvent', '(Z)V');
  AddMethod('requestFocus', '(ILandroid/graphics/Rect;)Z');
  AddMethod('requestTransparentRegion', '(Landroid/view/View;)V');
  AddMethod('restoreDefaultFocus', '()Z');
  AddMethod('scheduleLayoutAnimation', '()V');
  AddMethod('setAddStatesFromChildren', '(Z)V');
  AddMethod('setAlwaysDrawnWithCacheEnabled', '(Z)V');
  AddMethod('setAnimationCacheEnabled', '(Z)V');
  AddMethod('setClipChildren', '(Z)V');
  AddMethod('setClipToPadding', '(Z)V');
  AddMethod('setDescendantFocusability', '(I)V');
  AddMethod('setLayoutAnimationListener', '(Landroid/view/animation/Animation$AnimationListener;)V');
  AddMethod('setLayoutMode', '(I)V');
  AddMethod('setMotionEventSplittingEnabled', '(Z)V');
  AddMethod('setPersistentDrawingCache', '(I)V');
  AddMethod('setTouchscreenBlocksFocus', '(Z)V');
  AddMethod('setTransitionGroup', '(Z)V');
  AddMethod('shouldDelayChildPressedState', '()Z');
  AddMethod('showContextMenuForChild', '(Landroid/view/View;)Z');
  AddMethod('showContextMenuForChild', '(Landroid/view/View;FF)Z');
  AddMethod('startLayoutAnimation', '()V');
  AddMethod('startViewTransition', '(Landroid/view/View;)V');
  AddMethod('updateViewLayout', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V');
end;

class procedure TJViewGroup.LoadFields;
begin
  inherited;
  AddStaticField('FOCUS_AFTER_DESCENDANTS', 'I');
  AddStaticField('FOCUS_BEFORE_DESCENDANTS', 'I');
  AddStaticField('FOCUS_BLOCK_DESCENDANTS', 'I');
  AddStaticField('LAYOUT_MODE_CLIP_BOUNDS', 'I');
  AddStaticField('LAYOUT_MODE_OPTICAL_BOUNDS', 'I');
  AddStaticField('PERSISTENT_ALL_CACHES', 'I');
  AddStaticField('PERSISTENT_ANIMATION_CACHE', 'I');
  AddStaticField('PERSISTENT_NO_CACHE', 'I');
  AddStaticField('PERSISTENT_SCROLLING_CACHE', 'I');
end;

class function TJViewGroup.Wrap(const AObjectID: JNIObject): JViewGroup;
begin
  Result := Wrap<TJViewGroup, JViewGroup>(AObjectId);
end;

class function TJViewGroup.Wrap(const AObject: IJNIObject): JViewGroup;
begin
  Result := Wrap<TJViewGroup, JViewGroup>(AObject);
end;

class function TJViewGroup.Create(const AArg0: JContext): JViewGroup;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;)V', [AArg0]);
  Result := O;
end;

class function TJViewGroup.Create(const AArg0: JContext; const AArg1: JAttributeSet): JViewGroup;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJViewGroup.Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer): JViewGroup;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;I)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJViewGroup.Create(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: Integer; const AArg3: Integer): JViewGroup;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;II)V', [AArg0, AArg1, AArg2, AArg3]);
  Result := O;
end;

class function TJViewGroup.FOCUS_AFTER_DESCENDANTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUS_AFTER_DESCENDANTS');
end;

class function TJViewGroup.FOCUS_BEFORE_DESCENDANTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUS_BEFORE_DESCENDANTS');
end;

class function TJViewGroup.FOCUS_BLOCK_DESCENDANTS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FOCUS_BLOCK_DESCENDANTS');
end;

class function TJViewGroup.LAYOUT_MODE_CLIP_BOUNDS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_MODE_CLIP_BOUNDS');
end;

class function TJViewGroup.LAYOUT_MODE_OPTICAL_BOUNDS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_MODE_OPTICAL_BOUNDS');
end;

class function TJViewGroup.PERSISTENT_ALL_CACHES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERSISTENT_ALL_CACHES');
end;

class function TJViewGroup.PERSISTENT_ANIMATION_CACHE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERSISTENT_ANIMATION_CACHE');
end;

class function TJViewGroup.PERSISTENT_NO_CACHE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERSISTENT_NO_CACHE');
end;

class function TJViewGroup.PERSISTENT_SCROLLING_CACHE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERSISTENT_SCROLLING_CACHE');
end;

procedure TJViewGroup.addChildrenForAccessibility(const AArg0: JArrayList);
begin
  JavaType.CallVoidMethod(ObjectID, 'addChildrenForAccessibility', '(Ljava/util/ArrayList;)V', [AArg0]);
end;

procedure TJViewGroup.addFocusables(const AArg0: JArrayList; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addFocusables', '(Ljava/util/ArrayList;II)V', [AArg0, AArg1, AArg2]);
end;

procedure TJViewGroup.addKeyboardNavigationClusters(const AArg0: JCollection; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addKeyboardNavigationClusters', '(Ljava/util/Collection;I)V', [AArg0, AArg1]);
end;

function TJViewGroup.addStatesFromChildren: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'addStatesFromChildren', '()Z', []);
end;

procedure TJViewGroup.addTouchables(const AArg0: JArrayList);
begin
  JavaType.CallVoidMethod(ObjectID, 'addTouchables', '(Ljava/util/ArrayList;)V', [AArg0]);
end;

procedure TJViewGroup.addView(const AArg0: JView; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addView', '(Landroid/view/View;I)V', [AArg0, AArg1]);
end;

procedure TJViewGroup.addView(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'addView', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.addView(const AArg0: JView; const AArg1: Integer; const AArg2: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'addView', '(Landroid/view/View;ILandroid/view/ViewGroup$LayoutParams;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJViewGroup.addView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'addView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V', [AArg0, AArg1]);
end;

procedure TJViewGroup.addView(const AArg0: JView; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addView', '(Landroid/view/View;II)V', [AArg0, AArg1, AArg2]);
end;

procedure TJViewGroup.bringChildToFront(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'bringChildToFront', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.childDrawableStateChanged(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'childDrawableStateChanged', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.childHasTransientStateChanged(const AArg0: JView; const AArg1: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'childHasTransientStateChanged', '(Landroid/view/View;Z)V', [AArg0, AArg1]);
end;

procedure TJViewGroup.clearChildFocus(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'clearChildFocus', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.clearDisappearingChildren;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearDisappearingChildren', '()V', []);
end;

procedure TJViewGroup.clearFocus;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearFocus', '()V', []);
end;

function TJViewGroup.dispatchCapturedPointerEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchCapturedPointerEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJViewGroup.dispatchConfigurationChanged(const AArg0: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchConfigurationChanged', '(Landroid/content/res/Configuration;)V', [AArg0]);
end;

procedure TJViewGroup.dispatchDisplayHint(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchDisplayHint', '(I)V', [AArg0]);
end;

function TJViewGroup.dispatchDragEvent(const AArg0: JDragEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchDragEvent', '(Landroid/view/DragEvent;)Z', [AArg0]);
end;

procedure TJViewGroup.dispatchDrawableHotspotChanged(const AArg0: Single; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchDrawableHotspotChanged', '(FF)V', [AArg0, AArg1]);
end;

procedure TJViewGroup.dispatchFinishTemporaryDetach;
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchFinishTemporaryDetach', '()V', []);
end;

function TJViewGroup.dispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchKeyEvent', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

function TJViewGroup.dispatchKeyEventPreIme(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchKeyEventPreIme', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

function TJViewGroup.dispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchKeyShortcutEvent', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

procedure TJViewGroup.dispatchPointerCaptureChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchPointerCaptureChanged', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.dispatchSetActivated(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchSetActivated', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.dispatchSetSelected(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchSetSelected', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.dispatchStartTemporaryDetach;
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchStartTemporaryDetach', '()V', []);
end;

procedure TJViewGroup.dispatchSystemUiVisibilityChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchSystemUiVisibilityChanged', '(I)V', [AArg0]);
end;

function TJViewGroup.dispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchTouchEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJViewGroup.dispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchTrackballEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJViewGroup.dispatchUnhandledMove(const AArg0: JView; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchUnhandledMove', '(Landroid/view/View;I)Z', [AArg0, AArg1]);
end;

procedure TJViewGroup.dispatchWindowFocusChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchWindowFocusChanged', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.dispatchWindowSystemUiVisiblityChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchWindowSystemUiVisiblityChanged', '(I)V', [AArg0]);
end;

procedure TJViewGroup.dispatchWindowVisibilityChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchWindowVisibilityChanged', '(I)V', [AArg0]);
end;

procedure TJViewGroup.endViewTransition(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'endViewTransition', '(Landroid/view/View;)V', [AArg0]);
end;

function TJViewGroup.findFocus: JView;
begin
  Result := CallObjectMethod<TJView, JView>('findFocus', '()Landroid/view/View;', []);
end;

procedure TJViewGroup.findViewsWithText(const AArg0: JArrayList; const AArg1: JCharSequence; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'findViewsWithText', '(Ljava/util/ArrayList;Ljava/lang/CharSequence;I)V', [AArg0, AArg1, AArg2]);
end;

function TJViewGroup.focusSearch(const AArg0: JView; const AArg1: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('focusSearch', '(Landroid/view/View;I)Landroid/view/View;', [AArg0, AArg1]);
end;

procedure TJViewGroup.focusableViewAvailable(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'focusableViewAvailable', '(Landroid/view/View;)V', [AArg0]);
end;

function TJViewGroup.generateLayoutParams(const AArg0: JAttributeSet): JViewGroup_LayoutParams;
begin
  Result := CallObjectMethod<TJViewGroup_LayoutParams, JViewGroup_LayoutParams>('generateLayoutParams', '(Landroid/util/AttributeSet;)Landroid/view/ViewGroup$LayoutParams;', [AArg0]);
end;

function TJViewGroup.getAccessibilityClassName: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getAccessibilityClassName', '()Ljava/lang/CharSequence;', []);
end;

function TJViewGroup.getChildAt(const AArg0: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('getChildAt', '(I)Landroid/view/View;', [AArg0]);
end;

function TJViewGroup.getChildCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getChildCount', '()I', []);
end;

class function TJViewGroup.getChildMeasureSpec(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getChildMeasureSpec', '(III)I', [AArg0, AArg1, AArg2]);
end;

function TJViewGroup.getChildVisibleRect(const AArg0: JView; const AArg1: JRect; const AArg2: JPoint): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getChildVisibleRect', '(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z', [AArg0, AArg1, AArg2]);
end;

function TJViewGroup.getClipChildren: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getClipChildren', '()Z', []);
end;

function TJViewGroup.getClipToPadding: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getClipToPadding', '()Z', []);
end;

function TJViewGroup.getDescendantFocusability: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getDescendantFocusability', '()I', []);
end;

function TJViewGroup.getFocusedChild: JView;
begin
  Result := CallObjectMethod<TJView, JView>('getFocusedChild', '()Landroid/view/View;', []);
end;

function TJViewGroup.getLayoutAnimationListener: JObject {JAnimation_AnimationListener};
begin
  Result := CallObjectMethod<TJObject {JAnimation_AnimationListener}, JObject {JAnimation_AnimationListener}>('getLayoutAnimationListener', '()Landroid/view/animation/Animation$AnimationListener;', []);
end;

function TJViewGroup.getLayoutMode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayoutMode', '()I', []);
end;

function TJViewGroup.getNestedScrollAxes: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNestedScrollAxes', '()I', []);
end;

function TJViewGroup.getPersistentDrawingCache: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPersistentDrawingCache', '()I', []);
end;

function TJViewGroup.getTouchscreenBlocksFocus: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getTouchscreenBlocksFocus', '()Z', []);
end;

function TJViewGroup.hasFocus: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasFocus', '()Z', []);
end;

function TJViewGroup.hasTransientState: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasTransientState', '()Z', []);
end;

function TJViewGroup.indexOfChild(const AArg0: JView): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'indexOfChild', '(Landroid/view/View;)I', [AArg0]);
end;

procedure TJViewGroup.invalidateChild(const AArg0: JView; const AArg1: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateChild', '(Landroid/view/View;Landroid/graphics/Rect;)V', [AArg0, AArg1]);
end;

function TJViewGroup.invalidateChildInParent(const AArg0: IJavaArray<Integer>; const AArg1: JRect): JViewParent;
begin
  Result := CallObjectMethod<TJViewParent, JViewParent>('invalidateChildInParent', '([ILandroid/graphics/Rect;)Landroid/view/ViewParent;', [AArg0, AArg1]);
end;

function TJViewGroup.isAlwaysDrawnWithCacheEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAlwaysDrawnWithCacheEnabled', '()Z', []);
end;

function TJViewGroup.isAnimationCacheEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAnimationCacheEnabled', '()Z', []);
end;

function TJViewGroup.isMotionEventSplittingEnabled: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isMotionEventSplittingEnabled', '()Z', []);
end;

function TJViewGroup.isTransitionGroup: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isTransitionGroup', '()Z', []);
end;

procedure TJViewGroup.jumpDrawablesToCurrentState;
begin
  JavaType.CallVoidMethod(ObjectID, 'jumpDrawablesToCurrentState', '()V', []);
end;

procedure TJViewGroup.layout(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'layout', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJViewGroup.notifySubtreeAccessibilityStateChanged(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'notifySubtreeAccessibilityStateChanged', '(Landroid/view/View;Landroid/view/View;I)V', [AArg0, AArg1, AArg2]);
end;

procedure TJViewGroup.offsetDescendantRectToMyCoords(const AArg0: JView; const AArg1: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'offsetDescendantRectToMyCoords', '(Landroid/view/View;Landroid/graphics/Rect;)V', [AArg0, AArg1]);
end;

procedure TJViewGroup.offsetRectIntoDescendantCoords(const AArg0: JView; const AArg1: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'offsetRectIntoDescendantCoords', '(Landroid/view/View;Landroid/graphics/Rect;)V', [AArg0, AArg1]);
end;

procedure TJViewGroup.onDescendantInvalidated(const AArg0: JView; const AArg1: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'onDescendantInvalidated', '(Landroid/view/View;Landroid/view/View;)V', [AArg0, AArg1]);
end;

function TJViewGroup.onInterceptHoverEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onInterceptHoverEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJViewGroup.onInterceptTouchEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onInterceptTouchEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJViewGroup.onNestedFling(const AArg0: JView; const AArg1: Single; const AArg2: Single; const AArg3: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onNestedFling', '(Landroid/view/View;FFZ)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJViewGroup.onNestedPreFling(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onNestedPreFling', '(Landroid/view/View;FF)Z', [AArg0, AArg1, AArg2]);
end;

function TJViewGroup.onNestedPrePerformAccessibilityAction(const AArg0: JView; const AArg1: Integer; const AArg2: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onNestedPrePerformAccessibilityAction', '(Landroid/view/View;ILandroid/os/Bundle;)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJViewGroup.onNestedPreScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Integer>);
begin
  JavaType.CallVoidMethod(ObjectID, 'onNestedPreScroll', '(Landroid/view/View;II[I)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJViewGroup.onNestedScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onNestedScroll', '(Landroid/view/View;IIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJViewGroup.onNestedScrollAccepted(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onNestedScrollAccepted', '(Landroid/view/View;Landroid/view/View;I)V', [AArg0, AArg1, AArg2]);
end;

function TJViewGroup.onStartNestedScroll(const AArg0: JView; const AArg1: JView; const AArg2: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onStartNestedScroll', '(Landroid/view/View;Landroid/view/View;I)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJViewGroup.onStopNestedScroll(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'onStopNestedScroll', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.onViewAdded(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'onViewAdded', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.onViewRemoved(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'onViewRemoved', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.recomputeViewAttributes(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'recomputeViewAttributes', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.removeAllViews;
begin
  JavaType.CallVoidMethod(ObjectID, 'removeAllViews', '()V', []);
end;

procedure TJViewGroup.removeAllViewsInLayout;
begin
  JavaType.CallVoidMethod(ObjectID, 'removeAllViewsInLayout', '()V', []);
end;

procedure TJViewGroup.removeView(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeView', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.removeViewAt(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeViewAt', '(I)V', [AArg0]);
end;

procedure TJViewGroup.removeViewInLayout(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeViewInLayout', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.removeViews(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeViews', '(II)V', [AArg0, AArg1]);
end;

procedure TJViewGroup.removeViewsInLayout(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeViewsInLayout', '(II)V', [AArg0, AArg1]);
end;

procedure TJViewGroup.requestChildFocus(const AArg0: JView; const AArg1: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'requestChildFocus', '(Landroid/view/View;Landroid/view/View;)V', [AArg0, AArg1]);
end;

function TJViewGroup.requestChildRectangleOnScreen(const AArg0: JView; const AArg1: JRect; const AArg2: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestChildRectangleOnScreen', '(Landroid/view/View;Landroid/graphics/Rect;Z)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJViewGroup.requestDisallowInterceptTouchEvent(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'requestDisallowInterceptTouchEvent', '(Z)V', [AArg0]);
end;

function TJViewGroup.requestFocus(const AArg0: Integer; const AArg1: JRect): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestFocus', '(ILandroid/graphics/Rect;)Z', [AArg0, AArg1]);
end;

procedure TJViewGroup.requestTransparentRegion(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'requestTransparentRegion', '(Landroid/view/View;)V', [AArg0]);
end;

function TJViewGroup.restoreDefaultFocus: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'restoreDefaultFocus', '()Z', []);
end;

procedure TJViewGroup.scheduleLayoutAnimation;
begin
  JavaType.CallVoidMethod(ObjectID, 'scheduleLayoutAnimation', '()V', []);
end;

procedure TJViewGroup.setAddStatesFromChildren(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAddStatesFromChildren', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.setAlwaysDrawnWithCacheEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlwaysDrawnWithCacheEnabled', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.setAnimationCacheEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAnimationCacheEnabled', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.setClipChildren(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setClipChildren', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.setClipToPadding(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setClipToPadding', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.setDescendantFocusability(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDescendantFocusability', '(I)V', [AArg0]);
end;

procedure TJViewGroup.setLayoutAnimationListener(const AArg0: JObject {JAnimation_AnimationListener});
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayoutAnimationListener', '(Landroid/view/animation/Animation$AnimationListener;)V', [AArg0]);
end;

procedure TJViewGroup.setLayoutMode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayoutMode', '(I)V', [AArg0]);
end;

procedure TJViewGroup.setMotionEventSplittingEnabled(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setMotionEventSplittingEnabled', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.setPersistentDrawingCache(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPersistentDrawingCache', '(I)V', [AArg0]);
end;

procedure TJViewGroup.setTouchscreenBlocksFocus(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTouchscreenBlocksFocus', '(Z)V', [AArg0]);
end;

procedure TJViewGroup.setTransitionGroup(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTransitionGroup', '(Z)V', [AArg0]);
end;

function TJViewGroup.shouldDelayChildPressedState: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'shouldDelayChildPressedState', '()Z', []);
end;

function TJViewGroup.showContextMenuForChild(const AArg0: JView): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'showContextMenuForChild', '(Landroid/view/View;)Z', [AArg0]);
end;

function TJViewGroup.showContextMenuForChild(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'showContextMenuForChild', '(Landroid/view/View;FF)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJViewGroup.startLayoutAnimation;
begin
  JavaType.CallVoidMethod(ObjectID, 'startLayoutAnimation', '()V', []);
end;

procedure TJViewGroup.startViewTransition(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'startViewTransition', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewGroup.updateViewLayout(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'updateViewLayout', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V', [AArg0, AArg1]);
end;

{ TJView_DragShadowBuilder }

class procedure TJView_DragShadowBuilder.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/view/View;)V');
  AddMethod('<init>', '()V');
end;

class procedure TJView_DragShadowBuilder.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getView', '()Landroid/view/View;');
  AddMethod('onDrawShadow', '(Landroid/graphics/Canvas;)V');
  AddMethod('onProvideShadowMetrics', '(Landroid/graphics/Point;Landroid/graphics/Point;)V');
end;

class function TJView_DragShadowBuilder.Wrap(const AObjectID: JNIObject): JView_DragShadowBuilder;
begin
  Result := Wrap<TJView_DragShadowBuilder, JView_DragShadowBuilder>(AObjectId);
end;

class function TJView_DragShadowBuilder.Wrap(const AObject: IJNIObject): JView_DragShadowBuilder;
begin
  Result := Wrap<TJView_DragShadowBuilder, JView_DragShadowBuilder>(AObject);
end;

class function TJView_DragShadowBuilder.Create(const AArg0: JView): JView_DragShadowBuilder;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/view/View;)V', [AArg0]);
  Result := O;
end;

class function TJView_DragShadowBuilder.Create: JView_DragShadowBuilder;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJView_DragShadowBuilder.getView: JView;
begin
  Result := CallObjectMethod<TJView, JView>('getView', '()Landroid/view/View;', []);
end;

procedure TJView_DragShadowBuilder.onDrawShadow(const AArg0: JCanvas);
begin
  JavaType.CallVoidMethod(ObjectID, 'onDrawShadow', '(Landroid/graphics/Canvas;)V', [AArg0]);
end;

procedure TJView_DragShadowBuilder.onProvideShadowMetrics(const AArg0: JPoint; const AArg1: JPoint);
begin
  JavaType.CallVoidMethod(ObjectID, 'onProvideShadowMetrics', '(Landroid/graphics/Point;Landroid/graphics/Point;)V', [AArg0, AArg1]);
end;

{ TJView_MeasureSpec }

class procedure TJView_MeasureSpec.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJView_MeasureSpec.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('getMode', '(I)I');
  AddStaticMethod('getSize', '(I)I');
  AddStaticMethod('makeMeasureSpec', '(II)I');
  AddStaticMethod('toString', '(I)Ljava/lang/String;');
end;

class procedure TJView_MeasureSpec.LoadFields;
begin
  inherited;
  AddStaticField('AT_MOST', 'I');
  AddStaticField('EXACTLY', 'I');
  AddStaticField('UNSPECIFIED', 'I');
end;

class function TJView_MeasureSpec.Wrap(const AObjectID: JNIObject): JView_MeasureSpec;
begin
  Result := Wrap<TJView_MeasureSpec, JView_MeasureSpec>(AObjectId);
end;

class function TJView_MeasureSpec.Wrap(const AObject: IJNIObject): JView_MeasureSpec;
begin
  Result := Wrap<TJView_MeasureSpec, JView_MeasureSpec>(AObject);
end;

class function TJView_MeasureSpec.Create: JView_MeasureSpec;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJView_MeasureSpec.AT_MOST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('AT_MOST');
end;

class function TJView_MeasureSpec.EXACTLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('EXACTLY');
end;

class function TJView_MeasureSpec.UNSPECIFIED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('UNSPECIFIED');
end;

class function TJView_MeasureSpec.getMode(const AArg0: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getMode', '(I)I', [AArg0]);
end;

class function TJView_MeasureSpec.getSize(const AArg0: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getSize', '(I)I', [AArg0]);
end;

class function TJView_MeasureSpec.makeMeasureSpec(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('makeMeasureSpec', '(II)I', [AArg0, AArg1]);
end;

class function TJView_MeasureSpec.toString(const AArg0: Integer): JString;
begin
  Result := CallStaticObjectMethod<TJString, JString>('toString', '(I)Ljava/lang/String;', [AArg0]);
end;

{ TJView_OnClickListener }

class procedure TJView_OnClickListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onClick', '(Landroid/view/View;)V');
end;

class function TJView_OnClickListener.Wrap(const AObjectID: JNIObject): JView_OnClickListener;
begin
  Result := Wrap<TJView_OnClickListener, JView_OnClickListener>(AObjectId);
end;

class function TJView_OnClickListener.Wrap(const AObject: IJNIObject): JView_OnClickListener;
begin
  Result := Wrap<TJView_OnClickListener, JView_OnClickListener>(AObject);
end;

procedure TJView_OnClickListener.onClick(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'onClick', '(Landroid/view/View;)V', [AArg0]);
end;

{ TJView_OnDragListener }

class procedure TJView_OnDragListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onDrag', '(Landroid/view/View;Landroid/view/DragEvent;)Z');
end;

class function TJView_OnDragListener.Wrap(const AObjectID: JNIObject): JView_OnDragListener;
begin
  Result := Wrap<TJView_OnDragListener, JView_OnDragListener>(AObjectId);
end;

class function TJView_OnDragListener.Wrap(const AObject: IJNIObject): JView_OnDragListener;
begin
  Result := Wrap<TJView_OnDragListener, JView_OnDragListener>(AObject);
end;

function TJView_OnDragListener.onDrag(const AArg0: JView; const AArg1: JDragEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onDrag', '(Landroid/view/View;Landroid/view/DragEvent;)Z', [AArg0, AArg1]);
end;

{ TJView_OnFocusChangeListener }

class procedure TJView_OnFocusChangeListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onFocusChange', '(Landroid/view/View;Z)V');
end;

class function TJView_OnFocusChangeListener.Wrap(const AObjectID: JNIObject): JView_OnFocusChangeListener;
begin
  Result := Wrap<TJView_OnFocusChangeListener, JView_OnFocusChangeListener>(AObjectId);
end;

class function TJView_OnFocusChangeListener.Wrap(const AObject: IJNIObject): JView_OnFocusChangeListener;
begin
  Result := Wrap<TJView_OnFocusChangeListener, JView_OnFocusChangeListener>(AObject);
end;

procedure TJView_OnFocusChangeListener.onFocusChange(const AArg0: JView; const AArg1: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onFocusChange', '(Landroid/view/View;Z)V', [AArg0, AArg1]);
end;

{ TJView_OnKeyListener }

class procedure TJView_OnKeyListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onKey', '(Landroid/view/View;ILandroid/view/KeyEvent;)Z');
end;

class function TJView_OnKeyListener.Wrap(const AObjectID: JNIObject): JView_OnKeyListener;
begin
  Result := Wrap<TJView_OnKeyListener, JView_OnKeyListener>(AObjectId);
end;

class function TJView_OnKeyListener.Wrap(const AObject: IJNIObject): JView_OnKeyListener;
begin
  Result := Wrap<TJView_OnKeyListener, JView_OnKeyListener>(AObject);
end;

function TJView_OnKeyListener.onKey(const AArg0: JView; const AArg1: Integer; const AArg2: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onKey', '(Landroid/view/View;ILandroid/view/KeyEvent;)Z', [AArg0, AArg1, AArg2]);
end;

{ TJView_OnLayoutChangeListener }

class procedure TJView_OnLayoutChangeListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onLayoutChange', '(Landroid/view/View;IIIIIIII)V');
end;

class function TJView_OnLayoutChangeListener.Wrap(const AObjectID: JNIObject): JView_OnLayoutChangeListener;
begin
  Result := Wrap<TJView_OnLayoutChangeListener, JView_OnLayoutChangeListener>(AObjectId);
end;

class function TJView_OnLayoutChangeListener.Wrap(const AObject: IJNIObject): JView_OnLayoutChangeListener;
begin
  Result := Wrap<TJView_OnLayoutChangeListener, JView_OnLayoutChangeListener>(AObject);
end;

procedure TJView_OnLayoutChangeListener.onLayoutChange(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: Integer; const AArg8: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onLayoutChange', '(Landroid/view/View;IIIIIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7, AArg8]);
end;

{ TJView_OnLongClickListener }

class procedure TJView_OnLongClickListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onLongClick', '(Landroid/view/View;)Z');
end;

class function TJView_OnLongClickListener.Wrap(const AObjectID: JNIObject): JView_OnLongClickListener;
begin
  Result := Wrap<TJView_OnLongClickListener, JView_OnLongClickListener>(AObjectId);
end;

class function TJView_OnLongClickListener.Wrap(const AObject: IJNIObject): JView_OnLongClickListener;
begin
  Result := Wrap<TJView_OnLongClickListener, JView_OnLongClickListener>(AObject);
end;

function TJView_OnLongClickListener.onLongClick(const AArg0: JView): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onLongClick', '(Landroid/view/View;)Z', [AArg0]);
end;

{ TJView_OnTouchListener }

class procedure TJView_OnTouchListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onTouch', '(Landroid/view/View;Landroid/view/MotionEvent;)Z');
end;

class function TJView_OnTouchListener.Wrap(const AObjectID: JNIObject): JView_OnTouchListener;
begin
  Result := Wrap<TJView_OnTouchListener, JView_OnTouchListener>(AObjectId);
end;

class function TJView_OnTouchListener.Wrap(const AObject: IJNIObject): JView_OnTouchListener;
begin
  Result := Wrap<TJView_OnTouchListener, JView_OnTouchListener>(AObject);
end;

function TJView_OnTouchListener.onTouch(const AArg0: JView; const AArg1: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onTouch', '(Landroid/view/View;Landroid/view/MotionEvent;)Z', [AArg0, AArg1]);
end;

{ TJViewGroup_LayoutParams }

class procedure TJViewGroup_LayoutParams.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;)V');
  AddMethod('<init>', '(II)V');
  AddMethod('<init>', '(Landroid/view/ViewGroup$LayoutParams;)V');
end;

class procedure TJViewGroup_LayoutParams.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('resolveLayoutDirection', '(I)V');
end;

class procedure TJViewGroup_LayoutParams.LoadFields;
begin
  inherited;
  AddStaticField('FILL_PARENT', 'I');
  AddStaticField('MATCH_PARENT', 'I');
  AddStaticField('WRAP_CONTENT', 'I');
  AddField('height', 'I');
  AddField('width', 'I');
end;

class function TJViewGroup_LayoutParams.Wrap(const AObjectID: JNIObject): JViewGroup_LayoutParams;
begin
  Result := Wrap<TJViewGroup_LayoutParams, JViewGroup_LayoutParams>(AObjectId);
end;

class function TJViewGroup_LayoutParams.Wrap(const AObject: IJNIObject): JViewGroup_LayoutParams;
begin
  Result := Wrap<TJViewGroup_LayoutParams, JViewGroup_LayoutParams>(AObject);
end;

class function TJViewGroup_LayoutParams.Create(const AArg0: JContext; const AArg1: JAttributeSet): JViewGroup_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJViewGroup_LayoutParams.Create(const AArg0: Integer; const AArg1: Integer): JViewGroup_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(II)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJViewGroup_LayoutParams.Create(const AArg0: JViewGroup_LayoutParams): JViewGroup_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/view/ViewGroup$LayoutParams;)V', [AArg0]);
  Result := O;
end;

class function TJViewGroup_LayoutParams.FILL_PARENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FILL_PARENT');
end;

class function TJViewGroup_LayoutParams.MATCH_PARENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MATCH_PARENT');
end;

class function TJViewGroup_LayoutParams.WRAP_CONTENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('WRAP_CONTENT');
end;

function TJViewGroup_LayoutParams._GetHeight: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'height');
end;

procedure TJViewGroup_LayoutParams._SetHeight(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'height', AValue);
end;

function TJViewGroup_LayoutParams._GetWidth: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'width');
end;

procedure TJViewGroup_LayoutParams._SetWidth(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'width', AValue);
end;

procedure TJViewGroup_LayoutParams.resolveLayoutDirection(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'resolveLayoutDirection', '(I)V', [AArg0]);
end;

{ TJViewGroup_MarginLayoutParams }

class procedure TJViewGroup_MarginLayoutParams.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;)V');
  AddMethod('<init>', '(II)V');
  AddMethod('<init>', '(Landroid/view/ViewGroup$MarginLayoutParams;)V');
  AddMethod('<init>', '(Landroid/view/ViewGroup$LayoutParams;)V');
end;

class procedure TJViewGroup_MarginLayoutParams.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getLayoutDirection', '()I');
  AddMethod('getMarginEnd', '()I');
  AddMethod('getMarginStart', '()I');
  AddMethod('isMarginRelative', '()Z');
  AddMethod('resolveLayoutDirection', '(I)V');
  AddMethod('setLayoutDirection', '(I)V');
  AddMethod('setMarginEnd', '(I)V');
  AddMethod('setMarginStart', '(I)V');
  AddMethod('setMargins', '(IIII)V');
end;

class procedure TJViewGroup_MarginLayoutParams.LoadFields;
begin
  inherited;
  AddField('bottomMargin', 'I');
  AddField('leftMargin', 'I');
  AddField('rightMargin', 'I');
  AddField('topMargin', 'I');
end;

class function TJViewGroup_MarginLayoutParams.Wrap(const AObjectID: JNIObject): JViewGroup_MarginLayoutParams;
begin
  Result := Wrap<TJViewGroup_MarginLayoutParams, JViewGroup_MarginLayoutParams>(AObjectId);
end;

class function TJViewGroup_MarginLayoutParams.Wrap(const AObject: IJNIObject): JViewGroup_MarginLayoutParams;
begin
  Result := Wrap<TJViewGroup_MarginLayoutParams, JViewGroup_MarginLayoutParams>(AObject);
end;

class function TJViewGroup_MarginLayoutParams.Create(const AArg0: JContext; const AArg1: JAttributeSet): JViewGroup_MarginLayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJViewGroup_MarginLayoutParams.Create(const AArg0: Integer; const AArg1: Integer): JViewGroup_MarginLayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(II)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJViewGroup_MarginLayoutParams.Create(const AArg0: JViewGroup_MarginLayoutParams): JViewGroup_MarginLayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/view/ViewGroup$MarginLayoutParams;)V', [AArg0]);
  Result := O;
end;

class function TJViewGroup_MarginLayoutParams.Create(const AArg0: JViewGroup_LayoutParams): JViewGroup_MarginLayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/view/ViewGroup$LayoutParams;)V', [AArg0]);
  Result := O;
end;

function TJViewGroup_MarginLayoutParams._GetBottomMargin: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'bottomMargin');
end;

procedure TJViewGroup_MarginLayoutParams._SetBottomMargin(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'bottomMargin', AValue);
end;

function TJViewGroup_MarginLayoutParams._GetLeftMargin: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'leftMargin');
end;

procedure TJViewGroup_MarginLayoutParams._SetLeftMargin(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'leftMargin', AValue);
end;

function TJViewGroup_MarginLayoutParams._GetRightMargin: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'rightMargin');
end;

procedure TJViewGroup_MarginLayoutParams._SetRightMargin(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'rightMargin', AValue);
end;

function TJViewGroup_MarginLayoutParams._GetTopMargin: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'topMargin');
end;

procedure TJViewGroup_MarginLayoutParams._SetTopMargin(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'topMargin', AValue);
end;

function TJViewGroup_MarginLayoutParams.getLayoutDirection: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayoutDirection', '()I', []);
end;

function TJViewGroup_MarginLayoutParams.getMarginEnd: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMarginEnd', '()I', []);
end;

function TJViewGroup_MarginLayoutParams.getMarginStart: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getMarginStart', '()I', []);
end;

function TJViewGroup_MarginLayoutParams.isMarginRelative: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isMarginRelative', '()Z', []);
end;

procedure TJViewGroup_MarginLayoutParams.resolveLayoutDirection(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'resolveLayoutDirection', '(I)V', [AArg0]);
end;

procedure TJViewGroup_MarginLayoutParams.setLayoutDirection(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayoutDirection', '(I)V', [AArg0]);
end;

procedure TJViewGroup_MarginLayoutParams.setMarginEnd(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setMarginEnd', '(I)V', [AArg0]);
end;

procedure TJViewGroup_MarginLayoutParams.setMarginStart(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setMarginStart', '(I)V', [AArg0]);
end;

procedure TJViewGroup_MarginLayoutParams.setMargins(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setMargins', '(IIII)V', [AArg0, AArg1, AArg2, AArg3]);
end;

{ TJActionBar_LayoutParams }

class procedure TJActionBar_LayoutParams.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;Landroid/util/AttributeSet;)V');
  AddMethod('<init>', '(II)V');
  AddMethod('<init>', '(III)V');
  AddMethod('<init>', '(I)V');
  AddMethod('<init>', '(Landroid/app/ActionBar$LayoutParams;)V');
  AddMethod('<init>', '(Landroid/view/ViewGroup$LayoutParams;)V');
end;

class procedure TJActionBar_LayoutParams.LoadMethods;
begin
  inherited;
end;

class procedure TJActionBar_LayoutParams.LoadFields;
begin
  inherited;
  AddField('gravity', 'I');
end;

class function TJActionBar_LayoutParams.Wrap(const AObjectID: JNIObject): JActionBar_LayoutParams;
begin
  Result := Wrap<TJActionBar_LayoutParams, JActionBar_LayoutParams>(AObjectId);
end;

class function TJActionBar_LayoutParams.Wrap(const AObject: IJNIObject): JActionBar_LayoutParams;
begin
  Result := Wrap<TJActionBar_LayoutParams, JActionBar_LayoutParams>(AObject);
end;

class function TJActionBar_LayoutParams.Create(const AArg0: JContext; const AArg1: JAttributeSet): JActionBar_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;Landroid/util/AttributeSet;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJActionBar_LayoutParams.Create(const AArg0: Integer; const AArg1: Integer): JActionBar_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(II)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJActionBar_LayoutParams.Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): JActionBar_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(III)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJActionBar_LayoutParams.Create(const AArg0: Integer): JActionBar_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

class function TJActionBar_LayoutParams.Create(const AArg0: JActionBar_LayoutParams): JActionBar_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/app/ActionBar$LayoutParams;)V', [AArg0]);
  Result := O;
end;

class function TJActionBar_LayoutParams.Create(const AArg0: JViewGroup_LayoutParams): JActionBar_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/view/ViewGroup$LayoutParams;)V', [AArg0]);
  Result := O;
end;

function TJActionBar_LayoutParams._GetGravity: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'gravity');
end;

procedure TJActionBar_LayoutParams._SetGravity(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'gravity', AValue);
end;

{ TJWindowManager_LayoutParams }

class procedure TJWindowManager_LayoutParams.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(I)V');
  AddMethod('<init>', '(II)V');
  AddMethod('<init>', '(III)V');
  AddMethod('<init>', '(IIIII)V');
  AddMethod('<init>', '(IIIIIII)V');
end;

class procedure TJWindowManager_LayoutParams.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('copyFrom', '(Landroid/view/WindowManager$LayoutParams;)I');
  AddMethod('debug', '(Ljava/lang/String;)Ljava/lang/String;');
  AddMethod('describeContents', '()I');
  AddMethod('getColorMode', '()I');
  AddMethod('getTitle', '()Ljava/lang/CharSequence;');
  AddStaticMethod('mayUseInputMethod', '(I)Z');
  AddMethod('setColorMode', '(I)V');
  AddMethod('setTitle', '(Ljava/lang/CharSequence;)V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJWindowManager_LayoutParams.LoadFields;
begin
  inherited;
  AddStaticField('ALPHA_CHANGED', 'I');
  AddStaticField('ANIMATION_CHANGED', 'I');
  AddStaticField('BRIGHTNESS_OVERRIDE_FULL', 'F');
  AddStaticField('BRIGHTNESS_OVERRIDE_NONE', 'F');
  AddStaticField('BRIGHTNESS_OVERRIDE_OFF', 'F');
  AddStaticField('DIM_AMOUNT_CHANGED', 'I');
  AddStaticField('FIRST_APPLICATION_WINDOW', 'I');
  AddStaticField('FIRST_SUB_WINDOW', 'I');
  AddStaticField('FIRST_SYSTEM_WINDOW', 'I');
  AddStaticField('FLAGS_CHANGED', 'I');
  AddStaticField('FLAG_ALLOW_LOCK_WHILE_SCREEN_ON', 'I');
  AddStaticField('FLAG_ALT_FOCUSABLE_IM', 'I');
  AddStaticField('FLAG_BLUR_BEHIND', 'I');
  AddStaticField('FLAG_DIM_BEHIND', 'I');
  AddStaticField('FLAG_DISMISS_KEYGUARD', 'I');
  AddStaticField('FLAG_DITHER', 'I');
  AddStaticField('FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS', 'I');
  AddStaticField('FLAG_FORCE_NOT_FULLSCREEN', 'I');
  AddStaticField('FLAG_FULLSCREEN', 'I');
  AddStaticField('FLAG_HARDWARE_ACCELERATED', 'I');
  AddStaticField('FLAG_IGNORE_CHEEK_PRESSES', 'I');
  AddStaticField('FLAG_KEEP_SCREEN_ON', 'I');
  AddStaticField('FLAG_LAYOUT_ATTACHED_IN_DECOR', 'I');
  AddStaticField('FLAG_LAYOUT_INSET_DECOR', 'I');
  AddStaticField('FLAG_LAYOUT_IN_OVERSCAN', 'I');
  AddStaticField('FLAG_LAYOUT_IN_SCREEN', 'I');
  AddStaticField('FLAG_LAYOUT_NO_LIMITS', 'I');
  AddStaticField('FLAG_LOCAL_FOCUS_MODE', 'I');
  AddStaticField('FLAG_NOT_FOCUSABLE', 'I');
  AddStaticField('FLAG_NOT_TOUCHABLE', 'I');
  AddStaticField('FLAG_NOT_TOUCH_MODAL', 'I');
  AddStaticField('FLAG_SCALED', 'I');
  AddStaticField('FLAG_SECURE', 'I');
  AddStaticField('FLAG_SHOW_WALLPAPER', 'I');
  AddStaticField('FLAG_SHOW_WHEN_LOCKED', 'I');
  AddStaticField('FLAG_SPLIT_TOUCH', 'I');
  AddStaticField('FLAG_TOUCHABLE_WHEN_WAKING', 'I');
  AddStaticField('FLAG_TRANSLUCENT_NAVIGATION', 'I');
  AddStaticField('FLAG_TRANSLUCENT_STATUS', 'I');
  AddStaticField('FLAG_TURN_SCREEN_ON', 'I');
  AddStaticField('FLAG_WATCH_OUTSIDE_TOUCH', 'I');
  AddStaticField('FORMAT_CHANGED', 'I');
  AddStaticField('LAST_APPLICATION_WINDOW', 'I');
  AddStaticField('LAST_SUB_WINDOW', 'I');
  AddStaticField('LAST_SYSTEM_WINDOW', 'I');
  AddStaticField('LAYOUT_CHANGED', 'I');
  AddStaticField('LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT', 'I');
  AddStaticField('LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER', 'I');
  AddStaticField('LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES', 'I');
  AddStaticField('MEMORY_TYPE_CHANGED', 'I');
  AddStaticField('MEMORY_TYPE_GPU', 'I');
  AddStaticField('MEMORY_TYPE_HARDWARE', 'I');
  AddStaticField('MEMORY_TYPE_NORMAL', 'I');
  AddStaticField('MEMORY_TYPE_PUSH_BUFFERS', 'I');
  AddStaticField('ROTATION_ANIMATION_CHANGED', 'I');
  AddStaticField('ROTATION_ANIMATION_CROSSFADE', 'I');
  AddStaticField('ROTATION_ANIMATION_JUMPCUT', 'I');
  AddStaticField('ROTATION_ANIMATION_ROTATE', 'I');
  AddStaticField('ROTATION_ANIMATION_SEAMLESS', 'I');
  AddStaticField('SCREEN_BRIGHTNESS_CHANGED', 'I');
  AddStaticField('SCREEN_ORIENTATION_CHANGED', 'I');
  AddStaticField('SOFT_INPUT_ADJUST_NOTHING', 'I');
  AddStaticField('SOFT_INPUT_ADJUST_PAN', 'I');
  AddStaticField('SOFT_INPUT_ADJUST_RESIZE', 'I');
  AddStaticField('SOFT_INPUT_ADJUST_UNSPECIFIED', 'I');
  AddStaticField('SOFT_INPUT_IS_FORWARD_NAVIGATION', 'I');
  AddStaticField('SOFT_INPUT_MASK_ADJUST', 'I');
  AddStaticField('SOFT_INPUT_MASK_STATE', 'I');
  AddStaticField('SOFT_INPUT_MODE_CHANGED', 'I');
  AddStaticField('SOFT_INPUT_STATE_ALWAYS_HIDDEN', 'I');
  AddStaticField('SOFT_INPUT_STATE_ALWAYS_VISIBLE', 'I');
  AddStaticField('SOFT_INPUT_STATE_HIDDEN', 'I');
  AddStaticField('SOFT_INPUT_STATE_UNCHANGED', 'I');
  AddStaticField('SOFT_INPUT_STATE_UNSPECIFIED', 'I');
  AddStaticField('SOFT_INPUT_STATE_VISIBLE', 'I');
  AddStaticField('TITLE_CHANGED', 'I');
  AddStaticField('TYPE_ACCESSIBILITY_OVERLAY', 'I');
  AddStaticField('TYPE_APPLICATION', 'I');
  AddStaticField('TYPE_APPLICATION_ATTACHED_DIALOG', 'I');
  AddStaticField('TYPE_APPLICATION_MEDIA', 'I');
  AddStaticField('TYPE_APPLICATION_OVERLAY', 'I');
  AddStaticField('TYPE_APPLICATION_PANEL', 'I');
  AddStaticField('TYPE_APPLICATION_STARTING', 'I');
  AddStaticField('TYPE_APPLICATION_SUB_PANEL', 'I');
  AddStaticField('TYPE_BASE_APPLICATION', 'I');
  AddStaticField('TYPE_CHANGED', 'I');
  AddStaticField('TYPE_DRAWN_APPLICATION', 'I');
  AddStaticField('TYPE_INPUT_METHOD', 'I');
  AddStaticField('TYPE_INPUT_METHOD_DIALOG', 'I');
  AddStaticField('TYPE_KEYGUARD_DIALOG', 'I');
  AddStaticField('TYPE_PHONE', 'I');
  AddStaticField('TYPE_PRIORITY_PHONE', 'I');
  AddStaticField('TYPE_PRIVATE_PRESENTATION', 'I');
  AddStaticField('TYPE_SEARCH_BAR', 'I');
  AddStaticField('TYPE_STATUS_BAR', 'I');
  AddStaticField('TYPE_STATUS_BAR_PANEL', 'I');
  AddStaticField('TYPE_SYSTEM_ALERT', 'I');
  AddStaticField('TYPE_SYSTEM_DIALOG', 'I');
  AddStaticField('TYPE_SYSTEM_ERROR', 'I');
  AddStaticField('TYPE_SYSTEM_OVERLAY', 'I');
  AddStaticField('TYPE_TOAST', 'I');
  AddStaticField('TYPE_WALLPAPER', 'I');
  AddField('alpha', 'F');
  AddField('buttonBrightness', 'F');
  AddField('dimAmount', 'F');
  AddField('flags', 'I');
  AddField('format', 'I');
  AddField('gravity', 'I');
  AddField('horizontalMargin', 'F');
  AddField('horizontalWeight', 'F');
  AddField('layoutInDisplayCutoutMode', 'I');
  AddField('memoryType', 'I');
  AddField('packageName', 'Ljava/lang/String;');
  AddField('preferredDisplayModeId', 'I');
  AddField('preferredRefreshRate', 'F');
  AddField('rotationAnimation', 'I');
  AddField('screenBrightness', 'F');
  AddField('screenOrientation', 'I');
  AddField('softInputMode', 'I');
  AddField('systemUiVisibility', 'I');
  AddField('token', 'Landroid/os/IBinder;');
  AddField('type', 'I');
  AddField('verticalMargin', 'F');
  AddField('verticalWeight', 'F');
  AddField('windowAnimations', 'I');
  AddField('x', 'I');
  AddField('y', 'I');
end;

class function TJWindowManager_LayoutParams.Wrap(const AObjectID: JNIObject): JWindowManager_LayoutParams;
begin
  Result := Wrap<TJWindowManager_LayoutParams, JWindowManager_LayoutParams>(AObjectId);
end;

class function TJWindowManager_LayoutParams.Wrap(const AObject: IJNIObject): JWindowManager_LayoutParams;
begin
  Result := Wrap<TJWindowManager_LayoutParams, JWindowManager_LayoutParams>(AObject);
end;

class function TJWindowManager_LayoutParams.Create: JWindowManager_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJWindowManager_LayoutParams.Create(const AArg0: Integer): JWindowManager_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

class function TJWindowManager_LayoutParams.Create(const AArg0: Integer; const AArg1: Integer): JWindowManager_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(II)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJWindowManager_LayoutParams.Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): JWindowManager_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(III)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJWindowManager_LayoutParams.Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer): JWindowManager_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(IIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
  Result := O;
end;

class function TJWindowManager_LayoutParams.Create(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer): JWindowManager_LayoutParams;
begin
  var O := CreateForWrap;
  O.NewObject('(IIIIIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
  Result := O;
end;

class function TJWindowManager_LayoutParams.ALPHA_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ALPHA_CHANGED');
end;

class function TJWindowManager_LayoutParams.ANIMATION_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ANIMATION_CHANGED');
end;

class function TJWindowManager_LayoutParams.BRIGHTNESS_OVERRIDE_FULL: Single;
begin
  Result := StaticJavaType[Self].GetStaticFloatField('BRIGHTNESS_OVERRIDE_FULL');
end;

class function TJWindowManager_LayoutParams.BRIGHTNESS_OVERRIDE_NONE: Single;
begin
  Result := StaticJavaType[Self].GetStaticFloatField('BRIGHTNESS_OVERRIDE_NONE');
end;

class function TJWindowManager_LayoutParams.BRIGHTNESS_OVERRIDE_OFF: Single;
begin
  Result := StaticJavaType[Self].GetStaticFloatField('BRIGHTNESS_OVERRIDE_OFF');
end;

class function TJWindowManager_LayoutParams.DIM_AMOUNT_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DIM_AMOUNT_CHANGED');
end;

class function TJWindowManager_LayoutParams.FIRST_APPLICATION_WINDOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIRST_APPLICATION_WINDOW');
end;

class function TJWindowManager_LayoutParams.FIRST_SUB_WINDOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIRST_SUB_WINDOW');
end;

class function TJWindowManager_LayoutParams.FIRST_SYSTEM_WINDOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FIRST_SYSTEM_WINDOW');
end;

class function TJWindowManager_LayoutParams.FLAGS_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAGS_CHANGED');
end;

class function TJWindowManager_LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ALLOW_LOCK_WHILE_SCREEN_ON');
end;

class function TJWindowManager_LayoutParams.FLAG_ALT_FOCUSABLE_IM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ALT_FOCUSABLE_IM');
end;

class function TJWindowManager_LayoutParams.FLAG_BLUR_BEHIND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_BLUR_BEHIND');
end;

class function TJWindowManager_LayoutParams.FLAG_DIM_BEHIND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_DIM_BEHIND');
end;

class function TJWindowManager_LayoutParams.FLAG_DISMISS_KEYGUARD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_DISMISS_KEYGUARD');
end;

class function TJWindowManager_LayoutParams.FLAG_DITHER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_DITHER');
end;

class function TJWindowManager_LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS');
end;

class function TJWindowManager_LayoutParams.FLAG_FORCE_NOT_FULLSCREEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_FORCE_NOT_FULLSCREEN');
end;

class function TJWindowManager_LayoutParams.FLAG_FULLSCREEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_FULLSCREEN');
end;

class function TJWindowManager_LayoutParams.FLAG_HARDWARE_ACCELERATED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_HARDWARE_ACCELERATED');
end;

class function TJWindowManager_LayoutParams.FLAG_IGNORE_CHEEK_PRESSES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_IGNORE_CHEEK_PRESSES');
end;

class function TJWindowManager_LayoutParams.FLAG_KEEP_SCREEN_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_KEEP_SCREEN_ON');
end;

class function TJWindowManager_LayoutParams.FLAG_LAYOUT_ATTACHED_IN_DECOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_LAYOUT_ATTACHED_IN_DECOR');
end;

class function TJWindowManager_LayoutParams.FLAG_LAYOUT_INSET_DECOR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_LAYOUT_INSET_DECOR');
end;

class function TJWindowManager_LayoutParams.FLAG_LAYOUT_IN_OVERSCAN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_LAYOUT_IN_OVERSCAN');
end;

class function TJWindowManager_LayoutParams.FLAG_LAYOUT_IN_SCREEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_LAYOUT_IN_SCREEN');
end;

class function TJWindowManager_LayoutParams.FLAG_LAYOUT_NO_LIMITS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_LAYOUT_NO_LIMITS');
end;

class function TJWindowManager_LayoutParams.FLAG_LOCAL_FOCUS_MODE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_LOCAL_FOCUS_MODE');
end;

class function TJWindowManager_LayoutParams.FLAG_NOT_FOCUSABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_NOT_FOCUSABLE');
end;

class function TJWindowManager_LayoutParams.FLAG_NOT_TOUCHABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_NOT_TOUCHABLE');
end;

class function TJWindowManager_LayoutParams.FLAG_NOT_TOUCH_MODAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_NOT_TOUCH_MODAL');
end;

class function TJWindowManager_LayoutParams.FLAG_SCALED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SCALED');
end;

class function TJWindowManager_LayoutParams.FLAG_SECURE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SECURE');
end;

class function TJWindowManager_LayoutParams.FLAG_SHOW_WALLPAPER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SHOW_WALLPAPER');
end;

class function TJWindowManager_LayoutParams.FLAG_SHOW_WHEN_LOCKED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SHOW_WHEN_LOCKED');
end;

class function TJWindowManager_LayoutParams.FLAG_SPLIT_TOUCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_SPLIT_TOUCH');
end;

class function TJWindowManager_LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_TOUCHABLE_WHEN_WAKING');
end;

class function TJWindowManager_LayoutParams.FLAG_TRANSLUCENT_NAVIGATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_TRANSLUCENT_NAVIGATION');
end;

class function TJWindowManager_LayoutParams.FLAG_TRANSLUCENT_STATUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_TRANSLUCENT_STATUS');
end;

class function TJWindowManager_LayoutParams.FLAG_TURN_SCREEN_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_TURN_SCREEN_ON');
end;

class function TJWindowManager_LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_WATCH_OUTSIDE_TOUCH');
end;

class function TJWindowManager_LayoutParams.FORMAT_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FORMAT_CHANGED');
end;

class function TJWindowManager_LayoutParams.LAST_APPLICATION_WINDOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAST_APPLICATION_WINDOW');
end;

class function TJWindowManager_LayoutParams.LAST_SUB_WINDOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAST_SUB_WINDOW');
end;

class function TJWindowManager_LayoutParams.LAST_SYSTEM_WINDOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAST_SYSTEM_WINDOW');
end;

class function TJWindowManager_LayoutParams.LAYOUT_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_CHANGED');
end;

class function TJWindowManager_LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT');
end;

class function TJWindowManager_LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_IN_DISPLAY_CUTOUT_MODE_NEVER');
end;

class function TJWindowManager_LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES');
end;

class function TJWindowManager_LayoutParams.MEMORY_TYPE_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MEMORY_TYPE_CHANGED');
end;

class function TJWindowManager_LayoutParams.MEMORY_TYPE_GPU: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MEMORY_TYPE_GPU');
end;

class function TJWindowManager_LayoutParams.MEMORY_TYPE_HARDWARE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MEMORY_TYPE_HARDWARE');
end;

class function TJWindowManager_LayoutParams.MEMORY_TYPE_NORMAL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MEMORY_TYPE_NORMAL');
end;

class function TJWindowManager_LayoutParams.MEMORY_TYPE_PUSH_BUFFERS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('MEMORY_TYPE_PUSH_BUFFERS');
end;

class function TJWindowManager_LayoutParams.ROTATION_ANIMATION_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ROTATION_ANIMATION_CHANGED');
end;

class function TJWindowManager_LayoutParams.ROTATION_ANIMATION_CROSSFADE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ROTATION_ANIMATION_CROSSFADE');
end;

class function TJWindowManager_LayoutParams.ROTATION_ANIMATION_JUMPCUT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ROTATION_ANIMATION_JUMPCUT');
end;

class function TJWindowManager_LayoutParams.ROTATION_ANIMATION_ROTATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ROTATION_ANIMATION_ROTATE');
end;

class function TJWindowManager_LayoutParams.ROTATION_ANIMATION_SEAMLESS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ROTATION_ANIMATION_SEAMLESS');
end;

class function TJWindowManager_LayoutParams.SCREEN_BRIGHTNESS_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_BRIGHTNESS_CHANGED');
end;

class function TJWindowManager_LayoutParams.SCREEN_ORIENTATION_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SCREEN_ORIENTATION_CHANGED');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_ADJUST_NOTHING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_ADJUST_NOTHING');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_ADJUST_PAN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_ADJUST_PAN');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_ADJUST_RESIZE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_ADJUST_RESIZE');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_ADJUST_UNSPECIFIED');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_IS_FORWARD_NAVIGATION');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_MASK_ADJUST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_MASK_ADJUST');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_MASK_STATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_MASK_STATE');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_MODE_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_MODE_CHANGED');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_STATE_ALWAYS_HIDDEN');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_STATE_ALWAYS_VISIBLE');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_STATE_HIDDEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_STATE_HIDDEN');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_STATE_UNCHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_STATE_UNCHANGED');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_STATE_UNSPECIFIED');
end;

class function TJWindowManager_LayoutParams.SOFT_INPUT_STATE_VISIBLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SOFT_INPUT_STATE_VISIBLE');
end;

class function TJWindowManager_LayoutParams.TITLE_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TITLE_CHANGED');
end;

class function TJWindowManager_LayoutParams.TYPE_ACCESSIBILITY_OVERLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_ACCESSIBILITY_OVERLAY');
end;

class function TJWindowManager_LayoutParams.TYPE_APPLICATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_APPLICATION');
end;

class function TJWindowManager_LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_APPLICATION_ATTACHED_DIALOG');
end;

class function TJWindowManager_LayoutParams.TYPE_APPLICATION_MEDIA: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_APPLICATION_MEDIA');
end;

class function TJWindowManager_LayoutParams.TYPE_APPLICATION_OVERLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_APPLICATION_OVERLAY');
end;

class function TJWindowManager_LayoutParams.TYPE_APPLICATION_PANEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_APPLICATION_PANEL');
end;

class function TJWindowManager_LayoutParams.TYPE_APPLICATION_STARTING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_APPLICATION_STARTING');
end;

class function TJWindowManager_LayoutParams.TYPE_APPLICATION_SUB_PANEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_APPLICATION_SUB_PANEL');
end;

class function TJWindowManager_LayoutParams.TYPE_BASE_APPLICATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_BASE_APPLICATION');
end;

class function TJWindowManager_LayoutParams.TYPE_CHANGED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_CHANGED');
end;

class function TJWindowManager_LayoutParams.TYPE_DRAWN_APPLICATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_DRAWN_APPLICATION');
end;

class function TJWindowManager_LayoutParams.TYPE_INPUT_METHOD: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_INPUT_METHOD');
end;

class function TJWindowManager_LayoutParams.TYPE_INPUT_METHOD_DIALOG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_INPUT_METHOD_DIALOG');
end;

class function TJWindowManager_LayoutParams.TYPE_KEYGUARD_DIALOG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_KEYGUARD_DIALOG');
end;

class function TJWindowManager_LayoutParams.TYPE_PHONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_PHONE');
end;

class function TJWindowManager_LayoutParams.TYPE_PRIORITY_PHONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_PRIORITY_PHONE');
end;

class function TJWindowManager_LayoutParams.TYPE_PRIVATE_PRESENTATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_PRIVATE_PRESENTATION');
end;

class function TJWindowManager_LayoutParams.TYPE_SEARCH_BAR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_SEARCH_BAR');
end;

class function TJWindowManager_LayoutParams.TYPE_STATUS_BAR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_STATUS_BAR');
end;

class function TJWindowManager_LayoutParams.TYPE_STATUS_BAR_PANEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_STATUS_BAR_PANEL');
end;

class function TJWindowManager_LayoutParams.TYPE_SYSTEM_ALERT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_SYSTEM_ALERT');
end;

class function TJWindowManager_LayoutParams.TYPE_SYSTEM_DIALOG: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_SYSTEM_DIALOG');
end;

class function TJWindowManager_LayoutParams.TYPE_SYSTEM_ERROR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_SYSTEM_ERROR');
end;

class function TJWindowManager_LayoutParams.TYPE_SYSTEM_OVERLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_SYSTEM_OVERLAY');
end;

class function TJWindowManager_LayoutParams.TYPE_TOAST: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_TOAST');
end;

class function TJWindowManager_LayoutParams.TYPE_WALLPAPER: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_WALLPAPER');
end;

function TJWindowManager_LayoutParams._GetAlpha: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'alpha');
end;

procedure TJWindowManager_LayoutParams._SetAlpha(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'alpha', AValue);
end;

function TJWindowManager_LayoutParams._GetButtonBrightness: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'buttonBrightness');
end;

procedure TJWindowManager_LayoutParams._SetButtonBrightness(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'buttonBrightness', AValue);
end;

function TJWindowManager_LayoutParams._GetDimAmount: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'dimAmount');
end;

procedure TJWindowManager_LayoutParams._SetDimAmount(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'dimAmount', AValue);
end;

function TJWindowManager_LayoutParams._GetFlags: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'flags');
end;

procedure TJWindowManager_LayoutParams._SetFlags(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'flags', AValue);
end;

function TJWindowManager_LayoutParams._GetFormat: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'format');
end;

procedure TJWindowManager_LayoutParams._SetFormat(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'format', AValue);
end;

function TJWindowManager_LayoutParams._GetGravity: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'gravity');
end;

procedure TJWindowManager_LayoutParams._SetGravity(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'gravity', AValue);
end;

function TJWindowManager_LayoutParams._GetHorizontalMargin: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'horizontalMargin');
end;

procedure TJWindowManager_LayoutParams._SetHorizontalMargin(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'horizontalMargin', AValue);
end;

function TJWindowManager_LayoutParams._GetHorizontalWeight: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'horizontalWeight');
end;

procedure TJWindowManager_LayoutParams._SetHorizontalWeight(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'horizontalWeight', AValue);
end;

function TJWindowManager_LayoutParams._GetLayoutInDisplayCutoutMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'layoutInDisplayCutoutMode');
end;

procedure TJWindowManager_LayoutParams._SetLayoutInDisplayCutoutMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'layoutInDisplayCutoutMode', AValue);
end;

function TJWindowManager_LayoutParams._GetMemoryType: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'memoryType');
end;

procedure TJWindowManager_LayoutParams._SetMemoryType(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'memoryType', AValue);
end;

function TJWindowManager_LayoutParams._GetPackageName: JString;
begin
  Result := GetObjectField<TJString, JString>('packageName');
end;

procedure TJWindowManager_LayoutParams._SetPackageName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'packageName', AValue);
end;

function TJWindowManager_LayoutParams._GetPreferredDisplayModeId: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'preferredDisplayModeId');
end;

procedure TJWindowManager_LayoutParams._SetPreferredDisplayModeId(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'preferredDisplayModeId', AValue);
end;

function TJWindowManager_LayoutParams._GetPreferredRefreshRate: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'preferredRefreshRate');
end;

procedure TJWindowManager_LayoutParams._SetPreferredRefreshRate(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'preferredRefreshRate', AValue);
end;

function TJWindowManager_LayoutParams._GetRotationAnimation: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'rotationAnimation');
end;

procedure TJWindowManager_LayoutParams._SetRotationAnimation(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'rotationAnimation', AValue);
end;

function TJWindowManager_LayoutParams._GetScreenBrightness: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'screenBrightness');
end;

procedure TJWindowManager_LayoutParams._SetScreenBrightness(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'screenBrightness', AValue);
end;

function TJWindowManager_LayoutParams._GetScreenOrientation: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'screenOrientation');
end;

procedure TJWindowManager_LayoutParams._SetScreenOrientation(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'screenOrientation', AValue);
end;

function TJWindowManager_LayoutParams._GetSoftInputMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'softInputMode');
end;

procedure TJWindowManager_LayoutParams._SetSoftInputMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'softInputMode', AValue);
end;

function TJWindowManager_LayoutParams._GetSystemUiVisibility: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'systemUiVisibility');
end;

procedure TJWindowManager_LayoutParams._SetSystemUiVisibility(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'systemUiVisibility', AValue);
end;

function TJWindowManager_LayoutParams._GetToken: JIBinder;
begin
  Result := GetObjectField<TJIBinder, JIBinder>('token');
end;

procedure TJWindowManager_LayoutParams._SetToken(const AValue: JIBinder);
begin
  JavaType.SetObjectField(ObjectId, 'token', AValue);
end;

function TJWindowManager_LayoutParams._GetType: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'type');
end;

procedure TJWindowManager_LayoutParams._SetType(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'type', AValue);
end;

function TJWindowManager_LayoutParams._GetVerticalMargin: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'verticalMargin');
end;

procedure TJWindowManager_LayoutParams._SetVerticalMargin(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'verticalMargin', AValue);
end;

function TJWindowManager_LayoutParams._GetVerticalWeight: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'verticalWeight');
end;

procedure TJWindowManager_LayoutParams._SetVerticalWeight(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'verticalWeight', AValue);
end;

function TJWindowManager_LayoutParams._GetWindowAnimations: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'windowAnimations');
end;

procedure TJWindowManager_LayoutParams._SetWindowAnimations(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'windowAnimations', AValue);
end;

function TJWindowManager_LayoutParams._GetX: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'x');
end;

procedure TJWindowManager_LayoutParams._SetX(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'x', AValue);
end;

function TJWindowManager_LayoutParams._GetY: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'y');
end;

procedure TJWindowManager_LayoutParams._SetY(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'y', AValue);
end;

function TJWindowManager_LayoutParams.copyFrom(const AArg0: JWindowManager_LayoutParams): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'copyFrom', '(Landroid/view/WindowManager$LayoutParams;)I', [AArg0]);
end;

function TJWindowManager_LayoutParams.debug(const AArg0: JString): JString;
begin
  Result := CallObjectMethod<TJString, JString>('debug', '(Ljava/lang/String;)Ljava/lang/String;', [AArg0]);
end;

function TJWindowManager_LayoutParams.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJWindowManager_LayoutParams.getColorMode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColorMode', '()I', []);
end;

function TJWindowManager_LayoutParams.getTitle: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getTitle', '()Ljava/lang/CharSequence;', []);
end;

class function TJWindowManager_LayoutParams.mayUseInputMethod(const AArg0: Integer): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('mayUseInputMethod', '(I)Z', [AArg0]);
end;

procedure TJWindowManager_LayoutParams.setColorMode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorMode', '(I)V', [AArg0]);
end;

procedure TJWindowManager_LayoutParams.setTitle(const AArg0: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTitle', '(Ljava/lang/CharSequence;)V', [AArg0]);
end;

function TJWindowManager_LayoutParams.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJViewManager }

class procedure TJViewManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V');
  AddMethod('removeView', '(Landroid/view/View;)V');
  AddMethod('updateViewLayout', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V');
end;

class function TJViewManager.Wrap(const AObjectID: JNIObject): JViewManager;
begin
  Result := Wrap<TJViewManager, JViewManager>(AObjectId);
end;

class function TJViewManager.Wrap(const AObject: IJNIObject): JViewManager;
begin
  Result := Wrap<TJViewManager, JViewManager>(AObject);
end;

procedure TJViewManager.addView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'addView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V', [AArg0, AArg1]);
end;

procedure TJViewManager.removeView(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeView', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewManager.updateViewLayout(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'updateViewLayout', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V', [AArg0, AArg1]);
end;

{ TJWindowManager }

class procedure TJWindowManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getDefaultDisplay', '()Landroid/view/Display;');
  AddMethod('removeViewImmediate', '(Landroid/view/View;)V');
end;

class function TJWindowManager.Wrap(const AObjectID: JNIObject): JWindowManager;
begin
  Result := Wrap<TJWindowManager, JWindowManager>(AObjectId);
end;

class function TJWindowManager.Wrap(const AObject: IJNIObject): JWindowManager;
begin
  Result := Wrap<TJWindowManager, JWindowManager>(AObject);
end;

function TJWindowManager.getDefaultDisplay: JDisplay;
begin
  Result := CallObjectMethod<TJDisplay, JDisplay>('getDefaultDisplay', '()Landroid/view/Display;', []);
end;

procedure TJWindowManager.removeViewImmediate(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeViewImmediate', '(Landroid/view/View;)V', [AArg0]);
end;

{ TJViewParent }

class procedure TJViewParent.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('bringChildToFront', '(Landroid/view/View;)V');
  AddMethod('canResolveLayoutDirection', '()Z');
  AddMethod('canResolveTextAlignment', '()Z');
  AddMethod('canResolveTextDirection', '()Z');
  AddMethod('childDrawableStateChanged', '(Landroid/view/View;)V');
  AddMethod('childHasTransientStateChanged', '(Landroid/view/View;Z)V');
  AddMethod('clearChildFocus', '(Landroid/view/View;)V');
  AddMethod('focusSearch', '(Landroid/view/View;I)Landroid/view/View;');
  AddMethod('focusableViewAvailable', '(Landroid/view/View;)V');
  AddMethod('getChildVisibleRect', '(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z');
  AddMethod('getLayoutDirection', '()I');
  AddMethod('getParent', '()Landroid/view/ViewParent;');
  AddMethod('getParentForAccessibility', '()Landroid/view/ViewParent;');
  AddMethod('getTextAlignment', '()I');
  AddMethod('getTextDirection', '()I');
  AddMethod('invalidateChild', '(Landroid/view/View;Landroid/graphics/Rect;)V');
  AddMethod('invalidateChildInParent', '([ILandroid/graphics/Rect;)Landroid/view/ViewParent;');
  AddMethod('isLayoutDirectionResolved', '()Z');
  AddMethod('isLayoutRequested', '()Z');
  AddMethod('isTextAlignmentResolved', '()Z');
  AddMethod('isTextDirectionResolved', '()Z');
  AddMethod('keyboardNavigationClusterSearch', '(Landroid/view/View;I)Landroid/view/View;');
  AddMethod('notifySubtreeAccessibilityStateChanged', '(Landroid/view/View;Landroid/view/View;I)V');
  AddMethod('onNestedFling', '(Landroid/view/View;FFZ)Z');
  AddMethod('onNestedPreFling', '(Landroid/view/View;FF)Z');
  AddMethod('onNestedPrePerformAccessibilityAction', '(Landroid/view/View;ILandroid/os/Bundle;)Z');
  AddMethod('onNestedPreScroll', '(Landroid/view/View;II[I)V');
  AddMethod('onNestedScroll', '(Landroid/view/View;IIII)V');
  AddMethod('onNestedScrollAccepted', '(Landroid/view/View;Landroid/view/View;I)V');
  AddMethod('onStartNestedScroll', '(Landroid/view/View;Landroid/view/View;I)Z');
  AddMethod('onStopNestedScroll', '(Landroid/view/View;)V');
  AddMethod('recomputeViewAttributes', '(Landroid/view/View;)V');
  AddMethod('requestChildFocus', '(Landroid/view/View;Landroid/view/View;)V');
  AddMethod('requestChildRectangleOnScreen', '(Landroid/view/View;Landroid/graphics/Rect;Z)Z');
  AddMethod('requestDisallowInterceptTouchEvent', '(Z)V');
  AddMethod('requestFitSystemWindows', '()V');
  AddMethod('requestLayout', '()V');
  AddMethod('requestTransparentRegion', '(Landroid/view/View;)V');
  AddMethod('showContextMenuForChild', '(Landroid/view/View;FF)Z');
  AddMethod('showContextMenuForChild', '(Landroid/view/View;)Z');
end;

class function TJViewParent.Wrap(const AObjectID: JNIObject): JViewParent;
begin
  Result := Wrap<TJViewParent, JViewParent>(AObjectId);
end;

class function TJViewParent.Wrap(const AObject: IJNIObject): JViewParent;
begin
  Result := Wrap<TJViewParent, JViewParent>(AObject);
end;

procedure TJViewParent.bringChildToFront(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'bringChildToFront', '(Landroid/view/View;)V', [AArg0]);
end;

function TJViewParent.canResolveLayoutDirection: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canResolveLayoutDirection', '()Z', []);
end;

function TJViewParent.canResolveTextAlignment: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canResolveTextAlignment', '()Z', []);
end;

function TJViewParent.canResolveTextDirection: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'canResolveTextDirection', '()Z', []);
end;

procedure TJViewParent.childDrawableStateChanged(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'childDrawableStateChanged', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewParent.childHasTransientStateChanged(const AArg0: JView; const AArg1: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'childHasTransientStateChanged', '(Landroid/view/View;Z)V', [AArg0, AArg1]);
end;

procedure TJViewParent.clearChildFocus(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'clearChildFocus', '(Landroid/view/View;)V', [AArg0]);
end;

function TJViewParent.focusSearch(const AArg0: JView; const AArg1: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('focusSearch', '(Landroid/view/View;I)Landroid/view/View;', [AArg0, AArg1]);
end;

procedure TJViewParent.focusableViewAvailable(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'focusableViewAvailable', '(Landroid/view/View;)V', [AArg0]);
end;

function TJViewParent.getChildVisibleRect(const AArg0: JView; const AArg1: JRect; const AArg2: JPoint): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getChildVisibleRect', '(Landroid/view/View;Landroid/graphics/Rect;Landroid/graphics/Point;)Z', [AArg0, AArg1, AArg2]);
end;

function TJViewParent.getLayoutDirection: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getLayoutDirection', '()I', []);
end;

function TJViewParent.getParent: JViewParent;
begin
  Result := CallObjectMethod<TJViewParent, JViewParent>('getParent', '()Landroid/view/ViewParent;', []);
end;

function TJViewParent.getParentForAccessibility: JViewParent;
begin
  Result := CallObjectMethod<TJViewParent, JViewParent>('getParentForAccessibility', '()Landroid/view/ViewParent;', []);
end;

function TJViewParent.getTextAlignment: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTextAlignment', '()I', []);
end;

function TJViewParent.getTextDirection: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTextDirection', '()I', []);
end;

procedure TJViewParent.invalidateChild(const AArg0: JView; const AArg1: JRect);
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateChild', '(Landroid/view/View;Landroid/graphics/Rect;)V', [AArg0, AArg1]);
end;

function TJViewParent.invalidateChildInParent(const AArg0: IJavaArray<Integer>; const AArg1: JRect): JViewParent;
begin
  Result := CallObjectMethod<TJViewParent, JViewParent>('invalidateChildInParent', '([ILandroid/graphics/Rect;)Landroid/view/ViewParent;', [AArg0, AArg1]);
end;

function TJViewParent.isLayoutDirectionResolved: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLayoutDirectionResolved', '()Z', []);
end;

function TJViewParent.isLayoutRequested: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isLayoutRequested', '()Z', []);
end;

function TJViewParent.isTextAlignmentResolved: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isTextAlignmentResolved', '()Z', []);
end;

function TJViewParent.isTextDirectionResolved: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isTextDirectionResolved', '()Z', []);
end;

function TJViewParent.keyboardNavigationClusterSearch(const AArg0: JView; const AArg1: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('keyboardNavigationClusterSearch', '(Landroid/view/View;I)Landroid/view/View;', [AArg0, AArg1]);
end;

procedure TJViewParent.notifySubtreeAccessibilityStateChanged(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'notifySubtreeAccessibilityStateChanged', '(Landroid/view/View;Landroid/view/View;I)V', [AArg0, AArg1, AArg2]);
end;

function TJViewParent.onNestedFling(const AArg0: JView; const AArg1: Single; const AArg2: Single; const AArg3: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onNestedFling', '(Landroid/view/View;FFZ)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJViewParent.onNestedPreFling(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onNestedPreFling', '(Landroid/view/View;FF)Z', [AArg0, AArg1, AArg2]);
end;

function TJViewParent.onNestedPrePerformAccessibilityAction(const AArg0: JView; const AArg1: Integer; const AArg2: JBundle): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onNestedPrePerformAccessibilityAction', '(Landroid/view/View;ILandroid/os/Bundle;)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJViewParent.onNestedPreScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: IJavaArray<Integer>);
begin
  JavaType.CallVoidMethod(ObjectID, 'onNestedPreScroll', '(Landroid/view/View;II[I)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJViewParent.onNestedScroll(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onNestedScroll', '(Landroid/view/View;IIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJViewParent.onNestedScrollAccepted(const AArg0: JView; const AArg1: JView; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onNestedScrollAccepted', '(Landroid/view/View;Landroid/view/View;I)V', [AArg0, AArg1, AArg2]);
end;

function TJViewParent.onStartNestedScroll(const AArg0: JView; const AArg1: JView; const AArg2: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onStartNestedScroll', '(Landroid/view/View;Landroid/view/View;I)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJViewParent.onStopNestedScroll(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'onStopNestedScroll', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewParent.recomputeViewAttributes(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'recomputeViewAttributes', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJViewParent.requestChildFocus(const AArg0: JView; const AArg1: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'requestChildFocus', '(Landroid/view/View;Landroid/view/View;)V', [AArg0, AArg1]);
end;

function TJViewParent.requestChildRectangleOnScreen(const AArg0: JView; const AArg1: JRect; const AArg2: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestChildRectangleOnScreen', '(Landroid/view/View;Landroid/graphics/Rect;Z)Z', [AArg0, AArg1, AArg2]);
end;

procedure TJViewParent.requestDisallowInterceptTouchEvent(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'requestDisallowInterceptTouchEvent', '(Z)V', [AArg0]);
end;

procedure TJViewParent.requestFitSystemWindows;
begin
  JavaType.CallVoidMethod(ObjectID, 'requestFitSystemWindows', '()V', []);
end;

procedure TJViewParent.requestLayout;
begin
  JavaType.CallVoidMethod(ObjectID, 'requestLayout', '()V', []);
end;

procedure TJViewParent.requestTransparentRegion(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'requestTransparentRegion', '(Landroid/view/View;)V', [AArg0]);
end;

function TJViewParent.showContextMenuForChild(const AArg0: JView; const AArg1: Single; const AArg2: Single): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'showContextMenuForChild', '(Landroid/view/View;FF)Z', [AArg0, AArg1, AArg2]);
end;

function TJViewParent.showContextMenuForChild(const AArg0: JView): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'showContextMenuForChild', '(Landroid/view/View;)Z', [AArg0]);
end;

{ TJViewTreeObserver }

class procedure TJViewTreeObserver.LoadConstructors;
begin
end;

class procedure TJViewTreeObserver.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addOnGlobalFocusChangeListener', '(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V');
  AddMethod('addOnScrollChangedListener', '(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V');
  AddMethod('dispatchOnDraw', '()V');
  AddMethod('dispatchOnGlobalLayout', '()V');
  AddMethod('dispatchOnPreDraw', '()Z');
  AddMethod('isAlive', '()Z');
  AddMethod('removeOnGlobalFocusChangeListener', '(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V');
  AddMethod('removeOnScrollChangedListener', '(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V');
end;

class function TJViewTreeObserver.Wrap(const AObjectID: JNIObject): JViewTreeObserver;
begin
  Result := Wrap<TJViewTreeObserver, JViewTreeObserver>(AObjectId);
end;

class function TJViewTreeObserver.Wrap(const AObject: IJNIObject): JViewTreeObserver;
begin
  Result := Wrap<TJViewTreeObserver, JViewTreeObserver>(AObject);
end;

procedure TJViewTreeObserver.addOnGlobalFocusChangeListener(const AArg0: JViewTreeObserver_OnGlobalFocusChangeListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'addOnGlobalFocusChangeListener', '(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V', [AArg0]);
end;

procedure TJViewTreeObserver.addOnScrollChangedListener(const AArg0: JViewTreeObserver_OnScrollChangedListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'addOnScrollChangedListener', '(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V', [AArg0]);
end;

procedure TJViewTreeObserver.dispatchOnDraw;
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchOnDraw', '()V', []);
end;

procedure TJViewTreeObserver.dispatchOnGlobalLayout;
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchOnGlobalLayout', '()V', []);
end;

function TJViewTreeObserver.dispatchOnPreDraw: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'dispatchOnPreDraw', '()Z', []);
end;

function TJViewTreeObserver.isAlive: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAlive', '()Z', []);
end;

procedure TJViewTreeObserver.removeOnGlobalFocusChangeListener(const AArg0: JViewTreeObserver_OnGlobalFocusChangeListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeOnGlobalFocusChangeListener', '(Landroid/view/ViewTreeObserver$OnGlobalFocusChangeListener;)V', [AArg0]);
end;

procedure TJViewTreeObserver.removeOnScrollChangedListener(const AArg0: JViewTreeObserver_OnScrollChangedListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeOnScrollChangedListener', '(Landroid/view/ViewTreeObserver$OnScrollChangedListener;)V', [AArg0]);
end;

{ TJViewTreeObserver_OnGlobalFocusChangeListener }

class procedure TJViewTreeObserver_OnGlobalFocusChangeListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onGlobalFocusChanged', '(Landroid/view/View;Landroid/view/View;)V');
end;

class function TJViewTreeObserver_OnGlobalFocusChangeListener.Wrap(const AObjectID: JNIObject): JViewTreeObserver_OnGlobalFocusChangeListener;
begin
  Result := Wrap<TJViewTreeObserver_OnGlobalFocusChangeListener, JViewTreeObserver_OnGlobalFocusChangeListener>(AObjectId);
end;

class function TJViewTreeObserver_OnGlobalFocusChangeListener.Wrap(const AObject: IJNIObject): JViewTreeObserver_OnGlobalFocusChangeListener;
begin
  Result := Wrap<TJViewTreeObserver_OnGlobalFocusChangeListener, JViewTreeObserver_OnGlobalFocusChangeListener>(AObject);
end;

procedure TJViewTreeObserver_OnGlobalFocusChangeListener.onGlobalFocusChanged(const AArg0: JView; const AArg1: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'onGlobalFocusChanged', '(Landroid/view/View;Landroid/view/View;)V', [AArg0, AArg1]);
end;

{ TJViewTreeObserver_OnScrollChangedListener }

class procedure TJViewTreeObserver_OnScrollChangedListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onScrollChanged', '()V');
end;

class function TJViewTreeObserver_OnScrollChangedListener.Wrap(const AObjectID: JNIObject): JViewTreeObserver_OnScrollChangedListener;
begin
  Result := Wrap<TJViewTreeObserver_OnScrollChangedListener, JViewTreeObserver_OnScrollChangedListener>(AObjectId);
end;

class function TJViewTreeObserver_OnScrollChangedListener.Wrap(const AObject: IJNIObject): JViewTreeObserver_OnScrollChangedListener;
begin
  Result := Wrap<TJViewTreeObserver_OnScrollChangedListener, JViewTreeObserver_OnScrollChangedListener>(AObject);
end;

procedure TJViewTreeObserver_OnScrollChangedListener.onScrollChanged;
begin
  JavaType.CallVoidMethod(ObjectID, 'onScrollChanged', '()V', []);
end;

{ TJWindow }

class procedure TJWindow.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Landroid/content/Context;)V');
end;

class procedure TJWindow.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addContentView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V');
  AddMethod('addFlags', '(I)V');
  AddMethod('clearFlags', '(I)V');
  AddMethod('closeAllPanels', '()V');
  AddMethod('closePanel', '(I)V');
  AddMethod('findViewById', '(I)Landroid/view/View;');
  AddMethod('getAllowEnterTransitionOverlap', '()Z');
  AddMethod('getAllowReturnTransitionOverlap', '()Z');
  AddMethod('getAttributes', '()Landroid/view/WindowManager$LayoutParams;');
  AddMethod('getColorMode', '()I');
  AddMethod('getContainer', '()Landroid/view/Window;');
  AddMethod('getContext', '()Landroid/content/Context;');
  AddMethod('getCurrentFocus', '()Landroid/view/View;');
  AddMethod('getDecorView', '()Landroid/view/View;');
  AddStaticMethod('getDefaultFeatures', '(Landroid/content/Context;)I');
  AddMethod('getLayoutInflater', '()Landroid/view/LayoutInflater;');
  AddMethod('getNavigationBarColor', '()I');
  AddMethod('getNavigationBarDividerColor', '()I');
  AddMethod('getSharedElementsUseOverlay', '()Z');
  AddMethod('getStatusBarColor', '()I');
  AddMethod('getTransitionBackgroundFadeDuration', '()J');
  AddMethod('getVolumeControlStream', '()I');
  AddMethod('getWindowManager', '()Landroid/view/WindowManager;');
  AddMethod('hasChildren', '()Z');
  AddMethod('hasFeature', '(I)Z');
  AddMethod('injectInputEvent', '(Landroid/view/InputEvent;)V');
  AddMethod('invalidatePanelMenu', '(I)V');
  AddMethod('isActive', '()Z');
  AddMethod('isFloating', '()Z');
  AddMethod('isShortcutKey', '(ILandroid/view/KeyEvent;)Z');
  AddMethod('isWideColorGamut', '()Z');
  AddMethod('makeActive', '()V');
  AddMethod('onConfigurationChanged', '(Landroid/content/res/Configuration;)V');
  AddMethod('openPanel', '(ILandroid/view/KeyEvent;)V');
  AddMethod('peekDecorView', '()Landroid/view/View;');
  AddMethod('performContextMenuIdentifierAction', '(II)Z');
  AddMethod('performPanelIdentifierAction', '(III)Z');
  AddMethod('performPanelShortcut', '(IILandroid/view/KeyEvent;I)Z');
  AddMethod('requestFeature', '(I)Z');
  AddMethod('requireViewById', '(I)Landroid/view/View;');
  AddMethod('restoreHierarchyState', '(Landroid/os/Bundle;)V');
  AddMethod('saveHierarchyState', '()Landroid/os/Bundle;');
  AddMethod('setAllowEnterTransitionOverlap', '(Z)V');
  AddMethod('setAllowReturnTransitionOverlap', '(Z)V');
  AddMethod('setAttributes', '(Landroid/view/WindowManager$LayoutParams;)V');
  AddMethod('setBackgroundDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('setBackgroundDrawableResource', '(I)V');
  AddMethod('setChildDrawable', '(ILandroid/graphics/drawable/Drawable;)V');
  AddMethod('setChildInt', '(II)V');
  AddMethod('setClipToOutline', '(Z)V');
  AddMethod('setColorMode', '(I)V');
  AddMethod('setContainer', '(Landroid/view/Window;)V');
  AddMethod('setContentView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V');
  AddMethod('setContentView', '(Landroid/view/View;)V');
  AddMethod('setContentView', '(I)V');
  AddMethod('setDecorCaptionShade', '(I)V');
  AddMethod('setDimAmount', '(F)V');
  AddMethod('setElevation', '(F)V');
  AddMethod('setFeatureDrawable', '(ILandroid/graphics/drawable/Drawable;)V');
  AddMethod('setFeatureDrawableAlpha', '(II)V');
  AddMethod('setFeatureDrawableResource', '(II)V');
  AddMethod('setFeatureDrawableUri', '(ILandroid/net/Uri;)V');
  AddMethod('setFeatureInt', '(II)V');
  AddMethod('setFlags', '(II)V');
  AddMethod('setFormat', '(I)V');
  AddMethod('setGravity', '(I)V');
  AddMethod('setIcon', '(I)V');
  AddMethod('setLayout', '(II)V');
  AddMethod('setLocalFocus', '(ZZ)V');
  AddMethod('setLogo', '(I)V');
  AddMethod('setNavigationBarColor', '(I)V');
  AddMethod('setNavigationBarDividerColor', '(I)V');
  AddMethod('setResizingCaptionDrawable', '(Landroid/graphics/drawable/Drawable;)V');
  AddMethod('setSharedElementsUseOverlay', '(Z)V');
  AddMethod('setSoftInputMode', '(I)V');
  AddMethod('setStatusBarColor', '(I)V');
  AddMethod('setSustainedPerformanceMode', '(Z)V');
  AddMethod('setTitle', '(Ljava/lang/CharSequence;)V');
  AddMethod('setTitleColor', '(I)V');
  AddMethod('setTransitionBackgroundFadeDuration', '(J)V');
  AddMethod('setType', '(I)V');
  AddMethod('setUiOptions', '(I)V');
  AddMethod('setUiOptions', '(II)V');
  AddMethod('setVolumeControlStream', '(I)V');
  AddMethod('setWindowAnimations', '(I)V');
  AddMethod('setWindowManager', '(Landroid/view/WindowManager;Landroid/os/IBinder;Ljava/lang/String;)V');
  AddMethod('setWindowManager', '(Landroid/view/WindowManager;Landroid/os/IBinder;Ljava/lang/String;Z)V');
  AddMethod('superDispatchGenericMotionEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('superDispatchKeyEvent', '(Landroid/view/KeyEvent;)Z');
  AddMethod('superDispatchKeyShortcutEvent', '(Landroid/view/KeyEvent;)Z');
  AddMethod('superDispatchTouchEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('superDispatchTrackballEvent', '(Landroid/view/MotionEvent;)Z');
  AddMethod('takeKeyEvents', '(Z)V');
  AddMethod('takeSurface', '(Landroid/view/SurfaceHolder$Callback2;)V');
  AddMethod('togglePanel', '(ILandroid/view/KeyEvent;)V');
end;

class procedure TJWindow.LoadFields;
begin
  inherited;
  AddStaticField('DECOR_CAPTION_SHADE_AUTO', 'I');
  AddStaticField('DECOR_CAPTION_SHADE_DARK', 'I');
  AddStaticField('DECOR_CAPTION_SHADE_LIGHT', 'I');
  AddStaticField('FEATURE_ACTION_BAR', 'I');
  AddStaticField('FEATURE_ACTION_BAR_OVERLAY', 'I');
  AddStaticField('FEATURE_ACTION_MODE_OVERLAY', 'I');
  AddStaticField('FEATURE_ACTIVITY_TRANSITIONS', 'I');
  AddStaticField('FEATURE_CONTENT_TRANSITIONS', 'I');
  AddStaticField('FEATURE_CONTEXT_MENU', 'I');
  AddStaticField('FEATURE_CUSTOM_TITLE', 'I');
  AddStaticField('FEATURE_INDETERMINATE_PROGRESS', 'I');
  AddStaticField('FEATURE_LEFT_ICON', 'I');
  AddStaticField('FEATURE_NO_TITLE', 'I');
  AddStaticField('FEATURE_OPTIONS_PANEL', 'I');
  AddStaticField('FEATURE_PROGRESS', 'I');
  AddStaticField('FEATURE_RIGHT_ICON', 'I');
  AddStaticField('FEATURE_SWIPE_TO_DISMISS', 'I');
  AddStaticField('ID_ANDROID_CONTENT', 'I');
  AddStaticField('NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME', 'Ljava/lang/String;');
  AddStaticField('PROGRESS_END', 'I');
  AddStaticField('PROGRESS_INDETERMINATE_OFF', 'I');
  AddStaticField('PROGRESS_INDETERMINATE_ON', 'I');
  AddStaticField('PROGRESS_SECONDARY_END', 'I');
  AddStaticField('PROGRESS_SECONDARY_START', 'I');
  AddStaticField('PROGRESS_START', 'I');
  AddStaticField('PROGRESS_VISIBILITY_OFF', 'I');
  AddStaticField('PROGRESS_VISIBILITY_ON', 'I');
  AddStaticField('STATUS_BAR_BACKGROUND_TRANSITION_NAME', 'Ljava/lang/String;');
end;

class function TJWindow.Wrap(const AObjectID: JNIObject): JWindow;
begin
  Result := Wrap<TJWindow, JWindow>(AObjectId);
end;

class function TJWindow.Wrap(const AObject: IJNIObject): JWindow;
begin
  Result := Wrap<TJWindow, JWindow>(AObject);
end;

class function TJWindow.Create(const AArg0: JContext): JWindow;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/content/Context;)V', [AArg0]);
  Result := O;
end;

class function TJWindow.DECOR_CAPTION_SHADE_AUTO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DECOR_CAPTION_SHADE_AUTO');
end;

class function TJWindow.DECOR_CAPTION_SHADE_DARK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DECOR_CAPTION_SHADE_DARK');
end;

class function TJWindow.DECOR_CAPTION_SHADE_LIGHT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DECOR_CAPTION_SHADE_LIGHT');
end;

class function TJWindow.FEATURE_ACTION_BAR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_ACTION_BAR');
end;

class function TJWindow.FEATURE_ACTION_BAR_OVERLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_ACTION_BAR_OVERLAY');
end;

class function TJWindow.FEATURE_ACTION_MODE_OVERLAY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_ACTION_MODE_OVERLAY');
end;

class function TJWindow.FEATURE_ACTIVITY_TRANSITIONS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_ACTIVITY_TRANSITIONS');
end;

class function TJWindow.FEATURE_CONTENT_TRANSITIONS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_CONTENT_TRANSITIONS');
end;

class function TJWindow.FEATURE_CONTEXT_MENU: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_CONTEXT_MENU');
end;

class function TJWindow.FEATURE_CUSTOM_TITLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_CUSTOM_TITLE');
end;

class function TJWindow.FEATURE_INDETERMINATE_PROGRESS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_INDETERMINATE_PROGRESS');
end;

class function TJWindow.FEATURE_LEFT_ICON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_LEFT_ICON');
end;

class function TJWindow.FEATURE_NO_TITLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_NO_TITLE');
end;

class function TJWindow.FEATURE_OPTIONS_PANEL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_OPTIONS_PANEL');
end;

class function TJWindow.FEATURE_PROGRESS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_PROGRESS');
end;

class function TJWindow.FEATURE_RIGHT_ICON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_RIGHT_ICON');
end;

class function TJWindow.FEATURE_SWIPE_TO_DISMISS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FEATURE_SWIPE_TO_DISMISS');
end;

class function TJWindow.ID_ANDROID_CONTENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ID_ANDROID_CONTENT');
end;

class function TJWindow.NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('NAVIGATION_BAR_BACKGROUND_TRANSITION_NAME');
end;

class function TJWindow.PROGRESS_END: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PROGRESS_END');
end;

class function TJWindow.PROGRESS_INDETERMINATE_OFF: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PROGRESS_INDETERMINATE_OFF');
end;

class function TJWindow.PROGRESS_INDETERMINATE_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PROGRESS_INDETERMINATE_ON');
end;

class function TJWindow.PROGRESS_SECONDARY_END: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PROGRESS_SECONDARY_END');
end;

class function TJWindow.PROGRESS_SECONDARY_START: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PROGRESS_SECONDARY_START');
end;

class function TJWindow.PROGRESS_START: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PROGRESS_START');
end;

class function TJWindow.PROGRESS_VISIBILITY_OFF: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PROGRESS_VISIBILITY_OFF');
end;

class function TJWindow.PROGRESS_VISIBILITY_ON: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PROGRESS_VISIBILITY_ON');
end;

class function TJWindow.STATUS_BAR_BACKGROUND_TRANSITION_NAME: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('STATUS_BAR_BACKGROUND_TRANSITION_NAME');
end;

procedure TJWindow.addContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'addContentView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V', [AArg0, AArg1]);
end;

procedure TJWindow.addFlags(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'addFlags', '(I)V', [AArg0]);
end;

procedure TJWindow.clearFlags(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'clearFlags', '(I)V', [AArg0]);
end;

procedure TJWindow.closeAllPanels;
begin
  JavaType.CallVoidMethod(ObjectID, 'closeAllPanels', '()V', []);
end;

procedure TJWindow.closePanel(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'closePanel', '(I)V', [AArg0]);
end;

function TJWindow.findViewById(const AArg0: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('findViewById', '(I)Landroid/view/View;', [AArg0]);
end;

function TJWindow.getAllowEnterTransitionOverlap: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getAllowEnterTransitionOverlap', '()Z', []);
end;

function TJWindow.getAllowReturnTransitionOverlap: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getAllowReturnTransitionOverlap', '()Z', []);
end;

function TJWindow.getAttributes: JWindowManager_LayoutParams;
begin
  Result := CallObjectMethod<TJWindowManager_LayoutParams, JWindowManager_LayoutParams>('getAttributes', '()Landroid/view/WindowManager$LayoutParams;', []);
end;

function TJWindow.getColorMode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getColorMode', '()I', []);
end;

function TJWindow.getContainer: JWindow;
begin
  Result := CallObjectMethod<TJWindow, JWindow>('getContainer', '()Landroid/view/Window;', []);
end;

function TJWindow.getContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('getContext', '()Landroid/content/Context;', []);
end;

function TJWindow.getCurrentFocus: JView;
begin
  Result := CallObjectMethod<TJView, JView>('getCurrentFocus', '()Landroid/view/View;', []);
end;

function TJWindow.getDecorView: JView;
begin
  Result := CallObjectMethod<TJView, JView>('getDecorView', '()Landroid/view/View;', []);
end;

class function TJWindow.getDefaultFeatures(const AArg0: JContext): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getDefaultFeatures', '(Landroid/content/Context;)I', [AArg0]);
end;

function TJWindow.getLayoutInflater: JLayoutInflater;
begin
  Result := CallObjectMethod<TJLayoutInflater, JLayoutInflater>('getLayoutInflater', '()Landroid/view/LayoutInflater;', []);
end;

function TJWindow.getNavigationBarColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNavigationBarColor', '()I', []);
end;

function TJWindow.getNavigationBarDividerColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getNavigationBarDividerColor', '()I', []);
end;

function TJWindow.getSharedElementsUseOverlay: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getSharedElementsUseOverlay', '()Z', []);
end;

function TJWindow.getStatusBarColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getStatusBarColor', '()I', []);
end;

function TJWindow.getTransitionBackgroundFadeDuration: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getTransitionBackgroundFadeDuration', '()J', []);
end;

function TJWindow.getVolumeControlStream: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getVolumeControlStream', '()I', []);
end;

function TJWindow.getWindowManager: JWindowManager;
begin
  Result := CallObjectMethod<TJWindowManager, JWindowManager>('getWindowManager', '()Landroid/view/WindowManager;', []);
end;

function TJWindow.hasChildren: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasChildren', '()Z', []);
end;

function TJWindow.hasFeature(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasFeature', '(I)Z', [AArg0]);
end;

procedure TJWindow.injectInputEvent(const AArg0: JInputEvent);
begin
  JavaType.CallVoidMethod(ObjectID, 'injectInputEvent', '(Landroid/view/InputEvent;)V', [AArg0]);
end;

procedure TJWindow.invalidatePanelMenu(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidatePanelMenu', '(I)V', [AArg0]);
end;

function TJWindow.isActive: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isActive', '()Z', []);
end;

function TJWindow.isFloating: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFloating', '()Z', []);
end;

function TJWindow.isShortcutKey(const AArg0: Integer; const AArg1: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isShortcutKey', '(ILandroid/view/KeyEvent;)Z', [AArg0, AArg1]);
end;

function TJWindow.isWideColorGamut: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isWideColorGamut', '()Z', []);
end;

procedure TJWindow.makeActive;
begin
  JavaType.CallVoidMethod(ObjectID, 'makeActive', '()V', []);
end;

procedure TJWindow.onConfigurationChanged(const AArg0: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'onConfigurationChanged', '(Landroid/content/res/Configuration;)V', [AArg0]);
end;

procedure TJWindow.openPanel(const AArg0: Integer; const AArg1: JKeyEvent);
begin
  JavaType.CallVoidMethod(ObjectID, 'openPanel', '(ILandroid/view/KeyEvent;)V', [AArg0, AArg1]);
end;

function TJWindow.peekDecorView: JView;
begin
  Result := CallObjectMethod<TJView, JView>('peekDecorView', '()Landroid/view/View;', []);
end;

function TJWindow.performContextMenuIdentifierAction(const AArg0: Integer; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performContextMenuIdentifierAction', '(II)Z', [AArg0, AArg1]);
end;

function TJWindow.performPanelIdentifierAction(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performPanelIdentifierAction', '(III)Z', [AArg0, AArg1, AArg2]);
end;

function TJWindow.performPanelShortcut(const AArg0: Integer; const AArg1: Integer; const AArg2: JKeyEvent; const AArg3: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'performPanelShortcut', '(IILandroid/view/KeyEvent;I)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJWindow.requestFeature(const AArg0: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestFeature', '(I)Z', [AArg0]);
end;

function TJWindow.requireViewById(const AArg0: Integer): JView;
begin
  Result := CallObjectMethod<TJView, JView>('requireViewById', '(I)Landroid/view/View;', [AArg0]);
end;

procedure TJWindow.restoreHierarchyState(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'restoreHierarchyState', '(Landroid/os/Bundle;)V', [AArg0]);
end;

function TJWindow.saveHierarchyState: JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('saveHierarchyState', '()Landroid/os/Bundle;', []);
end;

procedure TJWindow.setAllowEnterTransitionOverlap(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAllowEnterTransitionOverlap', '(Z)V', [AArg0]);
end;

procedure TJWindow.setAllowReturnTransitionOverlap(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAllowReturnTransitionOverlap', '(Z)V', [AArg0]);
end;

procedure TJWindow.setAttributes(const AArg0: JWindowManager_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAttributes', '(Landroid/view/WindowManager$LayoutParams;)V', [AArg0]);
end;

procedure TJWindow.setBackgroundDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBackgroundDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJWindow.setBackgroundDrawableResource(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setBackgroundDrawableResource', '(I)V', [AArg0]);
end;

procedure TJWindow.setChildDrawable(const AArg0: Integer; const AArg1: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setChildDrawable', '(ILandroid/graphics/drawable/Drawable;)V', [AArg0, AArg1]);
end;

procedure TJWindow.setChildInt(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setChildInt', '(II)V', [AArg0, AArg1]);
end;

procedure TJWindow.setClipToOutline(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setClipToOutline', '(Z)V', [AArg0]);
end;

procedure TJWindow.setColorMode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setColorMode', '(I)V', [AArg0]);
end;

procedure TJWindow.setContainer(const AArg0: JWindow);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContainer', '(Landroid/view/Window;)V', [AArg0]);
end;

procedure TJWindow.setContentView(const AArg0: JView; const AArg1: JViewGroup_LayoutParams);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContentView', '(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V', [AArg0, AArg1]);
end;

procedure TJWindow.setContentView(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContentView', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJWindow.setContentView(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setContentView', '(I)V', [AArg0]);
end;

procedure TJWindow.setDecorCaptionShade(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDecorCaptionShade', '(I)V', [AArg0]);
end;

procedure TJWindow.setDimAmount(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setDimAmount', '(F)V', [AArg0]);
end;

procedure TJWindow.setElevation(const AArg0: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setElevation', '(F)V', [AArg0]);
end;

procedure TJWindow.setFeatureDrawable(const AArg0: Integer; const AArg1: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFeatureDrawable', '(ILandroid/graphics/drawable/Drawable;)V', [AArg0, AArg1]);
end;

procedure TJWindow.setFeatureDrawableAlpha(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFeatureDrawableAlpha', '(II)V', [AArg0, AArg1]);
end;

procedure TJWindow.setFeatureDrawableResource(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFeatureDrawableResource', '(II)V', [AArg0, AArg1]);
end;

procedure TJWindow.setFeatureDrawableUri(const AArg0: Integer; const AArg1: JUri);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFeatureDrawableUri', '(ILandroid/net/Uri;)V', [AArg0, AArg1]);
end;

procedure TJWindow.setFeatureInt(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFeatureInt', '(II)V', [AArg0, AArg1]);
end;

procedure TJWindow.setFlags(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFlags', '(II)V', [AArg0, AArg1]);
end;

procedure TJWindow.setFormat(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setFormat', '(I)V', [AArg0]);
end;

procedure TJWindow.setGravity(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setGravity', '(I)V', [AArg0]);
end;

procedure TJWindow.setIcon(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setIcon', '(I)V', [AArg0]);
end;

procedure TJWindow.setLayout(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLayout', '(II)V', [AArg0, AArg1]);
end;

procedure TJWindow.setLocalFocus(const AArg0: Boolean; const AArg1: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLocalFocus', '(ZZ)V', [AArg0, AArg1]);
end;

procedure TJWindow.setLogo(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setLogo', '(I)V', [AArg0]);
end;

procedure TJWindow.setNavigationBarColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNavigationBarColor', '(I)V', [AArg0]);
end;

procedure TJWindow.setNavigationBarDividerColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setNavigationBarDividerColor', '(I)V', [AArg0]);
end;

procedure TJWindow.setResizingCaptionDrawable(const AArg0: JDrawable);
begin
  JavaType.CallVoidMethod(ObjectID, 'setResizingCaptionDrawable', '(Landroid/graphics/drawable/Drawable;)V', [AArg0]);
end;

procedure TJWindow.setSharedElementsUseOverlay(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSharedElementsUseOverlay', '(Z)V', [AArg0]);
end;

procedure TJWindow.setSoftInputMode(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSoftInputMode', '(I)V', [AArg0]);
end;

procedure TJWindow.setStatusBarColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setStatusBarColor', '(I)V', [AArg0]);
end;

procedure TJWindow.setSustainedPerformanceMode(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSustainedPerformanceMode', '(Z)V', [AArg0]);
end;

procedure TJWindow.setTitle(const AArg0: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTitle', '(Ljava/lang/CharSequence;)V', [AArg0]);
end;

procedure TJWindow.setTitleColor(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTitleColor', '(I)V', [AArg0]);
end;

procedure TJWindow.setTransitionBackgroundFadeDuration(const AArg0: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTransitionBackgroundFadeDuration', '(J)V', [AArg0]);
end;

procedure TJWindow.setType(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setType', '(I)V', [AArg0]);
end;

procedure TJWindow.setUiOptions(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setUiOptions', '(I)V', [AArg0]);
end;

procedure TJWindow.setUiOptions(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setUiOptions', '(II)V', [AArg0, AArg1]);
end;

procedure TJWindow.setVolumeControlStream(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setVolumeControlStream', '(I)V', [AArg0]);
end;

procedure TJWindow.setWindowAnimations(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWindowAnimations', '(I)V', [AArg0]);
end;

procedure TJWindow.setWindowManager(const AArg0: JWindowManager; const AArg1: JIBinder; const AArg2: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWindowManager', '(Landroid/view/WindowManager;Landroid/os/IBinder;Ljava/lang/String;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJWindow.setWindowManager(const AArg0: JWindowManager; const AArg1: JIBinder; const AArg2: JString; const AArg3: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWindowManager', '(Landroid/view/WindowManager;Landroid/os/IBinder;Ljava/lang/String;Z)V', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJWindow.superDispatchGenericMotionEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'superDispatchGenericMotionEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJWindow.superDispatchKeyEvent(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'superDispatchKeyEvent', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

function TJWindow.superDispatchKeyShortcutEvent(const AArg0: JKeyEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'superDispatchKeyShortcutEvent', '(Landroid/view/KeyEvent;)Z', [AArg0]);
end;

function TJWindow.superDispatchTouchEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'superDispatchTouchEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

function TJWindow.superDispatchTrackballEvent(const AArg0: JMotionEvent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'superDispatchTrackballEvent', '(Landroid/view/MotionEvent;)Z', [AArg0]);
end;

procedure TJWindow.takeKeyEvents(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'takeKeyEvents', '(Z)V', [AArg0]);
end;

procedure TJWindow.takeSurface(const AArg0: JSurfaceHolder_Callback2);
begin
  JavaType.CallVoidMethod(ObjectID, 'takeSurface', '(Landroid/view/SurfaceHolder$Callback2;)V', [AArg0]);
end;

procedure TJWindow.togglePanel(const AArg0: Integer; const AArg1: JKeyEvent);
begin
  JavaType.CallVoidMethod(ObjectID, 'togglePanel', '(ILandroid/view/KeyEvent;)V', [AArg0, AArg1]);
end;

{ TJEditorInfo }

class procedure TJEditorInfo.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJEditorInfo.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('makeCompatible', '(I)V');
end;

class procedure TJEditorInfo.LoadFields;
begin
  inherited;
  AddStaticField('IME_ACTION_DONE', 'I');
  AddStaticField('IME_ACTION_GO', 'I');
  AddStaticField('IME_ACTION_NEXT', 'I');
  AddStaticField('IME_ACTION_NONE', 'I');
  AddStaticField('IME_ACTION_PREVIOUS', 'I');
  AddStaticField('IME_ACTION_SEARCH', 'I');
  AddStaticField('IME_ACTION_SEND', 'I');
  AddStaticField('IME_ACTION_UNSPECIFIED', 'I');
  AddStaticField('IME_FLAG_FORCE_ASCII', 'I');
  AddStaticField('IME_FLAG_NAVIGATE_NEXT', 'I');
  AddStaticField('IME_FLAG_NAVIGATE_PREVIOUS', 'I');
  AddStaticField('IME_FLAG_NO_ACCESSORY_ACTION', 'I');
  AddStaticField('IME_FLAG_NO_ENTER_ACTION', 'I');
  AddStaticField('IME_FLAG_NO_EXTRACT_UI', 'I');
  AddStaticField('IME_FLAG_NO_FULLSCREEN', 'I');
  AddStaticField('IME_FLAG_NO_PERSONALIZED_LEARNING', 'I');
  AddStaticField('IME_MASK_ACTION', 'I');
  AddStaticField('IME_NULL', 'I');
  AddField('actionId', 'I');
  AddField('actionLabel', 'Ljava/lang/CharSequence;');
  AddField('contentMimeTypes', '[Ljava/lang/String;');
  AddField('extras', 'Landroid/os/Bundle;');
  AddField('fieldId', 'I');
  AddField('fieldName', 'Ljava/lang/String;');
  AddField('hintText', 'Ljava/lang/CharSequence;');
  AddField('imeOptions', 'I');
  AddField('initialCapsMode', 'I');
  AddField('initialSelEnd', 'I');
  AddField('initialSelStart', 'I');
  AddField('inputType', 'I');
  AddField('label', 'Ljava/lang/CharSequence;');
  AddField('packageName', 'Ljava/lang/String;');
  AddField('privateImeOptions', 'Ljava/lang/String;');
end;

class function TJEditorInfo.Wrap(const AObjectID: JNIObject): JEditorInfo;
begin
  Result := Wrap<TJEditorInfo, JEditorInfo>(AObjectId);
end;

class function TJEditorInfo.Wrap(const AObject: IJNIObject): JEditorInfo;
begin
  Result := Wrap<TJEditorInfo, JEditorInfo>(AObject);
end;

class function TJEditorInfo.Create: JEditorInfo;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJEditorInfo.IME_ACTION_DONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_ACTION_DONE');
end;

class function TJEditorInfo.IME_ACTION_GO: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_ACTION_GO');
end;

class function TJEditorInfo.IME_ACTION_NEXT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_ACTION_NEXT');
end;

class function TJEditorInfo.IME_ACTION_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_ACTION_NONE');
end;

class function TJEditorInfo.IME_ACTION_PREVIOUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_ACTION_PREVIOUS');
end;

class function TJEditorInfo.IME_ACTION_SEARCH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_ACTION_SEARCH');
end;

class function TJEditorInfo.IME_ACTION_SEND: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_ACTION_SEND');
end;

class function TJEditorInfo.IME_ACTION_UNSPECIFIED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_ACTION_UNSPECIFIED');
end;

class function TJEditorInfo.IME_FLAG_FORCE_ASCII: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_FLAG_FORCE_ASCII');
end;

class function TJEditorInfo.IME_FLAG_NAVIGATE_NEXT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_FLAG_NAVIGATE_NEXT');
end;

class function TJEditorInfo.IME_FLAG_NAVIGATE_PREVIOUS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_FLAG_NAVIGATE_PREVIOUS');
end;

class function TJEditorInfo.IME_FLAG_NO_ACCESSORY_ACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_FLAG_NO_ACCESSORY_ACTION');
end;

class function TJEditorInfo.IME_FLAG_NO_ENTER_ACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_FLAG_NO_ENTER_ACTION');
end;

class function TJEditorInfo.IME_FLAG_NO_EXTRACT_UI: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_FLAG_NO_EXTRACT_UI');
end;

class function TJEditorInfo.IME_FLAG_NO_FULLSCREEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_FLAG_NO_FULLSCREEN');
end;

class function TJEditorInfo.IME_FLAG_NO_PERSONALIZED_LEARNING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_FLAG_NO_PERSONALIZED_LEARNING');
end;

class function TJEditorInfo.IME_MASK_ACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_MASK_ACTION');
end;

class function TJEditorInfo.IME_NULL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('IME_NULL');
end;

function TJEditorInfo._GetActionId: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'actionId');
end;

procedure TJEditorInfo._SetActionId(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'actionId', AValue);
end;

function TJEditorInfo._GetActionLabel: JCharSequence;
begin
  Result := GetObjectField<TJCharSequence, JCharSequence>('actionLabel');
end;

procedure TJEditorInfo._SetActionLabel(const AValue: JCharSequence);
begin
  JavaType.SetObjectField(ObjectId, 'actionLabel', AValue);
end;

function TJEditorInfo._GetContentMimeTypes: IJavaArray<JString>;
begin
  Result := GetArrayField<JString>('contentMimeTypes');
end;

procedure TJEditorInfo._SetContentMimeTypes(const AValue: IJavaArray<JString>);
begin
  JavaType.SetObjectField(ObjectId, 'contentMimeTypes', AValue.ObjectId);
end;

function TJEditorInfo._GetExtras: JBundle;
begin
  Result := GetObjectField<TJBundle, JBundle>('extras');
end;

procedure TJEditorInfo._SetExtras(const AValue: JBundle);
begin
  JavaType.SetObjectField(ObjectId, 'extras', AValue);
end;

function TJEditorInfo._GetFieldId: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'fieldId');
end;

procedure TJEditorInfo._SetFieldId(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'fieldId', AValue);
end;

function TJEditorInfo._GetFieldName: JString;
begin
  Result := GetObjectField<TJString, JString>('fieldName');
end;

procedure TJEditorInfo._SetFieldName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'fieldName', AValue);
end;

function TJEditorInfo._GetHintText: JCharSequence;
begin
  Result := GetObjectField<TJCharSequence, JCharSequence>('hintText');
end;

procedure TJEditorInfo._SetHintText(const AValue: JCharSequence);
begin
  JavaType.SetObjectField(ObjectId, 'hintText', AValue);
end;

function TJEditorInfo._GetImeOptions: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'imeOptions');
end;

procedure TJEditorInfo._SetImeOptions(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'imeOptions', AValue);
end;

function TJEditorInfo._GetInitialCapsMode: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'initialCapsMode');
end;

procedure TJEditorInfo._SetInitialCapsMode(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'initialCapsMode', AValue);
end;

function TJEditorInfo._GetInitialSelEnd: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'initialSelEnd');
end;

procedure TJEditorInfo._SetInitialSelEnd(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'initialSelEnd', AValue);
end;

function TJEditorInfo._GetInitialSelStart: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'initialSelStart');
end;

procedure TJEditorInfo._SetInitialSelStart(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'initialSelStart', AValue);
end;

function TJEditorInfo._GetInputType: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'inputType');
end;

procedure TJEditorInfo._SetInputType(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'inputType', AValue);
end;

function TJEditorInfo._GetLabel: JCharSequence;
begin
  Result := GetObjectField<TJCharSequence, JCharSequence>('label');
end;

procedure TJEditorInfo._SetLabel(const AValue: JCharSequence);
begin
  JavaType.SetObjectField(ObjectId, 'label', AValue);
end;

function TJEditorInfo._GetPackageName: JString;
begin
  Result := GetObjectField<TJString, JString>('packageName');
end;

procedure TJEditorInfo._SetPackageName(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'packageName', AValue);
end;

function TJEditorInfo._GetPrivateImeOptions: JString;
begin
  Result := GetObjectField<TJString, JString>('privateImeOptions');
end;

procedure TJEditorInfo._SetPrivateImeOptions(const AValue: JString);
begin
  JavaType.SetObjectField(ObjectId, 'privateImeOptions', AValue);
end;

function TJEditorInfo.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

procedure TJEditorInfo.makeCompatible(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'makeCompatible', '(I)V', [AArg0]);
end;

{ TJInputMethodManager }

class procedure TJInputMethodManager.LoadConstructors;
begin
end;

class procedure TJInputMethodManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('dispatchKeyEventFromInputMethod', '(Landroid/view/View;Landroid/view/KeyEvent;)V');
  AddMethod('getEnabledInputMethodList', '()Ljava/util/List;');
  AddMethod('getInputMethodList', '()Ljava/util/List;');
  AddMethod('getShortcutInputMethodsAndSubtypes', '()Ljava/util/Map;');
  AddMethod('hideSoftInputFromInputMethod', '(Landroid/os/IBinder;I)V');
  AddMethod('hideSoftInputFromWindow', '(Landroid/os/IBinder;I)Z');
  AddMethod('hideStatusIcon', '(Landroid/os/IBinder;)V');
  AddMethod('isAcceptingText', '()Z');
  AddMethod('isActive', '()Z');
  AddMethod('isActive', '(Landroid/view/View;)Z');
  AddMethod('isFullscreenMode', '()Z');
  AddMethod('isWatchingCursor', '(Landroid/view/View;)Z');
  AddMethod('restartInput', '(Landroid/view/View;)V');
  AddMethod('sendAppPrivateCommand', '(Landroid/view/View;Ljava/lang/String;Landroid/os/Bundle;)V');
  AddMethod('setInputMethod', '(Landroid/os/IBinder;Ljava/lang/String;)V');
  AddMethod('shouldOfferSwitchingToNextInputMethod', '(Landroid/os/IBinder;)Z');
  AddMethod('showInputMethodAndSubtypeEnabler', '(Ljava/lang/String;)V');
  AddMethod('showInputMethodPicker', '()V');
  AddMethod('showSoftInput', '(Landroid/view/View;I)Z');
  AddMethod('showSoftInputFromInputMethod', '(Landroid/os/IBinder;I)V');
  AddMethod('showStatusIcon', '(Landroid/os/IBinder;Ljava/lang/String;I)V');
  AddMethod('switchToLastInputMethod', '(Landroid/os/IBinder;)Z');
  AddMethod('switchToNextInputMethod', '(Landroid/os/IBinder;Z)Z');
  AddMethod('toggleSoftInput', '(II)V');
  AddMethod('toggleSoftInputFromWindow', '(Landroid/os/IBinder;II)V');
  AddMethod('updateCursor', '(Landroid/view/View;IIII)V');
  AddMethod('updateSelection', '(Landroid/view/View;IIII)V');
  AddMethod('viewClicked', '(Landroid/view/View;)V');
end;

class procedure TJInputMethodManager.LoadFields;
begin
  inherited;
  AddStaticField('HIDE_IMPLICIT_ONLY', 'I');
  AddStaticField('HIDE_NOT_ALWAYS', 'I');
  AddStaticField('RESULT_HIDDEN', 'I');
  AddStaticField('RESULT_SHOWN', 'I');
  AddStaticField('RESULT_UNCHANGED_HIDDEN', 'I');
  AddStaticField('RESULT_UNCHANGED_SHOWN', 'I');
  AddStaticField('SHOW_FORCED', 'I');
  AddStaticField('SHOW_IMPLICIT', 'I');
end;

class function TJInputMethodManager.Wrap(const AObjectID: JNIObject): JInputMethodManager;
begin
  Result := Wrap<TJInputMethodManager, JInputMethodManager>(AObjectId);
end;

class function TJInputMethodManager.Wrap(const AObject: IJNIObject): JInputMethodManager;
begin
  Result := Wrap<TJInputMethodManager, JInputMethodManager>(AObject);
end;

class function TJInputMethodManager.HIDE_IMPLICIT_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HIDE_IMPLICIT_ONLY');
end;

class function TJInputMethodManager.HIDE_NOT_ALWAYS: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('HIDE_NOT_ALWAYS');
end;

class function TJInputMethodManager.RESULT_HIDDEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RESULT_HIDDEN');
end;

class function TJInputMethodManager.RESULT_SHOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RESULT_SHOWN');
end;

class function TJInputMethodManager.RESULT_UNCHANGED_HIDDEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RESULT_UNCHANGED_HIDDEN');
end;

class function TJInputMethodManager.RESULT_UNCHANGED_SHOWN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RESULT_UNCHANGED_SHOWN');
end;

class function TJInputMethodManager.SHOW_FORCED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SHOW_FORCED');
end;

class function TJInputMethodManager.SHOW_IMPLICIT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('SHOW_IMPLICIT');
end;

procedure TJInputMethodManager.dispatchKeyEventFromInputMethod(const AArg0: JView; const AArg1: JKeyEvent);
begin
  JavaType.CallVoidMethod(ObjectID, 'dispatchKeyEventFromInputMethod', '(Landroid/view/View;Landroid/view/KeyEvent;)V', [AArg0, AArg1]);
end;

function TJInputMethodManager.getEnabledInputMethodList: JList;
begin
  Result := CallObjectMethod<TJList, JList>('getEnabledInputMethodList', '()Ljava/util/List;', []);
end;

function TJInputMethodManager.getInputMethodList: JList;
begin
  Result := CallObjectMethod<TJList, JList>('getInputMethodList', '()Ljava/util/List;', []);
end;

function TJInputMethodManager.getShortcutInputMethodsAndSubtypes: JMap;
begin
  Result := CallObjectMethod<TJMap, JMap>('getShortcutInputMethodsAndSubtypes', '()Ljava/util/Map;', []);
end;

procedure TJInputMethodManager.hideSoftInputFromInputMethod(const AArg0: JIBinder; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'hideSoftInputFromInputMethod', '(Landroid/os/IBinder;I)V', [AArg0, AArg1]);
end;

function TJInputMethodManager.hideSoftInputFromWindow(const AArg0: JIBinder; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hideSoftInputFromWindow', '(Landroid/os/IBinder;I)Z', [AArg0, AArg1]);
end;

procedure TJInputMethodManager.hideStatusIcon(const AArg0: JIBinder);
begin
  JavaType.CallVoidMethod(ObjectID, 'hideStatusIcon', '(Landroid/os/IBinder;)V', [AArg0]);
end;

function TJInputMethodManager.isAcceptingText: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAcceptingText', '()Z', []);
end;

function TJInputMethodManager.isActive: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isActive', '()Z', []);
end;

function TJInputMethodManager.isActive(const AArg0: JView): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isActive', '(Landroid/view/View;)Z', [AArg0]);
end;

function TJInputMethodManager.isFullscreenMode: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isFullscreenMode', '()Z', []);
end;

function TJInputMethodManager.isWatchingCursor(const AArg0: JView): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isWatchingCursor', '(Landroid/view/View;)Z', [AArg0]);
end;

procedure TJInputMethodManager.restartInput(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'restartInput', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJInputMethodManager.sendAppPrivateCommand(const AArg0: JView; const AArg1: JString; const AArg2: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'sendAppPrivateCommand', '(Landroid/view/View;Ljava/lang/String;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJInputMethodManager.setInputMethod(const AArg0: JIBinder; const AArg1: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'setInputMethod', '(Landroid/os/IBinder;Ljava/lang/String;)V', [AArg0, AArg1]);
end;

function TJInputMethodManager.shouldOfferSwitchingToNextInputMethod(const AArg0: JIBinder): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'shouldOfferSwitchingToNextInputMethod', '(Landroid/os/IBinder;)Z', [AArg0]);
end;

procedure TJInputMethodManager.showInputMethodAndSubtypeEnabler(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'showInputMethodAndSubtypeEnabler', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJInputMethodManager.showInputMethodPicker;
begin
  JavaType.CallVoidMethod(ObjectID, 'showInputMethodPicker', '()V', []);
end;

function TJInputMethodManager.showSoftInput(const AArg0: JView; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'showSoftInput', '(Landroid/view/View;I)Z', [AArg0, AArg1]);
end;

procedure TJInputMethodManager.showSoftInputFromInputMethod(const AArg0: JIBinder; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'showSoftInputFromInputMethod', '(Landroid/os/IBinder;I)V', [AArg0, AArg1]);
end;

procedure TJInputMethodManager.showStatusIcon(const AArg0: JIBinder; const AArg1: JString; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'showStatusIcon', '(Landroid/os/IBinder;Ljava/lang/String;I)V', [AArg0, AArg1, AArg2]);
end;

function TJInputMethodManager.switchToLastInputMethod(const AArg0: JIBinder): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'switchToLastInputMethod', '(Landroid/os/IBinder;)Z', [AArg0]);
end;

function TJInputMethodManager.switchToNextInputMethod(const AArg0: JIBinder; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'switchToNextInputMethod', '(Landroid/os/IBinder;Z)Z', [AArg0, AArg1]);
end;

procedure TJInputMethodManager.toggleSoftInput(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'toggleSoftInput', '(II)V', [AArg0, AArg1]);
end;

procedure TJInputMethodManager.toggleSoftInputFromWindow(const AArg0: JIBinder; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'toggleSoftInputFromWindow', '(Landroid/os/IBinder;II)V', [AArg0, AArg1, AArg2]);
end;

procedure TJInputMethodManager.updateCursor(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'updateCursor', '(Landroid/view/View;IIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJInputMethodManager.updateSelection(const AArg0: JView; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'updateSelection', '(Landroid/view/View;IIII)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJInputMethodManager.viewClicked(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'viewClicked', '(Landroid/view/View;)V', [AArg0]);
end;

{ TJAndroidException }

class procedure TJAndroidException.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Ljava/lang/String;)V');
  AddMethod('<init>', '(Ljava/lang/String;Ljava/lang/Throwable;)V');
  AddMethod('<init>', '(Ljava/lang/Exception;)V');
end;

class procedure TJAndroidException.LoadMethods;
begin
  inherited;
end;

class function TJAndroidException.Wrap(const AObjectID: JNIObject): JAndroidException;
begin
  Result := Wrap<TJAndroidException, JAndroidException>(AObjectId);
end;

class function TJAndroidException.Wrap(const AObject: IJNIObject): JAndroidException;
begin
  Result := Wrap<TJAndroidException, JAndroidException>(AObject);
end;

class function TJAndroidException.Create: JAndroidException;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJAndroidException.Create(const AArg0: JString): JAndroidException;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

class function TJAndroidException.Create(const AArg0: JString; const AArg1: JThrowable): JAndroidException;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;Ljava/lang/Throwable;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJAndroidException.Create(const AArg0: JException): JAndroidException;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/Exception;)V', [AArg0]);
  Result := O;
end;

{ TJIntentFilter_MalformedMimeTypeException }

class procedure TJIntentFilter_MalformedMimeTypeException.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Ljava/lang/String;)V');
end;

class procedure TJIntentFilter_MalformedMimeTypeException.LoadMethods;
begin
  inherited;
end;

class function TJIntentFilter_MalformedMimeTypeException.Wrap(const AObjectID: JNIObject): JIntentFilter_MalformedMimeTypeException;
begin
  Result := Wrap<TJIntentFilter_MalformedMimeTypeException, JIntentFilter_MalformedMimeTypeException>(AObjectId);
end;

class function TJIntentFilter_MalformedMimeTypeException.Wrap(const AObject: IJNIObject): JIntentFilter_MalformedMimeTypeException;
begin
  Result := Wrap<TJIntentFilter_MalformedMimeTypeException, JIntentFilter_MalformedMimeTypeException>(AObject);
end;

class function TJIntentFilter_MalformedMimeTypeException.Create: JIntentFilter_MalformedMimeTypeException;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJIntentFilter_MalformedMimeTypeException.Create(const AArg0: JString): JIntentFilter_MalformedMimeTypeException;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

{ TJAttributeSet }

class procedure TJAttributeSet.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getAttributeBooleanValue', '(Ljava/lang/String;Ljava/lang/String;Z)Z');
  AddMethod('getAttributeBooleanValue', '(IZ)Z');
  AddMethod('getAttributeCount', '()I');
  AddMethod('getAttributeFloatValue', '(IF)F');
  AddMethod('getAttributeFloatValue', '(Ljava/lang/String;Ljava/lang/String;F)F');
  AddMethod('getAttributeIntValue', '(Ljava/lang/String;Ljava/lang/String;I)I');
  AddMethod('getAttributeIntValue', '(II)I');
  AddMethod('getAttributeListValue', '(I[Ljava/lang/String;I)I');
  AddMethod('getAttributeListValue', '(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)I');
  AddMethod('getAttributeName', '(I)Ljava/lang/String;');
  AddMethod('getAttributeNameResource', '(I)I');
  AddMethod('getAttributeResourceValue', '(II)I');
  AddMethod('getAttributeResourceValue', '(Ljava/lang/String;Ljava/lang/String;I)I');
  AddMethod('getAttributeUnsignedIntValue', '(II)I');
  AddMethod('getAttributeUnsignedIntValue', '(Ljava/lang/String;Ljava/lang/String;I)I');
  AddMethod('getAttributeValue', '(I)Ljava/lang/String;');
  AddMethod('getAttributeValue', '(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;');
  AddMethod('getClassAttribute', '()Ljava/lang/String;');
  AddMethod('getIdAttribute', '()Ljava/lang/String;');
  AddMethod('getIdAttributeResourceValue', '(I)I');
  AddMethod('getPositionDescription', '()Ljava/lang/String;');
  AddMethod('getStyleAttribute', '()I');
end;

class function TJAttributeSet.Wrap(const AObjectID: JNIObject): JAttributeSet;
begin
  Result := Wrap<TJAttributeSet, JAttributeSet>(AObjectId);
end;

class function TJAttributeSet.Wrap(const AObject: IJNIObject): JAttributeSet;
begin
  Result := Wrap<TJAttributeSet, JAttributeSet>(AObject);
end;

function TJAttributeSet.getAttributeBooleanValue(const AArg0: JString; const AArg1: JString; const AArg2: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getAttributeBooleanValue', '(Ljava/lang/String;Ljava/lang/String;Z)Z', [AArg0, AArg1, AArg2]);
end;

function TJAttributeSet.getAttributeBooleanValue(const AArg0: Integer; const AArg1: Boolean): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getAttributeBooleanValue', '(IZ)Z', [AArg0, AArg1]);
end;

function TJAttributeSet.getAttributeCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeCount', '()I', []);
end;

function TJAttributeSet.getAttributeFloatValue(const AArg0: Integer; const AArg1: Single): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getAttributeFloatValue', '(IF)F', [AArg0, AArg1]);
end;

function TJAttributeSet.getAttributeFloatValue(const AArg0: JString; const AArg1: JString; const AArg2: Single): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getAttributeFloatValue', '(Ljava/lang/String;Ljava/lang/String;F)F', [AArg0, AArg1, AArg2]);
end;

function TJAttributeSet.getAttributeIntValue(const AArg0: JString; const AArg1: JString; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeIntValue', '(Ljava/lang/String;Ljava/lang/String;I)I', [AArg0, AArg1, AArg2]);
end;

function TJAttributeSet.getAttributeIntValue(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeIntValue', '(II)I', [AArg0, AArg1]);
end;

function TJAttributeSet.getAttributeListValue(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeListValue', '(I[Ljava/lang/String;I)I', [AArg0, AArg1, AArg2]);
end;

function TJAttributeSet.getAttributeListValue(const AArg0: JString; const AArg1: JString; const AArg2: IJavaArray<JString>; const AArg3: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeListValue', '(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;I)I', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJAttributeSet.getAttributeName(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getAttributeName', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJAttributeSet.getAttributeNameResource(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeNameResource', '(I)I', [AArg0]);
end;

function TJAttributeSet.getAttributeResourceValue(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeResourceValue', '(II)I', [AArg0, AArg1]);
end;

function TJAttributeSet.getAttributeResourceValue(const AArg0: JString; const AArg1: JString; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeResourceValue', '(Ljava/lang/String;Ljava/lang/String;I)I', [AArg0, AArg1, AArg2]);
end;

function TJAttributeSet.getAttributeUnsignedIntValue(const AArg0: Integer; const AArg1: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeUnsignedIntValue', '(II)I', [AArg0, AArg1]);
end;

function TJAttributeSet.getAttributeUnsignedIntValue(const AArg0: JString; const AArg1: JString; const AArg2: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getAttributeUnsignedIntValue', '(Ljava/lang/String;Ljava/lang/String;I)I', [AArg0, AArg1, AArg2]);
end;

function TJAttributeSet.getAttributeValue(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getAttributeValue', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJAttributeSet.getAttributeValue(const AArg0: JString; const AArg1: JString): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getAttributeValue', '(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;', [AArg0, AArg1]);
end;

function TJAttributeSet.getClassAttribute: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getClassAttribute', '()Ljava/lang/String;', []);
end;

function TJAttributeSet.getIdAttribute: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getIdAttribute', '()Ljava/lang/String;', []);
end;

function TJAttributeSet.getIdAttributeResourceValue(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getIdAttributeResourceValue', '(I)I', [AArg0]);
end;

function TJAttributeSet.getPositionDescription: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getPositionDescription', '()Ljava/lang/String;', []);
end;

function TJAttributeSet.getStyleAttribute: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getStyleAttribute', '()I', []);
end;

{ TJDisplayMetrics }

class procedure TJDisplayMetrics.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJDisplayMetrics.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('equals', '(Landroid/util/DisplayMetrics;)Z');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('hashCode', '()I');
  AddMethod('setTo', '(Landroid/util/DisplayMetrics;)V');
  AddMethod('setToDefaults', '()V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJDisplayMetrics.LoadFields;
begin
  inherited;
  AddStaticField('DENSITY_260', 'I');
  AddStaticField('DENSITY_280', 'I');
  AddStaticField('DENSITY_300', 'I');
  AddStaticField('DENSITY_340', 'I');
  AddStaticField('DENSITY_360', 'I');
  AddStaticField('DENSITY_400', 'I');
  AddStaticField('DENSITY_420', 'I');
  AddStaticField('DENSITY_440', 'I');
  AddStaticField('DENSITY_560', 'I');
  AddStaticField('DENSITY_DEFAULT', 'I');
  AddStaticField('DENSITY_DEVICE_STABLE', 'I');
  AddStaticField('DENSITY_HIGH', 'I');
  AddStaticField('DENSITY_LOW', 'I');
  AddStaticField('DENSITY_MEDIUM', 'I');
  AddStaticField('DENSITY_TV', 'I');
  AddStaticField('DENSITY_XHIGH', 'I');
  AddStaticField('DENSITY_XXHIGH', 'I');
  AddStaticField('DENSITY_XXXHIGH', 'I');
  AddField('density', 'F');
  AddField('densityDpi', 'I');
  AddField('heightPixels', 'I');
  AddField('scaledDensity', 'F');
  AddField('widthPixels', 'I');
  AddField('xdpi', 'F');
  AddField('ydpi', 'F');
end;

class function TJDisplayMetrics.Wrap(const AObjectID: JNIObject): JDisplayMetrics;
begin
  Result := Wrap<TJDisplayMetrics, JDisplayMetrics>(AObjectId);
end;

class function TJDisplayMetrics.Wrap(const AObject: IJNIObject): JDisplayMetrics;
begin
  Result := Wrap<TJDisplayMetrics, JDisplayMetrics>(AObject);
end;

class function TJDisplayMetrics.Create: JDisplayMetrics;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJDisplayMetrics.DENSITY_260: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_260');
end;

class function TJDisplayMetrics.DENSITY_280: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_280');
end;

class function TJDisplayMetrics.DENSITY_300: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_300');
end;

class function TJDisplayMetrics.DENSITY_340: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_340');
end;

class function TJDisplayMetrics.DENSITY_360: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_360');
end;

class function TJDisplayMetrics.DENSITY_400: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_400');
end;

class function TJDisplayMetrics.DENSITY_420: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_420');
end;

class function TJDisplayMetrics.DENSITY_440: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_440');
end;

class function TJDisplayMetrics.DENSITY_560: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_560');
end;

class function TJDisplayMetrics.DENSITY_DEFAULT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_DEFAULT');
end;

class function TJDisplayMetrics.DENSITY_DEVICE_STABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_DEVICE_STABLE');
end;

class function TJDisplayMetrics.DENSITY_HIGH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_HIGH');
end;

class function TJDisplayMetrics.DENSITY_LOW: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_LOW');
end;

class function TJDisplayMetrics.DENSITY_MEDIUM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_MEDIUM');
end;

class function TJDisplayMetrics.DENSITY_TV: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_TV');
end;

class function TJDisplayMetrics.DENSITY_XHIGH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_XHIGH');
end;

class function TJDisplayMetrics.DENSITY_XXHIGH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_XXHIGH');
end;

class function TJDisplayMetrics.DENSITY_XXXHIGH: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_XXXHIGH');
end;

function TJDisplayMetrics._GetDensity: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'density');
end;

procedure TJDisplayMetrics._SetDensity(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'density', AValue);
end;

function TJDisplayMetrics._GetDensityDpi: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'densityDpi');
end;

procedure TJDisplayMetrics._SetDensityDpi(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'densityDpi', AValue);
end;

function TJDisplayMetrics._GetHeightPixels: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'heightPixels');
end;

procedure TJDisplayMetrics._SetHeightPixels(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'heightPixels', AValue);
end;

function TJDisplayMetrics._GetScaledDensity: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'scaledDensity');
end;

procedure TJDisplayMetrics._SetScaledDensity(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'scaledDensity', AValue);
end;

function TJDisplayMetrics._GetWidthPixels: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'widthPixels');
end;

procedure TJDisplayMetrics._SetWidthPixels(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'widthPixels', AValue);
end;

function TJDisplayMetrics._GetXdpi: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'xdpi');
end;

procedure TJDisplayMetrics._SetXdpi(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'xdpi', AValue);
end;

function TJDisplayMetrics._GetYdpi: Single;
begin
  Result := JavaType.GetFloatField(ObjectId, 'ydpi');
end;

procedure TJDisplayMetrics._SetYdpi(const AValue: Single);
begin
  JavaType.SetFloatField(ObjectId, 'ydpi', AValue);
end;

function TJDisplayMetrics.equals(const AArg0: JDisplayMetrics): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Landroid/util/DisplayMetrics;)Z', [AArg0]);
end;

function TJDisplayMetrics.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJDisplayMetrics.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

procedure TJDisplayMetrics.setTo(const AArg0: JDisplayMetrics);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTo', '(Landroid/util/DisplayMetrics;)V', [AArg0]);
end;

procedure TJDisplayMetrics.setToDefaults;
begin
  JavaType.CallVoidMethod(ObjectID, 'setToDefaults', '()V', []);
end;

function TJDisplayMetrics.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJProperty }

class procedure TJProperty.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/Class;Ljava/lang/String;)V');
end;

class procedure TJProperty.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('get', '(Ljava/lang/Object;)Ljava/lang/Object;');
  AddMethod('getName', '()Ljava/lang/String;');
  AddMethod('getType', '()Ljava/lang/Class;');
  AddMethod('isReadOnly', '()Z');
  AddStaticMethod('of', '(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Landroid/util/Property;');
  AddMethod('set', '(Ljava/lang/Object;Ljava/lang/Object;)V');
end;

class function TJProperty.Wrap(const AObjectID: JNIObject): JProperty;
begin
  Result := Wrap<TJProperty, JProperty>(AObjectId);
end;

class function TJProperty.Wrap(const AObject: IJNIObject): JProperty;
begin
  Result := Wrap<TJProperty, JProperty>(AObject);
end;

class function TJProperty.Create(const AArg0: JClass; const AArg1: JString): JProperty;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/Class;Ljava/lang/String;)V', [AArg0, AArg1]);
  Result := O;
end;

function TJProperty.get(const AArg0: JObject): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('get', '(Ljava/lang/Object;)Ljava/lang/Object;', [AArg0]);
end;

function TJProperty.getName: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getName', '()Ljava/lang/String;', []);
end;

function TJProperty.getType: JClass;
begin
  Result := CallObjectMethod<TJClass, JClass>('getType', '()Ljava/lang/Class;', []);
end;

function TJProperty.isReadOnly: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isReadOnly', '()Z', []);
end;

class function TJProperty.&of(const AArg0: JClass; const AArg1: JClass; const AArg2: JString): JProperty;
begin
  Result := CallStaticObjectMethod<TJProperty, JProperty>('of', '(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Landroid/util/Property;', [AArg0, AArg1, AArg2]);
end;

procedure TJProperty.&set(const AArg0: JObject; const AArg1: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Ljava/lang/Object;Ljava/lang/Object;)V', [AArg0, AArg1]);
end;

{ TJFloatProperty }

class procedure TJFloatProperty.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/String;)V');
end;

class procedure TJFloatProperty.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('set', '(Ljava/lang/Object;Ljava/lang/Object;)V');
  AddMethod('set', '(Ljava/lang/Object;Ljava/lang/Float;)V');
  AddMethod('setValue', '(Ljava/lang/Object;F)V');
end;

class function TJFloatProperty.Wrap(const AObjectID: JNIObject): JFloatProperty;
begin
  Result := Wrap<TJFloatProperty, JFloatProperty>(AObjectId);
end;

class function TJFloatProperty.Wrap(const AObject: IJNIObject): JFloatProperty;
begin
  Result := Wrap<TJFloatProperty, JFloatProperty>(AObject);
end;

class function TJFloatProperty.Create(const AArg0: JString): JFloatProperty;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

procedure TJFloatProperty.&set(const AArg0: JObject; const AArg1: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Ljava/lang/Object;Ljava/lang/Object;)V', [AArg0, AArg1]);
end;

procedure TJFloatProperty.&set(const AArg0: JObject; const AArg1: JFloat);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Ljava/lang/Object;Ljava/lang/Float;)V', [AArg0, AArg1]);
end;

procedure TJFloatProperty.setValue(const AArg0: JObject; const AArg1: Single);
begin
  JavaType.CallVoidMethod(ObjectID, 'setValue', '(Ljava/lang/Object;F)V', [AArg0, AArg1]);
end;

{ TJIntProperty }

class procedure TJIntProperty.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/String;)V');
end;

class procedure TJIntProperty.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('set', '(Ljava/lang/Object;Ljava/lang/Object;)V');
  AddMethod('set', '(Ljava/lang/Object;Ljava/lang/Integer;)V');
  AddMethod('setValue', '(Ljava/lang/Object;I)V');
end;

class function TJIntProperty.Wrap(const AObjectID: JNIObject): JIntProperty;
begin
  Result := Wrap<TJIntProperty, JIntProperty>(AObjectId);
end;

class function TJIntProperty.Wrap(const AObject: IJNIObject): JIntProperty;
begin
  Result := Wrap<TJIntProperty, JIntProperty>(AObject);
end;

class function TJIntProperty.Create(const AArg0: JString): JIntProperty;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

procedure TJIntProperty.&set(const AArg0: JObject; const AArg1: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Ljava/lang/Object;Ljava/lang/Object;)V', [AArg0, AArg1]);
end;

procedure TJIntProperty.&set(const AArg0: JObject; const AArg1: JInteger);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(Ljava/lang/Object;Ljava/lang/Integer;)V', [AArg0, AArg1]);
end;

procedure TJIntProperty.setValue(const AArg0: JObject; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setValue', '(Ljava/lang/Object;I)V', [AArg0, AArg1]);
end;

{ TJSize }

class procedure TJSize.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(II)V');
end;

class procedure TJSize.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('getHeight', '()I');
  AddMethod('getWidth', '()I');
  AddMethod('hashCode', '()I');
  AddStaticMethod('parseSize', '(Ljava/lang/String;)Landroid/util/Size;');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJSize.Wrap(const AObjectID: JNIObject): JSize;
begin
  Result := Wrap<TJSize, JSize>(AObjectId);
end;

class function TJSize.Wrap(const AObject: IJNIObject): JSize;
begin
  Result := Wrap<TJSize, JSize>(AObject);
end;

class function TJSize.Create(const AArg0: Integer; const AArg1: Integer): JSize;
begin
  var O := CreateForWrap;
  O.NewObject('(II)V', [AArg0, AArg1]);
  Result := O;
end;

function TJSize.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJSize.getHeight: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getHeight', '()I', []);
end;

function TJSize.getWidth: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getWidth', '()I', []);
end;

function TJSize.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

class function TJSize.parseSize(const AArg0: JString): JSize;
begin
  Result := CallStaticObjectMethod<TJSize, JSize>('parseSize', '(Ljava/lang/String;)Landroid/util/Size;', [AArg0]);
end;

function TJSize.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJSparseArray }

class procedure TJSparseArray.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(I)V');
end;

class procedure TJSparseArray.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('append', '(ILjava/lang/Object;)V');
  AddMethod('clear', '()V');
  AddMethod('clone', '()Ljava/lang/Object;');
  AddMethod('delete', '(I)V');
  AddMethod('get', '(I)Ljava/lang/Object;');
  AddMethod('get', '(ILjava/lang/Object;)Ljava/lang/Object;');
  AddMethod('indexOfKey', '(I)I');
  AddMethod('indexOfValue', '(Ljava/lang/Object;)I');
  AddMethod('keyAt', '(I)I');
  AddMethod('put', '(ILjava/lang/Object;)V');
  AddMethod('remove', '(I)V');
  AddMethod('removeAt', '(I)V');
  AddMethod('removeAtRange', '(II)V');
  AddMethod('setValueAt', '(ILjava/lang/Object;)V');
  AddMethod('size', '()I');
  AddMethod('toString', '()Ljava/lang/String;');
  AddMethod('valueAt', '(I)Ljava/lang/Object;');
end;

class function TJSparseArray.Wrap(const AObjectID: JNIObject): JSparseArray;
begin
  Result := Wrap<TJSparseArray, JSparseArray>(AObjectId);
end;

class function TJSparseArray.Wrap(const AObject: IJNIObject): JSparseArray;
begin
  Result := Wrap<TJSparseArray, JSparseArray>(AObject);
end;

class function TJSparseArray.Create: JSparseArray;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJSparseArray.Create(const AArg0: Integer): JSparseArray;
begin
  var O := CreateForWrap;
  O.NewObject('(I)V', [AArg0]);
  Result := O;
end;

procedure TJSparseArray.append(const AArg0: Integer; const AArg1: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'append', '(ILjava/lang/Object;)V', [AArg0, AArg1]);
end;

procedure TJSparseArray.clear;
begin
  JavaType.CallVoidMethod(ObjectID, 'clear', '()V', []);
end;

function TJSparseArray.clone: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('clone', '()Ljava/lang/Object;', []);
end;

procedure TJSparseArray.delete(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'delete', '(I)V', [AArg0]);
end;

function TJSparseArray.get(const AArg0: Integer): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('get', '(I)Ljava/lang/Object;', [AArg0]);
end;

function TJSparseArray.get(const AArg0: Integer; const AArg1: JObject): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('get', '(ILjava/lang/Object;)Ljava/lang/Object;', [AArg0, AArg1]);
end;

function TJSparseArray.indexOfKey(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'indexOfKey', '(I)I', [AArg0]);
end;

function TJSparseArray.indexOfValue(const AArg0: JObject): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'indexOfValue', '(Ljava/lang/Object;)I', [AArg0]);
end;

function TJSparseArray.keyAt(const AArg0: Integer): Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'keyAt', '(I)I', [AArg0]);
end;

procedure TJSparseArray.put(const AArg0: Integer; const AArg1: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'put', '(ILjava/lang/Object;)V', [AArg0, AArg1]);
end;

procedure TJSparseArray.remove(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'remove', '(I)V', [AArg0]);
end;

procedure TJSparseArray.removeAt(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeAt', '(I)V', [AArg0]);
end;

procedure TJSparseArray.removeAtRange(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'removeAtRange', '(II)V', [AArg0, AArg1]);
end;

procedure TJSparseArray.setValueAt(const AArg0: Integer; const AArg1: JObject);
begin
  JavaType.CallVoidMethod(ObjectID, 'setValueAt', '(ILjava/lang/Object;)V', [AArg0, AArg1]);
end;

function TJSparseArray.size: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'size', '()I', []);
end;

function TJSparseArray.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

function TJSparseArray.valueAt(const AArg0: Integer): JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('valueAt', '(I)Ljava/lang/Object;', [AArg0]);
end;

{ TJTypedValue }

class procedure TJTypedValue.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJTypedValue.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('applyDimension', '(IFLandroid/util/DisplayMetrics;)F');
  AddMethod('coerceToString', '()Ljava/lang/CharSequence;');
  AddStaticMethod('coerceToString', '(II)Ljava/lang/String;');
  AddStaticMethod('complexToDimension', '(ILandroid/util/DisplayMetrics;)F');
  AddStaticMethod('complexToDimensionPixelOffset', '(ILandroid/util/DisplayMetrics;)I');
  AddStaticMethod('complexToDimensionPixelSize', '(ILandroid/util/DisplayMetrics;)I');
  AddStaticMethod('complexToFloat', '(I)F');
  AddStaticMethod('complexToFraction', '(IFF)F');
  AddMethod('getComplexUnit', '()I');
  AddMethod('getDimension', '(Landroid/util/DisplayMetrics;)F');
  AddMethod('getFloat', '()F');
  AddMethod('getFraction', '(FF)F');
  AddMethod('setTo', '(Landroid/util/TypedValue;)V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJTypedValue.LoadFields;
begin
  inherited;
  AddStaticField('COMPLEX_MANTISSA_MASK', 'I');
  AddStaticField('COMPLEX_MANTISSA_SHIFT', 'I');
  AddStaticField('COMPLEX_RADIX_0p23', 'I');
  AddStaticField('COMPLEX_RADIX_16p7', 'I');
  AddStaticField('COMPLEX_RADIX_23p0', 'I');
  AddStaticField('COMPLEX_RADIX_8p15', 'I');
  AddStaticField('COMPLEX_RADIX_MASK', 'I');
  AddStaticField('COMPLEX_RADIX_SHIFT', 'I');
  AddStaticField('COMPLEX_UNIT_DIP', 'I');
  AddStaticField('COMPLEX_UNIT_FRACTION', 'I');
  AddStaticField('COMPLEX_UNIT_FRACTION_PARENT', 'I');
  AddStaticField('COMPLEX_UNIT_IN', 'I');
  AddStaticField('COMPLEX_UNIT_MASK', 'I');
  AddStaticField('COMPLEX_UNIT_MM', 'I');
  AddStaticField('COMPLEX_UNIT_PT', 'I');
  AddStaticField('COMPLEX_UNIT_PX', 'I');
  AddStaticField('COMPLEX_UNIT_SHIFT', 'I');
  AddStaticField('COMPLEX_UNIT_SP', 'I');
  AddStaticField('DATA_NULL_EMPTY', 'I');
  AddStaticField('DATA_NULL_UNDEFINED', 'I');
  AddStaticField('DENSITY_DEFAULT', 'I');
  AddStaticField('DENSITY_NONE', 'I');
  AddStaticField('TYPE_ATTRIBUTE', 'I');
  AddStaticField('TYPE_DIMENSION', 'I');
  AddStaticField('TYPE_FIRST_COLOR_INT', 'I');
  AddStaticField('TYPE_FIRST_INT', 'I');
  AddStaticField('TYPE_FLOAT', 'I');
  AddStaticField('TYPE_FRACTION', 'I');
  AddStaticField('TYPE_INT_BOOLEAN', 'I');
  AddStaticField('TYPE_INT_COLOR_ARGB4', 'I');
  AddStaticField('TYPE_INT_COLOR_ARGB8', 'I');
  AddStaticField('TYPE_INT_COLOR_RGB4', 'I');
  AddStaticField('TYPE_INT_COLOR_RGB8', 'I');
  AddStaticField('TYPE_INT_DEC', 'I');
  AddStaticField('TYPE_INT_HEX', 'I');
  AddStaticField('TYPE_LAST_COLOR_INT', 'I');
  AddStaticField('TYPE_LAST_INT', 'I');
  AddStaticField('TYPE_NULL', 'I');
  AddStaticField('TYPE_REFERENCE', 'I');
  AddStaticField('TYPE_STRING', 'I');
  AddField('assetCookie', 'I');
  AddField('changingConfigurations', 'I');
  AddField('data', 'I');
  AddField('density', 'I');
  AddField('resourceId', 'I');
  AddField('string', 'Ljava/lang/CharSequence;');
  AddField('type', 'I');
end;

class function TJTypedValue.Wrap(const AObjectID: JNIObject): JTypedValue;
begin
  Result := Wrap<TJTypedValue, JTypedValue>(AObjectId);
end;

class function TJTypedValue.Wrap(const AObject: IJNIObject): JTypedValue;
begin
  Result := Wrap<TJTypedValue, JTypedValue>(AObject);
end;

class function TJTypedValue.Create: JTypedValue;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJTypedValue.COMPLEX_MANTISSA_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_MANTISSA_MASK');
end;

class function TJTypedValue.COMPLEX_MANTISSA_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_MANTISSA_SHIFT');
end;

class function TJTypedValue.COMPLEX_RADIX_0p23: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_RADIX_0p23');
end;

class function TJTypedValue.COMPLEX_RADIX_16p7: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_RADIX_16p7');
end;

class function TJTypedValue.COMPLEX_RADIX_23p0: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_RADIX_23p0');
end;

class function TJTypedValue.COMPLEX_RADIX_8p15: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_RADIX_8p15');
end;

class function TJTypedValue.COMPLEX_RADIX_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_RADIX_MASK');
end;

class function TJTypedValue.COMPLEX_RADIX_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_RADIX_SHIFT');
end;

class function TJTypedValue.COMPLEX_UNIT_DIP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_DIP');
end;

class function TJTypedValue.COMPLEX_UNIT_FRACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_FRACTION');
end;

class function TJTypedValue.COMPLEX_UNIT_FRACTION_PARENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_FRACTION_PARENT');
end;

class function TJTypedValue.COMPLEX_UNIT_IN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_IN');
end;

class function TJTypedValue.COMPLEX_UNIT_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_MASK');
end;

class function TJTypedValue.COMPLEX_UNIT_MM: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_MM');
end;

class function TJTypedValue.COMPLEX_UNIT_PT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_PT');
end;

class function TJTypedValue.COMPLEX_UNIT_PX: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_PX');
end;

class function TJTypedValue.COMPLEX_UNIT_SHIFT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_SHIFT');
end;

class function TJTypedValue.COMPLEX_UNIT_SP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('COMPLEX_UNIT_SP');
end;

class function TJTypedValue.DATA_NULL_EMPTY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DATA_NULL_EMPTY');
end;

class function TJTypedValue.DATA_NULL_UNDEFINED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DATA_NULL_UNDEFINED');
end;

class function TJTypedValue.DENSITY_DEFAULT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_DEFAULT');
end;

class function TJTypedValue.DENSITY_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('DENSITY_NONE');
end;

class function TJTypedValue.TYPE_ATTRIBUTE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_ATTRIBUTE');
end;

class function TJTypedValue.TYPE_DIMENSION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_DIMENSION');
end;

class function TJTypedValue.TYPE_FIRST_COLOR_INT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_FIRST_COLOR_INT');
end;

class function TJTypedValue.TYPE_FIRST_INT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_FIRST_INT');
end;

class function TJTypedValue.TYPE_FLOAT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_FLOAT');
end;

class function TJTypedValue.TYPE_FRACTION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_FRACTION');
end;

class function TJTypedValue.TYPE_INT_BOOLEAN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_INT_BOOLEAN');
end;

class function TJTypedValue.TYPE_INT_COLOR_ARGB4: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_INT_COLOR_ARGB4');
end;

class function TJTypedValue.TYPE_INT_COLOR_ARGB8: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_INT_COLOR_ARGB8');
end;

class function TJTypedValue.TYPE_INT_COLOR_RGB4: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_INT_COLOR_RGB4');
end;

class function TJTypedValue.TYPE_INT_COLOR_RGB8: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_INT_COLOR_RGB8');
end;

class function TJTypedValue.TYPE_INT_DEC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_INT_DEC');
end;

class function TJTypedValue.TYPE_INT_HEX: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_INT_HEX');
end;

class function TJTypedValue.TYPE_LAST_COLOR_INT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_LAST_COLOR_INT');
end;

class function TJTypedValue.TYPE_LAST_INT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_LAST_INT');
end;

class function TJTypedValue.TYPE_NULL: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_NULL');
end;

class function TJTypedValue.TYPE_REFERENCE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_REFERENCE');
end;

class function TJTypedValue.TYPE_STRING: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TYPE_STRING');
end;

function TJTypedValue._GetAssetCookie: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'assetCookie');
end;

procedure TJTypedValue._SetAssetCookie(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'assetCookie', AValue);
end;

function TJTypedValue._GetChangingConfigurations: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'changingConfigurations');
end;

procedure TJTypedValue._SetChangingConfigurations(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'changingConfigurations', AValue);
end;

function TJTypedValue._GetData: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'data');
end;

procedure TJTypedValue._SetData(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'data', AValue);
end;

function TJTypedValue._GetDensity: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'density');
end;

procedure TJTypedValue._SetDensity(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'density', AValue);
end;

function TJTypedValue._GetResourceId: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'resourceId');
end;

procedure TJTypedValue._SetResourceId(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'resourceId', AValue);
end;

function TJTypedValue._GetString: JCharSequence;
begin
  Result := GetObjectField<TJCharSequence, JCharSequence>('string');
end;

procedure TJTypedValue._SetString(const AValue: JCharSequence);
begin
  JavaType.SetObjectField(ObjectId, 'string', AValue);
end;

function TJTypedValue._GetType: Integer;
begin
  Result := JavaType.GetIntField(ObjectId, 'type');
end;

procedure TJTypedValue._SetType(const AValue: Integer);
begin
  JavaType.SetIntField(ObjectId, 'type', AValue);
end;

class function TJTypedValue.applyDimension(const AArg0: Integer; const AArg1: Single; const AArg2: JDisplayMetrics): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('applyDimension', '(IFLandroid/util/DisplayMetrics;)F', [AArg0, AArg1, AArg2]);
end;

function TJTypedValue.coerceToString: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('coerceToString', '()Ljava/lang/CharSequence;', []);
end;

class function TJTypedValue.coerceToString(const AArg0: Integer; const AArg1: Integer): JString;
begin
  Result := CallStaticObjectMethod<TJString, JString>('coerceToString', '(II)Ljava/lang/String;', [AArg0, AArg1]);
end;

class function TJTypedValue.complexToDimension(const AArg0: Integer; const AArg1: JDisplayMetrics): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('complexToDimension', '(ILandroid/util/DisplayMetrics;)F', [AArg0, AArg1]);
end;

class function TJTypedValue.complexToDimensionPixelOffset(const AArg0: Integer; const AArg1: JDisplayMetrics): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('complexToDimensionPixelOffset', '(ILandroid/util/DisplayMetrics;)I', [AArg0, AArg1]);
end;

class function TJTypedValue.complexToDimensionPixelSize(const AArg0: Integer; const AArg1: JDisplayMetrics): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('complexToDimensionPixelSize', '(ILandroid/util/DisplayMetrics;)I', [AArg0, AArg1]);
end;

class function TJTypedValue.complexToFloat(const AArg0: Integer): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('complexToFloat', '(I)F', [AArg0]);
end;

class function TJTypedValue.complexToFraction(const AArg0: Integer; const AArg1: Single; const AArg2: Single): Single;
begin
  Result := StaticJavaType[Self].CallStaticFloatMethod('complexToFraction', '(IFF)F', [AArg0, AArg1, AArg2]);
end;

function TJTypedValue.getComplexUnit: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getComplexUnit', '()I', []);
end;

function TJTypedValue.getDimension(const AArg0: JDisplayMetrics): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getDimension', '(Landroid/util/DisplayMetrics;)F', [AArg0]);
end;

function TJTypedValue.getFloat: Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFloat', '()F', []);
end;

function TJTypedValue.getFraction(const AArg0: Single; const AArg1: Single): Single;
begin
  Result := JavaType.CallFloatMethod(ObjectID, 'getFraction', '(FF)F', [AArg0, AArg1]);
end;

procedure TJTypedValue.setTo(const AArg0: JTypedValue);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTo', '(Landroid/util/TypedValue;)V', [AArg0]);
end;

function TJTypedValue.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJFragment }

class procedure TJFragment.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJFragment.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddMethod('getActivity', '()Landroid/app/Activity;');
  AddMethod('getAllowEnterTransitionOverlap', '()Z');
  AddMethod('getAllowReturnTransitionOverlap', '()Z');
  AddMethod('getArguments', '()Landroid/os/Bundle;');
  AddMethod('getChildFragmentManager', '()Landroid/app/FragmentManager;');
  AddMethod('getContext', '()Landroid/content/Context;');
  AddMethod('getFragmentManager', '()Landroid/app/FragmentManager;');
  AddMethod('getHost', '()Ljava/lang/Object;');
  AddMethod('getId', '()I');
  AddMethod('getLayoutInflater', '()Landroid/view/LayoutInflater;');
  AddMethod('getParentFragment', '()Landroid/app/Fragment;');
  AddMethod('getResources', '()Landroid/content/res/Resources;');
  AddMethod('getRetainInstance', '()Z');
  AddMethod('getString', '(I)Ljava/lang/String;');
  AddMethod('getString', '(I[Ljava/lang/Object;)Ljava/lang/String;');
  AddMethod('getTag', '()Ljava/lang/String;');
  AddMethod('getTargetFragment', '()Landroid/app/Fragment;');
  AddMethod('getTargetRequestCode', '()I');
  AddMethod('getText', '(I)Ljava/lang/CharSequence;');
  AddMethod('getUserVisibleHint', '()Z');
  AddMethod('getView', '()Landroid/view/View;');
  AddMethod('hashCode', '()I');
  AddStaticMethod('instantiate', '(Landroid/content/Context;Ljava/lang/String;)Landroid/app/Fragment;');
  AddStaticMethod('instantiate', '(Landroid/content/Context;Ljava/lang/String;Landroid/os/Bundle;)Landroid/app/Fragment;');
  AddMethod('isAdded', '()Z');
  AddMethod('isDetached', '()Z');
  AddMethod('isHidden', '()Z');
  AddMethod('isInLayout', '()Z');
  AddMethod('isRemoving', '()Z');
  AddMethod('isResumed', '()Z');
  AddMethod('isStateSaved', '()Z');
  AddMethod('isVisible', '()Z');
  AddMethod('onActivityCreated', '(Landroid/os/Bundle;)V');
  AddMethod('onActivityResult', '(IILandroid/content/Intent;)V');
  AddMethod('onAttach', '(Landroid/app/Activity;)V');
  AddMethod('onAttach', '(Landroid/content/Context;)V');
  AddMethod('onAttachFragment', '(Landroid/app/Fragment;)V');
  AddMethod('onConfigurationChanged', '(Landroid/content/res/Configuration;)V');
  AddMethod('onContextItemSelected', '(Landroid/view/MenuItem;)Z');
  AddMethod('onCreate', '(Landroid/os/Bundle;)V');
  AddMethod('onCreateAnimator', '(IZI)Landroid/animation/Animator;');
  AddMethod('onCreateView', '(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;');
  AddMethod('onDestroy', '()V');
  AddMethod('onDestroyOptionsMenu', '()V');
  AddMethod('onDestroyView', '()V');
  AddMethod('onDetach', '()V');
  AddMethod('onGetLayoutInflater', '(Landroid/os/Bundle;)Landroid/view/LayoutInflater;');
  AddMethod('onHiddenChanged', '(Z)V');
  AddMethod('onInflate', '(Landroid/app/Activity;Landroid/util/AttributeSet;Landroid/os/Bundle;)V');
  AddMethod('onInflate', '(Landroid/util/AttributeSet;Landroid/os/Bundle;)V');
  AddMethod('onInflate', '(Landroid/content/Context;Landroid/util/AttributeSet;Landroid/os/Bundle;)V');
  AddMethod('onLowMemory', '()V');
  AddMethod('onMultiWindowModeChanged', '(ZLandroid/content/res/Configuration;)V');
  AddMethod('onMultiWindowModeChanged', '(Z)V');
  AddMethod('onOptionsItemSelected', '(Landroid/view/MenuItem;)Z');
  AddMethod('onOptionsMenuClosed', '(Landroid/view/Menu;)V');
  AddMethod('onPause', '()V');
  AddMethod('onPictureInPictureModeChanged', '(Z)V');
  AddMethod('onPictureInPictureModeChanged', '(ZLandroid/content/res/Configuration;)V');
  AddMethod('onPrepareOptionsMenu', '(Landroid/view/Menu;)V');
  AddMethod('onRequestPermissionsResult', '(I[Ljava/lang/String;[I)V');
  AddMethod('onResume', '()V');
  AddMethod('onSaveInstanceState', '(Landroid/os/Bundle;)V');
  AddMethod('onStart', '()V');
  AddMethod('onStop', '()V');
  AddMethod('onTrimMemory', '(I)V');
  AddMethod('onViewCreated', '(Landroid/view/View;Landroid/os/Bundle;)V');
  AddMethod('onViewStateRestored', '(Landroid/os/Bundle;)V');
  AddMethod('postponeEnterTransition', '()V');
  AddMethod('registerForContextMenu', '(Landroid/view/View;)V');
  AddMethod('requestPermissions', '([Ljava/lang/String;I)V');
  AddMethod('setAllowEnterTransitionOverlap', '(Z)V');
  AddMethod('setAllowReturnTransitionOverlap', '(Z)V');
  AddMethod('setArguments', '(Landroid/os/Bundle;)V');
  AddMethod('setHasOptionsMenu', '(Z)V');
  AddMethod('setMenuVisibility', '(Z)V');
  AddMethod('setRetainInstance', '(Z)V');
  AddMethod('setTargetFragment', '(Landroid/app/Fragment;I)V');
  AddMethod('setUserVisibleHint', '(Z)V');
  AddMethod('shouldShowRequestPermissionRationale', '(Ljava/lang/String;)Z');
  AddMethod('startActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)V');
  AddMethod('startActivity', '(Landroid/content/Intent;)V');
  AddMethod('startActivityForResult', '(Landroid/content/Intent;I)V');
  AddMethod('startActivityForResult', '(Landroid/content/Intent;ILandroid/os/Bundle;)V');
  AddMethod('startIntentSenderForResult', '(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V');
  AddMethod('startPostponedEnterTransition', '()V');
  AddMethod('toString', '()Ljava/lang/String;');
  AddMethod('unregisterForContextMenu', '(Landroid/view/View;)V');
end;

class function TJFragment.Wrap(const AObjectID: JNIObject): JFragment;
begin
  Result := Wrap<TJFragment, JFragment>(AObjectId);
end;

class function TJFragment.Wrap(const AObject: IJNIObject): JFragment;
begin
  Result := Wrap<TJFragment, JFragment>(AObject);
end;

class function TJFragment.Create: JFragment;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJFragment.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

function TJFragment.getActivity: JActivity;
begin
  Result := CallObjectMethod<TJActivity, JActivity>('getActivity', '()Landroid/app/Activity;', []);
end;

function TJFragment.getAllowEnterTransitionOverlap: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getAllowEnterTransitionOverlap', '()Z', []);
end;

function TJFragment.getAllowReturnTransitionOverlap: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getAllowReturnTransitionOverlap', '()Z', []);
end;

function TJFragment.getArguments: JBundle;
begin
  Result := CallObjectMethod<TJBundle, JBundle>('getArguments', '()Landroid/os/Bundle;', []);
end;

function TJFragment.getChildFragmentManager: JFragmentManager;
begin
  Result := CallObjectMethod<TJFragmentManager, JFragmentManager>('getChildFragmentManager', '()Landroid/app/FragmentManager;', []);
end;

function TJFragment.getContext: JContext;
begin
  Result := CallObjectMethod<TJContext, JContext>('getContext', '()Landroid/content/Context;', []);
end;

function TJFragment.getFragmentManager: JFragmentManager;
begin
  Result := CallObjectMethod<TJFragmentManager, JFragmentManager>('getFragmentManager', '()Landroid/app/FragmentManager;', []);
end;

function TJFragment.getHost: JObject;
begin
  Result := CallObjectMethod<TJObject, JObject>('getHost', '()Ljava/lang/Object;', []);
end;

function TJFragment.getId: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getId', '()I', []);
end;

function TJFragment.getLayoutInflater: JLayoutInflater;
begin
  Result := CallObjectMethod<TJLayoutInflater, JLayoutInflater>('getLayoutInflater', '()Landroid/view/LayoutInflater;', []);
end;

function TJFragment.getParentFragment: JFragment;
begin
  Result := CallObjectMethod<TJFragment, JFragment>('getParentFragment', '()Landroid/app/Fragment;', []);
end;

function TJFragment.getResources: JResources;
begin
  Result := CallObjectMethod<TJResources, JResources>('getResources', '()Landroid/content/res/Resources;', []);
end;

function TJFragment.getRetainInstance: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getRetainInstance', '()Z', []);
end;

function TJFragment.getString(const AArg0: Integer): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(I)Ljava/lang/String;', [AArg0]);
end;

function TJFragment.getString(const AArg0: Integer; const AArg1: IJavaArray<JObject>): JString;
begin
  Result := CallObjectMethod<TJString, JString>('getString', '(I[Ljava/lang/Object;)Ljava/lang/String;', [AArg0, AArg1]);
end;

function TJFragment.getTag: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getTag', '()Ljava/lang/String;', []);
end;

function TJFragment.getTargetFragment: JFragment;
begin
  Result := CallObjectMethod<TJFragment, JFragment>('getTargetFragment', '()Landroid/app/Fragment;', []);
end;

function TJFragment.getTargetRequestCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getTargetRequestCode', '()I', []);
end;

function TJFragment.getText(const AArg0: Integer): JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getText', '(I)Ljava/lang/CharSequence;', [AArg0]);
end;

function TJFragment.getUserVisibleHint: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'getUserVisibleHint', '()Z', []);
end;

function TJFragment.getView: JView;
begin
  Result := CallObjectMethod<TJView, JView>('getView', '()Landroid/view/View;', []);
end;

function TJFragment.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

class function TJFragment.instantiate(const AArg0: JContext; const AArg1: JString): JFragment;
begin
  Result := CallStaticObjectMethod<TJFragment, JFragment>('instantiate', '(Landroid/content/Context;Ljava/lang/String;)Landroid/app/Fragment;', [AArg0, AArg1]);
end;

class function TJFragment.instantiate(const AArg0: JContext; const AArg1: JString; const AArg2: JBundle): JFragment;
begin
  Result := CallStaticObjectMethod<TJFragment, JFragment>('instantiate', '(Landroid/content/Context;Ljava/lang/String;Landroid/os/Bundle;)Landroid/app/Fragment;', [AArg0, AArg1, AArg2]);
end;

function TJFragment.isAdded: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAdded', '()Z', []);
end;

function TJFragment.isDetached: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isDetached', '()Z', []);
end;

function TJFragment.isHidden: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isHidden', '()Z', []);
end;

function TJFragment.isInLayout: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isInLayout', '()Z', []);
end;

function TJFragment.isRemoving: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isRemoving', '()Z', []);
end;

function TJFragment.isResumed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isResumed', '()Z', []);
end;

function TJFragment.isStateSaved: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateSaved', '()Z', []);
end;

function TJFragment.isVisible: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isVisible', '()Z', []);
end;

procedure TJFragment.onActivityCreated(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onActivityCreated', '(Landroid/os/Bundle;)V', [AArg0]);
end;

procedure TJFragment.onActivityResult(const AArg0: Integer; const AArg1: Integer; const AArg2: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'onActivityResult', '(IILandroid/content/Intent;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJFragment.onAttach(const AArg0: JActivity);
begin
  JavaType.CallVoidMethod(ObjectID, 'onAttach', '(Landroid/app/Activity;)V', [AArg0]);
end;

procedure TJFragment.onAttach(const AArg0: JContext);
begin
  JavaType.CallVoidMethod(ObjectID, 'onAttach', '(Landroid/content/Context;)V', [AArg0]);
end;

procedure TJFragment.onAttachFragment(const AArg0: JFragment);
begin
  JavaType.CallVoidMethod(ObjectID, 'onAttachFragment', '(Landroid/app/Fragment;)V', [AArg0]);
end;

procedure TJFragment.onConfigurationChanged(const AArg0: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'onConfigurationChanged', '(Landroid/content/res/Configuration;)V', [AArg0]);
end;

function TJFragment.onContextItemSelected(const AArg0: JMenuItem): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onContextItemSelected', '(Landroid/view/MenuItem;)Z', [AArg0]);
end;

procedure TJFragment.onCreate(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onCreate', '(Landroid/os/Bundle;)V', [AArg0]);
end;

function TJFragment.onCreateAnimator(const AArg0: Integer; const AArg1: Boolean; const AArg2: Integer): JObject {JAnimator};
begin
  Result := CallObjectMethod<TJObject {JAnimator}, JObject {JAnimator}>('onCreateAnimator', '(IZI)Landroid/animation/Animator;', [AArg0, AArg1, AArg2]);
end;

function TJFragment.onCreateView(const AArg0: JLayoutInflater; const AArg1: JViewGroup; const AArg2: JBundle): JView;
begin
  Result := CallObjectMethod<TJView, JView>('onCreateView', '(Landroid/view/LayoutInflater;Landroid/view/ViewGroup;Landroid/os/Bundle;)Landroid/view/View;', [AArg0, AArg1, AArg2]);
end;

procedure TJFragment.onDestroy;
begin
  JavaType.CallVoidMethod(ObjectID, 'onDestroy', '()V', []);
end;

procedure TJFragment.onDestroyOptionsMenu;
begin
  JavaType.CallVoidMethod(ObjectID, 'onDestroyOptionsMenu', '()V', []);
end;

procedure TJFragment.onDestroyView;
begin
  JavaType.CallVoidMethod(ObjectID, 'onDestroyView', '()V', []);
end;

procedure TJFragment.onDetach;
begin
  JavaType.CallVoidMethod(ObjectID, 'onDetach', '()V', []);
end;

function TJFragment.onGetLayoutInflater(const AArg0: JBundle): JLayoutInflater;
begin
  Result := CallObjectMethod<TJLayoutInflater, JLayoutInflater>('onGetLayoutInflater', '(Landroid/os/Bundle;)Landroid/view/LayoutInflater;', [AArg0]);
end;

procedure TJFragment.onHiddenChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onHiddenChanged', '(Z)V', [AArg0]);
end;

procedure TJFragment.onInflate(const AArg0: JActivity; const AArg1: JAttributeSet; const AArg2: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onInflate', '(Landroid/app/Activity;Landroid/util/AttributeSet;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJFragment.onInflate(const AArg0: JAttributeSet; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onInflate', '(Landroid/util/AttributeSet;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJFragment.onInflate(const AArg0: JContext; const AArg1: JAttributeSet; const AArg2: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onInflate', '(Landroid/content/Context;Landroid/util/AttributeSet;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJFragment.onLowMemory;
begin
  JavaType.CallVoidMethod(ObjectID, 'onLowMemory', '()V', []);
end;

procedure TJFragment.onMultiWindowModeChanged(const AArg0: Boolean; const AArg1: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'onMultiWindowModeChanged', '(ZLandroid/content/res/Configuration;)V', [AArg0, AArg1]);
end;

procedure TJFragment.onMultiWindowModeChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onMultiWindowModeChanged', '(Z)V', [AArg0]);
end;

function TJFragment.onOptionsItemSelected(const AArg0: JMenuItem): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onOptionsItemSelected', '(Landroid/view/MenuItem;)Z', [AArg0]);
end;

procedure TJFragment.onOptionsMenuClosed(const AArg0: JMenu);
begin
  JavaType.CallVoidMethod(ObjectID, 'onOptionsMenuClosed', '(Landroid/view/Menu;)V', [AArg0]);
end;

procedure TJFragment.onPause;
begin
  JavaType.CallVoidMethod(ObjectID, 'onPause', '()V', []);
end;

procedure TJFragment.onPictureInPictureModeChanged(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'onPictureInPictureModeChanged', '(Z)V', [AArg0]);
end;

procedure TJFragment.onPictureInPictureModeChanged(const AArg0: Boolean; const AArg1: JConfiguration);
begin
  JavaType.CallVoidMethod(ObjectID, 'onPictureInPictureModeChanged', '(ZLandroid/content/res/Configuration;)V', [AArg0, AArg1]);
end;

procedure TJFragment.onPrepareOptionsMenu(const AArg0: JMenu);
begin
  JavaType.CallVoidMethod(ObjectID, 'onPrepareOptionsMenu', '(Landroid/view/Menu;)V', [AArg0]);
end;

procedure TJFragment.onRequestPermissionsResult(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: IJavaArray<Integer>);
begin
  JavaType.CallVoidMethod(ObjectID, 'onRequestPermissionsResult', '(I[Ljava/lang/String;[I)V', [AArg0, AArg1, AArg2]);
end;

procedure TJFragment.onResume;
begin
  JavaType.CallVoidMethod(ObjectID, 'onResume', '()V', []);
end;

procedure TJFragment.onSaveInstanceState(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onSaveInstanceState', '(Landroid/os/Bundle;)V', [AArg0]);
end;

procedure TJFragment.onStart;
begin
  JavaType.CallVoidMethod(ObjectID, 'onStart', '()V', []);
end;

procedure TJFragment.onStop;
begin
  JavaType.CallVoidMethod(ObjectID, 'onStop', '()V', []);
end;

procedure TJFragment.onTrimMemory(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onTrimMemory', '(I)V', [AArg0]);
end;

procedure TJFragment.onViewCreated(const AArg0: JView; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onViewCreated', '(Landroid/view/View;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJFragment.onViewStateRestored(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'onViewStateRestored', '(Landroid/os/Bundle;)V', [AArg0]);
end;

procedure TJFragment.postponeEnterTransition;
begin
  JavaType.CallVoidMethod(ObjectID, 'postponeEnterTransition', '()V', []);
end;

procedure TJFragment.registerForContextMenu(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerForContextMenu', '(Landroid/view/View;)V', [AArg0]);
end;

procedure TJFragment.requestPermissions(const AArg0: IJavaArray<JString>; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'requestPermissions', '([Ljava/lang/String;I)V', [AArg0, AArg1]);
end;

procedure TJFragment.setAllowEnterTransitionOverlap(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAllowEnterTransitionOverlap', '(Z)V', [AArg0]);
end;

procedure TJFragment.setAllowReturnTransitionOverlap(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAllowReturnTransitionOverlap', '(Z)V', [AArg0]);
end;

procedure TJFragment.setArguments(const AArg0: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'setArguments', '(Landroid/os/Bundle;)V', [AArg0]);
end;

procedure TJFragment.setHasOptionsMenu(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setHasOptionsMenu', '(Z)V', [AArg0]);
end;

procedure TJFragment.setMenuVisibility(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setMenuVisibility', '(Z)V', [AArg0]);
end;

procedure TJFragment.setRetainInstance(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRetainInstance', '(Z)V', [AArg0]);
end;

procedure TJFragment.setTargetFragment(const AArg0: JFragment; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTargetFragment', '(Landroid/app/Fragment;I)V', [AArg0, AArg1]);
end;

procedure TJFragment.setUserVisibleHint(const AArg0: Boolean);
begin
  JavaType.CallVoidMethod(ObjectID, 'setUserVisibleHint', '(Z)V', [AArg0]);
end;

function TJFragment.shouldShowRequestPermissionRationale(const AArg0: JString): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'shouldShowRequestPermissionRationale', '(Ljava/lang/String;)Z', [AArg0]);
end;

procedure TJFragment.startActivity(const AArg0: JIntent; const AArg1: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivity', '(Landroid/content/Intent;Landroid/os/Bundle;)V', [AArg0, AArg1]);
end;

procedure TJFragment.startActivity(const AArg0: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivity', '(Landroid/content/Intent;)V', [AArg0]);
end;

procedure TJFragment.startActivityForResult(const AArg0: JIntent; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivityForResult', '(Landroid/content/Intent;I)V', [AArg0, AArg1]);
end;

procedure TJFragment.startActivityForResult(const AArg0: JIntent; const AArg1: Integer; const AArg2: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startActivityForResult', '(Landroid/content/Intent;ILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJFragment.startIntentSenderForResult(const AArg0: JIntentSender; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: Integer; const AArg5: Integer; const AArg6: JBundle);
begin
  JavaType.CallVoidMethod(ObjectID, 'startIntentSenderForResult', '(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6]);
end;

procedure TJFragment.startPostponedEnterTransition;
begin
  JavaType.CallVoidMethod(ObjectID, 'startPostponedEnterTransition', '()V', []);
end;

function TJFragment.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

procedure TJFragment.unregisterForContextMenu(const AArg0: JView);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterForContextMenu', '(Landroid/view/View;)V', [AArg0]);
end;

{ TJFragmentManager }

class procedure TJFragmentManager.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJFragmentManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('beginTransaction', '()Landroid/app/FragmentTransaction;');
  AddStaticMethod('enableDebugLogging', '(Z)V');
  AddMethod('executePendingTransactions', '()Z');
  AddMethod('findFragmentById', '(I)Landroid/app/Fragment;');
  AddMethod('findFragmentByTag', '(Ljava/lang/String;)Landroid/app/Fragment;');
  AddMethod('getBackStackEntryCount', '()I');
  AddMethod('getFragment', '(Landroid/os/Bundle;Ljava/lang/String;)Landroid/app/Fragment;');
  AddMethod('getFragments', '()Ljava/util/List;');
  AddMethod('getPrimaryNavigationFragment', '()Landroid/app/Fragment;');
  AddMethod('invalidateOptionsMenu', '()V');
  AddMethod('isDestroyed', '()Z');
  AddMethod('isStateSaved', '()Z');
  AddMethod('popBackStack', '(II)V');
  AddMethod('popBackStack', '(Ljava/lang/String;I)V');
  AddMethod('popBackStack', '()V');
  AddMethod('popBackStackImmediate', '()Z');
  AddMethod('popBackStackImmediate', '(Ljava/lang/String;I)Z');
  AddMethod('popBackStackImmediate', '(II)Z');
  AddMethod('putFragment', '(Landroid/os/Bundle;Ljava/lang/String;Landroid/app/Fragment;)V');
end;

class procedure TJFragmentManager.LoadFields;
begin
  inherited;
  AddStaticField('POP_BACK_STACK_INCLUSIVE', 'I');
end;

class function TJFragmentManager.Wrap(const AObjectID: JNIObject): JFragmentManager;
begin
  Result := Wrap<TJFragmentManager, JFragmentManager>(AObjectId);
end;

class function TJFragmentManager.Wrap(const AObject: IJNIObject): JFragmentManager;
begin
  Result := Wrap<TJFragmentManager, JFragmentManager>(AObject);
end;

class function TJFragmentManager.Create: JFragmentManager;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJFragmentManager.POP_BACK_STACK_INCLUSIVE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('POP_BACK_STACK_INCLUSIVE');
end;

function TJFragmentManager.beginTransaction: JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('beginTransaction', '()Landroid/app/FragmentTransaction;', []);
end;

class procedure TJFragmentManager.enableDebugLogging(const AArg0: Boolean);
begin
  StaticJavaType[Self].CallStaticVoidMethod('enableDebugLogging', '(Z)V', [AArg0]);
end;

function TJFragmentManager.executePendingTransactions: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'executePendingTransactions', '()Z', []);
end;

function TJFragmentManager.findFragmentById(const AArg0: Integer): JFragment;
begin
  Result := CallObjectMethod<TJFragment, JFragment>('findFragmentById', '(I)Landroid/app/Fragment;', [AArg0]);
end;

function TJFragmentManager.findFragmentByTag(const AArg0: JString): JFragment;
begin
  Result := CallObjectMethod<TJFragment, JFragment>('findFragmentByTag', '(Ljava/lang/String;)Landroid/app/Fragment;', [AArg0]);
end;

function TJFragmentManager.getBackStackEntryCount: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getBackStackEntryCount', '()I', []);
end;

function TJFragmentManager.getFragment(const AArg0: JBundle; const AArg1: JString): JFragment;
begin
  Result := CallObjectMethod<TJFragment, JFragment>('getFragment', '(Landroid/os/Bundle;Ljava/lang/String;)Landroid/app/Fragment;', [AArg0, AArg1]);
end;

function TJFragmentManager.getFragments: JList;
begin
  Result := CallObjectMethod<TJList, JList>('getFragments', '()Ljava/util/List;', []);
end;

function TJFragmentManager.getPrimaryNavigationFragment: JFragment;
begin
  Result := CallObjectMethod<TJFragment, JFragment>('getPrimaryNavigationFragment', '()Landroid/app/Fragment;', []);
end;

procedure TJFragmentManager.invalidateOptionsMenu;
begin
  JavaType.CallVoidMethod(ObjectID, 'invalidateOptionsMenu', '()V', []);
end;

function TJFragmentManager.isDestroyed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isDestroyed', '()Z', []);
end;

function TJFragmentManager.isStateSaved: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isStateSaved', '()Z', []);
end;

procedure TJFragmentManager.popBackStack(const AArg0: Integer; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'popBackStack', '(II)V', [AArg0, AArg1]);
end;

procedure TJFragmentManager.popBackStack(const AArg0: JString; const AArg1: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'popBackStack', '(Ljava/lang/String;I)V', [AArg0, AArg1]);
end;

procedure TJFragmentManager.popBackStack;
begin
  JavaType.CallVoidMethod(ObjectID, 'popBackStack', '()V', []);
end;

function TJFragmentManager.popBackStackImmediate: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'popBackStackImmediate', '()Z', []);
end;

function TJFragmentManager.popBackStackImmediate(const AArg0: JString; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'popBackStackImmediate', '(Ljava/lang/String;I)Z', [AArg0, AArg1]);
end;

function TJFragmentManager.popBackStackImmediate(const AArg0: Integer; const AArg1: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'popBackStackImmediate', '(II)Z', [AArg0, AArg1]);
end;

procedure TJFragmentManager.putFragment(const AArg0: JBundle; const AArg1: JString; const AArg2: JFragment);
begin
  JavaType.CallVoidMethod(ObjectID, 'putFragment', '(Landroid/os/Bundle;Ljava/lang/String;Landroid/app/Fragment;)V', [AArg0, AArg1, AArg2]);
end;

{ TJFragmentTransaction }

class procedure TJFragmentTransaction.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJFragmentTransaction.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('add', '(ILandroid/app/Fragment;Ljava/lang/String;)Landroid/app/FragmentTransaction;');
  AddMethod('add', '(ILandroid/app/Fragment;)Landroid/app/FragmentTransaction;');
  AddMethod('add', '(Landroid/app/Fragment;Ljava/lang/String;)Landroid/app/FragmentTransaction;');
  AddMethod('addSharedElement', '(Landroid/view/View;Ljava/lang/String;)Landroid/app/FragmentTransaction;');
  AddMethod('addToBackStack', '(Ljava/lang/String;)Landroid/app/FragmentTransaction;');
  AddMethod('attach', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;');
  AddMethod('commit', '()I');
  AddMethod('commitAllowingStateLoss', '()I');
  AddMethod('commitNow', '()V');
  AddMethod('commitNowAllowingStateLoss', '()V');
  AddMethod('detach', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;');
  AddMethod('disallowAddToBackStack', '()Landroid/app/FragmentTransaction;');
  AddMethod('hide', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;');
  AddMethod('isAddToBackStackAllowed', '()Z');
  AddMethod('isEmpty', '()Z');
  AddMethod('remove', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;');
  AddMethod('replace', '(ILandroid/app/Fragment;Ljava/lang/String;)Landroid/app/FragmentTransaction;');
  AddMethod('replace', '(ILandroid/app/Fragment;)Landroid/app/FragmentTransaction;');
  AddMethod('runOnCommit', '(Ljava/lang/Runnable;)Landroid/app/FragmentTransaction;');
  AddMethod('setBreadCrumbShortTitle', '(I)Landroid/app/FragmentTransaction;');
  AddMethod('setBreadCrumbShortTitle', '(Ljava/lang/CharSequence;)Landroid/app/FragmentTransaction;');
  AddMethod('setBreadCrumbTitle', '(Ljava/lang/CharSequence;)Landroid/app/FragmentTransaction;');
  AddMethod('setBreadCrumbTitle', '(I)Landroid/app/FragmentTransaction;');
  AddMethod('setCustomAnimations', '(IIII)Landroid/app/FragmentTransaction;');
  AddMethod('setCustomAnimations', '(II)Landroid/app/FragmentTransaction;');
  AddMethod('setPrimaryNavigationFragment', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;');
  AddMethod('setReorderingAllowed', '(Z)Landroid/app/FragmentTransaction;');
  AddMethod('setTransition', '(I)Landroid/app/FragmentTransaction;');
  AddMethod('setTransitionStyle', '(I)Landroid/app/FragmentTransaction;');
  AddMethod('show', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;');
end;

class procedure TJFragmentTransaction.LoadFields;
begin
  inherited;
  AddStaticField('TRANSIT_ENTER_MASK', 'I');
  AddStaticField('TRANSIT_EXIT_MASK', 'I');
  AddStaticField('TRANSIT_FRAGMENT_CLOSE', 'I');
  AddStaticField('TRANSIT_FRAGMENT_FADE', 'I');
  AddStaticField('TRANSIT_FRAGMENT_OPEN', 'I');
  AddStaticField('TRANSIT_NONE', 'I');
  AddStaticField('TRANSIT_UNSET', 'I');
end;

class function TJFragmentTransaction.Wrap(const AObjectID: JNIObject): JFragmentTransaction;
begin
  Result := Wrap<TJFragmentTransaction, JFragmentTransaction>(AObjectId);
end;

class function TJFragmentTransaction.Wrap(const AObject: IJNIObject): JFragmentTransaction;
begin
  Result := Wrap<TJFragmentTransaction, JFragmentTransaction>(AObject);
end;

class function TJFragmentTransaction.Create: JFragmentTransaction;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJFragmentTransaction.TRANSIT_ENTER_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TRANSIT_ENTER_MASK');
end;

class function TJFragmentTransaction.TRANSIT_EXIT_MASK: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TRANSIT_EXIT_MASK');
end;

class function TJFragmentTransaction.TRANSIT_FRAGMENT_CLOSE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TRANSIT_FRAGMENT_CLOSE');
end;

class function TJFragmentTransaction.TRANSIT_FRAGMENT_FADE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TRANSIT_FRAGMENT_FADE');
end;

class function TJFragmentTransaction.TRANSIT_FRAGMENT_OPEN: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TRANSIT_FRAGMENT_OPEN');
end;

class function TJFragmentTransaction.TRANSIT_NONE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TRANSIT_NONE');
end;

class function TJFragmentTransaction.TRANSIT_UNSET: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('TRANSIT_UNSET');
end;

function TJFragmentTransaction.add(const AArg0: Integer; const AArg1: JFragment; const AArg2: JString): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('add', '(ILandroid/app/Fragment;Ljava/lang/String;)Landroid/app/FragmentTransaction;', [AArg0, AArg1, AArg2]);
end;

function TJFragmentTransaction.add(const AArg0: Integer; const AArg1: JFragment): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('add', '(ILandroid/app/Fragment;)Landroid/app/FragmentTransaction;', [AArg0, AArg1]);
end;

function TJFragmentTransaction.add(const AArg0: JFragment; const AArg1: JString): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('add', '(Landroid/app/Fragment;Ljava/lang/String;)Landroid/app/FragmentTransaction;', [AArg0, AArg1]);
end;

function TJFragmentTransaction.addSharedElement(const AArg0: JView; const AArg1: JString): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('addSharedElement', '(Landroid/view/View;Ljava/lang/String;)Landroid/app/FragmentTransaction;', [AArg0, AArg1]);
end;

function TJFragmentTransaction.addToBackStack(const AArg0: JString): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('addToBackStack', '(Ljava/lang/String;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.attach(const AArg0: JFragment): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('attach', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.commit: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'commit', '()I', []);
end;

function TJFragmentTransaction.commitAllowingStateLoss: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'commitAllowingStateLoss', '()I', []);
end;

procedure TJFragmentTransaction.commitNow;
begin
  JavaType.CallVoidMethod(ObjectID, 'commitNow', '()V', []);
end;

procedure TJFragmentTransaction.commitNowAllowingStateLoss;
begin
  JavaType.CallVoidMethod(ObjectID, 'commitNowAllowingStateLoss', '()V', []);
end;

function TJFragmentTransaction.detach(const AArg0: JFragment): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('detach', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.disallowAddToBackStack: JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('disallowAddToBackStack', '()Landroid/app/FragmentTransaction;', []);
end;

function TJFragmentTransaction.hide(const AArg0: JFragment): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('hide', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.isAddToBackStackAllowed: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isAddToBackStackAllowed', '()Z', []);
end;

function TJFragmentTransaction.isEmpty: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'isEmpty', '()Z', []);
end;

function TJFragmentTransaction.remove(const AArg0: JFragment): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('remove', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.replace(const AArg0: Integer; const AArg1: JFragment; const AArg2: JString): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('replace', '(ILandroid/app/Fragment;Ljava/lang/String;)Landroid/app/FragmentTransaction;', [AArg0, AArg1, AArg2]);
end;

function TJFragmentTransaction.replace(const AArg0: Integer; const AArg1: JFragment): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('replace', '(ILandroid/app/Fragment;)Landroid/app/FragmentTransaction;', [AArg0, AArg1]);
end;

function TJFragmentTransaction.runOnCommit(const AArg0: JRunnable): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('runOnCommit', '(Ljava/lang/Runnable;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.setBreadCrumbShortTitle(const AArg0: Integer): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setBreadCrumbShortTitle', '(I)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.setBreadCrumbShortTitle(const AArg0: JCharSequence): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setBreadCrumbShortTitle', '(Ljava/lang/CharSequence;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.setBreadCrumbTitle(const AArg0: JCharSequence): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setBreadCrumbTitle', '(Ljava/lang/CharSequence;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.setBreadCrumbTitle(const AArg0: Integer): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setBreadCrumbTitle', '(I)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.setCustomAnimations(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setCustomAnimations', '(IIII)Landroid/app/FragmentTransaction;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJFragmentTransaction.setCustomAnimations(const AArg0: Integer; const AArg1: Integer): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setCustomAnimations', '(II)Landroid/app/FragmentTransaction;', [AArg0, AArg1]);
end;

function TJFragmentTransaction.setPrimaryNavigationFragment(const AArg0: JFragment): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setPrimaryNavigationFragment', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.setReorderingAllowed(const AArg0: Boolean): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setReorderingAllowed', '(Z)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.setTransition(const AArg0: Integer): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setTransition', '(I)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.setTransitionStyle(const AArg0: Integer): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('setTransitionStyle', '(I)Landroid/app/FragmentTransaction;', [AArg0]);
end;

function TJFragmentTransaction.show(const AArg0: JFragment): JFragmentTransaction;
begin
  Result := CallObjectMethod<TJFragmentTransaction, JFragmentTransaction>('show', '(Landroid/app/Fragment;)Landroid/app/FragmentTransaction;', [AArg0]);
end;

{ TJActivityManager_TaskDescription }

class procedure TJActivityManager_TaskDescription.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(Ljava/lang/String;Landroid/graphics/Bitmap;I)V');
  AddMethod('<init>', '(Ljava/lang/String;II)V');
  AddMethod('<init>', '(Ljava/lang/String;Landroid/graphics/Bitmap;)V');
  AddMethod('<init>', '(Ljava/lang/String;I)V');
  AddMethod('<init>', '(Ljava/lang/String;)V');
  AddMethod('<init>', '()V');
  AddMethod('<init>', '(Landroid/app/ActivityManager$TaskDescription;)V');
end;

class procedure TJActivityManager_TaskDescription.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('getIcon', '()Landroid/graphics/Bitmap;');
  AddMethod('getLabel', '()Ljava/lang/String;');
  AddMethod('getPrimaryColor', '()I');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJActivityManager_TaskDescription.Wrap(const AObjectID: JNIObject): JActivityManager_TaskDescription;
begin
  Result := Wrap<TJActivityManager_TaskDescription, JActivityManager_TaskDescription>(AObjectId);
end;

class function TJActivityManager_TaskDescription.Wrap(const AObject: IJNIObject): JActivityManager_TaskDescription;
begin
  Result := Wrap<TJActivityManager_TaskDescription, JActivityManager_TaskDescription>(AObject);
end;

class function TJActivityManager_TaskDescription.Create(const AArg0: JString; const AArg1: JBitmap; const AArg2: Integer): JActivityManager_TaskDescription;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;Landroid/graphics/Bitmap;I)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJActivityManager_TaskDescription.Create(const AArg0: JString; const AArg1: Integer; const AArg2: Integer): JActivityManager_TaskDescription;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;II)V', [AArg0, AArg1, AArg2]);
  Result := O;
end;

class function TJActivityManager_TaskDescription.Create(const AArg0: JString; const AArg1: JBitmap): JActivityManager_TaskDescription;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;Landroid/graphics/Bitmap;)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJActivityManager_TaskDescription.Create(const AArg0: JString; const AArg1: Integer): JActivityManager_TaskDescription;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;I)V', [AArg0, AArg1]);
  Result := O;
end;

class function TJActivityManager_TaskDescription.Create(const AArg0: JString): JActivityManager_TaskDescription;
begin
  var O := CreateForWrap;
  O.NewObject('(Ljava/lang/String;)V', [AArg0]);
  Result := O;
end;

class function TJActivityManager_TaskDescription.Create: JActivityManager_TaskDescription;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

class function TJActivityManager_TaskDescription.Create(const AArg0: JActivityManager_TaskDescription): JActivityManager_TaskDescription;
begin
  var O := CreateForWrap;
  O.NewObject('(Landroid/app/ActivityManager$TaskDescription;)V', [AArg0]);
  Result := O;
end;

function TJActivityManager_TaskDescription.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJActivityManager_TaskDescription.getIcon: JBitmap;
begin
  Result := CallObjectMethod<TJBitmap, JBitmap>('getIcon', '()Landroid/graphics/Bitmap;', []);
end;

function TJActivityManager_TaskDescription.getLabel: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getLabel', '()Ljava/lang/String;', []);
end;

function TJActivityManager_TaskDescription.getPrimaryColor: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getPrimaryColor', '()I', []);
end;

function TJActivityManager_TaskDescription.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJAlarmManager }

class procedure TJAlarmManager.LoadConstructors;
begin
end;

class procedure TJAlarmManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('cancel', '(Landroid/app/PendingIntent;)V');
  AddMethod('cancel', '(Landroid/app/AlarmManager$OnAlarmListener;)V');
  AddMethod('getNextAlarmClock', '()Landroid/app/AlarmManager$AlarmClockInfo;');
  AddMethod('set', '(IJLandroid/app/PendingIntent;)V');
  AddMethod('set', '(IJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V');
  AddMethod('setAlarmClock', '(Landroid/app/AlarmManager$AlarmClockInfo;Landroid/app/PendingIntent;)V');
  AddMethod('setAndAllowWhileIdle', '(IJLandroid/app/PendingIntent;)V');
  AddMethod('setExact', '(IJLandroid/app/PendingIntent;)V');
  AddMethod('setExact', '(IJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V');
  AddMethod('setExactAndAllowWhileIdle', '(IJLandroid/app/PendingIntent;)V');
  AddMethod('setInexactRepeating', '(IJJLandroid/app/PendingIntent;)V');
  AddMethod('setRepeating', '(IJJLandroid/app/PendingIntent;)V');
  AddMethod('setTime', '(J)V');
  AddMethod('setTimeZone', '(Ljava/lang/String;)V');
  AddMethod('setWindow', '(IJJLandroid/app/PendingIntent;)V');
  AddMethod('setWindow', '(IJJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V');
end;

class procedure TJAlarmManager.LoadFields;
begin
  inherited;
  AddStaticField('ACTION_NEXT_ALARM_CLOCK_CHANGED', 'Ljava/lang/String;');
  AddStaticField('ELAPSED_REALTIME', 'I');
  AddStaticField('ELAPSED_REALTIME_WAKEUP', 'I');
  AddStaticField('INTERVAL_DAY', 'J');
  AddStaticField('INTERVAL_FIFTEEN_MINUTES', 'J');
  AddStaticField('INTERVAL_HALF_DAY', 'J');
  AddStaticField('INTERVAL_HALF_HOUR', 'J');
  AddStaticField('INTERVAL_HOUR', 'J');
  AddStaticField('RTC', 'I');
  AddStaticField('RTC_WAKEUP', 'I');
end;

class function TJAlarmManager.Wrap(const AObjectID: JNIObject): JAlarmManager;
begin
  Result := Wrap<TJAlarmManager, JAlarmManager>(AObjectId);
end;

class function TJAlarmManager.Wrap(const AObject: IJNIObject): JAlarmManager;
begin
  Result := Wrap<TJAlarmManager, JAlarmManager>(AObject);
end;

class function TJAlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('ACTION_NEXT_ALARM_CLOCK_CHANGED');
end;

class function TJAlarmManager.ELAPSED_REALTIME: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ELAPSED_REALTIME');
end;

class function TJAlarmManager.ELAPSED_REALTIME_WAKEUP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('ELAPSED_REALTIME_WAKEUP');
end;

class function TJAlarmManager.INTERVAL_DAY: Int64;
begin
  Result := StaticJavaType[Self].GetStaticLongField('INTERVAL_DAY');
end;

class function TJAlarmManager.INTERVAL_FIFTEEN_MINUTES: Int64;
begin
  Result := StaticJavaType[Self].GetStaticLongField('INTERVAL_FIFTEEN_MINUTES');
end;

class function TJAlarmManager.INTERVAL_HALF_DAY: Int64;
begin
  Result := StaticJavaType[Self].GetStaticLongField('INTERVAL_HALF_DAY');
end;

class function TJAlarmManager.INTERVAL_HALF_HOUR: Int64;
begin
  Result := StaticJavaType[Self].GetStaticLongField('INTERVAL_HALF_HOUR');
end;

class function TJAlarmManager.INTERVAL_HOUR: Int64;
begin
  Result := StaticJavaType[Self].GetStaticLongField('INTERVAL_HOUR');
end;

class function TJAlarmManager.RTC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RTC');
end;

class function TJAlarmManager.RTC_WAKEUP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('RTC_WAKEUP');
end;

procedure TJAlarmManager.cancel(const AArg0: JPendingIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'cancel', '(Landroid/app/PendingIntent;)V', [AArg0]);
end;

procedure TJAlarmManager.cancel(const AArg0: JAlarmManager_OnAlarmListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'cancel', '(Landroid/app/AlarmManager$OnAlarmListener;)V', [AArg0]);
end;

function TJAlarmManager.getNextAlarmClock: JAlarmManager_AlarmClockInfo;
begin
  Result := CallObjectMethod<TJAlarmManager_AlarmClockInfo, JAlarmManager_AlarmClockInfo>('getNextAlarmClock', '()Landroid/app/AlarmManager$AlarmClockInfo;', []);
end;

procedure TJAlarmManager.&set(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(IJLandroid/app/PendingIntent;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJAlarmManager.&set(const AArg0: Integer; const AArg1: Int64; const AArg2: JString; const AArg3: JAlarmManager_OnAlarmListener; const AArg4: JHandler);
begin
  JavaType.CallVoidMethod(ObjectID, 'set', '(IJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJAlarmManager.setAlarmClock(const AArg0: JAlarmManager_AlarmClockInfo; const AArg1: JPendingIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAlarmClock', '(Landroid/app/AlarmManager$AlarmClockInfo;Landroid/app/PendingIntent;)V', [AArg0, AArg1]);
end;

procedure TJAlarmManager.setAndAllowWhileIdle(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setAndAllowWhileIdle', '(IJLandroid/app/PendingIntent;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJAlarmManager.setExact(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setExact', '(IJLandroid/app/PendingIntent;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJAlarmManager.setExact(const AArg0: Integer; const AArg1: Int64; const AArg2: JString; const AArg3: JAlarmManager_OnAlarmListener; const AArg4: JHandler);
begin
  JavaType.CallVoidMethod(ObjectID, 'setExact', '(IJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

procedure TJAlarmManager.setExactAndAllowWhileIdle(const AArg0: Integer; const AArg1: Int64; const AArg2: JPendingIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setExactAndAllowWhileIdle', '(IJLandroid/app/PendingIntent;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJAlarmManager.setInexactRepeating(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JPendingIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setInexactRepeating', '(IJJLandroid/app/PendingIntent;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJAlarmManager.setRepeating(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JPendingIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setRepeating', '(IJJLandroid/app/PendingIntent;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJAlarmManager.setTime(const AArg0: Int64);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTime', '(J)V', [AArg0]);
end;

procedure TJAlarmManager.setTimeZone(const AArg0: JString);
begin
  JavaType.CallVoidMethod(ObjectID, 'setTimeZone', '(Ljava/lang/String;)V', [AArg0]);
end;

procedure TJAlarmManager.setWindow(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JPendingIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWindow', '(IJJLandroid/app/PendingIntent;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

procedure TJAlarmManager.setWindow(const AArg0: Integer; const AArg1: Int64; const AArg2: Int64; const AArg3: JString; const AArg4: JAlarmManager_OnAlarmListener; const AArg5: JHandler);
begin
  JavaType.CallVoidMethod(ObjectID, 'setWindow', '(IJJLjava/lang/String;Landroid/app/AlarmManager$OnAlarmListener;Landroid/os/Handler;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

{ TJAlarmManager_AlarmClockInfo }

class procedure TJAlarmManager_AlarmClockInfo.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '(JLandroid/app/PendingIntent;)V');
end;

class procedure TJAlarmManager_AlarmClockInfo.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('describeContents', '()I');
  AddMethod('getShowIntent', '()Landroid/app/PendingIntent;');
  AddMethod('getTriggerTime', '()J');
end;

class function TJAlarmManager_AlarmClockInfo.Wrap(const AObjectID: JNIObject): JAlarmManager_AlarmClockInfo;
begin
  Result := Wrap<TJAlarmManager_AlarmClockInfo, JAlarmManager_AlarmClockInfo>(AObjectId);
end;

class function TJAlarmManager_AlarmClockInfo.Wrap(const AObject: IJNIObject): JAlarmManager_AlarmClockInfo;
begin
  Result := Wrap<TJAlarmManager_AlarmClockInfo, JAlarmManager_AlarmClockInfo>(AObject);
end;

class function TJAlarmManager_AlarmClockInfo.Create(const AArg0: Int64; const AArg1: JPendingIntent): JAlarmManager_AlarmClockInfo;
begin
  var O := CreateForWrap;
  O.NewObject('(JLandroid/app/PendingIntent;)V', [AArg0, AArg1]);
  Result := O;
end;

function TJAlarmManager_AlarmClockInfo.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJAlarmManager_AlarmClockInfo.getShowIntent: JPendingIntent;
begin
  Result := CallObjectMethod<TJPendingIntent, JPendingIntent>('getShowIntent', '()Landroid/app/PendingIntent;', []);
end;

function TJAlarmManager_AlarmClockInfo.getTriggerTime: Int64;
begin
  Result := JavaType.CallLongMethod(ObjectID, 'getTriggerTime', '()J', []);
end;

{ TJAlarmManager_OnAlarmListener }

class procedure TJAlarmManager_OnAlarmListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onAlarm', '()V');
end;

class function TJAlarmManager_OnAlarmListener.Wrap(const AObjectID: JNIObject): JAlarmManager_OnAlarmListener;
begin
  Result := Wrap<TJAlarmManager_OnAlarmListener, JAlarmManager_OnAlarmListener>(AObjectId);
end;

class function TJAlarmManager_OnAlarmListener.Wrap(const AObject: IJNIObject): JAlarmManager_OnAlarmListener;
begin
  Result := Wrap<TJAlarmManager_OnAlarmListener, JAlarmManager_OnAlarmListener>(AObject);
end;

procedure TJAlarmManager_OnAlarmListener.onAlarm;
begin
  JavaType.CallVoidMethod(ObjectID, 'onAlarm', '()V', []);
end;

{ TJPendingIntent }

class procedure TJPendingIntent.LoadConstructors;
begin
end;

class procedure TJPendingIntent.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('cancel', '()V');
  AddMethod('describeContents', '()I');
  AddMethod('equals', '(Ljava/lang/Object;)Z');
  AddStaticMethod('getActivities', '(Landroid/content/Context;I[Landroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;');
  AddStaticMethod('getActivities', '(Landroid/content/Context;I[Landroid/content/Intent;I)Landroid/app/PendingIntent;');
  AddStaticMethod('getActivity', '(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;');
  AddStaticMethod('getActivity', '(Landroid/content/Context;ILandroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;');
  AddStaticMethod('getBroadcast', '(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;');
  AddMethod('getCreatorPackage', '()Ljava/lang/String;');
  AddMethod('getCreatorUid', '()I');
  AddMethod('getCreatorUserHandle', '()Landroid/os/UserHandle;');
  AddStaticMethod('getForegroundService', '(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;');
  AddMethod('getIntentSender', '()Landroid/content/IntentSender;');
  AddStaticMethod('getService', '(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;');
  AddMethod('getTargetPackage', '()Ljava/lang/String;');
  AddMethod('hashCode', '()I');
  AddMethod('send', '(Landroid/content/Context;ILandroid/content/Intent;)V');
  AddMethod('send', '(I)V');
  AddMethod('send', '()V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class procedure TJPendingIntent.LoadFields;
begin
  inherited;
  AddStaticField('FLAG_CANCEL_CURRENT', 'I');
  AddStaticField('FLAG_IMMUTABLE', 'I');
  AddStaticField('FLAG_NO_CREATE', 'I');
  AddStaticField('FLAG_ONE_SHOT', 'I');
  AddStaticField('FLAG_UPDATE_CURRENT', 'I');
end;

class function TJPendingIntent.Wrap(const AObjectID: JNIObject): JPendingIntent;
begin
  Result := Wrap<TJPendingIntent, JPendingIntent>(AObjectId);
end;

class function TJPendingIntent.Wrap(const AObject: IJNIObject): JPendingIntent;
begin
  Result := Wrap<TJPendingIntent, JPendingIntent>(AObject);
end;

class function TJPendingIntent.FLAG_CANCEL_CURRENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_CANCEL_CURRENT');
end;

class function TJPendingIntent.FLAG_IMMUTABLE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_IMMUTABLE');
end;

class function TJPendingIntent.FLAG_NO_CREATE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_NO_CREATE');
end;

class function TJPendingIntent.FLAG_ONE_SHOT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_ONE_SHOT');
end;

class function TJPendingIntent.FLAG_UPDATE_CURRENT: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('FLAG_UPDATE_CURRENT');
end;

procedure TJPendingIntent.cancel;
begin
  JavaType.CallVoidMethod(ObjectID, 'cancel', '()V', []);
end;

function TJPendingIntent.describeContents: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'describeContents', '()I', []);
end;

function TJPendingIntent.equals(const AArg0: JObject): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'equals', '(Ljava/lang/Object;)Z', [AArg0]);
end;

class function TJPendingIntent.getActivities(const AArg0: JContext; const AArg1: Integer; const AArg2: IJavaArray<JIntent>; const AArg3: Integer; const AArg4: JBundle): JPendingIntent;
begin
  Result := CallStaticObjectMethod<TJPendingIntent, JPendingIntent>('getActivities', '(Landroid/content/Context;I[Landroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

class function TJPendingIntent.getActivities(const AArg0: JContext; const AArg1: Integer; const AArg2: IJavaArray<JIntent>; const AArg3: Integer): JPendingIntent;
begin
  Result := CallStaticObjectMethod<TJPendingIntent, JPendingIntent>('getActivities', '(Landroid/content/Context;I[Landroid/content/Intent;I)Landroid/app/PendingIntent;', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJPendingIntent.getActivity(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer): JPendingIntent;
begin
  Result := CallStaticObjectMethod<TJPendingIntent, JPendingIntent>('getActivity', '(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;', [AArg0, AArg1, AArg2, AArg3]);
end;

class function TJPendingIntent.getActivity(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer; const AArg4: JBundle): JPendingIntent;
begin
  Result := CallStaticObjectMethod<TJPendingIntent, JPendingIntent>('getActivity', '(Landroid/content/Context;ILandroid/content/Intent;ILandroid/os/Bundle;)Landroid/app/PendingIntent;', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

class function TJPendingIntent.getBroadcast(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer): JPendingIntent;
begin
  Result := CallStaticObjectMethod<TJPendingIntent, JPendingIntent>('getBroadcast', '(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPendingIntent.getCreatorPackage: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getCreatorPackage', '()Ljava/lang/String;', []);
end;

function TJPendingIntent.getCreatorUid: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'getCreatorUid', '()I', []);
end;

function TJPendingIntent.getCreatorUserHandle: JUserHandle;
begin
  Result := CallObjectMethod<TJUserHandle, JUserHandle>('getCreatorUserHandle', '()Landroid/os/UserHandle;', []);
end;

class function TJPendingIntent.getForegroundService(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer): JPendingIntent;
begin
  Result := CallStaticObjectMethod<TJPendingIntent, JPendingIntent>('getForegroundService', '(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPendingIntent.getIntentSender: JIntentSender;
begin
  Result := CallObjectMethod<TJIntentSender, JIntentSender>('getIntentSender', '()Landroid/content/IntentSender;', []);
end;

class function TJPendingIntent.getService(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent; const AArg3: Integer): JPendingIntent;
begin
  Result := CallStaticObjectMethod<TJPendingIntent, JPendingIntent>('getService', '(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJPendingIntent.getTargetPackage: JString;
begin
  Result := CallObjectMethod<TJString, JString>('getTargetPackage', '()Ljava/lang/String;', []);
end;

function TJPendingIntent.hashCode: Integer;
begin
  Result := JavaType.CallIntMethod(ObjectID, 'hashCode', '()I', []);
end;

procedure TJPendingIntent.send(const AArg0: JContext; const AArg1: Integer; const AArg2: JIntent);
begin
  JavaType.CallVoidMethod(ObjectID, 'send', '(Landroid/content/Context;ILandroid/content/Intent;)V', [AArg0, AArg1, AArg2]);
end;

procedure TJPendingIntent.send(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'send', '(I)V', [AArg0]);
end;

procedure TJPendingIntent.send;
begin
  JavaType.CallVoidMethod(ObjectID, 'send', '()V', []);
end;

function TJPendingIntent.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJContextCompat }

class procedure TJContextCompat.LoadConstructors;
begin
end;

class procedure TJContextCompat.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('checkSelfPermission', '(Landroid/content/Context;Ljava/lang/String;)I');
  AddStaticMethod('createDeviceProtectedStorageContext', '(Landroid/content/Context;)Landroid/content/Context;');
  AddStaticMethod('getCodeCacheDir', '(Landroid/content/Context;)Ljava/io/File;');
  AddStaticMethod('getColor', '(Landroid/content/Context;I)I');
  AddStaticMethod('getColorStateList', '(Landroid/content/Context;I)Landroid/content/res/ColorStateList;');
  AddStaticMethod('getDataDir', '(Landroid/content/Context;)Ljava/io/File;');
  AddStaticMethod('getDrawable', '(Landroid/content/Context;I)Landroid/graphics/drawable/Drawable;');
  AddStaticMethod('getExternalCacheDirs', '(Landroid/content/Context;)[Ljava/io/File;');
  AddStaticMethod('getExternalFilesDirs', '(Landroid/content/Context;Ljava/lang/String;)[Ljava/io/File;');
  AddStaticMethod('getNoBackupFilesDir', '(Landroid/content/Context;)Ljava/io/File;');
  AddStaticMethod('getObbDirs', '(Landroid/content/Context;)[Ljava/io/File;');
  AddStaticMethod('isDeviceProtectedStorage', '(Landroid/content/Context;)Z');
  AddStaticMethod('startActivities', '(Landroid/content/Context;[Landroid/content/Intent;Landroid/os/Bundle;)Z');
  AddStaticMethod('startActivities', '(Landroid/content/Context;[Landroid/content/Intent;)Z');
  AddStaticMethod('startActivity', '(Landroid/content/Context;Landroid/content/Intent;Landroid/os/Bundle;)V');
  AddStaticMethod('startForegroundService', '(Landroid/content/Context;Landroid/content/Intent;)V');
end;

class function TJContextCompat.Wrap(const AObjectID: JNIObject): JContextCompat;
begin
  Result := Wrap<TJContextCompat, JContextCompat>(AObjectId);
end;

class function TJContextCompat.Wrap(const AObject: IJNIObject): JContextCompat;
begin
  Result := Wrap<TJContextCompat, JContextCompat>(AObject);
end;

class function TJContextCompat.checkSelfPermission(const AArg0: JContext; const AArg1: JString): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('checkSelfPermission', '(Landroid/content/Context;Ljava/lang/String;)I', [AArg0, AArg1]);
end;

class function TJContextCompat.createDeviceProtectedStorageContext(const AArg0: JContext): JContext;
begin
  Result := CallStaticObjectMethod<TJContext, JContext>('createDeviceProtectedStorageContext', '(Landroid/content/Context;)Landroid/content/Context;', [AArg0]);
end;

class function TJContextCompat.getCodeCacheDir(const AArg0: JContext): JFile;
begin
  Result := CallStaticObjectMethod<TJFile, JFile>('getCodeCacheDir', '(Landroid/content/Context;)Ljava/io/File;', [AArg0]);
end;

class function TJContextCompat.getColor(const AArg0: JContext; const AArg1: Integer): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('getColor', '(Landroid/content/Context;I)I', [AArg0, AArg1]);
end;

class function TJContextCompat.getColorStateList(const AArg0: JContext; const AArg1: Integer): JColorStateList;
begin
  Result := CallStaticObjectMethod<TJColorStateList, JColorStateList>('getColorStateList', '(Landroid/content/Context;I)Landroid/content/res/ColorStateList;', [AArg0, AArg1]);
end;

class function TJContextCompat.getDataDir(const AArg0: JContext): JFile;
begin
  Result := CallStaticObjectMethod<TJFile, JFile>('getDataDir', '(Landroid/content/Context;)Ljava/io/File;', [AArg0]);
end;

class function TJContextCompat.getDrawable(const AArg0: JContext; const AArg1: Integer): JDrawable;
begin
  Result := CallStaticObjectMethod<TJDrawable, JDrawable>('getDrawable', '(Landroid/content/Context;I)Landroid/graphics/drawable/Drawable;', [AArg0, AArg1]);
end;

class function TJContextCompat.getExternalCacheDirs(const AArg0: JContext): IJavaArray<JFile>;
begin
  Result := CallStaticArrayMethod<JFile>('getExternalCacheDirs', '(Landroid/content/Context;)[Ljava/io/File;', [AArg0]);
end;

class function TJContextCompat.getExternalFilesDirs(const AArg0: JContext; const AArg1: JString): IJavaArray<JFile>;
begin
  Result := CallStaticArrayMethod<JFile>('getExternalFilesDirs', '(Landroid/content/Context;Ljava/lang/String;)[Ljava/io/File;', [AArg0, AArg1]);
end;

class function TJContextCompat.getNoBackupFilesDir(const AArg0: JContext): JFile;
begin
  Result := CallStaticObjectMethod<TJFile, JFile>('getNoBackupFilesDir', '(Landroid/content/Context;)Ljava/io/File;', [AArg0]);
end;

class function TJContextCompat.getObbDirs(const AArg0: JContext): IJavaArray<JFile>;
begin
  Result := CallStaticArrayMethod<JFile>('getObbDirs', '(Landroid/content/Context;)[Ljava/io/File;', [AArg0]);
end;

class function TJContextCompat.isDeviceProtectedStorage(const AArg0: JContext): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('isDeviceProtectedStorage', '(Landroid/content/Context;)Z', [AArg0]);
end;

class function TJContextCompat.startActivities(const AArg0: JContext; const AArg1: IJavaArray<JIntent>; const AArg2: JBundle): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('startActivities', '(Landroid/content/Context;[Landroid/content/Intent;Landroid/os/Bundle;)Z', [AArg0, AArg1, AArg2]);
end;

class function TJContextCompat.startActivities(const AArg0: JContext; const AArg1: IJavaArray<JIntent>): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('startActivities', '(Landroid/content/Context;[Landroid/content/Intent;)Z', [AArg0, AArg1]);
end;

class procedure TJContextCompat.startActivity(const AArg0: JContext; const AArg1: JIntent; const AArg2: JBundle);
begin
  StaticJavaType[Self].CallStaticVoidMethod('startActivity', '(Landroid/content/Context;Landroid/content/Intent;Landroid/os/Bundle;)V', [AArg0, AArg1, AArg2]);
end;

class procedure TJContextCompat.startForegroundService(const AArg0: JContext; const AArg1: JIntent);
begin
  StaticJavaType[Self].CallStaticVoidMethod('startForegroundService', '(Landroid/content/Context;Landroid/content/Intent;)V', [AArg0, AArg1]);
end;

{ TJActivityCompat }

class procedure TJActivityCompat.LoadConstructors;
begin
end;

class procedure TJActivityCompat.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('finishAffinity', '(Landroid/app/Activity;)V');
  AddStaticMethod('finishAfterTransition', '(Landroid/app/Activity;)V');
  AddStaticMethod('getPermissionCompatDelegate', '()Landroid/support/v4/app/ActivityCompat$PermissionCompatDelegate;');
  AddStaticMethod('getReferrer', '(Landroid/app/Activity;)Landroid/net/Uri;');
  AddStaticMethod('invalidateOptionsMenu', '(Landroid/app/Activity;)Z');
  AddStaticMethod('postponeEnterTransition', '(Landroid/app/Activity;)V');
  AddStaticMethod('requestPermissions', '(Landroid/app/Activity;[Ljava/lang/String;I)V');
  AddStaticMethod('requireViewById', '(Landroid/app/Activity;I)Landroid/view/View;');
  AddStaticMethod('setPermissionCompatDelegate', '(Landroid/support/v4/app/ActivityCompat$PermissionCompatDelegate;)V');
  AddStaticMethod('shouldShowRequestPermissionRationale', '(Landroid/app/Activity;Ljava/lang/String;)Z');
  AddStaticMethod('startActivityForResult', '(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V');
  AddStaticMethod('startIntentSenderForResult', '(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V');
  AddStaticMethod('startPostponedEnterTransition', '(Landroid/app/Activity;)V');
end;

class function TJActivityCompat.Wrap(const AObjectID: JNIObject): JActivityCompat;
begin
  Result := Wrap<TJActivityCompat, JActivityCompat>(AObjectId);
end;

class function TJActivityCompat.Wrap(const AObject: IJNIObject): JActivityCompat;
begin
  Result := Wrap<TJActivityCompat, JActivityCompat>(AObject);
end;

class procedure TJActivityCompat.finishAffinity(const AArg0: JActivity);
begin
  StaticJavaType[Self].CallStaticVoidMethod('finishAffinity', '(Landroid/app/Activity;)V', [AArg0]);
end;

class procedure TJActivityCompat.finishAfterTransition(const AArg0: JActivity);
begin
  StaticJavaType[Self].CallStaticVoidMethod('finishAfterTransition', '(Landroid/app/Activity;)V', [AArg0]);
end;

class function TJActivityCompat.getPermissionCompatDelegate: JActivityCompat_PermissionCompatDelegate;
begin
  Result := CallStaticObjectMethod<TJActivityCompat_PermissionCompatDelegate, JActivityCompat_PermissionCompatDelegate>('getPermissionCompatDelegate', '()Landroid/support/v4/app/ActivityCompat$PermissionCompatDelegate;', []);
end;

class function TJActivityCompat.getReferrer(const AArg0: JActivity): JUri;
begin
  Result := CallStaticObjectMethod<TJUri, JUri>('getReferrer', '(Landroid/app/Activity;)Landroid/net/Uri;', [AArg0]);
end;

class function TJActivityCompat.invalidateOptionsMenu(const AArg0: JActivity): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('invalidateOptionsMenu', '(Landroid/app/Activity;)Z', [AArg0]);
end;

class procedure TJActivityCompat.postponeEnterTransition(const AArg0: JActivity);
begin
  StaticJavaType[Self].CallStaticVoidMethod('postponeEnterTransition', '(Landroid/app/Activity;)V', [AArg0]);
end;

class procedure TJActivityCompat.requestPermissions(const AArg0: JActivity; const AArg1: IJavaArray<JString>; const AArg2: Integer);
begin
  StaticJavaType[Self].CallStaticVoidMethod('requestPermissions', '(Landroid/app/Activity;[Ljava/lang/String;I)V', [AArg0, AArg1, AArg2]);
end;

class function TJActivityCompat.requireViewById(const AArg0: JActivity; const AArg1: Integer): JView;
begin
  Result := CallStaticObjectMethod<TJView, JView>('requireViewById', '(Landroid/app/Activity;I)Landroid/view/View;', [AArg0, AArg1]);
end;

class procedure TJActivityCompat.setPermissionCompatDelegate(const AArg0: JActivityCompat_PermissionCompatDelegate);
begin
  StaticJavaType[Self].CallStaticVoidMethod('setPermissionCompatDelegate', '(Landroid/support/v4/app/ActivityCompat$PermissionCompatDelegate;)V', [AArg0]);
end;

class function TJActivityCompat.shouldShowRequestPermissionRationale(const AArg0: JActivity; const AArg1: JString): Boolean;
begin
  Result := StaticJavaType[Self].CallStaticBooleanMethod('shouldShowRequestPermissionRationale', '(Landroid/app/Activity;Ljava/lang/String;)Z', [AArg0, AArg1]);
end;

class procedure TJActivityCompat.startActivityForResult(const AArg0: JActivity; const AArg1: JIntent; const AArg2: Integer; const AArg3: JBundle);
begin
  StaticJavaType[Self].CallStaticVoidMethod('startActivityForResult', '(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3]);
end;

class procedure TJActivityCompat.startIntentSenderForResult(const AArg0: JActivity; const AArg1: JIntentSender; const AArg2: Integer; const AArg3: JIntent; const AArg4: Integer; const AArg5: Integer; const AArg6: Integer; const AArg7: JBundle);
begin
  StaticJavaType[Self].CallStaticVoidMethod('startIntentSenderForResult', '(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
end;

class procedure TJActivityCompat.startPostponedEnterTransition(const AArg0: JActivity);
begin
  StaticJavaType[Self].CallStaticVoidMethod('startPostponedEnterTransition', '(Landroid/app/Activity;)V', [AArg0]);
end;

{ TJPermissionChecker }

class procedure TJPermissionChecker.LoadConstructors;
begin
end;

class procedure TJPermissionChecker.LoadMethods;
begin
  inherited;
  { methods }
  AddStaticMethod('checkCallingOrSelfPermission', '(Landroid/content/Context;Ljava/lang/String;)I');
  AddStaticMethod('checkCallingPermission', '(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)I');
  AddStaticMethod('checkPermission', '(Landroid/content/Context;Ljava/lang/String;IILjava/lang/String;)I');
  AddStaticMethod('checkSelfPermission', '(Landroid/content/Context;Ljava/lang/String;)I');
end;

class procedure TJPermissionChecker.LoadFields;
begin
  inherited;
  AddStaticField('PERMISSION_DENIED', 'I');
  AddStaticField('PERMISSION_DENIED_APP_OP', 'I');
  AddStaticField('PERMISSION_GRANTED', 'I');
end;

class function TJPermissionChecker.Wrap(const AObjectID: JNIObject): JPermissionChecker;
begin
  Result := Wrap<TJPermissionChecker, JPermissionChecker>(AObjectId);
end;

class function TJPermissionChecker.Wrap(const AObject: IJNIObject): JPermissionChecker;
begin
  Result := Wrap<TJPermissionChecker, JPermissionChecker>(AObject);
end;

class function TJPermissionChecker.PERMISSION_DENIED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERMISSION_DENIED');
end;

class function TJPermissionChecker.PERMISSION_DENIED_APP_OP: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERMISSION_DENIED_APP_OP');
end;

class function TJPermissionChecker.PERMISSION_GRANTED: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('PERMISSION_GRANTED');
end;

class function TJPermissionChecker.checkCallingOrSelfPermission(const AArg0: JContext; const AArg1: JString): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('checkCallingOrSelfPermission', '(Landroid/content/Context;Ljava/lang/String;)I', [AArg0, AArg1]);
end;

class function TJPermissionChecker.checkCallingPermission(const AArg0: JContext; const AArg1: JString; const AArg2: JString): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('checkCallingPermission', '(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)I', [AArg0, AArg1, AArg2]);
end;

class function TJPermissionChecker.checkPermission(const AArg0: JContext; const AArg1: JString; const AArg2: Integer; const AArg3: Integer; const AArg4: JString): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('checkPermission', '(Landroid/content/Context;Ljava/lang/String;IILjava/lang/String;)I', [AArg0, AArg1, AArg2, AArg3, AArg4]);
end;

class function TJPermissionChecker.checkSelfPermission(const AArg0: JContext; const AArg1: JString): Integer;
begin
  Result := StaticJavaType[Self].CallStaticIntMethod('checkSelfPermission', '(Landroid/content/Context;Ljava/lang/String;)I', [AArg0, AArg1]);
end;

{ TJActivityCompat_OnRequestPermissionsResultCallback }

class procedure TJActivityCompat_OnRequestPermissionsResultCallback.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onRequestPermissionsResult', '(I[Ljava/lang/String;[I)V');
end;

class function TJActivityCompat_OnRequestPermissionsResultCallback.Wrap(const AObjectID: JNIObject): JActivityCompat_OnRequestPermissionsResultCallback;
begin
  Result := Wrap<TJActivityCompat_OnRequestPermissionsResultCallback, JActivityCompat_OnRequestPermissionsResultCallback>(AObjectId);
end;

class function TJActivityCompat_OnRequestPermissionsResultCallback.Wrap(const AObject: IJNIObject): JActivityCompat_OnRequestPermissionsResultCallback;
begin
  Result := Wrap<TJActivityCompat_OnRequestPermissionsResultCallback, JActivityCompat_OnRequestPermissionsResultCallback>(AObject);
end;

procedure TJActivityCompat_OnRequestPermissionsResultCallback.onRequestPermissionsResult(const AArg0: Integer; const AArg1: IJavaArray<JString>; const AArg2: IJavaArray<Integer>);
begin
  JavaType.CallVoidMethod(ObjectID, 'onRequestPermissionsResult', '(I[Ljava/lang/String;[I)V', [AArg0, AArg1, AArg2]);
end;

{ TJActivityCompat_PermissionCompatDelegate }

class procedure TJActivityCompat_PermissionCompatDelegate.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onActivityResult', '(Landroid/app/Activity;IILandroid/content/Intent;)Z');
  AddMethod('requestPermissions', '(Landroid/app/Activity;[Ljava/lang/String;I)Z');
end;

class function TJActivityCompat_PermissionCompatDelegate.Wrap(const AObjectID: JNIObject): JActivityCompat_PermissionCompatDelegate;
begin
  Result := Wrap<TJActivityCompat_PermissionCompatDelegate, JActivityCompat_PermissionCompatDelegate>(AObjectId);
end;

class function TJActivityCompat_PermissionCompatDelegate.Wrap(const AObject: IJNIObject): JActivityCompat_PermissionCompatDelegate;
begin
  Result := Wrap<TJActivityCompat_PermissionCompatDelegate, JActivityCompat_PermissionCompatDelegate>(AObject);
end;

function TJActivityCompat_PermissionCompatDelegate.onActivityResult(const AArg0: JActivity; const AArg1: Integer; const AArg2: Integer; const AArg3: JIntent): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'onActivityResult', '(Landroid/app/Activity;IILandroid/content/Intent;)Z', [AArg0, AArg1, AArg2, AArg3]);
end;

function TJActivityCompat_PermissionCompatDelegate.requestPermissions(const AArg0: JActivity; const AArg1: IJavaArray<JString>; const AArg2: Integer): Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'requestPermissions', '(Landroid/app/Activity;[Ljava/lang/String;I)Z', [AArg0, AArg1, AArg2]);
end;

{ TJClipboardManager }

class procedure TJClipboardManager.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJClipboardManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getText', '()Ljava/lang/CharSequence;');
  AddMethod('hasText', '()Z');
  AddMethod('setText', '(Ljava/lang/CharSequence;)V');
end;

class function TJClipboardManager.Wrap(const AObjectID: JNIObject): JClipboardManager;
begin
  Result := Wrap<TJClipboardManager, JClipboardManager>(AObjectId);
end;

class function TJClipboardManager.Wrap(const AObject: IJNIObject): JClipboardManager;
begin
  Result := Wrap<TJClipboardManager, JClipboardManager>(AObject);
end;

class function TJClipboardManager.Create: JClipboardManager;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

function TJClipboardManager.getText: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getText', '()Ljava/lang/CharSequence;', []);
end;

function TJClipboardManager.hasText: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasText', '()Z', []);
end;

procedure TJClipboardManager.setText(const AArg0: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'setText', '(Ljava/lang/CharSequence;)V', [AArg0]);
end;

{ TJcontent_ClipboardManager }

class procedure TJcontent_ClipboardManager.LoadConstructors;
begin
end;

class procedure TJcontent_ClipboardManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('addPrimaryClipChangedListener', '(Landroid/content/ClipboardManager$OnPrimaryClipChangedListener;)V');
  AddMethod('clearPrimaryClip', '()V');
  AddMethod('getPrimaryClip', '()Landroid/content/ClipData;');
  AddMethod('getPrimaryClipDescription', '()Landroid/content/ClipDescription;');
  AddMethod('getText', '()Ljava/lang/CharSequence;');
  AddMethod('hasPrimaryClip', '()Z');
  AddMethod('hasText', '()Z');
  AddMethod('removePrimaryClipChangedListener', '(Landroid/content/ClipboardManager$OnPrimaryClipChangedListener;)V');
  AddMethod('setPrimaryClip', '(Landroid/content/ClipData;)V');
  AddMethod('setText', '(Ljava/lang/CharSequence;)V');
end;

class function TJcontent_ClipboardManager.Wrap(const AObjectID: JNIObject): Jcontent_ClipboardManager;
begin
  Result := Wrap<TJcontent_ClipboardManager, Jcontent_ClipboardManager>(AObjectId);
end;

class function TJcontent_ClipboardManager.Wrap(const AObject: IJNIObject): Jcontent_ClipboardManager;
begin
  Result := Wrap<TJcontent_ClipboardManager, Jcontent_ClipboardManager>(AObject);
end;

procedure TJcontent_ClipboardManager.addPrimaryClipChangedListener(const AArg0: JClipboardManager_OnPrimaryClipChangedListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'addPrimaryClipChangedListener', '(Landroid/content/ClipboardManager$OnPrimaryClipChangedListener;)V', [AArg0]);
end;

procedure TJcontent_ClipboardManager.clearPrimaryClip;
begin
  JavaType.CallVoidMethod(ObjectID, 'clearPrimaryClip', '()V', []);
end;

function TJcontent_ClipboardManager.getPrimaryClip: JClipData;
begin
  Result := CallObjectMethod<TJClipData, JClipData>('getPrimaryClip', '()Landroid/content/ClipData;', []);
end;

function TJcontent_ClipboardManager.getPrimaryClipDescription: JClipDescription;
begin
  Result := CallObjectMethod<TJClipDescription, JClipDescription>('getPrimaryClipDescription', '()Landroid/content/ClipDescription;', []);
end;

function TJcontent_ClipboardManager.getText: JCharSequence;
begin
  Result := CallObjectMethod<TJCharSequence, JCharSequence>('getText', '()Ljava/lang/CharSequence;', []);
end;

function TJcontent_ClipboardManager.hasPrimaryClip: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasPrimaryClip', '()Z', []);
end;

function TJcontent_ClipboardManager.hasText: Boolean;
begin
  Result := JavaType.CallBooleanMethod(ObjectID, 'hasText', '()Z', []);
end;

procedure TJcontent_ClipboardManager.removePrimaryClipChangedListener(const AArg0: JClipboardManager_OnPrimaryClipChangedListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'removePrimaryClipChangedListener', '(Landroid/content/ClipboardManager$OnPrimaryClipChangedListener;)V', [AArg0]);
end;

procedure TJcontent_ClipboardManager.setPrimaryClip(const AArg0: JClipData);
begin
  JavaType.CallVoidMethod(ObjectID, 'setPrimaryClip', '(Landroid/content/ClipData;)V', [AArg0]);
end;

procedure TJcontent_ClipboardManager.setText(const AArg0: JCharSequence);
begin
  JavaType.CallVoidMethod(ObjectID, 'setText', '(Ljava/lang/CharSequence;)V', [AArg0]);
end;

{ TJDisplayManager }

class procedure TJDisplayManager.LoadConstructors;
begin
end;

class procedure TJDisplayManager.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('createVirtualDisplay', '(Ljava/lang/String;IIILandroid/view/Surface;ILandroid/hardware/display/VirtualDisplay$Callback;Landroid/os/Handler;)Landroid/hardware/display/VirtualDisplay;');
  AddMethod('createVirtualDisplay', '(Ljava/lang/String;IIILandroid/view/Surface;I)Landroid/hardware/display/VirtualDisplay;');
  AddMethod('getDisplay', '(I)Landroid/view/Display;');
  AddMethod('getDisplays', '(Ljava/lang/String;)[Landroid/view/Display;');
  AddMethod('getDisplays', '()[Landroid/view/Display;');
  AddMethod('registerDisplayListener', '(Landroid/hardware/display/DisplayManager$DisplayListener;Landroid/os/Handler;)V');
  AddMethod('unregisterDisplayListener', '(Landroid/hardware/display/DisplayManager$DisplayListener;)V');
end;

class procedure TJDisplayManager.LoadFields;
begin
  inherited;
  AddStaticField('DISPLAY_CATEGORY_PRESENTATION', 'Ljava/lang/String;');
  AddStaticField('VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR', 'I');
  AddStaticField('VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY', 'I');
  AddStaticField('VIRTUAL_DISPLAY_FLAG_PRESENTATION', 'I');
  AddStaticField('VIRTUAL_DISPLAY_FLAG_PUBLIC', 'I');
  AddStaticField('VIRTUAL_DISPLAY_FLAG_SECURE', 'I');
end;

class function TJDisplayManager.Wrap(const AObjectID: JNIObject): JDisplayManager;
begin
  Result := Wrap<TJDisplayManager, JDisplayManager>(AObjectId);
end;

class function TJDisplayManager.Wrap(const AObject: IJNIObject): JDisplayManager;
begin
  Result := Wrap<TJDisplayManager, JDisplayManager>(AObject);
end;

class function TJDisplayManager.DISPLAY_CATEGORY_PRESENTATION: JString;
begin
  Result := GetStaticObjectField<TJString, JString>('DISPLAY_CATEGORY_PRESENTATION');
end;

class function TJDisplayManager.VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR');
end;

class function TJDisplayManager.VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY');
end;

class function TJDisplayManager.VIRTUAL_DISPLAY_FLAG_PRESENTATION: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VIRTUAL_DISPLAY_FLAG_PRESENTATION');
end;

class function TJDisplayManager.VIRTUAL_DISPLAY_FLAG_PUBLIC: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VIRTUAL_DISPLAY_FLAG_PUBLIC');
end;

class function TJDisplayManager.VIRTUAL_DISPLAY_FLAG_SECURE: Integer;
begin
  Result := StaticJavaType[Self].GetStaticIntField('VIRTUAL_DISPLAY_FLAG_SECURE');
end;

function TJDisplayManager.createVirtualDisplay(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JSurface; const AArg5: Integer; const AArg6: JVirtualDisplay_Callback; const AArg7: JHandler): JVirtualDisplay;
begin
  Result := CallObjectMethod<TJVirtualDisplay, JVirtualDisplay>('createVirtualDisplay', '(Ljava/lang/String;IIILandroid/view/Surface;ILandroid/hardware/display/VirtualDisplay$Callback;Landroid/os/Handler;)Landroid/hardware/display/VirtualDisplay;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5, AArg6, AArg7]);
end;

function TJDisplayManager.createVirtualDisplay(const AArg0: JString; const AArg1: Integer; const AArg2: Integer; const AArg3: Integer; const AArg4: JSurface; const AArg5: Integer): JVirtualDisplay;
begin
  Result := CallObjectMethod<TJVirtualDisplay, JVirtualDisplay>('createVirtualDisplay', '(Ljava/lang/String;IIILandroid/view/Surface;I)Landroid/hardware/display/VirtualDisplay;', [AArg0, AArg1, AArg2, AArg3, AArg4, AArg5]);
end;

function TJDisplayManager.getDisplay(const AArg0: Integer): JDisplay;
begin
  Result := CallObjectMethod<TJDisplay, JDisplay>('getDisplay', '(I)Landroid/view/Display;', [AArg0]);
end;

function TJDisplayManager.getDisplays(const AArg0: JString): IJavaArray<JDisplay>;
begin
  Result := CallArrayMethod<TJDisplay, JDisplay>('getDisplays', '(Ljava/lang/String;)[Landroid/view/Display;', [AArg0]);
end;

function TJDisplayManager.getDisplays: IJavaArray<JDisplay>;
begin
  Result := CallArrayMethod<TJDisplay, JDisplay>('getDisplays', '()[Landroid/view/Display;', []);
end;

procedure TJDisplayManager.registerDisplayListener(const AArg0: JDisplayManager_DisplayListener; const AArg1: JHandler);
begin
  JavaType.CallVoidMethod(ObjectID, 'registerDisplayListener', '(Landroid/hardware/display/DisplayManager$DisplayListener;Landroid/os/Handler;)V', [AArg0, AArg1]);
end;

procedure TJDisplayManager.unregisterDisplayListener(const AArg0: JDisplayManager_DisplayListener);
begin
  JavaType.CallVoidMethod(ObjectID, 'unregisterDisplayListener', '(Landroid/hardware/display/DisplayManager$DisplayListener;)V', [AArg0]);
end;

{ TJDisplayManager_DisplayListener }

class procedure TJDisplayManager_DisplayListener.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onDisplayAdded', '(I)V');
  AddMethod('onDisplayChanged', '(I)V');
  AddMethod('onDisplayRemoved', '(I)V');
end;

class function TJDisplayManager_DisplayListener.Wrap(const AObjectID: JNIObject): JDisplayManager_DisplayListener;
begin
  Result := Wrap<TJDisplayManager_DisplayListener, JDisplayManager_DisplayListener>(AObjectId);
end;

class function TJDisplayManager_DisplayListener.Wrap(const AObject: IJNIObject): JDisplayManager_DisplayListener;
begin
  Result := Wrap<TJDisplayManager_DisplayListener, JDisplayManager_DisplayListener>(AObject);
end;

procedure TJDisplayManager_DisplayListener.onDisplayAdded(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onDisplayAdded', '(I)V', [AArg0]);
end;

procedure TJDisplayManager_DisplayListener.onDisplayChanged(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onDisplayChanged', '(I)V', [AArg0]);
end;

procedure TJDisplayManager_DisplayListener.onDisplayRemoved(const AArg0: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'onDisplayRemoved', '(I)V', [AArg0]);
end;

{ TJVirtualDisplay }

class procedure TJVirtualDisplay.LoadConstructors;
begin
end;

class procedure TJVirtualDisplay.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('getDisplay', '()Landroid/view/Display;');
  AddMethod('getSurface', '()Landroid/view/Surface;');
  AddMethod('release', '()V');
  AddMethod('resize', '(III)V');
  AddMethod('setSurface', '(Landroid/view/Surface;)V');
  AddMethod('toString', '()Ljava/lang/String;');
end;

class function TJVirtualDisplay.Wrap(const AObjectID: JNIObject): JVirtualDisplay;
begin
  Result := Wrap<TJVirtualDisplay, JVirtualDisplay>(AObjectId);
end;

class function TJVirtualDisplay.Wrap(const AObject: IJNIObject): JVirtualDisplay;
begin
  Result := Wrap<TJVirtualDisplay, JVirtualDisplay>(AObject);
end;

function TJVirtualDisplay.getDisplay: JDisplay;
begin
  Result := CallObjectMethod<TJDisplay, JDisplay>('getDisplay', '()Landroid/view/Display;', []);
end;

function TJVirtualDisplay.getSurface: JSurface;
begin
  Result := CallObjectMethod<TJSurface, JSurface>('getSurface', '()Landroid/view/Surface;', []);
end;

procedure TJVirtualDisplay.release;
begin
  JavaType.CallVoidMethod(ObjectID, 'release', '()V', []);
end;

procedure TJVirtualDisplay.resize(const AArg0: Integer; const AArg1: Integer; const AArg2: Integer);
begin
  JavaType.CallVoidMethod(ObjectID, 'resize', '(III)V', [AArg0, AArg1, AArg2]);
end;

procedure TJVirtualDisplay.setSurface(const AArg0: JSurface);
begin
  JavaType.CallVoidMethod(ObjectID, 'setSurface', '(Landroid/view/Surface;)V', [AArg0]);
end;

function TJVirtualDisplay.toString: JString;
begin
  Result := CallObjectMethod<TJString, JString>('toString', '()Ljava/lang/String;', []);
end;

{ TJVirtualDisplay_Callback }

class procedure TJVirtualDisplay_Callback.LoadConstructors;
begin
  { constructors }
  AddMethod('<init>', '()V');
end;

class procedure TJVirtualDisplay_Callback.LoadMethods;
begin
  inherited;
  { methods }
  AddMethod('onPaused', '()V');
  AddMethod('onResumed', '()V');
  AddMethod('onStopped', '()V');
end;

class function TJVirtualDisplay_Callback.Wrap(const AObjectID: JNIObject): JVirtualDisplay_Callback;
begin
  Result := Wrap<TJVirtualDisplay_Callback, JVirtualDisplay_Callback>(AObjectId);
end;

class function TJVirtualDisplay_Callback.Wrap(const AObject: IJNIObject): JVirtualDisplay_Callback;
begin
  Result := Wrap<TJVirtualDisplay_Callback, JVirtualDisplay_Callback>(AObject);
end;

class function TJVirtualDisplay_Callback.Create: JVirtualDisplay_Callback;
begin
  var O := CreateForWrap;
  O.NewObject('()V', []);
  Result := O;
end;

procedure TJVirtualDisplay_Callback.onPaused;
begin
  JavaType.CallVoidMethod(ObjectID, 'onPaused', '()V', []);
end;

procedure TJVirtualDisplay_Callback.onResumed;
begin
  JavaType.CallVoidMethod(ObjectID, 'onResumed', '()V', []);
end;

procedure TJVirtualDisplay_Callback.onStopped;
begin
  JavaType.CallVoidMethod(ObjectID, 'onStopped', '()V', []);
end;

initialization
  TJavaTypesManager.RegisterJavaType(TJBaseBundle, TypeInfo(IJavaArray<JBaseBundle>), TJavaArray<JBaseBundle>);
  TJavaTypesManager.RegisterJavaType(TJBundle, TypeInfo(IJavaArray<JBundle>), TJavaArray<JBundle>);
  TJavaTypesManager.RegisterJavaType(TJPersistableBundle, TypeInfo(IJavaArray<JPersistableBundle>), TJavaArray<JPersistableBundle>);
  TJavaTypesManager.RegisterJavaType(TJBuild, TypeInfo(IJavaArray<JBuild>), TJavaArray<JBuild>);
  TJavaTypesManager.RegisterJavaType(TJBuild_VERSION, TypeInfo(IJavaArray<JBuild_VERSION>), TJavaArray<JBuild_VERSION>);
  TJavaTypesManager.RegisterJavaType(TJBuild_VERSION_CODES, TypeInfo(IJavaArray<JBuild_VERSION_CODES>), TJavaArray<JBuild_VERSION_CODES>);
  TJavaTypesManager.RegisterJavaType(TJCancellationSignal, TypeInfo(IJavaArray<JCancellationSignal>), TJavaArray<JCancellationSignal>);
  TJavaTypesManager.RegisterJavaType(TJCancellationSignal_OnCancelListener, TypeInfo(IJavaArray<JCancellationSignal_OnCancelListener>), TJavaArray<JCancellationSignal_OnCancelListener>);
  TJavaTypesManager.RegisterJavaType(TJHandler, TypeInfo(IJavaArray<JHandler>), TJavaArray<JHandler>);
  TJavaTypesManager.RegisterJavaType(TJHandlerThread, TypeInfo(IJavaArray<JHandlerThread>), TJavaArray<JHandlerThread>);
  TJavaTypesManager.RegisterJavaType(TJIBinder, TypeInfo(IJavaArray<JIBinder>), TJavaArray<JIBinder>);
  TJavaTypesManager.RegisterJavaType(TJLooper, TypeInfo(IJavaArray<JLooper>), TJavaArray<JLooper>);
  TJavaTypesManager.RegisterJavaType(TJMessageQueue, TypeInfo(IJavaArray<JMessageQueue>), TJavaArray<JMessageQueue>);
  TJavaTypesManager.RegisterJavaType(TJMessageQueue_IdleHandler, TypeInfo(IJavaArray<JMessageQueue_IdleHandler>), TJavaArray<JMessageQueue_IdleHandler>);
  TJavaTypesManager.RegisterJavaType(TJMessageQueue_OnFileDescriptorEventListener, TypeInfo(IJavaArray<JMessageQueue_OnFileDescriptorEventListener>), TJavaArray<JMessageQueue_OnFileDescriptorEventListener>);
  TJavaTypesManager.RegisterJavaType(TJParcelFileDescriptor, TypeInfo(IJavaArray<JParcelFileDescriptor>), TJavaArray<JParcelFileDescriptor>);
  TJavaTypesManager.RegisterJavaType(TJPatternMatcher, TypeInfo(IJavaArray<JPatternMatcher>), TJavaArray<JPatternMatcher>);
  TJavaTypesManager.RegisterJavaType(TJPathPermission, TypeInfo(IJavaArray<JPathPermission>), TJavaArray<JPathPermission>);
  TJavaTypesManager.RegisterJavaType(TJUserHandle, TypeInfo(IJavaArray<JUserHandle>), TJavaArray<JUserHandle>);
  TJavaTypesManager.RegisterJavaType(TJBroadcastReceiver, TypeInfo(IJavaArray<JBroadcastReceiver>), TJavaArray<JBroadcastReceiver>);
  TJavaTypesManager.RegisterJavaType(TJBroadcastReceiver_PendingResult, TypeInfo(IJavaArray<JBroadcastReceiver_PendingResult>), TJavaArray<JBroadcastReceiver_PendingResult>);
  TJavaTypesManager.RegisterJavaType(TJClipData, TypeInfo(IJavaArray<JClipData>), TJavaArray<JClipData>);
  TJavaTypesManager.RegisterJavaType(TJClipData_Item, TypeInfo(IJavaArray<JClipData_Item>), TJavaArray<JClipData_Item>);
  TJavaTypesManager.RegisterJavaType(TJClipDescription, TypeInfo(IJavaArray<JClipDescription>), TJavaArray<JClipDescription>);
  TJavaTypesManager.RegisterJavaType(TJClipboardManager_OnPrimaryClipChangedListener, TypeInfo(IJavaArray<JClipboardManager_OnPrimaryClipChangedListener>), TJavaArray<JClipboardManager_OnPrimaryClipChangedListener>);
  TJavaTypesManager.RegisterJavaType(TJComponentName, TypeInfo(IJavaArray<JComponentName>), TJavaArray<JComponentName>);
  TJavaTypesManager.RegisterJavaType(TJContentProvider, TypeInfo(IJavaArray<JContentProvider>), TJavaArray<JContentProvider>);
  TJavaTypesManager.RegisterJavaType(TJFileProvider, TypeInfo(IJavaArray<JFileProvider>), TJavaArray<JFileProvider>);
  TJavaTypesManager.RegisterJavaType(TJContentProviderResult, TypeInfo(IJavaArray<JContentProviderResult>), TJavaArray<JContentProviderResult>);
  TJavaTypesManager.RegisterJavaType(TJContentResolver, TypeInfo(IJavaArray<JContentResolver>), TJavaArray<JContentResolver>);
  TJavaTypesManager.RegisterJavaType(TJContentUris, TypeInfo(IJavaArray<JContentUris>), TJavaArray<JContentUris>);
  TJavaTypesManager.RegisterJavaType(TJContentValues, TypeInfo(IJavaArray<JContentValues>), TJavaArray<JContentValues>);
  TJavaTypesManager.RegisterJavaType(TJContext, TypeInfo(IJavaArray<JContext>), TJavaArray<JContext>);
  TJavaTypesManager.RegisterJavaType(TJContextWrapper, TypeInfo(IJavaArray<JContextWrapper>), TJavaArray<JContextWrapper>);
  TJavaTypesManager.RegisterJavaType(TJContextThemeWrapper, TypeInfo(IJavaArray<JContextThemeWrapper>), TJavaArray<JContextThemeWrapper>);
  TJavaTypesManager.RegisterJavaType(TJActivity, TypeInfo(IJavaArray<JActivity>), TJavaArray<JActivity>);
  TJavaTypesManager.RegisterJavaType(TJService, TypeInfo(IJavaArray<JService>), TJavaArray<JService>);
  TJavaTypesManager.RegisterJavaType(TJIntentService, TypeInfo(IJavaArray<JIntentService>), TJavaArray<JIntentService>);
  TJavaTypesManager.RegisterJavaType(TJIntent, TypeInfo(IJavaArray<JIntent>), TJavaArray<JIntent>);
  TJavaTypesManager.RegisterJavaType(TJIntentFilter, TypeInfo(IJavaArray<JIntentFilter>), TJavaArray<JIntentFilter>);
  TJavaTypesManager.RegisterJavaType(TJIntentFilter_AuthorityEntry, TypeInfo(IJavaArray<JIntentFilter_AuthorityEntry>), TJavaArray<JIntentFilter_AuthorityEntry>);
  TJavaTypesManager.RegisterJavaType(TJIntentSender, TypeInfo(IJavaArray<JIntentSender>), TJavaArray<JIntentSender>);
  TJavaTypesManager.RegisterJavaType(TJSharedPreferences, TypeInfo(IJavaArray<JSharedPreferences>), TJavaArray<JSharedPreferences>);
  TJavaTypesManager.RegisterJavaType(TJSharedPreferences_Editor, TypeInfo(IJavaArray<JSharedPreferences_Editor>), TJavaArray<JSharedPreferences_Editor>);
  TJavaTypesManager.RegisterJavaType(TJSharedPreferences_OnSharedPreferenceChangeListener, TypeInfo(IJavaArray<JSharedPreferences_OnSharedPreferenceChangeListener>), TJavaArray<JSharedPreferences_OnSharedPreferenceChangeListener>);
  TJavaTypesManager.RegisterJavaType(TJPackageInfo, TypeInfo(IJavaArray<JPackageInfo>), TJavaArray<JPackageInfo>);
  TJavaTypesManager.RegisterJavaType(TJPackageItemInfo, TypeInfo(IJavaArray<JPackageItemInfo>), TJavaArray<JPackageItemInfo>);
  TJavaTypesManager.RegisterJavaType(TJApplicationInfo, TypeInfo(IJavaArray<JApplicationInfo>), TJavaArray<JApplicationInfo>);
  TJavaTypesManager.RegisterJavaType(TJComponentInfo, TypeInfo(IJavaArray<JComponentInfo>), TJavaArray<JComponentInfo>);
  TJavaTypesManager.RegisterJavaType(TJActivityInfo, TypeInfo(IJavaArray<JActivityInfo>), TJavaArray<JActivityInfo>);
  TJavaTypesManager.RegisterJavaType(TJPackageManager, TypeInfo(IJavaArray<JPackageManager>), TJavaArray<JPackageManager>);
  TJavaTypesManager.RegisterJavaType(TJAssetFileDescriptor, TypeInfo(IJavaArray<JAssetFileDescriptor>), TJavaArray<JAssetFileDescriptor>);
  TJavaTypesManager.RegisterJavaType(TJAssetManager, TypeInfo(IJavaArray<JAssetManager>), TJavaArray<JAssetManager>);
  TJavaTypesManager.RegisterJavaType(TJColorStateList, TypeInfo(IJavaArray<JColorStateList>), TJavaArray<JColorStateList>);
  TJavaTypesManager.RegisterJavaType(TJConfiguration, TypeInfo(IJavaArray<JConfiguration>), TJavaArray<JConfiguration>);
  TJavaTypesManager.RegisterJavaType(TJResources, TypeInfo(IJavaArray<JResources>), TJavaArray<JResources>);
  TJavaTypesManager.RegisterJavaType(TJResources_Theme, TypeInfo(IJavaArray<JResources_Theme>), TJavaArray<JResources_Theme>);
  TJavaTypesManager.RegisterJavaType(TJAbstractCursor, TypeInfo(IJavaArray<JAbstractCursor>), TJavaArray<JAbstractCursor>);
  TJavaTypesManager.RegisterJavaType(TJMatrixCursor, TypeInfo(IJavaArray<JMatrixCursor>), TJavaArray<JMatrixCursor>);
  TJavaTypesManager.RegisterJavaType(TJContentObserver, TypeInfo(IJavaArray<JContentObserver>), TJavaArray<JContentObserver>);
  TJavaTypesManager.RegisterJavaType(TJCursor, TypeInfo(IJavaArray<JCursor>), TJavaArray<JCursor>);
  TJavaTypesManager.RegisterJavaType(TJDataSetObserver, TypeInfo(IJavaArray<JDataSetObserver>), TJavaArray<JDataSetObserver>);
  TJavaTypesManager.RegisterJavaType(TJObservable, TypeInfo(IJavaArray<JObservable>), TJavaArray<JObservable>);
  TJavaTypesManager.RegisterJavaType(TJDataSetObservable, TypeInfo(IJavaArray<JDataSetObservable>), TJavaArray<JDataSetObservable>);
  TJavaTypesManager.RegisterJavaType(TJBitmap, TypeInfo(IJavaArray<JBitmap>), TJavaArray<JBitmap>);
  TJavaTypesManager.RegisterJavaType(TJBitmap_CompressFormat, TypeInfo(IJavaArray<JBitmap_CompressFormat>), TJavaArray<JBitmap_CompressFormat>);
  TJavaTypesManager.RegisterJavaType(TJBitmap_Config, TypeInfo(IJavaArray<JBitmap_Config>), TJavaArray<JBitmap_Config>);
  TJavaTypesManager.RegisterJavaType(TJBitmapFactory, TypeInfo(IJavaArray<JBitmapFactory>), TJavaArray<JBitmapFactory>);
  TJavaTypesManager.RegisterJavaType(TJBitmapFactory_Options, TypeInfo(IJavaArray<JBitmapFactory_Options>), TJavaArray<JBitmapFactory_Options>);
  TJavaTypesManager.RegisterJavaType(TJCanvas, TypeInfo(IJavaArray<JCanvas>), TJavaArray<JCanvas>);
  TJavaTypesManager.RegisterJavaType(TJColor, TypeInfo(IJavaArray<JColor>), TJavaArray<JColor>);
  TJavaTypesManager.RegisterJavaType(TJColorFilter, TypeInfo(IJavaArray<JColorFilter>), TJavaArray<JColorFilter>);
  TJavaTypesManager.RegisterJavaType(TJPorterDuffColorFilter, TypeInfo(IJavaArray<JPorterDuffColorFilter>), TJavaArray<JPorterDuffColorFilter>);
  TJavaTypesManager.RegisterJavaType(TJImageFormat, TypeInfo(IJavaArray<JImageFormat>), TJavaArray<JImageFormat>);
  TJavaTypesManager.RegisterJavaType(TJMatrix, TypeInfo(IJavaArray<JMatrix>), TJavaArray<JMatrix>);
  TJavaTypesManager.RegisterJavaType(TJMatrix_ScaleToFit, TypeInfo(IJavaArray<JMatrix_ScaleToFit>), TJavaArray<JMatrix_ScaleToFit>);
  TJavaTypesManager.RegisterJavaType(TJOutline, TypeInfo(IJavaArray<JOutline>), TJavaArray<JOutline>);
  TJavaTypesManager.RegisterJavaType(TJPaint, TypeInfo(IJavaArray<JPaint>), TJavaArray<JPaint>);
  TJavaTypesManager.RegisterJavaType(TJPaint_Cap, TypeInfo(IJavaArray<JPaint_Cap>), TJavaArray<JPaint_Cap>);
  TJavaTypesManager.RegisterJavaType(TJPaint_Join, TypeInfo(IJavaArray<JPaint_Join>), TJavaArray<JPaint_Join>);
  TJavaTypesManager.RegisterJavaType(TJPaint_Style, TypeInfo(IJavaArray<JPaint_Style>), TJavaArray<JPaint_Style>);
  TJavaTypesManager.RegisterJavaType(TJPath, TypeInfo(IJavaArray<JPath>), TJavaArray<JPath>);
  TJavaTypesManager.RegisterJavaType(TJPath_FillType, TypeInfo(IJavaArray<JPath_FillType>), TJavaArray<JPath_FillType>);
  TJavaTypesManager.RegisterJavaType(TJPathEffect, TypeInfo(IJavaArray<JPathEffect>), TJavaArray<JPathEffect>);
  TJavaTypesManager.RegisterJavaType(TJDashPathEffect, TypeInfo(IJavaArray<JDashPathEffect>), TJavaArray<JDashPathEffect>);
  TJavaTypesManager.RegisterJavaType(TJPoint, TypeInfo(IJavaArray<JPoint>), TJavaArray<JPoint>);
  TJavaTypesManager.RegisterJavaType(TJPointF, TypeInfo(IJavaArray<JPointF>), TJavaArray<JPointF>);
  TJavaTypesManager.RegisterJavaType(TJPorterDuff, TypeInfo(IJavaArray<JPorterDuff>), TJavaArray<JPorterDuff>);
  TJavaTypesManager.RegisterJavaType(TJPorterDuff_Mode, TypeInfo(IJavaArray<JPorterDuff_Mode>), TJavaArray<JPorterDuff_Mode>);
  TJavaTypesManager.RegisterJavaType(TJRect, TypeInfo(IJavaArray<JRect>), TJavaArray<JRect>);
  TJavaTypesManager.RegisterJavaType(TJRectF, TypeInfo(IJavaArray<JRectF>), TJavaArray<JRectF>);
  TJavaTypesManager.RegisterJavaType(TJShader, TypeInfo(IJavaArray<JShader>), TJavaArray<JShader>);
  TJavaTypesManager.RegisterJavaType(TJLinearGradient, TypeInfo(IJavaArray<JLinearGradient>), TJavaArray<JLinearGradient>);
  TJavaTypesManager.RegisterJavaType(TJRadialGradient, TypeInfo(IJavaArray<JRadialGradient>), TJavaArray<JRadialGradient>);
  TJavaTypesManager.RegisterJavaType(TJShader_TileMode, TypeInfo(IJavaArray<JShader_TileMode>), TJavaArray<JShader_TileMode>);
  TJavaTypesManager.RegisterJavaType(TJSurfaceTexture, TypeInfo(IJavaArray<JSurfaceTexture>), TJavaArray<JSurfaceTexture>);
  TJavaTypesManager.RegisterJavaType(TJTypeface, TypeInfo(IJavaArray<JTypeface>), TJavaArray<JTypeface>);
  TJavaTypesManager.RegisterJavaType(TJXfermode, TypeInfo(IJavaArray<JXfermode>), TJavaArray<JXfermode>);
  TJavaTypesManager.RegisterJavaType(TJPorterDuffXfermode, TypeInfo(IJavaArray<JPorterDuffXfermode>), TJavaArray<JPorterDuffXfermode>);
  TJavaTypesManager.RegisterJavaType(TJDrawable, TypeInfo(IJavaArray<JDrawable>), TJavaArray<JDrawable>);
  TJavaTypesManager.RegisterJavaType(TJBitmapDrawable, TypeInfo(IJavaArray<JBitmapDrawable>), TJavaArray<JBitmapDrawable>);
  TJavaTypesManager.RegisterJavaType(TJColorDrawable, TypeInfo(IJavaArray<JColorDrawable>), TJavaArray<JColorDrawable>);
  TJavaTypesManager.RegisterJavaType(TJDrawableContainer, TypeInfo(IJavaArray<JDrawableContainer>), TJavaArray<JDrawableContainer>);
  TJavaTypesManager.RegisterJavaType(TJStateListDrawable, TypeInfo(IJavaArray<JStateListDrawable>), TJavaArray<JStateListDrawable>);
  TJavaTypesManager.RegisterJavaType(TJDrawableWrapper, TypeInfo(IJavaArray<JDrawableWrapper>), TJavaArray<JDrawableWrapper>);
  TJavaTypesManager.RegisterJavaType(TJInsetDrawable, TypeInfo(IJavaArray<JInsetDrawable>), TJavaArray<JInsetDrawable>);
  TJavaTypesManager.RegisterJavaType(TJGradientDrawable, TypeInfo(IJavaArray<JGradientDrawable>), TJavaArray<JGradientDrawable>);
  TJavaTypesManager.RegisterJavaType(TJLayerDrawable, TypeInfo(IJavaArray<JLayerDrawable>), TJavaArray<JLayerDrawable>);
  TJavaTypesManager.RegisterJavaType(TJRippleDrawable, TypeInfo(IJavaArray<JRippleDrawable>), TJavaArray<JRippleDrawable>);
  TJavaTypesManager.RegisterJavaType(TJShapeDrawable, TypeInfo(IJavaArray<JShapeDrawable>), TJavaArray<JShapeDrawable>);
  TJavaTypesManager.RegisterJavaType(TJVectorDrawable, TypeInfo(IJavaArray<JVectorDrawable>), TJavaArray<JVectorDrawable>);
  TJavaTypesManager.RegisterJavaType(TJShape, TypeInfo(IJavaArray<JShape>), TJavaArray<JShape>);
  TJavaTypesManager.RegisterJavaType(TJRectShape, TypeInfo(IJavaArray<JRectShape>), TJavaArray<JRectShape>);
  TJavaTypesManager.RegisterJavaType(TJRoundRectShape, TypeInfo(IJavaArray<JRoundRectShape>), TJavaArray<JRoundRectShape>);
  TJavaTypesManager.RegisterJavaType(TJDisplay, TypeInfo(IJavaArray<JDisplay>), TJavaArray<JDisplay>);
  TJavaTypesManager.RegisterJavaType(TJDisplay_Mode, TypeInfo(IJavaArray<JDisplay_Mode>), TJavaArray<JDisplay_Mode>);
  TJavaTypesManager.RegisterJavaType(TJDragAndDropPermissions, TypeInfo(IJavaArray<JDragAndDropPermissions>), TJavaArray<JDragAndDropPermissions>);
  TJavaTypesManager.RegisterJavaType(TJDragEvent, TypeInfo(IJavaArray<JDragEvent>), TJavaArray<JDragEvent>);
  TJavaTypesManager.RegisterJavaType(TJGestureDetector, TypeInfo(IJavaArray<JGestureDetector>), TJavaArray<JGestureDetector>);
  TJavaTypesManager.RegisterJavaType(TJGestureDetector_OnContextClickListener, TypeInfo(IJavaArray<JGestureDetector_OnContextClickListener>), TJavaArray<JGestureDetector_OnContextClickListener>);
  TJavaTypesManager.RegisterJavaType(TJGestureDetector_OnDoubleTapListener, TypeInfo(IJavaArray<JGestureDetector_OnDoubleTapListener>), TJavaArray<JGestureDetector_OnDoubleTapListener>);
  TJavaTypesManager.RegisterJavaType(TJGestureDetector_OnGestureListener, TypeInfo(IJavaArray<JGestureDetector_OnGestureListener>), TJavaArray<JGestureDetector_OnGestureListener>);
  TJavaTypesManager.RegisterJavaType(TJGestureDetector_SimpleOnGestureListener, TypeInfo(IJavaArray<JGestureDetector_SimpleOnGestureListener>), TJavaArray<JGestureDetector_SimpleOnGestureListener>);
  TJavaTypesManager.RegisterJavaType(TJGravity, TypeInfo(IJavaArray<JGravity>), TJavaArray<JGravity>);
  TJavaTypesManager.RegisterJavaType(TJInputDevice, TypeInfo(IJavaArray<JInputDevice>), TJavaArray<JInputDevice>);
  TJavaTypesManager.RegisterJavaType(TJInputEvent, TypeInfo(IJavaArray<JInputEvent>), TJavaArray<JInputEvent>);
  TJavaTypesManager.RegisterJavaType(TJKeyEvent, TypeInfo(IJavaArray<JKeyEvent>), TJavaArray<JKeyEvent>);
  TJavaTypesManager.RegisterJavaType(TJMotionEvent, TypeInfo(IJavaArray<JMotionEvent>), TJavaArray<JMotionEvent>);
  TJavaTypesManager.RegisterJavaType(TJLayoutInflater, TypeInfo(IJavaArray<JLayoutInflater>), TJavaArray<JLayoutInflater>);
  TJavaTypesManager.RegisterJavaType(TJMenu, TypeInfo(IJavaArray<JMenu>), TJavaArray<JMenu>);
  TJavaTypesManager.RegisterJavaType(TJSubMenu, TypeInfo(IJavaArray<JSubMenu>), TJavaArray<JSubMenu>);
  TJavaTypesManager.RegisterJavaType(TJMenuItem, TypeInfo(IJavaArray<JMenuItem>), TJavaArray<JMenuItem>);
  TJavaTypesManager.RegisterJavaType(TJMenuItem_OnActionExpandListener, TypeInfo(IJavaArray<JMenuItem_OnActionExpandListener>), TJavaArray<JMenuItem_OnActionExpandListener>);
  TJavaTypesManager.RegisterJavaType(TJMenuItem_OnMenuItemClickListener, TypeInfo(IJavaArray<JMenuItem_OnMenuItemClickListener>), TJavaArray<JMenuItem_OnMenuItemClickListener>);
  TJavaTypesManager.RegisterJavaType(TJScaleGestureDetector, TypeInfo(IJavaArray<JScaleGestureDetector>), TJavaArray<JScaleGestureDetector>);
  TJavaTypesManager.RegisterJavaType(TJScaleGestureDetector_OnScaleGestureListener, TypeInfo(IJavaArray<JScaleGestureDetector_OnScaleGestureListener>), TJavaArray<JScaleGestureDetector_OnScaleGestureListener>);
  TJavaTypesManager.RegisterJavaType(TJScaleGestureDetector_SimpleOnScaleGestureListener, TypeInfo(IJavaArray<JScaleGestureDetector_SimpleOnScaleGestureListener>), TJavaArray<JScaleGestureDetector_SimpleOnScaleGestureListener>);
  TJavaTypesManager.RegisterJavaType(TJSurface, TypeInfo(IJavaArray<JSurface>), TJavaArray<JSurface>);
  TJavaTypesManager.RegisterJavaType(TJSurfaceHolder, TypeInfo(IJavaArray<JSurfaceHolder>), TJavaArray<JSurfaceHolder>);
  TJavaTypesManager.RegisterJavaType(TJSurfaceHolder_BadSurfaceTypeException, TypeInfo(IJavaArray<JSurfaceHolder_BadSurfaceTypeException>), TJavaArray<JSurfaceHolder_BadSurfaceTypeException>);
  TJavaTypesManager.RegisterJavaType(TJSurfaceHolder_Callback, TypeInfo(IJavaArray<JSurfaceHolder_Callback>), TJavaArray<JSurfaceHolder_Callback>);
  TJavaTypesManager.RegisterJavaType(TJSurfaceHolder_Callback2, TypeInfo(IJavaArray<JSurfaceHolder_Callback2>), TJavaArray<JSurfaceHolder_Callback2>);
  TJavaTypesManager.RegisterJavaType(TJTextureView_SurfaceTextureListener, TypeInfo(IJavaArray<JTextureView_SurfaceTextureListener>), TJavaArray<JTextureView_SurfaceTextureListener>);
  TJavaTypesManager.RegisterJavaType(TJView, TypeInfo(IJavaArray<JView>), TJavaArray<JView>);
  TJavaTypesManager.RegisterJavaType(TJSurfaceView, TypeInfo(IJavaArray<JSurfaceView>), TJavaArray<JSurfaceView>);
  TJavaTypesManager.RegisterJavaType(TJTextureView, TypeInfo(IJavaArray<JTextureView>), TJavaArray<JTextureView>);
  TJavaTypesManager.RegisterJavaType(TJViewGroup, TypeInfo(IJavaArray<JViewGroup>), TJavaArray<JViewGroup>);
  TJavaTypesManager.RegisterJavaType(TJView_DragShadowBuilder, TypeInfo(IJavaArray<JView_DragShadowBuilder>), TJavaArray<JView_DragShadowBuilder>);
  TJavaTypesManager.RegisterJavaType(TJView_MeasureSpec, TypeInfo(IJavaArray<JView_MeasureSpec>), TJavaArray<JView_MeasureSpec>);
  TJavaTypesManager.RegisterJavaType(TJView_OnClickListener, TypeInfo(IJavaArray<JView_OnClickListener>), TJavaArray<JView_OnClickListener>);
  TJavaTypesManager.RegisterJavaType(TJView_OnDragListener, TypeInfo(IJavaArray<JView_OnDragListener>), TJavaArray<JView_OnDragListener>);
  TJavaTypesManager.RegisterJavaType(TJView_OnFocusChangeListener, TypeInfo(IJavaArray<JView_OnFocusChangeListener>), TJavaArray<JView_OnFocusChangeListener>);
  TJavaTypesManager.RegisterJavaType(TJView_OnKeyListener, TypeInfo(IJavaArray<JView_OnKeyListener>), TJavaArray<JView_OnKeyListener>);
  TJavaTypesManager.RegisterJavaType(TJView_OnLayoutChangeListener, TypeInfo(IJavaArray<JView_OnLayoutChangeListener>), TJavaArray<JView_OnLayoutChangeListener>);
  TJavaTypesManager.RegisterJavaType(TJView_OnLongClickListener, TypeInfo(IJavaArray<JView_OnLongClickListener>), TJavaArray<JView_OnLongClickListener>);
  TJavaTypesManager.RegisterJavaType(TJView_OnTouchListener, TypeInfo(IJavaArray<JView_OnTouchListener>), TJavaArray<JView_OnTouchListener>);
  TJavaTypesManager.RegisterJavaType(TJViewGroup_LayoutParams, TypeInfo(IJavaArray<JViewGroup_LayoutParams>), TJavaArray<JViewGroup_LayoutParams>);
  TJavaTypesManager.RegisterJavaType(TJViewGroup_MarginLayoutParams, TypeInfo(IJavaArray<JViewGroup_MarginLayoutParams>), TJavaArray<JViewGroup_MarginLayoutParams>);
  TJavaTypesManager.RegisterJavaType(TJActionBar_LayoutParams, TypeInfo(IJavaArray<JActionBar_LayoutParams>), TJavaArray<JActionBar_LayoutParams>);
  TJavaTypesManager.RegisterJavaType(TJWindowManager_LayoutParams, TypeInfo(IJavaArray<JWindowManager_LayoutParams>), TJavaArray<JWindowManager_LayoutParams>);
  TJavaTypesManager.RegisterJavaType(TJViewManager, TypeInfo(IJavaArray<JViewManager>), TJavaArray<JViewManager>);
  TJavaTypesManager.RegisterJavaType(TJWindowManager, TypeInfo(IJavaArray<JWindowManager>), TJavaArray<JWindowManager>);
  TJavaTypesManager.RegisterJavaType(TJViewParent, TypeInfo(IJavaArray<JViewParent>), TJavaArray<JViewParent>);
  TJavaTypesManager.RegisterJavaType(TJViewTreeObserver, TypeInfo(IJavaArray<JViewTreeObserver>), TJavaArray<JViewTreeObserver>);
  TJavaTypesManager.RegisterJavaType(TJViewTreeObserver_OnGlobalFocusChangeListener, TypeInfo(IJavaArray<JViewTreeObserver_OnGlobalFocusChangeListener>), TJavaArray<JViewTreeObserver_OnGlobalFocusChangeListener>);
  TJavaTypesManager.RegisterJavaType(TJViewTreeObserver_OnScrollChangedListener, TypeInfo(IJavaArray<JViewTreeObserver_OnScrollChangedListener>), TJavaArray<JViewTreeObserver_OnScrollChangedListener>);
  TJavaTypesManager.RegisterJavaType(TJWindow, TypeInfo(IJavaArray<JWindow>), TJavaArray<JWindow>);
  TJavaTypesManager.RegisterJavaType(TJEditorInfo, TypeInfo(IJavaArray<JEditorInfo>), TJavaArray<JEditorInfo>);
  TJavaTypesManager.RegisterJavaType(TJInputMethodManager, TypeInfo(IJavaArray<JInputMethodManager>), TJavaArray<JInputMethodManager>);
  TJavaTypesManager.RegisterJavaType(TJAndroidException, TypeInfo(IJavaArray<JAndroidException>), TJavaArray<JAndroidException>);
  TJavaTypesManager.RegisterJavaType(TJIntentFilter_MalformedMimeTypeException, TypeInfo(IJavaArray<JIntentFilter_MalformedMimeTypeException>), TJavaArray<JIntentFilter_MalformedMimeTypeException>);
  TJavaTypesManager.RegisterJavaType(TJAttributeSet, TypeInfo(IJavaArray<JAttributeSet>), TJavaArray<JAttributeSet>);
  TJavaTypesManager.RegisterJavaType(TJDisplayMetrics, TypeInfo(IJavaArray<JDisplayMetrics>), TJavaArray<JDisplayMetrics>);
  TJavaTypesManager.RegisterJavaType(TJProperty, TypeInfo(IJavaArray<JProperty>), TJavaArray<JProperty>);
  TJavaTypesManager.RegisterJavaType(TJFloatProperty, TypeInfo(IJavaArray<JFloatProperty>), TJavaArray<JFloatProperty>);
  TJavaTypesManager.RegisterJavaType(TJIntProperty, TypeInfo(IJavaArray<JIntProperty>), TJavaArray<JIntProperty>);
  TJavaTypesManager.RegisterJavaType(TJSize, TypeInfo(IJavaArray<JSize>), TJavaArray<JSize>);
  TJavaTypesManager.RegisterJavaType(TJSparseArray, TypeInfo(IJavaArray<JSparseArray>), TJavaArray<JSparseArray>);
  TJavaTypesManager.RegisterJavaType(TJTypedValue, TypeInfo(IJavaArray<JTypedValue>), TJavaArray<JTypedValue>);
  TJavaTypesManager.RegisterJavaType(TJFragment, TypeInfo(IJavaArray<JFragment>), TJavaArray<JFragment>);
  TJavaTypesManager.RegisterJavaType(TJFragmentManager, TypeInfo(IJavaArray<JFragmentManager>), TJavaArray<JFragmentManager>);
  TJavaTypesManager.RegisterJavaType(TJFragmentTransaction, TypeInfo(IJavaArray<JFragmentTransaction>), TJavaArray<JFragmentTransaction>);
  TJavaTypesManager.RegisterJavaType(TJActivityManager_TaskDescription, TypeInfo(IJavaArray<JActivityManager_TaskDescription>), TJavaArray<JActivityManager_TaskDescription>);
  TJavaTypesManager.RegisterJavaType(TJAlarmManager, TypeInfo(IJavaArray<JAlarmManager>), TJavaArray<JAlarmManager>);
  TJavaTypesManager.RegisterJavaType(TJAlarmManager_AlarmClockInfo, TypeInfo(IJavaArray<JAlarmManager_AlarmClockInfo>), TJavaArray<JAlarmManager_AlarmClockInfo>);
  TJavaTypesManager.RegisterJavaType(TJAlarmManager_OnAlarmListener, TypeInfo(IJavaArray<JAlarmManager_OnAlarmListener>), TJavaArray<JAlarmManager_OnAlarmListener>);
  TJavaTypesManager.RegisterJavaType(TJPendingIntent, TypeInfo(IJavaArray<JPendingIntent>), TJavaArray<JPendingIntent>);
  TJavaTypesManager.RegisterJavaType(TJContextCompat, TypeInfo(IJavaArray<JContextCompat>), TJavaArray<JContextCompat>);
  TJavaTypesManager.RegisterJavaType(TJActivityCompat, TypeInfo(IJavaArray<JActivityCompat>), TJavaArray<JActivityCompat>);
  TJavaTypesManager.RegisterJavaType(TJPermissionChecker, TypeInfo(IJavaArray<JPermissionChecker>), TJavaArray<JPermissionChecker>);
  TJavaTypesManager.RegisterJavaType(TJActivityCompat_OnRequestPermissionsResultCallback, TypeInfo(IJavaArray<JActivityCompat_OnRequestPermissionsResultCallback>), TJavaArray<JActivityCompat_OnRequestPermissionsResultCallback>);
  TJavaTypesManager.RegisterJavaType(TJActivityCompat_PermissionCompatDelegate, TypeInfo(IJavaArray<JActivityCompat_PermissionCompatDelegate>), TJavaArray<JActivityCompat_PermissionCompatDelegate>);
  TJavaTypesManager.RegisterJavaType(TJClipboardManager, TypeInfo(IJavaArray<JClipboardManager>), TJavaArray<JClipboardManager>);
  TJavaTypesManager.RegisterJavaType(TJcontent_ClipboardManager, TypeInfo(IJavaArray<Jcontent_ClipboardManager>), TJavaArray<Jcontent_ClipboardManager>);
  TJavaTypesManager.RegisterJavaType(TJDisplayManager, TypeInfo(IJavaArray<JDisplayManager>), TJavaArray<JDisplayManager>);
  TJavaTypesManager.RegisterJavaType(TJDisplayManager_DisplayListener, TypeInfo(IJavaArray<JDisplayManager_DisplayListener>), TJavaArray<JDisplayManager_DisplayListener>);
  TJavaTypesManager.RegisterJavaType(TJVirtualDisplay, TypeInfo(IJavaArray<JVirtualDisplay>), TJavaArray<JVirtualDisplay>);
  TJavaTypesManager.RegisterJavaType(TJVirtualDisplay_Callback, TypeInfo(IJavaArray<JVirtualDisplay_Callback>), TJavaArray<JVirtualDisplay_Callback>);
end.
